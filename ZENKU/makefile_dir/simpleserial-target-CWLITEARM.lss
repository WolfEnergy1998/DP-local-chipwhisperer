
simpleserial-target-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000470c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080048a0  080048a0  000058a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049b0  080049b0  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080049b0  080049b0  000059b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049b8  080049b8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049b8  080049b8  000059b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049bc  080049bc  000059bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080049c0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  2000005c  08004a1c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000031c  08004a1c  0000631c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018913  00000000  00000000  00006086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005899  00000000  00000000  0001e999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000315b  00000000  00000000  00024232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000860  00000000  00000000  00027390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005d0  00000000  00000000  00027bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c50  00000000  00000000  000281c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000032ad  00000000  00000000  00031e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000012  00000000  00000000  000350bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018ec  00000000  00000000  000350d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  000369bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000070  00000000  00000000  00036b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loclists 0000311f  00000000  00000000  00036b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_rnglists 000002b3  00000000  00000000  00039c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 0000014d  00000000  00000000  00039f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <exp>:
 8000190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000192:	4604      	mov	r4, r0
 8000194:	460d      	mov	r5, r1
 8000196:	f000 f83b 	bl	8000210 <__ieee754_exp>
 800019a:	4606      	mov	r6, r0
 800019c:	460f      	mov	r7, r1
 800019e:	4620      	mov	r0, r4
 80001a0:	4629      	mov	r1, r5
 80001a2:	f000 f82f 	bl	8000204 <finite>
 80001a6:	b178      	cbz	r0, 80001c8 <exp+0x38>
 80001a8:	a311      	add	r3, pc, #68	@ (adr r3, 80001f0 <exp+0x60>)
 80001aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80001ae:	4620      	mov	r0, r4
 80001b0:	4629      	mov	r1, r5
 80001b2:	f000 ff71 	bl	8001098 <__aeabi_dcmpgt>
 80001b6:	b950      	cbnz	r0, 80001ce <exp+0x3e>
 80001b8:	a30f      	add	r3, pc, #60	@ (adr r3, 80001f8 <exp+0x68>)
 80001ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80001be:	4620      	mov	r0, r4
 80001c0:	4629      	mov	r1, r5
 80001c2:	f000 ff4b 	bl	800105c <__aeabi_dcmplt>
 80001c6:	b958      	cbnz	r0, 80001e0 <exp+0x50>
 80001c8:	4630      	mov	r0, r6
 80001ca:	4639      	mov	r1, r7
 80001cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80001ce:	f001 fd79 	bl	8001cc4 <__errno>
 80001d2:	4f0b      	ldr	r7, [pc, #44]	@ (8000200 <exp+0x70>)
 80001d4:	2322      	movs	r3, #34	@ 0x22
 80001d6:	2600      	movs	r6, #0
 80001d8:	6003      	str	r3, [r0, #0]
 80001da:	4639      	mov	r1, r7
 80001dc:	4630      	mov	r0, r6
 80001de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80001e0:	f001 fd70 	bl	8001cc4 <__errno>
 80001e4:	2322      	movs	r3, #34	@ 0x22
 80001e6:	6003      	str	r3, [r0, #0]
 80001e8:	2600      	movs	r6, #0
 80001ea:	2700      	movs	r7, #0
 80001ec:	e7ec      	b.n	80001c8 <exp+0x38>
 80001ee:	bf00      	nop
 80001f0:	fefa39ef 	.word	0xfefa39ef
 80001f4:	40862e42 	.word	0x40862e42
 80001f8:	d52d3051 	.word	0xd52d3051
 80001fc:	c0874910 	.word	0xc0874910
 8000200:	7ff00000 	.word	0x7ff00000

08000204 <finite>:
 8000204:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8000208:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800020c:	0fc0      	lsrs	r0, r0, #31
 800020e:	4770      	bx	lr

08000210 <__ieee754_exp>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	4dce      	ldr	r5, [pc, #824]	@ (8000550 <__ieee754_exp+0x340>)
 8000216:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800021a:	42aa      	cmp	r2, r5
 800021c:	b084      	sub	sp, #16
 800021e:	4606      	mov	r6, r0
 8000220:	460f      	mov	r7, r1
 8000222:	ea4f 74d1 	mov.w	r4, r1, lsr #31
 8000226:	d90d      	bls.n	8000244 <__ieee754_exp+0x34>
 8000228:	4dca      	ldr	r5, [pc, #808]	@ (8000554 <__ieee754_exp+0x344>)
 800022a:	42aa      	cmp	r2, r5
 800022c:	d96d      	bls.n	800030a <__ieee754_exp+0xfa>
 800022e:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8000232:	4303      	orrs	r3, r0
 8000234:	4602      	mov	r2, r0
 8000236:	f040 8140 	bne.w	80004ba <__ieee754_exp+0x2aa>
 800023a:	2c00      	cmp	r4, #0
 800023c:	d062      	beq.n	8000304 <__ieee754_exp+0xf4>
 800023e:	2000      	movs	r0, #0
 8000240:	2100      	movs	r1, #0
 8000242:	e05f      	b.n	8000304 <__ieee754_exp+0xf4>
 8000244:	4bc4      	ldr	r3, [pc, #784]	@ (8000558 <__ieee754_exp+0x348>)
 8000246:	429a      	cmp	r2, r3
 8000248:	f200 8121 	bhi.w	800048e <__ieee754_exp+0x27e>
 800024c:	4bc3      	ldr	r3, [pc, #780]	@ (800055c <__ieee754_exp+0x34c>)
 800024e:	429a      	cmp	r2, r3
 8000250:	f240 810a 	bls.w	8000468 <__ieee754_exp+0x258>
 8000254:	4632      	mov	r2, r6
 8000256:	463b      	mov	r3, r7
 8000258:	4630      	mov	r0, r6
 800025a:	4639      	mov	r1, r7
 800025c:	f000 fc8c 	bl	8000b78 <__aeabi_dmul>
 8000260:	a3a5      	add	r3, pc, #660	@ (adr r3, 80004f8 <__ieee754_exp+0x2e8>)
 8000262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000266:	4604      	mov	r4, r0
 8000268:	460d      	mov	r5, r1
 800026a:	f000 fc85 	bl	8000b78 <__aeabi_dmul>
 800026e:	a3a4      	add	r3, pc, #656	@ (adr r3, 8000500 <__ieee754_exp+0x2f0>)
 8000270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000274:	f000 fac8 	bl	8000808 <__aeabi_dsub>
 8000278:	4622      	mov	r2, r4
 800027a:	462b      	mov	r3, r5
 800027c:	f000 fc7c 	bl	8000b78 <__aeabi_dmul>
 8000280:	a3a1      	add	r3, pc, #644	@ (adr r3, 8000508 <__ieee754_exp+0x2f8>)
 8000282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000286:	f000 fac1 	bl	800080c <__adddf3>
 800028a:	4622      	mov	r2, r4
 800028c:	462b      	mov	r3, r5
 800028e:	f000 fc73 	bl	8000b78 <__aeabi_dmul>
 8000292:	a39f      	add	r3, pc, #636	@ (adr r3, 8000510 <__ieee754_exp+0x300>)
 8000294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000298:	f000 fab6 	bl	8000808 <__aeabi_dsub>
 800029c:	4622      	mov	r2, r4
 800029e:	462b      	mov	r3, r5
 80002a0:	f000 fc6a 	bl	8000b78 <__aeabi_dmul>
 80002a4:	a39c      	add	r3, pc, #624	@ (adr r3, 8000518 <__ieee754_exp+0x308>)
 80002a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002aa:	f000 faaf 	bl	800080c <__adddf3>
 80002ae:	4622      	mov	r2, r4
 80002b0:	462b      	mov	r3, r5
 80002b2:	f000 fc61 	bl	8000b78 <__aeabi_dmul>
 80002b6:	4602      	mov	r2, r0
 80002b8:	460b      	mov	r3, r1
 80002ba:	4630      	mov	r0, r6
 80002bc:	4639      	mov	r1, r7
 80002be:	f000 faa3 	bl	8000808 <__aeabi_dsub>
 80002c2:	4602      	mov	r2, r0
 80002c4:	460b      	mov	r3, r1
 80002c6:	4630      	mov	r0, r6
 80002c8:	4639      	mov	r1, r7
 80002ca:	4690      	mov	r8, r2
 80002cc:	4699      	mov	r9, r3
 80002ce:	f000 fc53 	bl	8000b78 <__aeabi_dmul>
 80002d2:	2200      	movs	r2, #0
 80002d4:	4604      	mov	r4, r0
 80002d6:	460d      	mov	r5, r1
 80002d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002dc:	4640      	mov	r0, r8
 80002de:	4649      	mov	r1, r9
 80002e0:	f000 fa92 	bl	8000808 <__aeabi_dsub>
 80002e4:	4602      	mov	r2, r0
 80002e6:	460b      	mov	r3, r1
 80002e8:	4620      	mov	r0, r4
 80002ea:	4629      	mov	r1, r5
 80002ec:	f000 fd6e 	bl	8000dcc <__aeabi_ddiv>
 80002f0:	4632      	mov	r2, r6
 80002f2:	463b      	mov	r3, r7
 80002f4:	f000 fa88 	bl	8000808 <__aeabi_dsub>
 80002f8:	4602      	mov	r2, r0
 80002fa:	460b      	mov	r3, r1
 80002fc:	2000      	movs	r0, #0
 80002fe:	4998      	ldr	r1, [pc, #608]	@ (8000560 <__ieee754_exp+0x350>)
 8000300:	f000 fa82 	bl	8000808 <__aeabi_dsub>
 8000304:	b004      	add	sp, #16
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	a385      	add	r3, pc, #532	@ (adr r3, 8000520 <__ieee754_exp+0x310>)
 800030c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000310:	f000 fec2 	bl	8001098 <__aeabi_dcmpgt>
 8000314:	4605      	mov	r5, r0
 8000316:	2800      	cmp	r0, #0
 8000318:	f040 80d5 	bne.w	80004c6 <__ieee754_exp+0x2b6>
 800031c:	a382      	add	r3, pc, #520	@ (adr r3, 8000528 <__ieee754_exp+0x318>)
 800031e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000322:	4630      	mov	r0, r6
 8000324:	4639      	mov	r1, r7
 8000326:	f000 fe99 	bl	800105c <__aeabi_dcmplt>
 800032a:	2800      	cmp	r0, #0
 800032c:	f040 80dd 	bne.w	80004ea <__ieee754_exp+0x2da>
 8000330:	4b8c      	ldr	r3, [pc, #560]	@ (8000564 <__ieee754_exp+0x354>)
 8000332:	4630      	mov	r0, r6
 8000334:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8000338:	4639      	mov	r1, r7
 800033a:	a37d      	add	r3, pc, #500	@ (adr r3, 8000530 <__ieee754_exp+0x320>)
 800033c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000340:	f000 fc1a 	bl	8000b78 <__aeabi_dmul>
 8000344:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8000348:	f000 fa60 	bl	800080c <__adddf3>
 800034c:	f000 fec4 	bl	80010d8 <__aeabi_d2iz>
 8000350:	4682      	mov	sl, r0
 8000352:	f000 fba7 	bl	8000aa4 <__aeabi_i2d>
 8000356:	a378      	add	r3, pc, #480	@ (adr r3, 8000538 <__ieee754_exp+0x328>)
 8000358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800035c:	4604      	mov	r4, r0
 800035e:	460d      	mov	r5, r1
 8000360:	f000 fc0a 	bl	8000b78 <__aeabi_dmul>
 8000364:	4602      	mov	r2, r0
 8000366:	460b      	mov	r3, r1
 8000368:	4630      	mov	r0, r6
 800036a:	4639      	mov	r1, r7
 800036c:	f000 fa4c 	bl	8000808 <__aeabi_dsub>
 8000370:	a373      	add	r3, pc, #460	@ (adr r3, 8000540 <__ieee754_exp+0x330>)
 8000372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000376:	4680      	mov	r8, r0
 8000378:	4689      	mov	r9, r1
 800037a:	4620      	mov	r0, r4
 800037c:	4629      	mov	r1, r5
 800037e:	f000 fbfb 	bl	8000b78 <__aeabi_dmul>
 8000382:	e9cd 0100 	strd	r0, r1, [sp]
 8000386:	e9dd 2300 	ldrd	r2, r3, [sp]
 800038a:	4640      	mov	r0, r8
 800038c:	4649      	mov	r1, r9
 800038e:	f000 fa3b 	bl	8000808 <__aeabi_dsub>
 8000392:	4602      	mov	r2, r0
 8000394:	460b      	mov	r3, r1
 8000396:	4606      	mov	r6, r0
 8000398:	460f      	mov	r7, r1
 800039a:	f000 fbed 	bl	8000b78 <__aeabi_dmul>
 800039e:	a356      	add	r3, pc, #344	@ (adr r3, 80004f8 <__ieee754_exp+0x2e8>)
 80003a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003a4:	4604      	mov	r4, r0
 80003a6:	460d      	mov	r5, r1
 80003a8:	f000 fbe6 	bl	8000b78 <__aeabi_dmul>
 80003ac:	a354      	add	r3, pc, #336	@ (adr r3, 8000500 <__ieee754_exp+0x2f0>)
 80003ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003b2:	f000 fa29 	bl	8000808 <__aeabi_dsub>
 80003b6:	4622      	mov	r2, r4
 80003b8:	462b      	mov	r3, r5
 80003ba:	f000 fbdd 	bl	8000b78 <__aeabi_dmul>
 80003be:	a352      	add	r3, pc, #328	@ (adr r3, 8000508 <__ieee754_exp+0x2f8>)
 80003c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003c4:	f000 fa22 	bl	800080c <__adddf3>
 80003c8:	4622      	mov	r2, r4
 80003ca:	462b      	mov	r3, r5
 80003cc:	f000 fbd4 	bl	8000b78 <__aeabi_dmul>
 80003d0:	a34f      	add	r3, pc, #316	@ (adr r3, 8000510 <__ieee754_exp+0x300>)
 80003d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003d6:	f000 fa17 	bl	8000808 <__aeabi_dsub>
 80003da:	4622      	mov	r2, r4
 80003dc:	462b      	mov	r3, r5
 80003de:	f000 fbcb 	bl	8000b78 <__aeabi_dmul>
 80003e2:	a34d      	add	r3, pc, #308	@ (adr r3, 8000518 <__ieee754_exp+0x308>)
 80003e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003e8:	f000 fa10 	bl	800080c <__adddf3>
 80003ec:	4622      	mov	r2, r4
 80003ee:	462b      	mov	r3, r5
 80003f0:	f000 fbc2 	bl	8000b78 <__aeabi_dmul>
 80003f4:	4602      	mov	r2, r0
 80003f6:	460b      	mov	r3, r1
 80003f8:	4630      	mov	r0, r6
 80003fa:	4639      	mov	r1, r7
 80003fc:	f000 fa04 	bl	8000808 <__aeabi_dsub>
 8000400:	4602      	mov	r2, r0
 8000402:	460b      	mov	r3, r1
 8000404:	4604      	mov	r4, r0
 8000406:	460d      	mov	r5, r1
 8000408:	4630      	mov	r0, r6
 800040a:	4639      	mov	r1, r7
 800040c:	f000 fbb4 	bl	8000b78 <__aeabi_dmul>
 8000410:	4622      	mov	r2, r4
 8000412:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000416:	462b      	mov	r3, r5
 8000418:	f1ba 0f00 	cmp.w	sl, #0
 800041c:	f43f af53 	beq.w	80002c6 <__ieee754_exp+0xb6>
 8000420:	2000      	movs	r0, #0
 8000422:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000426:	f000 f9ef 	bl	8000808 <__aeabi_dsub>
 800042a:	4602      	mov	r2, r0
 800042c:	460b      	mov	r3, r1
 800042e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000432:	f000 fccb 	bl	8000dcc <__aeabi_ddiv>
 8000436:	4602      	mov	r2, r0
 8000438:	460b      	mov	r3, r1
 800043a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800043e:	f000 f9e3 	bl	8000808 <__aeabi_dsub>
 8000442:	4642      	mov	r2, r8
 8000444:	464b      	mov	r3, r9
 8000446:	f000 f9df 	bl	8000808 <__aeabi_dsub>
 800044a:	4602      	mov	r2, r0
 800044c:	460b      	mov	r3, r1
 800044e:	2000      	movs	r0, #0
 8000450:	4943      	ldr	r1, [pc, #268]	@ (8000560 <__ieee754_exp+0x350>)
 8000452:	f000 f9d9 	bl	8000808 <__aeabi_dsub>
 8000456:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 800045a:	4592      	cmp	sl, r2
 800045c:	db39      	blt.n	80004d2 <__ieee754_exp+0x2c2>
 800045e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8000462:	b004      	add	sp, #16
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	a337      	add	r3, pc, #220	@ (adr r3, 8000548 <__ieee754_exp+0x338>)
 800046a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800046e:	f000 f9cd 	bl	800080c <__adddf3>
 8000472:	4b3b      	ldr	r3, [pc, #236]	@ (8000560 <__ieee754_exp+0x350>)
 8000474:	2200      	movs	r2, #0
 8000476:	f000 fe0f 	bl	8001098 <__aeabi_dcmpgt>
 800047a:	2800      	cmp	r0, #0
 800047c:	f43f aeea 	beq.w	8000254 <__ieee754_exp+0x44>
 8000480:	4b37      	ldr	r3, [pc, #220]	@ (8000560 <__ieee754_exp+0x350>)
 8000482:	2200      	movs	r2, #0
 8000484:	4630      	mov	r0, r6
 8000486:	4639      	mov	r1, r7
 8000488:	f000 f9c0 	bl	800080c <__adddf3>
 800048c:	e73a      	b.n	8000304 <__ieee754_exp+0xf4>
 800048e:	4b36      	ldr	r3, [pc, #216]	@ (8000568 <__ieee754_exp+0x358>)
 8000490:	429a      	cmp	r2, r3
 8000492:	f63f af4d 	bhi.w	8000330 <__ieee754_exp+0x120>
 8000496:	4d33      	ldr	r5, [pc, #204]	@ (8000564 <__ieee754_exp+0x354>)
 8000498:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800049c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80004a0:	f000 f9b2 	bl	8000808 <__aeabi_dsub>
 80004a4:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80004a8:	f1c4 0a01 	rsb	sl, r4, #1
 80004ac:	e9cd 2300 	strd	r2, r3, [sp]
 80004b0:	4680      	mov	r8, r0
 80004b2:	4689      	mov	r9, r1
 80004b4:	ebaa 0a04 	sub.w	sl, sl, r4
 80004b8:	e765      	b.n	8000386 <__ieee754_exp+0x176>
 80004ba:	460b      	mov	r3, r1
 80004bc:	f000 f9a6 	bl	800080c <__adddf3>
 80004c0:	b004      	add	sp, #16
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	2000      	movs	r0, #0
 80004c8:	b004      	add	sp, #16
 80004ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004ce:	f000 b877 	b.w	80005c0 <__math_oflow>
 80004d2:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 80004d6:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80004da:	2200      	movs	r2, #0
 80004dc:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 80004e0:	f000 fb4a 	bl	8000b78 <__aeabi_dmul>
 80004e4:	b004      	add	sp, #16
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	4628      	mov	r0, r5
 80004ec:	b004      	add	sp, #16
 80004ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004f2:	f000 b85b 	b.w	80005ac <__math_uflow>
 80004f6:	bf00      	nop
 80004f8:	72bea4d0 	.word	0x72bea4d0
 80004fc:	3e663769 	.word	0x3e663769
 8000500:	c5d26bf1 	.word	0xc5d26bf1
 8000504:	3ebbbd41 	.word	0x3ebbbd41
 8000508:	af25de2c 	.word	0xaf25de2c
 800050c:	3f11566a 	.word	0x3f11566a
 8000510:	16bebd93 	.word	0x16bebd93
 8000514:	3f66c16c 	.word	0x3f66c16c
 8000518:	5555553e 	.word	0x5555553e
 800051c:	3fc55555 	.word	0x3fc55555
 8000520:	fefa39ef 	.word	0xfefa39ef
 8000524:	40862e42 	.word	0x40862e42
 8000528:	d52d3051 	.word	0xd52d3051
 800052c:	c0874910 	.word	0xc0874910
 8000530:	652b82fe 	.word	0x652b82fe
 8000534:	3ff71547 	.word	0x3ff71547
 8000538:	fee00000 	.word	0xfee00000
 800053c:	3fe62e42 	.word	0x3fe62e42
 8000540:	35793c76 	.word	0x35793c76
 8000544:	3dea39ef 	.word	0x3dea39ef
 8000548:	8800759c 	.word	0x8800759c
 800054c:	7e37e43c 	.word	0x7e37e43c
 8000550:	40862e41 	.word	0x40862e41
 8000554:	7fefffff 	.word	0x7fefffff
 8000558:	3fd62e42 	.word	0x3fd62e42
 800055c:	3defffff 	.word	0x3defffff
 8000560:	3ff00000 	.word	0x3ff00000
 8000564:	080048b0 	.word	0x080048b0
 8000568:	3ff0a2b1 	.word	0x3ff0a2b1

0800056c <with_errno>:
 800056c:	b5d0      	push	{r4, r6, r7, lr}
 800056e:	4606      	mov	r6, r0
 8000570:	460f      	mov	r7, r1
 8000572:	4614      	mov	r4, r2
 8000574:	f001 fba6 	bl	8001cc4 <__errno>
 8000578:	4603      	mov	r3, r0
 800057a:	4639      	mov	r1, r7
 800057c:	4630      	mov	r0, r6
 800057e:	601c      	str	r4, [r3, #0]
 8000580:	bdd0      	pop	{r4, r6, r7, pc}
 8000582:	bf00      	nop

08000584 <xflow>:
 8000584:	b510      	push	{r4, lr}
 8000586:	4604      	mov	r4, r0
 8000588:	b082      	sub	sp, #8
 800058a:	4610      	mov	r0, r2
 800058c:	4619      	mov	r1, r3
 800058e:	b10c      	cbz	r4, 8000594 <xflow+0x10>
 8000590:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000594:	e9cd 2300 	strd	r2, r3, [sp]
 8000598:	e9dd 2300 	ldrd	r2, r3, [sp]
 800059c:	f000 faec 	bl	8000b78 <__aeabi_dmul>
 80005a0:	2222      	movs	r2, #34	@ 0x22
 80005a2:	b002      	add	sp, #8
 80005a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005a8:	e7e0      	b.n	800056c <with_errno>
 80005aa:	bf00      	nop

080005ac <__math_uflow>:
 80005ac:	2200      	movs	r2, #0
 80005ae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80005b2:	e7e7      	b.n	8000584 <xflow>

080005b4 <__math_may_uflow>:
 80005b4:	4b01      	ldr	r3, [pc, #4]	@ (80005bc <__math_may_uflow+0x8>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	e7e4      	b.n	8000584 <xflow>
 80005ba:	bf00      	nop
 80005bc:	1e580000 	.word	0x1e580000

080005c0 <__math_oflow>:
 80005c0:	2200      	movs	r2, #0
 80005c2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80005c6:	e7dd      	b.n	8000584 <xflow>

080005c8 <__math_divzero>:
 80005c8:	b500      	push	{lr}
 80005ca:	2200      	movs	r2, #0
 80005cc:	b083      	sub	sp, #12
 80005ce:	b168      	cbz	r0, 80005ec <__math_divzero+0x24>
 80005d0:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <__math_divzero+0x28>)
 80005d2:	e9cd 2300 	strd	r2, r3, [sp]
 80005d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80005da:	2200      	movs	r2, #0
 80005dc:	2300      	movs	r3, #0
 80005de:	f000 fbf5 	bl	8000dcc <__aeabi_ddiv>
 80005e2:	2222      	movs	r2, #34	@ 0x22
 80005e4:	b003      	add	sp, #12
 80005e6:	f85d eb04 	ldr.w	lr, [sp], #4
 80005ea:	e7bf      	b.n	800056c <with_errno>
 80005ec:	4b01      	ldr	r3, [pc, #4]	@ (80005f4 <__math_divzero+0x2c>)
 80005ee:	e7f0      	b.n	80005d2 <__math_divzero+0xa>
 80005f0:	bff00000 	.word	0xbff00000
 80005f4:	3ff00000 	.word	0x3ff00000

080005f8 <__math_invalid>:
 80005f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fa:	4602      	mov	r2, r0
 80005fc:	460b      	mov	r3, r1
 80005fe:	4604      	mov	r4, r0
 8000600:	460d      	mov	r5, r1
 8000602:	f000 f901 	bl	8000808 <__aeabi_dsub>
 8000606:	4602      	mov	r2, r0
 8000608:	460b      	mov	r3, r1
 800060a:	f000 fbdf 	bl	8000dcc <__aeabi_ddiv>
 800060e:	4622      	mov	r2, r4
 8000610:	4606      	mov	r6, r0
 8000612:	460f      	mov	r7, r1
 8000614:	462b      	mov	r3, r5
 8000616:	4620      	mov	r0, r4
 8000618:	4629      	mov	r1, r5
 800061a:	f000 fd47 	bl	80010ac <__aeabi_dcmpun>
 800061e:	b928      	cbnz	r0, 800062c <__math_invalid+0x34>
 8000620:	4630      	mov	r0, r6
 8000622:	4639      	mov	r1, r7
 8000624:	2221      	movs	r2, #33	@ 0x21
 8000626:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800062a:	e79f      	b.n	800056c <with_errno>
 800062c:	4630      	mov	r0, r6
 800062e:	4639      	mov	r1, r7
 8000630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000632:	bf00      	nop

08000634 <__math_check_uflow>:
 8000634:	b538      	push	{r3, r4, r5, lr}
 8000636:	2200      	movs	r2, #0
 8000638:	2300      	movs	r3, #0
 800063a:	4604      	mov	r4, r0
 800063c:	460d      	mov	r5, r1
 800063e:	f000 fd03 	bl	8001048 <__aeabi_dcmpeq>
 8000642:	b910      	cbnz	r0, 800064a <__math_check_uflow+0x16>
 8000644:	4620      	mov	r0, r4
 8000646:	4629      	mov	r1, r5
 8000648:	bd38      	pop	{r3, r4, r5, pc}
 800064a:	4620      	mov	r0, r4
 800064c:	4629      	mov	r1, r5
 800064e:	2222      	movs	r2, #34	@ 0x22
 8000650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000654:	e78a      	b.n	800056c <with_errno>
 8000656:	bf00      	nop

08000658 <__math_check_oflow>:
 8000658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800065a:	f021 4700 	bic.w	r7, r1, #2147483648	@ 0x80000000
 800065e:	460d      	mov	r5, r1
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <__math_check_oflow+0x3c>)
 8000662:	f04f 32ff 	mov.w	r2, #4294967295
 8000666:	4639      	mov	r1, r7
 8000668:	4604      	mov	r4, r0
 800066a:	f000 fd1f 	bl	80010ac <__aeabi_dcmpun>
 800066e:	b938      	cbnz	r0, 8000680 <__math_check_oflow+0x28>
 8000670:	4b08      	ldr	r3, [pc, #32]	@ (8000694 <__math_check_oflow+0x3c>)
 8000672:	4620      	mov	r0, r4
 8000674:	4639      	mov	r1, r7
 8000676:	f04f 32ff 	mov.w	r2, #4294967295
 800067a:	f000 fcf9 	bl	8001070 <__aeabi_dcmple>
 800067e:	b110      	cbz	r0, 8000686 <__math_check_oflow+0x2e>
 8000680:	4620      	mov	r0, r4
 8000682:	4629      	mov	r1, r5
 8000684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000686:	4620      	mov	r0, r4
 8000688:	4629      	mov	r1, r5
 800068a:	2222      	movs	r2, #34	@ 0x22
 800068c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000690:	e76c      	b.n	800056c <with_errno>
 8000692:	bf00      	nop
 8000694:	7fefffff 	.word	0x7fefffff

08000698 <__aeabi_fmul>:
 8000698:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800069c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80006a0:	bf1e      	ittt	ne
 80006a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80006a6:	ea92 0f0c 	teqne	r2, ip
 80006aa:	ea93 0f0c 	teqne	r3, ip
 80006ae:	d06f      	beq.n	8000790 <__aeabi_fmul+0xf8>
 80006b0:	441a      	add	r2, r3
 80006b2:	ea80 0c01 	eor.w	ip, r0, r1
 80006b6:	0240      	lsls	r0, r0, #9
 80006b8:	bf18      	it	ne
 80006ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80006be:	d01e      	beq.n	80006fe <__aeabi_fmul+0x66>
 80006c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80006c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80006c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80006cc:	fba0 3101 	umull	r3, r1, r0, r1
 80006d0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80006d4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80006d8:	bf3e      	ittt	cc
 80006da:	0049      	lslcc	r1, r1, #1
 80006dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80006e0:	005b      	lslcc	r3, r3, #1
 80006e2:	ea40 0001 	orr.w	r0, r0, r1
 80006e6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80006ea:	2afd      	cmp	r2, #253	@ 0xfd
 80006ec:	d81d      	bhi.n	800072a <__aeabi_fmul+0x92>
 80006ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80006f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006f6:	bf08      	it	eq
 80006f8:	f020 0001 	biceq.w	r0, r0, #1
 80006fc:	4770      	bx	lr
 80006fe:	f090 0f00 	teq	r0, #0
 8000702:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000706:	bf08      	it	eq
 8000708:	0249      	lsleq	r1, r1, #9
 800070a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800070e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000712:	3a7f      	subs	r2, #127	@ 0x7f
 8000714:	bfc2      	ittt	gt
 8000716:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800071a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800071e:	4770      	bxgt	lr
 8000720:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000724:	f04f 0300 	mov.w	r3, #0
 8000728:	3a01      	subs	r2, #1
 800072a:	dc5d      	bgt.n	80007e8 <__aeabi_fmul+0x150>
 800072c:	f112 0f19 	cmn.w	r2, #25
 8000730:	bfdc      	itt	le
 8000732:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000736:	4770      	bxle	lr
 8000738:	f1c2 0200 	rsb	r2, r2, #0
 800073c:	0041      	lsls	r1, r0, #1
 800073e:	fa21 f102 	lsr.w	r1, r1, r2
 8000742:	f1c2 0220 	rsb	r2, r2, #32
 8000746:	fa00 fc02 	lsl.w	ip, r0, r2
 800074a:	ea5f 0031 	movs.w	r0, r1, rrx
 800074e:	f140 0000 	adc.w	r0, r0, #0
 8000752:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000756:	bf08      	it	eq
 8000758:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800075c:	4770      	bx	lr
 800075e:	f092 0f00 	teq	r2, #0
 8000762:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000766:	bf02      	ittt	eq
 8000768:	0040      	lsleq	r0, r0, #1
 800076a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800076e:	3a01      	subeq	r2, #1
 8000770:	d0f9      	beq.n	8000766 <__aeabi_fmul+0xce>
 8000772:	ea40 000c 	orr.w	r0, r0, ip
 8000776:	f093 0f00 	teq	r3, #0
 800077a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800077e:	bf02      	ittt	eq
 8000780:	0049      	lsleq	r1, r1, #1
 8000782:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000786:	3b01      	subeq	r3, #1
 8000788:	d0f9      	beq.n	800077e <__aeabi_fmul+0xe6>
 800078a:	ea41 010c 	orr.w	r1, r1, ip
 800078e:	e78f      	b.n	80006b0 <__aeabi_fmul+0x18>
 8000790:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000794:	ea92 0f0c 	teq	r2, ip
 8000798:	bf18      	it	ne
 800079a:	ea93 0f0c 	teqne	r3, ip
 800079e:	d00a      	beq.n	80007b6 <__aeabi_fmul+0x11e>
 80007a0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80007a4:	bf18      	it	ne
 80007a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80007aa:	d1d8      	bne.n	800075e <__aeabi_fmul+0xc6>
 80007ac:	ea80 0001 	eor.w	r0, r0, r1
 80007b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80007b4:	4770      	bx	lr
 80007b6:	f090 0f00 	teq	r0, #0
 80007ba:	bf17      	itett	ne
 80007bc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80007c0:	4608      	moveq	r0, r1
 80007c2:	f091 0f00 	teqne	r1, #0
 80007c6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80007ca:	d014      	beq.n	80007f6 <__aeabi_fmul+0x15e>
 80007cc:	ea92 0f0c 	teq	r2, ip
 80007d0:	d101      	bne.n	80007d6 <__aeabi_fmul+0x13e>
 80007d2:	0242      	lsls	r2, r0, #9
 80007d4:	d10f      	bne.n	80007f6 <__aeabi_fmul+0x15e>
 80007d6:	ea93 0f0c 	teq	r3, ip
 80007da:	d103      	bne.n	80007e4 <__aeabi_fmul+0x14c>
 80007dc:	024b      	lsls	r3, r1, #9
 80007de:	bf18      	it	ne
 80007e0:	4608      	movne	r0, r1
 80007e2:	d108      	bne.n	80007f6 <__aeabi_fmul+0x15e>
 80007e4:	ea80 0001 	eor.w	r0, r0, r1
 80007e8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80007ec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80007f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007f4:	4770      	bx	lr
 80007f6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80007fa:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80007fe:	4770      	bx	lr

08000800 <__aeabi_drsub>:
 8000800:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	e002      	b.n	800080c <__adddf3>
 8000806:	bf00      	nop

08000808 <__aeabi_dsub>:
 8000808:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800080c <__adddf3>:
 800080c:	b530      	push	{r4, r5, lr}
 800080e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000812:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000816:	ea94 0f05 	teq	r4, r5
 800081a:	bf08      	it	eq
 800081c:	ea90 0f02 	teqeq	r0, r2
 8000820:	bf1f      	itttt	ne
 8000822:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000826:	ea55 0c02 	orrsne.w	ip, r5, r2
 800082a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800082e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000832:	f000 80e2 	beq.w	80009fa <__adddf3+0x1ee>
 8000836:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800083a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800083e:	bfb8      	it	lt
 8000840:	426d      	neglt	r5, r5
 8000842:	dd0c      	ble.n	800085e <__adddf3+0x52>
 8000844:	442c      	add	r4, r5
 8000846:	ea80 0202 	eor.w	r2, r0, r2
 800084a:	ea81 0303 	eor.w	r3, r1, r3
 800084e:	ea82 0000 	eor.w	r0, r2, r0
 8000852:	ea83 0101 	eor.w	r1, r3, r1
 8000856:	ea80 0202 	eor.w	r2, r0, r2
 800085a:	ea81 0303 	eor.w	r3, r1, r3
 800085e:	2d36      	cmp	r5, #54	@ 0x36
 8000860:	bf88      	it	hi
 8000862:	bd30      	pophi	{r4, r5, pc}
 8000864:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000870:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000874:	d002      	beq.n	800087c <__adddf3+0x70>
 8000876:	4240      	negs	r0, r0
 8000878:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800087c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000888:	d002      	beq.n	8000890 <__adddf3+0x84>
 800088a:	4252      	negs	r2, r2
 800088c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000890:	ea94 0f05 	teq	r4, r5
 8000894:	f000 80a7 	beq.w	80009e6 <__adddf3+0x1da>
 8000898:	f1a4 0401 	sub.w	r4, r4, #1
 800089c:	f1d5 0e20 	rsbs	lr, r5, #32
 80008a0:	db0d      	blt.n	80008be <__adddf3+0xb2>
 80008a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80008a6:	fa22 f205 	lsr.w	r2, r2, r5
 80008aa:	1880      	adds	r0, r0, r2
 80008ac:	f141 0100 	adc.w	r1, r1, #0
 80008b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80008b4:	1880      	adds	r0, r0, r2
 80008b6:	fa43 f305 	asr.w	r3, r3, r5
 80008ba:	4159      	adcs	r1, r3
 80008bc:	e00e      	b.n	80008dc <__adddf3+0xd0>
 80008be:	f1a5 0520 	sub.w	r5, r5, #32
 80008c2:	f10e 0e20 	add.w	lr, lr, #32
 80008c6:	2a01      	cmp	r2, #1
 80008c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80008cc:	bf28      	it	cs
 80008ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80008d2:	fa43 f305 	asr.w	r3, r3, r5
 80008d6:	18c0      	adds	r0, r0, r3
 80008d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80008dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80008e0:	d507      	bpl.n	80008f2 <__adddf3+0xe6>
 80008e2:	f04f 0e00 	mov.w	lr, #0
 80008e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80008ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80008ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80008f2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80008f6:	d31b      	bcc.n	8000930 <__adddf3+0x124>
 80008f8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80008fc:	d30c      	bcc.n	8000918 <__adddf3+0x10c>
 80008fe:	0849      	lsrs	r1, r1, #1
 8000900:	ea5f 0030 	movs.w	r0, r0, rrx
 8000904:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000908:	f104 0401 	add.w	r4, r4, #1
 800090c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000910:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000914:	f080 809a 	bcs.w	8000a4c <__adddf3+0x240>
 8000918:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800091c:	bf08      	it	eq
 800091e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000922:	f150 0000 	adcs.w	r0, r0, #0
 8000926:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092a:	ea41 0105 	orr.w	r1, r1, r5
 800092e:	bd30      	pop	{r4, r5, pc}
 8000930:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000934:	4140      	adcs	r0, r0
 8000936:	eb41 0101 	adc.w	r1, r1, r1
 800093a:	3c01      	subs	r4, #1
 800093c:	bf28      	it	cs
 800093e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000942:	d2e9      	bcs.n	8000918 <__adddf3+0x10c>
 8000944:	f091 0f00 	teq	r1, #0
 8000948:	bf04      	itt	eq
 800094a:	4601      	moveq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	fab1 f381 	clz	r3, r1
 8000952:	bf08      	it	eq
 8000954:	3320      	addeq	r3, #32
 8000956:	f1a3 030b 	sub.w	r3, r3, #11
 800095a:	f1b3 0220 	subs.w	r2, r3, #32
 800095e:	da0c      	bge.n	800097a <__adddf3+0x16e>
 8000960:	320c      	adds	r2, #12
 8000962:	dd08      	ble.n	8000976 <__adddf3+0x16a>
 8000964:	f102 0c14 	add.w	ip, r2, #20
 8000968:	f1c2 020c 	rsb	r2, r2, #12
 800096c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000970:	fa21 f102 	lsr.w	r1, r1, r2
 8000974:	e00c      	b.n	8000990 <__adddf3+0x184>
 8000976:	f102 0214 	add.w	r2, r2, #20
 800097a:	bfd8      	it	le
 800097c:	f1c2 0c20 	rsble	ip, r2, #32
 8000980:	fa01 f102 	lsl.w	r1, r1, r2
 8000984:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000988:	bfdc      	itt	le
 800098a:	ea41 010c 	orrle.w	r1, r1, ip
 800098e:	4090      	lslle	r0, r2
 8000990:	1ae4      	subs	r4, r4, r3
 8000992:	bfa2      	ittt	ge
 8000994:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000998:	4329      	orrge	r1, r5
 800099a:	bd30      	popge	{r4, r5, pc}
 800099c:	ea6f 0404 	mvn.w	r4, r4
 80009a0:	3c1f      	subs	r4, #31
 80009a2:	da1c      	bge.n	80009de <__adddf3+0x1d2>
 80009a4:	340c      	adds	r4, #12
 80009a6:	dc0e      	bgt.n	80009c6 <__adddf3+0x1ba>
 80009a8:	f104 0414 	add.w	r4, r4, #20
 80009ac:	f1c4 0220 	rsb	r2, r4, #32
 80009b0:	fa20 f004 	lsr.w	r0, r0, r4
 80009b4:	fa01 f302 	lsl.w	r3, r1, r2
 80009b8:	ea40 0003 	orr.w	r0, r0, r3
 80009bc:	fa21 f304 	lsr.w	r3, r1, r4
 80009c0:	ea45 0103 	orr.w	r1, r5, r3
 80009c4:	bd30      	pop	{r4, r5, pc}
 80009c6:	f1c4 040c 	rsb	r4, r4, #12
 80009ca:	f1c4 0220 	rsb	r2, r4, #32
 80009ce:	fa20 f002 	lsr.w	r0, r0, r2
 80009d2:	fa01 f304 	lsl.w	r3, r1, r4
 80009d6:	ea40 0003 	orr.w	r0, r0, r3
 80009da:	4629      	mov	r1, r5
 80009dc:	bd30      	pop	{r4, r5, pc}
 80009de:	fa21 f004 	lsr.w	r0, r1, r4
 80009e2:	4629      	mov	r1, r5
 80009e4:	bd30      	pop	{r4, r5, pc}
 80009e6:	f094 0f00 	teq	r4, #0
 80009ea:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80009ee:	bf06      	itte	eq
 80009f0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80009f4:	3401      	addeq	r4, #1
 80009f6:	3d01      	subne	r5, #1
 80009f8:	e74e      	b.n	8000898 <__adddf3+0x8c>
 80009fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80009fe:	bf18      	it	ne
 8000a00:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000a04:	d029      	beq.n	8000a5a <__adddf3+0x24e>
 8000a06:	ea94 0f05 	teq	r4, r5
 8000a0a:	bf08      	it	eq
 8000a0c:	ea90 0f02 	teqeq	r0, r2
 8000a10:	d005      	beq.n	8000a1e <__adddf3+0x212>
 8000a12:	ea54 0c00 	orrs.w	ip, r4, r0
 8000a16:	bf04      	itt	eq
 8000a18:	4619      	moveq	r1, r3
 8000a1a:	4610      	moveq	r0, r2
 8000a1c:	bd30      	pop	{r4, r5, pc}
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf1e      	ittt	ne
 8000a24:	2100      	movne	r1, #0
 8000a26:	2000      	movne	r0, #0
 8000a28:	bd30      	popne	{r4, r5, pc}
 8000a2a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000a2e:	d105      	bne.n	8000a3c <__adddf3+0x230>
 8000a30:	0040      	lsls	r0, r0, #1
 8000a32:	4149      	adcs	r1, r1
 8000a34:	bf28      	it	cs
 8000a36:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000a3a:	bd30      	pop	{r4, r5, pc}
 8000a3c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000a40:	bf3c      	itt	cc
 8000a42:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000a46:	bd30      	popcc	{r4, r5, pc}
 8000a48:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000a4c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000a50:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	bd30      	pop	{r4, r5, pc}
 8000a5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000a5e:	bf1a      	itte	ne
 8000a60:	4619      	movne	r1, r3
 8000a62:	4610      	movne	r0, r2
 8000a64:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000a68:	bf1c      	itt	ne
 8000a6a:	460b      	movne	r3, r1
 8000a6c:	4602      	movne	r2, r0
 8000a6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a72:	bf06      	itte	eq
 8000a74:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000a78:	ea91 0f03 	teqeq	r1, r3
 8000a7c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000a80:	bd30      	pop	{r4, r5, pc}
 8000a82:	bf00      	nop

08000a84 <__aeabi_ui2d>:
 8000a84:	f090 0f00 	teq	r0, #0
 8000a88:	bf04      	itt	eq
 8000a8a:	2100      	moveq	r1, #0
 8000a8c:	4770      	bxeq	lr
 8000a8e:	b530      	push	{r4, r5, lr}
 8000a90:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000a94:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000a98:	f04f 0500 	mov.w	r5, #0
 8000a9c:	f04f 0100 	mov.w	r1, #0
 8000aa0:	e750      	b.n	8000944 <__adddf3+0x138>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_i2d>:
 8000aa4:	f090 0f00 	teq	r0, #0
 8000aa8:	bf04      	itt	eq
 8000aaa:	2100      	moveq	r1, #0
 8000aac:	4770      	bxeq	lr
 8000aae:	b530      	push	{r4, r5, lr}
 8000ab0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000ab4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000ab8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000abc:	bf48      	it	mi
 8000abe:	4240      	negmi	r0, r0
 8000ac0:	f04f 0100 	mov.w	r1, #0
 8000ac4:	e73e      	b.n	8000944 <__adddf3+0x138>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_f2d>:
 8000ac8:	0042      	lsls	r2, r0, #1
 8000aca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000ace:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ad2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000adc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000ae0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000ae4:	4770      	bxne	lr
 8000ae6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000aea:	bf08      	it	eq
 8000aec:	4770      	bxeq	lr
 8000aee:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000af2:	bf04      	itt	eq
 8000af4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000af8:	4770      	bxeq	lr
 8000afa:	b530      	push	{r4, r5, lr}
 8000afc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000b00:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000b04:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000b08:	e71c      	b.n	8000944 <__adddf3+0x138>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_ul2d>:
 8000b0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b10:	bf08      	it	eq
 8000b12:	4770      	bxeq	lr
 8000b14:	b530      	push	{r4, r5, lr}
 8000b16:	f04f 0500 	mov.w	r5, #0
 8000b1a:	e00a      	b.n	8000b32 <__aeabi_l2d+0x16>

08000b1c <__aeabi_l2d>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	b530      	push	{r4, r5, lr}
 8000b26:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000b2a:	d502      	bpl.n	8000b32 <__aeabi_l2d+0x16>
 8000b2c:	4240      	negs	r0, r0
 8000b2e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b32:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000b36:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000b3a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000b3e:	f43f aed8 	beq.w	80008f2 <__adddf3+0xe6>
 8000b42:	f04f 0203 	mov.w	r2, #3
 8000b46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000b4a:	bf18      	it	ne
 8000b4c:	3203      	addne	r2, #3
 8000b4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000b52:	bf18      	it	ne
 8000b54:	3203      	addne	r2, #3
 8000b56:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000b5a:	f1c2 0320 	rsb	r3, r2, #32
 8000b5e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	fa01 fe03 	lsl.w	lr, r1, r3
 8000b6a:	ea40 000e 	orr.w	r0, r0, lr
 8000b6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000b72:	4414      	add	r4, r2
 8000b74:	e6bd      	b.n	80008f2 <__adddf3+0xe6>
 8000b76:	bf00      	nop

08000b78 <__aeabi_dmul>:
 8000b78:	b570      	push	{r4, r5, r6, lr}
 8000b7a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b7e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000b82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000b86:	bf1d      	ittte	ne
 8000b88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000b8c:	ea94 0f0c 	teqne	r4, ip
 8000b90:	ea95 0f0c 	teqne	r5, ip
 8000b94:	f000 f8de 	bleq	8000d54 <__aeabi_dmul+0x1dc>
 8000b98:	442c      	add	r4, r5
 8000b9a:	ea81 0603 	eor.w	r6, r1, r3
 8000b9e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000ba2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000ba6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000baa:	bf18      	it	ne
 8000bac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000bb0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000bb8:	d038      	beq.n	8000c2c <__aeabi_dmul+0xb4>
 8000bba:	fba0 ce02 	umull	ip, lr, r0, r2
 8000bbe:	f04f 0500 	mov.w	r5, #0
 8000bc2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000bc6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000bca:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000bce:	f04f 0600 	mov.w	r6, #0
 8000bd2:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000bd6:	f09c 0f00 	teq	ip, #0
 8000bda:	bf18      	it	ne
 8000bdc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000be0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000be4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000be8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000bec:	d204      	bcs.n	8000bf8 <__aeabi_dmul+0x80>
 8000bee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000bf2:	416d      	adcs	r5, r5
 8000bf4:	eb46 0606 	adc.w	r6, r6, r6
 8000bf8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000bfc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000c00:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000c04:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000c08:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000c0c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000c10:	bf88      	it	hi
 8000c12:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000c16:	d81e      	bhi.n	8000c56 <__aeabi_dmul+0xde>
 8000c18:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000c1c:	bf08      	it	eq
 8000c1e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000c22:	f150 0000 	adcs.w	r0, r0, #0
 8000c26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c2a:	bd70      	pop	{r4, r5, r6, pc}
 8000c2c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000c30:	ea46 0101 	orr.w	r1, r6, r1
 8000c34:	ea40 0002 	orr.w	r0, r0, r2
 8000c38:	ea81 0103 	eor.w	r1, r1, r3
 8000c3c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000c40:	bfc2      	ittt	gt
 8000c42:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c4a:	bd70      	popgt	{r4, r5, r6, pc}
 8000c4c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c50:	f04f 0e00 	mov.w	lr, #0
 8000c54:	3c01      	subs	r4, #1
 8000c56:	f300 80ab 	bgt.w	8000db0 <__aeabi_dmul+0x238>
 8000c5a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000c5e:	bfde      	ittt	le
 8000c60:	2000      	movle	r0, #0
 8000c62:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000c66:	bd70      	pople	{r4, r5, r6, pc}
 8000c68:	f1c4 0400 	rsb	r4, r4, #0
 8000c6c:	3c20      	subs	r4, #32
 8000c6e:	da35      	bge.n	8000cdc <__aeabi_dmul+0x164>
 8000c70:	340c      	adds	r4, #12
 8000c72:	dc1b      	bgt.n	8000cac <__aeabi_dmul+0x134>
 8000c74:	f104 0414 	add.w	r4, r4, #20
 8000c78:	f1c4 0520 	rsb	r5, r4, #32
 8000c7c:	fa00 f305 	lsl.w	r3, r0, r5
 8000c80:	fa20 f004 	lsr.w	r0, r0, r4
 8000c84:	fa01 f205 	lsl.w	r2, r1, r5
 8000c88:	ea40 0002 	orr.w	r0, r0, r2
 8000c8c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000c90:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000c94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000c98:	fa21 f604 	lsr.w	r6, r1, r4
 8000c9c:	eb42 0106 	adc.w	r1, r2, r6
 8000ca0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000ca4:	bf08      	it	eq
 8000ca6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000caa:	bd70      	pop	{r4, r5, r6, pc}
 8000cac:	f1c4 040c 	rsb	r4, r4, #12
 8000cb0:	f1c4 0520 	rsb	r5, r4, #32
 8000cb4:	fa00 f304 	lsl.w	r3, r0, r4
 8000cb8:	fa20 f005 	lsr.w	r0, r0, r5
 8000cbc:	fa01 f204 	lsl.w	r2, r1, r4
 8000cc0:	ea40 0002 	orr.w	r0, r0, r2
 8000cc4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000cc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000ccc:	f141 0100 	adc.w	r1, r1, #0
 8000cd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000cd4:	bf08      	it	eq
 8000cd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000cda:	bd70      	pop	{r4, r5, r6, pc}
 8000cdc:	f1c4 0520 	rsb	r5, r4, #32
 8000ce0:	fa00 f205 	lsl.w	r2, r0, r5
 8000ce4:	ea4e 0e02 	orr.w	lr, lr, r2
 8000ce8:	fa20 f304 	lsr.w	r3, r0, r4
 8000cec:	fa01 f205 	lsl.w	r2, r1, r5
 8000cf0:	ea43 0302 	orr.w	r3, r3, r2
 8000cf4:	fa21 f004 	lsr.w	r0, r1, r4
 8000cf8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000cfc:	fa21 f204 	lsr.w	r2, r1, r4
 8000d00:	ea20 0002 	bic.w	r0, r0, r2
 8000d04:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000d08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000d0c:	bf08      	it	eq
 8000d0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000d12:	bd70      	pop	{r4, r5, r6, pc}
 8000d14:	f094 0f00 	teq	r4, #0
 8000d18:	d10f      	bne.n	8000d3a <__aeabi_dmul+0x1c2>
 8000d1a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000d1e:	0040      	lsls	r0, r0, #1
 8000d20:	eb41 0101 	adc.w	r1, r1, r1
 8000d24:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000d28:	bf08      	it	eq
 8000d2a:	3c01      	subeq	r4, #1
 8000d2c:	d0f7      	beq.n	8000d1e <__aeabi_dmul+0x1a6>
 8000d2e:	ea41 0106 	orr.w	r1, r1, r6
 8000d32:	f095 0f00 	teq	r5, #0
 8000d36:	bf18      	it	ne
 8000d38:	4770      	bxne	lr
 8000d3a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000d3e:	0052      	lsls	r2, r2, #1
 8000d40:	eb43 0303 	adc.w	r3, r3, r3
 8000d44:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000d48:	bf08      	it	eq
 8000d4a:	3d01      	subeq	r5, #1
 8000d4c:	d0f7      	beq.n	8000d3e <__aeabi_dmul+0x1c6>
 8000d4e:	ea43 0306 	orr.w	r3, r3, r6
 8000d52:	4770      	bx	lr
 8000d54:	ea94 0f0c 	teq	r4, ip
 8000d58:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000d5c:	bf18      	it	ne
 8000d5e:	ea95 0f0c 	teqne	r5, ip
 8000d62:	d00c      	beq.n	8000d7e <__aeabi_dmul+0x206>
 8000d64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000d68:	bf18      	it	ne
 8000d6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000d6e:	d1d1      	bne.n	8000d14 <__aeabi_dmul+0x19c>
 8000d70:	ea81 0103 	eor.w	r1, r1, r3
 8000d74:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000d78:	f04f 0000 	mov.w	r0, #0
 8000d7c:	bd70      	pop	{r4, r5, r6, pc}
 8000d7e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000d82:	bf06      	itte	eq
 8000d84:	4610      	moveq	r0, r2
 8000d86:	4619      	moveq	r1, r3
 8000d88:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000d8c:	d019      	beq.n	8000dc2 <__aeabi_dmul+0x24a>
 8000d8e:	ea94 0f0c 	teq	r4, ip
 8000d92:	d102      	bne.n	8000d9a <__aeabi_dmul+0x222>
 8000d94:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000d98:	d113      	bne.n	8000dc2 <__aeabi_dmul+0x24a>
 8000d9a:	ea95 0f0c 	teq	r5, ip
 8000d9e:	d105      	bne.n	8000dac <__aeabi_dmul+0x234>
 8000da0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000da4:	bf1c      	itt	ne
 8000da6:	4610      	movne	r0, r2
 8000da8:	4619      	movne	r1, r3
 8000daa:	d10a      	bne.n	8000dc2 <__aeabi_dmul+0x24a>
 8000dac:	ea81 0103 	eor.w	r1, r1, r3
 8000db0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000db4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000db8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000dbc:	f04f 0000 	mov.w	r0, #0
 8000dc0:	bd70      	pop	{r4, r5, r6, pc}
 8000dc2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000dc6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000dca:	bd70      	pop	{r4, r5, r6, pc}

08000dcc <__aeabi_ddiv>:
 8000dcc:	b570      	push	{r4, r5, r6, lr}
 8000dce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000dd2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000dd6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000dda:	bf1d      	ittte	ne
 8000ddc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000de0:	ea94 0f0c 	teqne	r4, ip
 8000de4:	ea95 0f0c 	teqne	r5, ip
 8000de8:	f000 f8a7 	bleq	8000f3a <__aeabi_ddiv+0x16e>
 8000dec:	eba4 0405 	sub.w	r4, r4, r5
 8000df0:	ea81 0e03 	eor.w	lr, r1, r3
 8000df4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000df8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000dfc:	f000 8088 	beq.w	8000f10 <__aeabi_ddiv+0x144>
 8000e00:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000e04:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000e08:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000e0c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000e10:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000e14:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000e18:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000e1c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000e20:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000e24:	429d      	cmp	r5, r3
 8000e26:	bf08      	it	eq
 8000e28:	4296      	cmpeq	r6, r2
 8000e2a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000e2e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000e32:	d202      	bcs.n	8000e3a <__aeabi_ddiv+0x6e>
 8000e34:	085b      	lsrs	r3, r3, #1
 8000e36:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e3a:	1ab6      	subs	r6, r6, r2
 8000e3c:	eb65 0503 	sbc.w	r5, r5, r3
 8000e40:	085b      	lsrs	r3, r3, #1
 8000e42:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e46:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000e4a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000e4e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e52:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000e56:	bf22      	ittt	cs
 8000e58:	1ab6      	subcs	r6, r6, r2
 8000e5a:	4675      	movcs	r5, lr
 8000e5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e60:	085b      	lsrs	r3, r3, #1
 8000e62:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e66:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000e6e:	bf22      	ittt	cs
 8000e70:	1ab6      	subcs	r6, r6, r2
 8000e72:	4675      	movcs	r5, lr
 8000e74:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e78:	085b      	lsrs	r3, r3, #1
 8000e7a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e7e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e82:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000e86:	bf22      	ittt	cs
 8000e88:	1ab6      	subcs	r6, r6, r2
 8000e8a:	4675      	movcs	r5, lr
 8000e8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e90:	085b      	lsrs	r3, r3, #1
 8000e92:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e96:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000e9e:	bf22      	ittt	cs
 8000ea0:	1ab6      	subcs	r6, r6, r2
 8000ea2:	4675      	movcs	r5, lr
 8000ea4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ea8:	ea55 0e06 	orrs.w	lr, r5, r6
 8000eac:	d018      	beq.n	8000ee0 <__aeabi_ddiv+0x114>
 8000eae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000eb2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000eb6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000eba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000ebe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000ec2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000ec6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000eca:	d1c0      	bne.n	8000e4e <__aeabi_ddiv+0x82>
 8000ecc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000ed0:	d10b      	bne.n	8000eea <__aeabi_ddiv+0x11e>
 8000ed2:	ea41 0100 	orr.w	r1, r1, r0
 8000ed6:	f04f 0000 	mov.w	r0, #0
 8000eda:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000ede:	e7b6      	b.n	8000e4e <__aeabi_ddiv+0x82>
 8000ee0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000ee4:	bf04      	itt	eq
 8000ee6:	4301      	orreq	r1, r0
 8000ee8:	2000      	moveq	r0, #0
 8000eea:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000eee:	bf88      	it	hi
 8000ef0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000ef4:	f63f aeaf 	bhi.w	8000c56 <__aeabi_dmul+0xde>
 8000ef8:	ebb5 0c03 	subs.w	ip, r5, r3
 8000efc:	bf04      	itt	eq
 8000efe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000f02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000f06:	f150 0000 	adcs.w	r0, r0, #0
 8000f0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000f0e:	bd70      	pop	{r4, r5, r6, pc}
 8000f10:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000f14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000f18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000f1c:	bfc2      	ittt	gt
 8000f1e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000f22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000f26:	bd70      	popgt	{r4, r5, r6, pc}
 8000f28:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000f2c:	f04f 0e00 	mov.w	lr, #0
 8000f30:	3c01      	subs	r4, #1
 8000f32:	e690      	b.n	8000c56 <__aeabi_dmul+0xde>
 8000f34:	ea45 0e06 	orr.w	lr, r5, r6
 8000f38:	e68d      	b.n	8000c56 <__aeabi_dmul+0xde>
 8000f3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000f3e:	ea94 0f0c 	teq	r4, ip
 8000f42:	bf08      	it	eq
 8000f44:	ea95 0f0c 	teqeq	r5, ip
 8000f48:	f43f af3b 	beq.w	8000dc2 <__aeabi_dmul+0x24a>
 8000f4c:	ea94 0f0c 	teq	r4, ip
 8000f50:	d10a      	bne.n	8000f68 <__aeabi_ddiv+0x19c>
 8000f52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000f56:	f47f af34 	bne.w	8000dc2 <__aeabi_dmul+0x24a>
 8000f5a:	ea95 0f0c 	teq	r5, ip
 8000f5e:	f47f af25 	bne.w	8000dac <__aeabi_dmul+0x234>
 8000f62:	4610      	mov	r0, r2
 8000f64:	4619      	mov	r1, r3
 8000f66:	e72c      	b.n	8000dc2 <__aeabi_dmul+0x24a>
 8000f68:	ea95 0f0c 	teq	r5, ip
 8000f6c:	d106      	bne.n	8000f7c <__aeabi_ddiv+0x1b0>
 8000f6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000f72:	f43f aefd 	beq.w	8000d70 <__aeabi_dmul+0x1f8>
 8000f76:	4610      	mov	r0, r2
 8000f78:	4619      	mov	r1, r3
 8000f7a:	e722      	b.n	8000dc2 <__aeabi_dmul+0x24a>
 8000f7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000f80:	bf18      	it	ne
 8000f82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000f86:	f47f aec5 	bne.w	8000d14 <__aeabi_dmul+0x19c>
 8000f8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000f8e:	f47f af0d 	bne.w	8000dac <__aeabi_dmul+0x234>
 8000f92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000f96:	f47f aeeb 	bne.w	8000d70 <__aeabi_dmul+0x1f8>
 8000f9a:	e712      	b.n	8000dc2 <__aeabi_dmul+0x24a>

08000f9c <__gedf2>:
 8000f9c:	f04f 3cff 	mov.w	ip, #4294967295
 8000fa0:	e006      	b.n	8000fb0 <__cmpdf2+0x4>
 8000fa2:	bf00      	nop

08000fa4 <__ledf2>:
 8000fa4:	f04f 0c01 	mov.w	ip, #1
 8000fa8:	e002      	b.n	8000fb0 <__cmpdf2+0x4>
 8000faa:	bf00      	nop

08000fac <__cmpdf2>:
 8000fac:	f04f 0c01 	mov.w	ip, #1
 8000fb0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000fb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000fbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000fc0:	bf18      	it	ne
 8000fc2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000fc6:	d01b      	beq.n	8001000 <__cmpdf2+0x54>
 8000fc8:	b001      	add	sp, #4
 8000fca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000fce:	bf0c      	ite	eq
 8000fd0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000fd4:	ea91 0f03 	teqne	r1, r3
 8000fd8:	bf02      	ittt	eq
 8000fda:	ea90 0f02 	teqeq	r0, r2
 8000fde:	2000      	moveq	r0, #0
 8000fe0:	4770      	bxeq	lr
 8000fe2:	f110 0f00 	cmn.w	r0, #0
 8000fe6:	ea91 0f03 	teq	r1, r3
 8000fea:	bf58      	it	pl
 8000fec:	4299      	cmppl	r1, r3
 8000fee:	bf08      	it	eq
 8000ff0:	4290      	cmpeq	r0, r2
 8000ff2:	bf2c      	ite	cs
 8000ff4:	17d8      	asrcs	r0, r3, #31
 8000ff6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ffa:	f040 0001 	orr.w	r0, r0, #1
 8000ffe:	4770      	bx	lr
 8001000:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001004:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001008:	d102      	bne.n	8001010 <__cmpdf2+0x64>
 800100a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800100e:	d107      	bne.n	8001020 <__cmpdf2+0x74>
 8001010:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001014:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001018:	d1d6      	bne.n	8000fc8 <__cmpdf2+0x1c>
 800101a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800101e:	d0d3      	beq.n	8000fc8 <__cmpdf2+0x1c>
 8001020:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <__aeabi_cdrcmple>:
 8001028:	4684      	mov	ip, r0
 800102a:	4610      	mov	r0, r2
 800102c:	4662      	mov	r2, ip
 800102e:	468c      	mov	ip, r1
 8001030:	4619      	mov	r1, r3
 8001032:	4663      	mov	r3, ip
 8001034:	e000      	b.n	8001038 <__aeabi_cdcmpeq>
 8001036:	bf00      	nop

08001038 <__aeabi_cdcmpeq>:
 8001038:	b501      	push	{r0, lr}
 800103a:	f7ff ffb7 	bl	8000fac <__cmpdf2>
 800103e:	2800      	cmp	r0, #0
 8001040:	bf48      	it	mi
 8001042:	f110 0f00 	cmnmi.w	r0, #0
 8001046:	bd01      	pop	{r0, pc}

08001048 <__aeabi_dcmpeq>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff fff4 	bl	8001038 <__aeabi_cdcmpeq>
 8001050:	bf0c      	ite	eq
 8001052:	2001      	moveq	r0, #1
 8001054:	2000      	movne	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_dcmplt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffea 	bl	8001038 <__aeabi_cdcmpeq>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_dcmple>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffe0 	bl	8001038 <__aeabi_cdcmpeq>
 8001078:	bf94      	ite	ls
 800107a:	2001      	movls	r0, #1
 800107c:	2000      	movhi	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_dcmpge>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffce 	bl	8001028 <__aeabi_cdrcmple>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_dcmpgt>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffc4 	bl	8001028 <__aeabi_cdrcmple>
 80010a0:	bf34      	ite	cc
 80010a2:	2001      	movcc	r0, #1
 80010a4:	2000      	movcs	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_dcmpun>:
 80010ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80010b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80010b4:	d102      	bne.n	80010bc <__aeabi_dcmpun+0x10>
 80010b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80010ba:	d10a      	bne.n	80010d2 <__aeabi_dcmpun+0x26>
 80010bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80010c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80010c4:	d102      	bne.n	80010cc <__aeabi_dcmpun+0x20>
 80010c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80010ca:	d102      	bne.n	80010d2 <__aeabi_dcmpun+0x26>
 80010cc:	f04f 0000 	mov.w	r0, #0
 80010d0:	4770      	bx	lr
 80010d2:	f04f 0001 	mov.w	r0, #1
 80010d6:	4770      	bx	lr

080010d8 <__aeabi_d2iz>:
 80010d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80010dc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80010e0:	d215      	bcs.n	800110e <__aeabi_d2iz+0x36>
 80010e2:	d511      	bpl.n	8001108 <__aeabi_d2iz+0x30>
 80010e4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80010e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80010ec:	d912      	bls.n	8001114 <__aeabi_d2iz+0x3c>
 80010ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80010f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80010fa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80010fe:	fa23 f002 	lsr.w	r0, r3, r2
 8001102:	bf18      	it	ne
 8001104:	4240      	negne	r0, r0
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001112:	d105      	bne.n	8001120 <__aeabi_d2iz+0x48>
 8001114:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8001118:	bf08      	it	eq
 800111a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800111e:	4770      	bx	lr
 8001120:	f04f 0000 	mov.w	r0, #0
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop

08001128 <__aeabi_d2f>:
 8001128:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800112c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8001130:	bf24      	itt	cs
 8001132:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8001136:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800113a:	d90d      	bls.n	8001158 <__aeabi_d2f+0x30>
 800113c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001140:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8001144:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8001148:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800114c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8001150:	bf08      	it	eq
 8001152:	f020 0001 	biceq.w	r0, r0, #1
 8001156:	4770      	bx	lr
 8001158:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800115c:	d121      	bne.n	80011a2 <__aeabi_d2f+0x7a>
 800115e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8001162:	bfbc      	itt	lt
 8001164:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8001168:	4770      	bxlt	lr
 800116a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800116e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8001172:	f1c2 0218 	rsb	r2, r2, #24
 8001176:	f1c2 0c20 	rsb	ip, r2, #32
 800117a:	fa10 f30c 	lsls.w	r3, r0, ip
 800117e:	fa20 f002 	lsr.w	r0, r0, r2
 8001182:	bf18      	it	ne
 8001184:	f040 0001 	orrne.w	r0, r0, #1
 8001188:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800118c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8001190:	fa03 fc0c 	lsl.w	ip, r3, ip
 8001194:	ea40 000c 	orr.w	r0, r0, ip
 8001198:	fa23 f302 	lsr.w	r3, r3, r2
 800119c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80011a0:	e7cc      	b.n	800113c <__aeabi_d2f+0x14>
 80011a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80011a6:	d107      	bne.n	80011b8 <__aeabi_d2f+0x90>
 80011a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80011ac:	bf1e      	ittt	ne
 80011ae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80011b2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80011b6:	4770      	bxne	lr
 80011b8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80011bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80011c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop

080011c8 <__aeabi_frsub>:
 80011c8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80011cc:	e002      	b.n	80011d4 <__addsf3>
 80011ce:	bf00      	nop

080011d0 <__aeabi_fsub>:
 80011d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080011d4 <__addsf3>:
 80011d4:	0042      	lsls	r2, r0, #1
 80011d6:	bf1f      	itttt	ne
 80011d8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80011dc:	ea92 0f03 	teqne	r2, r3
 80011e0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80011e4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80011e8:	d06a      	beq.n	80012c0 <__addsf3+0xec>
 80011ea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80011ee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80011f2:	bfc1      	itttt	gt
 80011f4:	18d2      	addgt	r2, r2, r3
 80011f6:	4041      	eorgt	r1, r0
 80011f8:	4048      	eorgt	r0, r1
 80011fa:	4041      	eorgt	r1, r0
 80011fc:	bfb8      	it	lt
 80011fe:	425b      	neglt	r3, r3
 8001200:	2b19      	cmp	r3, #25
 8001202:	bf88      	it	hi
 8001204:	4770      	bxhi	lr
 8001206:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800120a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800120e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8001212:	bf18      	it	ne
 8001214:	4240      	negne	r0, r0
 8001216:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800121a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800121e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8001222:	bf18      	it	ne
 8001224:	4249      	negne	r1, r1
 8001226:	ea92 0f03 	teq	r2, r3
 800122a:	d03f      	beq.n	80012ac <__addsf3+0xd8>
 800122c:	f1a2 0201 	sub.w	r2, r2, #1
 8001230:	fa41 fc03 	asr.w	ip, r1, r3
 8001234:	eb10 000c 	adds.w	r0, r0, ip
 8001238:	f1c3 0320 	rsb	r3, r3, #32
 800123c:	fa01 f103 	lsl.w	r1, r1, r3
 8001240:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8001244:	d502      	bpl.n	800124c <__addsf3+0x78>
 8001246:	4249      	negs	r1, r1
 8001248:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800124c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8001250:	d313      	bcc.n	800127a <__addsf3+0xa6>
 8001252:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001256:	d306      	bcc.n	8001266 <__addsf3+0x92>
 8001258:	0840      	lsrs	r0, r0, #1
 800125a:	ea4f 0131 	mov.w	r1, r1, rrx
 800125e:	f102 0201 	add.w	r2, r2, #1
 8001262:	2afe      	cmp	r2, #254	@ 0xfe
 8001264:	d251      	bcs.n	800130a <__addsf3+0x136>
 8001266:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800126a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800126e:	bf08      	it	eq
 8001270:	f020 0001 	biceq.w	r0, r0, #1
 8001274:	ea40 0003 	orr.w	r0, r0, r3
 8001278:	4770      	bx	lr
 800127a:	0049      	lsls	r1, r1, #1
 800127c:	eb40 0000 	adc.w	r0, r0, r0
 8001280:	3a01      	subs	r2, #1
 8001282:	bf28      	it	cs
 8001284:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8001288:	d2ed      	bcs.n	8001266 <__addsf3+0x92>
 800128a:	fab0 fc80 	clz	ip, r0
 800128e:	f1ac 0c08 	sub.w	ip, ip, #8
 8001292:	ebb2 020c 	subs.w	r2, r2, ip
 8001296:	fa00 f00c 	lsl.w	r0, r0, ip
 800129a:	bfaa      	itet	ge
 800129c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80012a0:	4252      	neglt	r2, r2
 80012a2:	4318      	orrge	r0, r3
 80012a4:	bfbc      	itt	lt
 80012a6:	40d0      	lsrlt	r0, r2
 80012a8:	4318      	orrlt	r0, r3
 80012aa:	4770      	bx	lr
 80012ac:	f092 0f00 	teq	r2, #0
 80012b0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80012b4:	bf06      	itte	eq
 80012b6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80012ba:	3201      	addeq	r2, #1
 80012bc:	3b01      	subne	r3, #1
 80012be:	e7b5      	b.n	800122c <__addsf3+0x58>
 80012c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80012c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80012c8:	bf18      	it	ne
 80012ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80012ce:	d021      	beq.n	8001314 <__addsf3+0x140>
 80012d0:	ea92 0f03 	teq	r2, r3
 80012d4:	d004      	beq.n	80012e0 <__addsf3+0x10c>
 80012d6:	f092 0f00 	teq	r2, #0
 80012da:	bf08      	it	eq
 80012dc:	4608      	moveq	r0, r1
 80012de:	4770      	bx	lr
 80012e0:	ea90 0f01 	teq	r0, r1
 80012e4:	bf1c      	itt	ne
 80012e6:	2000      	movne	r0, #0
 80012e8:	4770      	bxne	lr
 80012ea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80012ee:	d104      	bne.n	80012fa <__addsf3+0x126>
 80012f0:	0040      	lsls	r0, r0, #1
 80012f2:	bf28      	it	cs
 80012f4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80012f8:	4770      	bx	lr
 80012fa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80012fe:	bf3c      	itt	cc
 8001300:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8001304:	4770      	bxcc	lr
 8001306:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800130a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800130e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001312:	4770      	bx	lr
 8001314:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8001318:	bf16      	itet	ne
 800131a:	4608      	movne	r0, r1
 800131c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8001320:	4601      	movne	r1, r0
 8001322:	0242      	lsls	r2, r0, #9
 8001324:	bf06      	itte	eq
 8001326:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800132a:	ea90 0f01 	teqeq	r0, r1
 800132e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8001332:	4770      	bx	lr

08001334 <__aeabi_ui2f>:
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	e004      	b.n	8001344 <__aeabi_i2f+0x8>
 800133a:	bf00      	nop

0800133c <__aeabi_i2f>:
 800133c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8001340:	bf48      	it	mi
 8001342:	4240      	negmi	r0, r0
 8001344:	ea5f 0c00 	movs.w	ip, r0
 8001348:	bf08      	it	eq
 800134a:	4770      	bxeq	lr
 800134c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8001350:	4601      	mov	r1, r0
 8001352:	f04f 0000 	mov.w	r0, #0
 8001356:	e01c      	b.n	8001392 <__aeabi_l2f+0x2a>

08001358 <__aeabi_ul2f>:
 8001358:	ea50 0201 	orrs.w	r2, r0, r1
 800135c:	bf08      	it	eq
 800135e:	4770      	bxeq	lr
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	e00a      	b.n	800137c <__aeabi_l2f+0x14>
 8001366:	bf00      	nop

08001368 <__aeabi_l2f>:
 8001368:	ea50 0201 	orrs.w	r2, r0, r1
 800136c:	bf08      	it	eq
 800136e:	4770      	bxeq	lr
 8001370:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8001374:	d502      	bpl.n	800137c <__aeabi_l2f+0x14>
 8001376:	4240      	negs	r0, r0
 8001378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800137c:	ea5f 0c01 	movs.w	ip, r1
 8001380:	bf02      	ittt	eq
 8001382:	4684      	moveq	ip, r0
 8001384:	4601      	moveq	r1, r0
 8001386:	2000      	moveq	r0, #0
 8001388:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800138c:	bf08      	it	eq
 800138e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8001392:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8001396:	fabc f28c 	clz	r2, ip
 800139a:	3a08      	subs	r2, #8
 800139c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80013a0:	db10      	blt.n	80013c4 <__aeabi_l2f+0x5c>
 80013a2:	fa01 fc02 	lsl.w	ip, r1, r2
 80013a6:	4463      	add	r3, ip
 80013a8:	fa00 fc02 	lsl.w	ip, r0, r2
 80013ac:	f1c2 0220 	rsb	r2, r2, #32
 80013b0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80013b4:	fa20 f202 	lsr.w	r2, r0, r2
 80013b8:	eb43 0002 	adc.w	r0, r3, r2
 80013bc:	bf08      	it	eq
 80013be:	f020 0001 	biceq.w	r0, r0, #1
 80013c2:	4770      	bx	lr
 80013c4:	f102 0220 	add.w	r2, r2, #32
 80013c8:	fa01 fc02 	lsl.w	ip, r1, r2
 80013cc:	f1c2 0220 	rsb	r2, r2, #32
 80013d0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80013d4:	fa21 f202 	lsr.w	r2, r1, r2
 80013d8:	eb43 0002 	adc.w	r0, r3, r2
 80013dc:	bf08      	it	eq
 80013de:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80013e2:	4770      	bx	lr

080013e4 <__gesf2>:
 80013e4:	f04f 3cff 	mov.w	ip, #4294967295
 80013e8:	e006      	b.n	80013f8 <__cmpsf2+0x4>
 80013ea:	bf00      	nop

080013ec <__lesf2>:
 80013ec:	f04f 0c01 	mov.w	ip, #1
 80013f0:	e002      	b.n	80013f8 <__cmpsf2+0x4>
 80013f2:	bf00      	nop

080013f4 <__cmpsf2>:
 80013f4:	f04f 0c01 	mov.w	ip, #1
 80013f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80013fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001400:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001404:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001408:	bf18      	it	ne
 800140a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800140e:	d011      	beq.n	8001434 <__cmpsf2+0x40>
 8001410:	b001      	add	sp, #4
 8001412:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001416:	bf18      	it	ne
 8001418:	ea90 0f01 	teqne	r0, r1
 800141c:	bf58      	it	pl
 800141e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001422:	bf88      	it	hi
 8001424:	17c8      	asrhi	r0, r1, #31
 8001426:	bf38      	it	cc
 8001428:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800142c:	bf18      	it	ne
 800142e:	f040 0001 	orrne.w	r0, r0, #1
 8001432:	4770      	bx	lr
 8001434:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001438:	d102      	bne.n	8001440 <__cmpsf2+0x4c>
 800143a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800143e:	d105      	bne.n	800144c <__cmpsf2+0x58>
 8001440:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001444:	d1e4      	bne.n	8001410 <__cmpsf2+0x1c>
 8001446:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800144a:	d0e1      	beq.n	8001410 <__cmpsf2+0x1c>
 800144c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop

08001454 <__aeabi_cfrcmple>:
 8001454:	4684      	mov	ip, r0
 8001456:	4608      	mov	r0, r1
 8001458:	4661      	mov	r1, ip
 800145a:	e7ff      	b.n	800145c <__aeabi_cfcmpeq>

0800145c <__aeabi_cfcmpeq>:
 800145c:	b50f      	push	{r0, r1, r2, r3, lr}
 800145e:	f7ff ffc9 	bl	80013f4 <__cmpsf2>
 8001462:	2800      	cmp	r0, #0
 8001464:	bf48      	it	mi
 8001466:	f110 0f00 	cmnmi.w	r0, #0
 800146a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800146c <__aeabi_fcmpeq>:
 800146c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001470:	f7ff fff4 	bl	800145c <__aeabi_cfcmpeq>
 8001474:	bf0c      	ite	eq
 8001476:	2001      	moveq	r0, #1
 8001478:	2000      	movne	r0, #0
 800147a:	f85d fb08 	ldr.w	pc, [sp], #8
 800147e:	bf00      	nop

08001480 <__aeabi_fcmplt>:
 8001480:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001484:	f7ff ffea 	bl	800145c <__aeabi_cfcmpeq>
 8001488:	bf34      	ite	cc
 800148a:	2001      	movcc	r0, #1
 800148c:	2000      	movcs	r0, #0
 800148e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001492:	bf00      	nop

08001494 <__aeabi_fcmple>:
 8001494:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001498:	f7ff ffe0 	bl	800145c <__aeabi_cfcmpeq>
 800149c:	bf94      	ite	ls
 800149e:	2001      	movls	r0, #1
 80014a0:	2000      	movhi	r0, #0
 80014a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80014a6:	bf00      	nop

080014a8 <__aeabi_fcmpge>:
 80014a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80014ac:	f7ff ffd2 	bl	8001454 <__aeabi_cfrcmple>
 80014b0:	bf94      	ite	ls
 80014b2:	2001      	movls	r0, #1
 80014b4:	2000      	movhi	r0, #0
 80014b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80014ba:	bf00      	nop

080014bc <__aeabi_fcmpgt>:
 80014bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80014c0:	f7ff ffc8 	bl	8001454 <__aeabi_cfrcmple>
 80014c4:	bf34      	ite	cc
 80014c6:	2001      	movcc	r0, #1
 80014c8:	2000      	movcs	r0, #0
 80014ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80014ce:	bf00      	nop

080014d0 <malloc>:
 80014d0:	4b02      	ldr	r3, [pc, #8]	@ (80014dc <malloc+0xc>)
 80014d2:	4601      	mov	r1, r0
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	f000 b82f 	b.w	8001538 <_malloc_r>
 80014da:	bf00      	nop
 80014dc:	2000000c 	.word	0x2000000c

080014e0 <free>:
 80014e0:	4b02      	ldr	r3, [pc, #8]	@ (80014ec <free+0xc>)
 80014e2:	4601      	mov	r1, r0
 80014e4:	6818      	ldr	r0, [r3, #0]
 80014e6:	f000 bcef 	b.w	8001ec8 <_free_r>
 80014ea:	bf00      	nop
 80014ec:	2000000c 	.word	0x2000000c

080014f0 <sbrk_aligned>:
 80014f0:	b570      	push	{r4, r5, r6, lr}
 80014f2:	4e10      	ldr	r6, [pc, #64]	@ (8001534 <sbrk_aligned+0x44>)
 80014f4:	6833      	ldr	r3, [r6, #0]
 80014f6:	4605      	mov	r5, r0
 80014f8:	460c      	mov	r4, r1
 80014fa:	b1b3      	cbz	r3, 800152a <sbrk_aligned+0x3a>
 80014fc:	4621      	mov	r1, r4
 80014fe:	4628      	mov	r0, r5
 8001500:	f000 fbb8 	bl	8001c74 <_sbrk_r>
 8001504:	1c43      	adds	r3, r0, #1
 8001506:	d00c      	beq.n	8001522 <sbrk_aligned+0x32>
 8001508:	1cc4      	adds	r4, r0, #3
 800150a:	f024 0403 	bic.w	r4, r4, #3
 800150e:	42a0      	cmp	r0, r4
 8001510:	d005      	beq.n	800151e <sbrk_aligned+0x2e>
 8001512:	1a21      	subs	r1, r4, r0
 8001514:	4628      	mov	r0, r5
 8001516:	f000 fbad 	bl	8001c74 <_sbrk_r>
 800151a:	3001      	adds	r0, #1
 800151c:	d001      	beq.n	8001522 <sbrk_aligned+0x32>
 800151e:	4620      	mov	r0, r4
 8001520:	bd70      	pop	{r4, r5, r6, pc}
 8001522:	f04f 34ff 	mov.w	r4, #4294967295
 8001526:	4620      	mov	r0, r4
 8001528:	bd70      	pop	{r4, r5, r6, pc}
 800152a:	4619      	mov	r1, r3
 800152c:	f000 fba2 	bl	8001c74 <_sbrk_r>
 8001530:	6030      	str	r0, [r6, #0]
 8001532:	e7e3      	b.n	80014fc <sbrk_aligned+0xc>
 8001534:	2000019c 	.word	0x2000019c

08001538 <_malloc_r>:
 8001538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800153c:	1ccd      	adds	r5, r1, #3
 800153e:	f025 0503 	bic.w	r5, r5, #3
 8001542:	3508      	adds	r5, #8
 8001544:	2d0c      	cmp	r5, #12
 8001546:	bf38      	it	cc
 8001548:	250c      	movcc	r5, #12
 800154a:	2d00      	cmp	r5, #0
 800154c:	b082      	sub	sp, #8
 800154e:	4606      	mov	r6, r0
 8001550:	db16      	blt.n	8001580 <_malloc_r+0x48>
 8001552:	42a9      	cmp	r1, r5
 8001554:	d814      	bhi.n	8001580 <_malloc_r+0x48>
 8001556:	4f35      	ldr	r7, [pc, #212]	@ (800162c <_malloc_r+0xf4>)
 8001558:	f000 f86a 	bl	8001630 <__malloc_lock>
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	b1aa      	cbz	r2, 800158c <_malloc_r+0x54>
 8001560:	4614      	mov	r4, r2
 8001562:	e003      	b.n	800156c <_malloc_r+0x34>
 8001564:	6863      	ldr	r3, [r4, #4]
 8001566:	4622      	mov	r2, r4
 8001568:	b183      	cbz	r3, 800158c <_malloc_r+0x54>
 800156a:	461c      	mov	r4, r3
 800156c:	6823      	ldr	r3, [r4, #0]
 800156e:	1b5b      	subs	r3, r3, r5
 8001570:	d4f8      	bmi.n	8001564 <_malloc_r+0x2c>
 8001572:	2b0b      	cmp	r3, #11
 8001574:	d821      	bhi.n	80015ba <_malloc_r+0x82>
 8001576:	42a2      	cmp	r2, r4
 8001578:	6863      	ldr	r3, [r4, #4]
 800157a:	d055      	beq.n	8001628 <_malloc_r+0xf0>
 800157c:	6053      	str	r3, [r2, #4]
 800157e:	e00d      	b.n	800159c <_malloc_r+0x64>
 8001580:	230c      	movs	r3, #12
 8001582:	6033      	str	r3, [r6, #0]
 8001584:	2000      	movs	r0, #0
 8001586:	b002      	add	sp, #8
 8001588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800158c:	4629      	mov	r1, r5
 800158e:	4630      	mov	r0, r6
 8001590:	f7ff ffae 	bl	80014f0 <sbrk_aligned>
 8001594:	1c43      	adds	r3, r0, #1
 8001596:	4604      	mov	r4, r0
 8001598:	d019      	beq.n	80015ce <_malloc_r+0x96>
 800159a:	6005      	str	r5, [r0, #0]
 800159c:	4630      	mov	r0, r6
 800159e:	f000 f84d 	bl	800163c <__malloc_unlock>
 80015a2:	f104 000b 	add.w	r0, r4, #11
 80015a6:	1d23      	adds	r3, r4, #4
 80015a8:	f020 0007 	bic.w	r0, r0, #7
 80015ac:	1ac2      	subs	r2, r0, r3
 80015ae:	bf1c      	itt	ne
 80015b0:	1a1b      	subne	r3, r3, r0
 80015b2:	50a3      	strne	r3, [r4, r2]
 80015b4:	b002      	add	sp, #8
 80015b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015ba:	1961      	adds	r1, r4, r5
 80015bc:	42a2      	cmp	r2, r4
 80015be:	6025      	str	r5, [r4, #0]
 80015c0:	bf14      	ite	ne
 80015c2:	6051      	strne	r1, [r2, #4]
 80015c4:	6079      	streq	r1, [r7, #4]
 80015c6:	5163      	str	r3, [r4, r5]
 80015c8:	6863      	ldr	r3, [r4, #4]
 80015ca:	604b      	str	r3, [r1, #4]
 80015cc:	e7e6      	b.n	800159c <_malloc_r+0x64>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	b323      	cbz	r3, 800161c <_malloc_r+0xe4>
 80015d2:	461c      	mov	r4, r3
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1fb      	bne.n	80015d2 <_malloc_r+0x9a>
 80015da:	6822      	ldr	r2, [r4, #0]
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	4619      	mov	r1, r3
 80015e0:	4630      	mov	r0, r6
 80015e2:	eb04 0802 	add.w	r8, r4, r2
 80015e6:	f000 fb45 	bl	8001c74 <_sbrk_r>
 80015ea:	4580      	cmp	r8, r0
 80015ec:	d116      	bne.n	800161c <_malloc_r+0xe4>
 80015ee:	6822      	ldr	r2, [r4, #0]
 80015f0:	1aad      	subs	r5, r5, r2
 80015f2:	4629      	mov	r1, r5
 80015f4:	4630      	mov	r0, r6
 80015f6:	f7ff ff7b 	bl	80014f0 <sbrk_aligned>
 80015fa:	3001      	adds	r0, #1
 80015fc:	d00e      	beq.n	800161c <_malloc_r+0xe4>
 80015fe:	6822      	ldr	r2, [r4, #0]
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	9b01      	ldr	r3, [sp, #4]
 8001604:	442a      	add	r2, r5
 8001606:	6022      	str	r2, [r4, #0]
 8001608:	6842      	ldr	r2, [r0, #4]
 800160a:	b912      	cbnz	r2, 8001612 <_malloc_r+0xda>
 800160c:	e00c      	b.n	8001628 <_malloc_r+0xf0>
 800160e:	4610      	mov	r0, r2
 8001610:	6852      	ldr	r2, [r2, #4]
 8001612:	42a2      	cmp	r2, r4
 8001614:	d1fb      	bne.n	800160e <_malloc_r+0xd6>
 8001616:	2300      	movs	r3, #0
 8001618:	6043      	str	r3, [r0, #4]
 800161a:	e7bf      	b.n	800159c <_malloc_r+0x64>
 800161c:	230c      	movs	r3, #12
 800161e:	6033      	str	r3, [r6, #0]
 8001620:	4630      	mov	r0, r6
 8001622:	f000 f80b 	bl	800163c <__malloc_unlock>
 8001626:	e7ad      	b.n	8001584 <_malloc_r+0x4c>
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	e7b7      	b.n	800159c <_malloc_r+0x64>
 800162c:	2000019c 	.word	0x2000019c

08001630 <__malloc_lock>:
 8001630:	4801      	ldr	r0, [pc, #4]	@ (8001638 <__malloc_lock+0x8>)
 8001632:	f000 bb7f 	b.w	8001d34 <__retarget_lock_acquire_recursive>
 8001636:	bf00      	nop
 8001638:	200002f4 	.word	0x200002f4

0800163c <__malloc_unlock>:
 800163c:	4801      	ldr	r0, [pc, #4]	@ (8001644 <__malloc_unlock+0x8>)
 800163e:	f000 bb81 	b.w	8001d44 <__retarget_lock_release_recursive>
 8001642:	bf00      	nop
 8001644:	200002f4 	.word	0x200002f4

08001648 <srand>:
 8001648:	b538      	push	{r3, r4, r5, lr}
 800164a:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <srand+0x4c>)
 800164c:	681d      	ldr	r5, [r3, #0]
 800164e:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8001650:	4604      	mov	r4, r0
 8001652:	b11a      	cbz	r2, 800165c <srand+0x14>
 8001654:	2300      	movs	r3, #0
 8001656:	e9c2 4304 	strd	r4, r3, [r2, #16]
 800165a:	bd38      	pop	{r3, r4, r5, pc}
 800165c:	2018      	movs	r0, #24
 800165e:	f7ff ff37 	bl	80014d0 <malloc>
 8001662:	4602      	mov	r2, r0
 8001664:	6328      	str	r0, [r5, #48]	@ 0x30
 8001666:	b178      	cbz	r0, 8001688 <srand+0x40>
 8001668:	2001      	movs	r0, #1
 800166a:	2100      	movs	r1, #0
 800166c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001670:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <srand+0x50>)
 8001672:	480a      	ldr	r0, [pc, #40]	@ (800169c <srand+0x54>)
 8001674:	490a      	ldr	r1, [pc, #40]	@ (80016a0 <srand+0x58>)
 8001676:	6091      	str	r1, [r2, #8]
 8001678:	e9c2 0300 	strd	r0, r3, [r2]
 800167c:	230b      	movs	r3, #11
 800167e:	8193      	strh	r3, [r2, #12]
 8001680:	2300      	movs	r3, #0
 8001682:	e9c2 4304 	strd	r4, r3, [r2, #16]
 8001686:	bd38      	pop	{r3, r4, r5, pc}
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <srand+0x5c>)
 800168a:	4807      	ldr	r0, [pc, #28]	@ (80016a8 <srand+0x60>)
 800168c:	2146      	movs	r1, #70	@ 0x46
 800168e:	f000 fbf5 	bl	8001e7c <__assert_func>
 8001692:	bf00      	nop
 8001694:	2000000c 	.word	0x2000000c
 8001698:	e66d1234 	.word	0xe66d1234
 800169c:	abcd330e 	.word	0xabcd330e
 80016a0:	0005deec 	.word	0x0005deec
 80016a4:	080048e0 	.word	0x080048e0
 80016a8:	080048f8 	.word	0x080048f8

080016ac <rand>:
 80016ac:	b538      	push	{r3, r4, r5, lr}
 80016ae:	4b19      	ldr	r3, [pc, #100]	@ (8001714 <rand+0x68>)
 80016b0:	681c      	ldr	r4, [r3, #0]
 80016b2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80016b4:	b18a      	cbz	r2, 80016da <rand+0x2e>
 80016b6:	6913      	ldr	r3, [r2, #16]
 80016b8:	4917      	ldr	r1, [pc, #92]	@ (8001718 <rand+0x6c>)
 80016ba:	6954      	ldr	r4, [r2, #20]
 80016bc:	4817      	ldr	r0, [pc, #92]	@ (800171c <rand+0x70>)
 80016be:	fb03 f101 	mul.w	r1, r3, r1
 80016c2:	fb00 1104 	mla	r1, r0, r4, r1
 80016c6:	fba3 3000 	umull	r3, r0, r3, r0
 80016ca:	3301      	adds	r3, #1
 80016cc:	eb41 0100 	adc.w	r1, r1, r0
 80016d0:	e9c2 3104 	strd	r3, r1, [r2, #16]
 80016d4:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 80016d8:	bd38      	pop	{r3, r4, r5, pc}
 80016da:	2018      	movs	r0, #24
 80016dc:	f7ff fef8 	bl	80014d0 <malloc>
 80016e0:	4602      	mov	r2, r0
 80016e2:	6320      	str	r0, [r4, #48]	@ 0x30
 80016e4:	b188      	cbz	r0, 800170a <rand+0x5e>
 80016e6:	2401      	movs	r4, #1
 80016e8:	2500      	movs	r5, #0
 80016ea:	e9c2 4504 	strd	r4, r5, [r2, #16]
 80016ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001720 <rand+0x74>)
 80016f0:	4c0c      	ldr	r4, [pc, #48]	@ (8001724 <rand+0x78>)
 80016f2:	4809      	ldr	r0, [pc, #36]	@ (8001718 <rand+0x6c>)
 80016f4:	490c      	ldr	r1, [pc, #48]	@ (8001728 <rand+0x7c>)
 80016f6:	6091      	str	r1, [r2, #8]
 80016f8:	e9c2 4300 	strd	r4, r3, [r2]
 80016fc:	230b      	movs	r3, #11
 80016fe:	8193      	strh	r3, [r2, #12]
 8001700:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <rand+0x80>)
 8001702:	4601      	mov	r1, r0
 8001704:	e9c2 3104 	strd	r3, r1, [r2, #16]
 8001708:	bd38      	pop	{r3, r4, r5, pc}
 800170a:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <rand+0x84>)
 800170c:	4809      	ldr	r0, [pc, #36]	@ (8001734 <rand+0x88>)
 800170e:	2152      	movs	r1, #82	@ 0x52
 8001710:	f000 fbb4 	bl	8001e7c <__assert_func>
 8001714:	2000000c 	.word	0x2000000c
 8001718:	5851f42d 	.word	0x5851f42d
 800171c:	4c957f2d 	.word	0x4c957f2d
 8001720:	e66d1234 	.word	0xe66d1234
 8001724:	abcd330e 	.word	0xabcd330e
 8001728:	0005deec 	.word	0x0005deec
 800172c:	4c957f2e 	.word	0x4c957f2e
 8001730:	080048e0 	.word	0x080048e0
 8001734:	080048f8 	.word	0x080048f8

08001738 <stdio_exit_handler>:
 8001738:	4a02      	ldr	r2, [pc, #8]	@ (8001744 <stdio_exit_handler+0xc>)
 800173a:	4903      	ldr	r1, [pc, #12]	@ (8001748 <stdio_exit_handler+0x10>)
 800173c:	4803      	ldr	r0, [pc, #12]	@ (800174c <stdio_exit_handler+0x14>)
 800173e:	f000 b969 	b.w	8001a14 <_fwalk_sglue>
 8001742:	bf00      	nop
 8001744:	20000000 	.word	0x20000000
 8001748:	08002095 	.word	0x08002095
 800174c:	20000010 	.word	0x20000010

08001750 <cleanup_stdio>:
 8001750:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <cleanup_stdio+0x34>)
 8001752:	6841      	ldr	r1, [r0, #4]
 8001754:	4299      	cmp	r1, r3
 8001756:	b510      	push	{r4, lr}
 8001758:	4604      	mov	r4, r0
 800175a:	d001      	beq.n	8001760 <cleanup_stdio+0x10>
 800175c:	f000 fc9a 	bl	8002094 <_fflush_r>
 8001760:	68a1      	ldr	r1, [r4, #8]
 8001762:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <cleanup_stdio+0x38>)
 8001764:	4299      	cmp	r1, r3
 8001766:	d002      	beq.n	800176e <cleanup_stdio+0x1e>
 8001768:	4620      	mov	r0, r4
 800176a:	f000 fc93 	bl	8002094 <_fflush_r>
 800176e:	68e1      	ldr	r1, [r4, #12]
 8001770:	4b06      	ldr	r3, [pc, #24]	@ (800178c <cleanup_stdio+0x3c>)
 8001772:	4299      	cmp	r1, r3
 8001774:	d004      	beq.n	8001780 <cleanup_stdio+0x30>
 8001776:	4620      	mov	r0, r4
 8001778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800177c:	f000 bc8a 	b.w	8002094 <_fflush_r>
 8001780:	bd10      	pop	{r4, pc}
 8001782:	bf00      	nop
 8001784:	200001a4 	.word	0x200001a4
 8001788:	2000020c 	.word	0x2000020c
 800178c:	20000274 	.word	0x20000274

08001790 <__fp_lock>:
 8001790:	b508      	push	{r3, lr}
 8001792:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8001794:	07da      	lsls	r2, r3, #31
 8001796:	d402      	bmi.n	800179e <__fp_lock+0xe>
 8001798:	898b      	ldrh	r3, [r1, #12]
 800179a:	059b      	lsls	r3, r3, #22
 800179c:	d501      	bpl.n	80017a2 <__fp_lock+0x12>
 800179e:	2000      	movs	r0, #0
 80017a0:	bd08      	pop	{r3, pc}
 80017a2:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 80017a4:	f000 fac6 	bl	8001d34 <__retarget_lock_acquire_recursive>
 80017a8:	2000      	movs	r0, #0
 80017aa:	bd08      	pop	{r3, pc}

080017ac <__fp_unlock>:
 80017ac:	b508      	push	{r3, lr}
 80017ae:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80017b0:	07da      	lsls	r2, r3, #31
 80017b2:	d402      	bmi.n	80017ba <__fp_unlock+0xe>
 80017b4:	898b      	ldrh	r3, [r1, #12]
 80017b6:	059b      	lsls	r3, r3, #22
 80017b8:	d501      	bpl.n	80017be <__fp_unlock+0x12>
 80017ba:	2000      	movs	r0, #0
 80017bc:	bd08      	pop	{r3, pc}
 80017be:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 80017c0:	f000 fac0 	bl	8001d44 <__retarget_lock_release_recursive>
 80017c4:	2000      	movs	r0, #0
 80017c6:	bd08      	pop	{r3, pc}

080017c8 <global_stdio_init.part.0>:
 80017c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017cc:	4c31      	ldr	r4, [pc, #196]	@ (8001894 <global_stdio_init.part.0+0xcc>)
 80017ce:	4b32      	ldr	r3, [pc, #200]	@ (8001898 <global_stdio_init.part.0+0xd0>)
 80017d0:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 800189c <global_stdio_init.part.0+0xd4>
 80017d4:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 80018a0 <global_stdio_init.part.0+0xd8>
 80017d8:	4f32      	ldr	r7, [pc, #200]	@ (80018a4 <global_stdio_init.part.0+0xdc>)
 80017da:	f8c4 3138 	str.w	r3, [r4, #312]	@ 0x138
 80017de:	2500      	movs	r5, #0
 80017e0:	4629      	mov	r1, r5
 80017e2:	2304      	movs	r3, #4
 80017e4:	2208      	movs	r2, #8
 80017e6:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 80017ea:	4e2f      	ldr	r6, [pc, #188]	@ (80018a8 <global_stdio_init.part.0+0xe0>)
 80017ec:	60e3      	str	r3, [r4, #12]
 80017ee:	e9c4 5500 	strd	r5, r5, [r4]
 80017f2:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80017f6:	60a5      	str	r5, [r4, #8]
 80017f8:	6665      	str	r5, [r4, #100]	@ 0x64
 80017fa:	61a5      	str	r5, [r4, #24]
 80017fc:	f000 f978 	bl	8001af0 <memset>
 8001800:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001804:	e9c4 4908 	strd	r4, r9, [r4, #32]
 8001808:	e9c4 870a 	strd	r8, r7, [r4, #40]	@ 0x28
 800180c:	6326      	str	r6, [r4, #48]	@ 0x30
 800180e:	f000 fa89 	bl	8001d24 <__retarget_lock_init_recursive>
 8001812:	4629      	mov	r1, r5
 8001814:	4b25      	ldr	r3, [pc, #148]	@ (80018ac <global_stdio_init.part.0+0xe4>)
 8001816:	6763      	str	r3, [r4, #116]	@ 0x74
 8001818:	2208      	movs	r2, #8
 800181a:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4
 800181e:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 8001822:	e9c4 551e 	strd	r5, r5, [r4, #120]	@ 0x78
 8001826:	6725      	str	r5, [r4, #112]	@ 0x70
 8001828:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
 800182c:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
 8001830:	f000 f95e 	bl	8001af0 <memset>
 8001834:	f104 0368 	add.w	r3, r4, #104	@ 0x68
 8001838:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 800183c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 8001840:	e9c4 9823 	strd	r9, r8, [r4, #140]	@ 0x8c
 8001844:	e9c4 7625 	strd	r7, r6, [r4, #148]	@ 0x94
 8001848:	f000 fa6c 	bl	8001d24 <__retarget_lock_init_recursive>
 800184c:	4b18      	ldr	r3, [pc, #96]	@ (80018b0 <global_stdio_init.part.0+0xe8>)
 800184e:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
 8001852:	4629      	mov	r1, r5
 8001854:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
 8001858:	2208      	movs	r2, #8
 800185a:	e9c4 5534 	strd	r5, r5, [r4, #208]	@ 0xd0
 800185e:	e9c4 5538 	strd	r5, r5, [r4, #224]	@ 0xe0
 8001862:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
 8001866:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 800186a:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
 800186e:	f000 f93f 	bl	8001af0 <memset>
 8001872:	f104 03d0 	add.w	r3, r4, #208	@ 0xd0
 8001876:	e9c4 873e 	strd	r8, r7, [r4, #248]	@ 0xf8
 800187a:	f8c4 90f4 	str.w	r9, [r4, #244]	@ 0xf4
 800187e:	f504 7094 	add.w	r0, r4, #296	@ 0x128
 8001882:	f8c4 6100 	str.w	r6, [r4, #256]	@ 0x100
 8001886:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
 800188a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800188e:	f000 ba49 	b.w	8001d24 <__retarget_lock_init_recursive>
 8001892:	bf00      	nop
 8001894:	200001a4 	.word	0x200001a4
 8001898:	08001739 	.word	0x08001739
 800189c:	08001a5d 	.word	0x08001a5d
 80018a0:	08001a85 	.word	0x08001a85
 80018a4:	08001ac5 	.word	0x08001ac5
 80018a8:	08001ae9 	.word	0x08001ae9
 80018ac:	00010009 	.word	0x00010009
 80018b0:	00020012 	.word	0x00020012

080018b4 <__sfp>:
 80018b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018b6:	4606      	mov	r6, r0
 80018b8:	482a      	ldr	r0, [pc, #168]	@ (8001964 <__sfp+0xb0>)
 80018ba:	f000 fa3b 	bl	8001d34 <__retarget_lock_acquire_recursive>
 80018be:	4b2a      	ldr	r3, [pc, #168]	@ (8001968 <__sfp+0xb4>)
 80018c0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d043      	beq.n	8001950 <__sfp+0x9c>
 80018c8:	4f28      	ldr	r7, [pc, #160]	@ (800196c <__sfp+0xb8>)
 80018ca:	e9d7 3401 	ldrd	r3, r4, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	d504      	bpl.n	80018dc <__sfp+0x28>
 80018d2:	e024      	b.n	800191e <__sfp+0x6a>
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	f104 0468 	add.w	r4, r4, #104	@ 0x68
 80018da:	d020      	beq.n	800191e <__sfp+0x6a>
 80018dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	2d00      	cmp	r5, #0
 80018e4:	d1f6      	bne.n	80018d4 <__sfp+0x20>
 80018e6:	4b22      	ldr	r3, [pc, #136]	@ (8001970 <__sfp+0xbc>)
 80018e8:	60e3      	str	r3, [r4, #12]
 80018ea:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80018ee:	6665      	str	r5, [r4, #100]	@ 0x64
 80018f0:	f000 fa18 	bl	8001d24 <__retarget_lock_init_recursive>
 80018f4:	481b      	ldr	r0, [pc, #108]	@ (8001964 <__sfp+0xb0>)
 80018f6:	f000 fa25 	bl	8001d44 <__retarget_lock_release_recursive>
 80018fa:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80018fe:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001902:	6025      	str	r5, [r4, #0]
 8001904:	61a5      	str	r5, [r4, #24]
 8001906:	2208      	movs	r2, #8
 8001908:	4629      	mov	r1, r5
 800190a:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 800190e:	f000 f8ef 	bl	8001af0 <memset>
 8001912:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8001916:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 800191a:	4620      	mov	r0, r4
 800191c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800191e:	683d      	ldr	r5, [r7, #0]
 8001920:	b10d      	cbz	r5, 8001926 <__sfp+0x72>
 8001922:	462f      	mov	r7, r5
 8001924:	e7d1      	b.n	80018ca <__sfp+0x16>
 8001926:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800192a:	4630      	mov	r0, r6
 800192c:	f7ff fe04 	bl	8001538 <_malloc_r>
 8001930:	4604      	mov	r4, r0
 8001932:	b180      	cbz	r0, 8001956 <__sfp+0xa2>
 8001934:	2304      	movs	r3, #4
 8001936:	6005      	str	r5, [r0, #0]
 8001938:	6043      	str	r3, [r0, #4]
 800193a:	300c      	adds	r0, #12
 800193c:	4629      	mov	r1, r5
 800193e:	60a0      	str	r0, [r4, #8]
 8001940:	4625      	mov	r5, r4
 8001942:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8001946:	f000 f8d3 	bl	8001af0 <memset>
 800194a:	603c      	str	r4, [r7, #0]
 800194c:	462f      	mov	r7, r5
 800194e:	e7bc      	b.n	80018ca <__sfp+0x16>
 8001950:	f7ff ff3a 	bl	80017c8 <global_stdio_init.part.0>
 8001954:	e7b8      	b.n	80018c8 <__sfp+0x14>
 8001956:	4803      	ldr	r0, [pc, #12]	@ (8001964 <__sfp+0xb0>)
 8001958:	603c      	str	r4, [r7, #0]
 800195a:	f000 f9f3 	bl	8001d44 <__retarget_lock_release_recursive>
 800195e:	230c      	movs	r3, #12
 8001960:	6033      	str	r3, [r6, #0]
 8001962:	e7da      	b.n	800191a <__sfp+0x66>
 8001964:	20000300 	.word	0x20000300
 8001968:	200001a4 	.word	0x200001a4
 800196c:	20000000 	.word	0x20000000
 8001970:	ffff0001 	.word	0xffff0001

08001974 <__sinit>:
 8001974:	b510      	push	{r4, lr}
 8001976:	4604      	mov	r4, r0
 8001978:	480b      	ldr	r0, [pc, #44]	@ (80019a8 <__sinit+0x34>)
 800197a:	f000 f9db 	bl	8001d34 <__retarget_lock_acquire_recursive>
 800197e:	6a23      	ldr	r3, [r4, #32]
 8001980:	b92b      	cbnz	r3, 800198e <__sinit+0x1a>
 8001982:	4b0a      	ldr	r3, [pc, #40]	@ (80019ac <__sinit+0x38>)
 8001984:	4a0a      	ldr	r2, [pc, #40]	@ (80019b0 <__sinit+0x3c>)
 8001986:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800198a:	6222      	str	r2, [r4, #32]
 800198c:	b123      	cbz	r3, 8001998 <__sinit+0x24>
 800198e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001992:	4805      	ldr	r0, [pc, #20]	@ (80019a8 <__sinit+0x34>)
 8001994:	f000 b9d6 	b.w	8001d44 <__retarget_lock_release_recursive>
 8001998:	f7ff ff16 	bl	80017c8 <global_stdio_init.part.0>
 800199c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019a0:	4801      	ldr	r0, [pc, #4]	@ (80019a8 <__sinit+0x34>)
 80019a2:	f000 b9cf 	b.w	8001d44 <__retarget_lock_release_recursive>
 80019a6:	bf00      	nop
 80019a8:	20000300 	.word	0x20000300
 80019ac:	200001a4 	.word	0x200001a4
 80019b0:	08001751 	.word	0x08001751

080019b4 <__sfp_lock_acquire>:
 80019b4:	4801      	ldr	r0, [pc, #4]	@ (80019bc <__sfp_lock_acquire+0x8>)
 80019b6:	f000 b9bd 	b.w	8001d34 <__retarget_lock_acquire_recursive>
 80019ba:	bf00      	nop
 80019bc:	20000300 	.word	0x20000300

080019c0 <__sfp_lock_release>:
 80019c0:	4801      	ldr	r0, [pc, #4]	@ (80019c8 <__sfp_lock_release+0x8>)
 80019c2:	f000 b9bf 	b.w	8001d44 <__retarget_lock_release_recursive>
 80019c6:	bf00      	nop
 80019c8:	20000300 	.word	0x20000300

080019cc <__fp_lock_all>:
 80019cc:	b508      	push	{r3, lr}
 80019ce:	4805      	ldr	r0, [pc, #20]	@ (80019e4 <__fp_lock_all+0x18>)
 80019d0:	f000 f9b0 	bl	8001d34 <__retarget_lock_acquire_recursive>
 80019d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80019d8:	4a03      	ldr	r2, [pc, #12]	@ (80019e8 <__fp_lock_all+0x1c>)
 80019da:	4904      	ldr	r1, [pc, #16]	@ (80019ec <__fp_lock_all+0x20>)
 80019dc:	2000      	movs	r0, #0
 80019de:	f000 b819 	b.w	8001a14 <_fwalk_sglue>
 80019e2:	bf00      	nop
 80019e4:	20000300 	.word	0x20000300
 80019e8:	20000000 	.word	0x20000000
 80019ec:	08001791 	.word	0x08001791

080019f0 <__fp_unlock_all>:
 80019f0:	b508      	push	{r3, lr}
 80019f2:	4a05      	ldr	r2, [pc, #20]	@ (8001a08 <__fp_unlock_all+0x18>)
 80019f4:	4905      	ldr	r1, [pc, #20]	@ (8001a0c <__fp_unlock_all+0x1c>)
 80019f6:	2000      	movs	r0, #0
 80019f8:	f000 f80c 	bl	8001a14 <_fwalk_sglue>
 80019fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001a00:	4803      	ldr	r0, [pc, #12]	@ (8001a10 <__fp_unlock_all+0x20>)
 8001a02:	f000 b99f 	b.w	8001d44 <__retarget_lock_release_recursive>
 8001a06:	bf00      	nop
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	080017ad 	.word	0x080017ad
 8001a10:	20000300 	.word	0x20000300

08001a14 <_fwalk_sglue>:
 8001a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a18:	4680      	mov	r8, r0
 8001a1a:	460f      	mov	r7, r1
 8001a1c:	4616      	mov	r6, r2
 8001a1e:	f04f 0900 	mov.w	r9, #0
 8001a22:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 8001a26:	3d01      	subs	r5, #1
 8001a28:	d411      	bmi.n	8001a4e <_fwalk_sglue+0x3a>
 8001a2a:	89a3      	ldrh	r3, [r4, #12]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	f105 35ff 	add.w	r5, r5, #4294967295
 8001a32:	d908      	bls.n	8001a46 <_fwalk_sglue+0x32>
 8001a34:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	d003      	beq.n	8001a46 <_fwalk_sglue+0x32>
 8001a3e:	4640      	mov	r0, r8
 8001a40:	47b8      	blx	r7
 8001a42:	ea49 0900 	orr.w	r9, r9, r0
 8001a46:	1c6b      	adds	r3, r5, #1
 8001a48:	f104 0468 	add.w	r4, r4, #104	@ 0x68
 8001a4c:	d1ed      	bne.n	8001a2a <_fwalk_sglue+0x16>
 8001a4e:	6836      	ldr	r6, [r6, #0]
 8001a50:	2e00      	cmp	r6, #0
 8001a52:	d1e6      	bne.n	8001a22 <_fwalk_sglue+0xe>
 8001a54:	4648      	mov	r0, r9
 8001a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a5a:	bf00      	nop

08001a5c <__sread>:
 8001a5c:	b510      	push	{r4, lr}
 8001a5e:	460c      	mov	r4, r1
 8001a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a64:	f000 f8f0 	bl	8001c48 <_read_r>
 8001a68:	2800      	cmp	r0, #0
 8001a6a:	db03      	blt.n	8001a74 <__sread+0x18>
 8001a6c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001a6e:	4403      	add	r3, r0
 8001a70:	6563      	str	r3, [r4, #84]	@ 0x54
 8001a72:	bd10      	pop	{r4, pc}
 8001a74:	89a3      	ldrh	r3, [r4, #12]
 8001a76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a7a:	81a3      	strh	r3, [r4, #12]
 8001a7c:	bd10      	pop	{r4, pc}
 8001a7e:	bf00      	nop

08001a80 <__seofread>:
 8001a80:	2000      	movs	r0, #0
 8001a82:	4770      	bx	lr

08001a84 <__swrite>:
 8001a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a88:	460c      	mov	r4, r1
 8001a8a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 8001a8e:	461f      	mov	r7, r3
 8001a90:	05cb      	lsls	r3, r1, #23
 8001a92:	4605      	mov	r5, r0
 8001a94:	4616      	mov	r6, r2
 8001a96:	d40b      	bmi.n	8001ab0 <__swrite+0x2c>
 8001a98:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8001a9c:	81a1      	strh	r1, [r4, #12]
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001aa4:	4632      	mov	r2, r6
 8001aa6:	4628      	mov	r0, r5
 8001aa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001aac:	f000 b8f4 	b.w	8001c98 <_write_r>
 8001ab0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f000 f8b0 	bl	8001c1c <_lseek_r>
 8001abc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8001ac0:	e7ea      	b.n	8001a98 <__swrite+0x14>
 8001ac2:	bf00      	nop

08001ac4 <__sseek>:
 8001ac4:	b510      	push	{r4, lr}
 8001ac6:	460c      	mov	r4, r1
 8001ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001acc:	f000 f8a6 	bl	8001c1c <_lseek_r>
 8001ad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ad4:	1c42      	adds	r2, r0, #1
 8001ad6:	bf0e      	itee	eq
 8001ad8:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001adc:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001ae0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001ae2:	81a3      	strh	r3, [r4, #12]
 8001ae4:	bd10      	pop	{r4, pc}
 8001ae6:	bf00      	nop

08001ae8 <__sclose>:
 8001ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001aec:	f000 b86e 	b.w	8001bcc <_close_r>

08001af0 <memset>:
 8001af0:	0783      	lsls	r3, r0, #30
 8001af2:	b530      	push	{r4, r5, lr}
 8001af4:	d047      	beq.n	8001b86 <memset+0x96>
 8001af6:	1e54      	subs	r4, r2, #1
 8001af8:	2a00      	cmp	r2, #0
 8001afa:	d03e      	beq.n	8001b7a <memset+0x8a>
 8001afc:	b2ca      	uxtb	r2, r1
 8001afe:	4603      	mov	r3, r0
 8001b00:	e001      	b.n	8001b06 <memset+0x16>
 8001b02:	3c01      	subs	r4, #1
 8001b04:	d339      	bcc.n	8001b7a <memset+0x8a>
 8001b06:	f803 2b01 	strb.w	r2, [r3], #1
 8001b0a:	079d      	lsls	r5, r3, #30
 8001b0c:	d1f9      	bne.n	8001b02 <memset+0x12>
 8001b0e:	2c03      	cmp	r4, #3
 8001b10:	d92c      	bls.n	8001b6c <memset+0x7c>
 8001b12:	b2cd      	uxtb	r5, r1
 8001b14:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 8001b18:	2c0f      	cmp	r4, #15
 8001b1a:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 8001b1e:	d935      	bls.n	8001b8c <memset+0x9c>
 8001b20:	f1a4 0210 	sub.w	r2, r4, #16
 8001b24:	f022 0c0f 	bic.w	ip, r2, #15
 8001b28:	f103 0e10 	add.w	lr, r3, #16
 8001b2c:	44e6      	add	lr, ip
 8001b2e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 8001b32:	461a      	mov	r2, r3
 8001b34:	6015      	str	r5, [r2, #0]
 8001b36:	6055      	str	r5, [r2, #4]
 8001b38:	6095      	str	r5, [r2, #8]
 8001b3a:	60d5      	str	r5, [r2, #12]
 8001b3c:	3210      	adds	r2, #16
 8001b3e:	4572      	cmp	r2, lr
 8001b40:	d1f8      	bne.n	8001b34 <memset+0x44>
 8001b42:	f10c 0201 	add.w	r2, ip, #1
 8001b46:	f014 0f0c 	tst.w	r4, #12
 8001b4a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001b4e:	f004 0c0f 	and.w	ip, r4, #15
 8001b52:	d013      	beq.n	8001b7c <memset+0x8c>
 8001b54:	f1ac 0304 	sub.w	r3, ip, #4
 8001b58:	f023 0303 	bic.w	r3, r3, #3
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	4413      	add	r3, r2
 8001b60:	f842 5b04 	str.w	r5, [r2], #4
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d1fb      	bne.n	8001b60 <memset+0x70>
 8001b68:	f00c 0403 	and.w	r4, ip, #3
 8001b6c:	b12c      	cbz	r4, 8001b7a <memset+0x8a>
 8001b6e:	b2c9      	uxtb	r1, r1
 8001b70:	441c      	add	r4, r3
 8001b72:	f803 1b01 	strb.w	r1, [r3], #1
 8001b76:	429c      	cmp	r4, r3
 8001b78:	d1fb      	bne.n	8001b72 <memset+0x82>
 8001b7a:	bd30      	pop	{r4, r5, pc}
 8001b7c:	4664      	mov	r4, ip
 8001b7e:	4613      	mov	r3, r2
 8001b80:	2c00      	cmp	r4, #0
 8001b82:	d1f4      	bne.n	8001b6e <memset+0x7e>
 8001b84:	e7f9      	b.n	8001b7a <memset+0x8a>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4614      	mov	r4, r2
 8001b8a:	e7c0      	b.n	8001b0e <memset+0x1e>
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	46a4      	mov	ip, r4
 8001b90:	e7e0      	b.n	8001b54 <memset+0x64>
 8001b92:	bf00      	nop

08001b94 <time>:
 8001b94:	b570      	push	{r4, r5, r6, lr}
 8001b96:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc8 <time+0x34>)
 8001b98:	b084      	sub	sp, #16
 8001b9a:	f04f 36ff 	mov.w	r6, #4294967295
 8001b9e:	4669      	mov	r1, sp
 8001ba0:	4604      	mov	r4, r0
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	e9cd 6600 	strd	r6, r6, [sp]
 8001baa:	f000 f821 	bl	8001bf0 <_gettimeofday_r>
 8001bae:	2800      	cmp	r0, #0
 8001bb0:	bfb7      	itett	lt
 8001bb2:	4635      	movlt	r5, r6
 8001bb4:	e9dd 0100 	ldrdge	r0, r1, [sp]
 8001bb8:	4630      	movlt	r0, r6
 8001bba:	4629      	movlt	r1, r5
 8001bbc:	b10c      	cbz	r4, 8001bc2 <time+0x2e>
 8001bbe:	e9c4 0100 	strd	r0, r1, [r4]
 8001bc2:	b004      	add	sp, #16
 8001bc4:	bd70      	pop	{r4, r5, r6, pc}
 8001bc6:	bf00      	nop
 8001bc8:	2000000c 	.word	0x2000000c

08001bcc <_close_r>:
 8001bcc:	b538      	push	{r3, r4, r5, lr}
 8001bce:	4d07      	ldr	r5, [pc, #28]	@ (8001bec <_close_r+0x20>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	4604      	mov	r4, r0
 8001bd4:	4608      	mov	r0, r1
 8001bd6:	602a      	str	r2, [r5, #0]
 8001bd8:	f001 fb78 	bl	80032cc <_close>
 8001bdc:	1c43      	adds	r3, r0, #1
 8001bde:	d000      	beq.n	8001be2 <_close_r+0x16>
 8001be0:	bd38      	pop	{r3, r4, r5, pc}
 8001be2:	682b      	ldr	r3, [r5, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0fb      	beq.n	8001be0 <_close_r+0x14>
 8001be8:	6023      	str	r3, [r4, #0]
 8001bea:	bd38      	pop	{r3, r4, r5, pc}
 8001bec:	200002e0 	.word	0x200002e0

08001bf0 <_gettimeofday_r>:
 8001bf0:	b570      	push	{r4, r5, r6, lr}
 8001bf2:	460c      	mov	r4, r1
 8001bf4:	4d08      	ldr	r5, [pc, #32]	@ (8001c18 <_gettimeofday_r+0x28>)
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2600      	movs	r6, #0
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	461c      	mov	r4, r3
 8001c00:	602e      	str	r6, [r5, #0]
 8001c02:	f001 fb7b 	bl	80032fc <_gettimeofday>
 8001c06:	1c43      	adds	r3, r0, #1
 8001c08:	d000      	beq.n	8001c0c <_gettimeofday_r+0x1c>
 8001c0a:	bd70      	pop	{r4, r5, r6, pc}
 8001c0c:	682b      	ldr	r3, [r5, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0fb      	beq.n	8001c0a <_gettimeofday_r+0x1a>
 8001c12:	6023      	str	r3, [r4, #0]
 8001c14:	bd70      	pop	{r4, r5, r6, pc}
 8001c16:	bf00      	nop
 8001c18:	200002e0 	.word	0x200002e0

08001c1c <_lseek_r>:
 8001c1c:	b538      	push	{r3, r4, r5, lr}
 8001c1e:	460c      	mov	r4, r1
 8001c20:	4d08      	ldr	r5, [pc, #32]	@ (8001c44 <_lseek_r+0x28>)
 8001c22:	4684      	mov	ip, r0
 8001c24:	4611      	mov	r1, r2
 8001c26:	4620      	mov	r0, r4
 8001c28:	461a      	mov	r2, r3
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	602b      	str	r3, [r5, #0]
 8001c2e:	4664      	mov	r4, ip
 8001c30:	f001 fb7c 	bl	800332c <_lseek>
 8001c34:	1c43      	adds	r3, r0, #1
 8001c36:	d000      	beq.n	8001c3a <_lseek_r+0x1e>
 8001c38:	bd38      	pop	{r3, r4, r5, pc}
 8001c3a:	682b      	ldr	r3, [r5, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0fb      	beq.n	8001c38 <_lseek_r+0x1c>
 8001c40:	6023      	str	r3, [r4, #0]
 8001c42:	bd38      	pop	{r3, r4, r5, pc}
 8001c44:	200002e0 	.word	0x200002e0

08001c48 <_read_r>:
 8001c48:	b538      	push	{r3, r4, r5, lr}
 8001c4a:	460c      	mov	r4, r1
 8001c4c:	4d08      	ldr	r5, [pc, #32]	@ (8001c70 <_read_r+0x28>)
 8001c4e:	4684      	mov	ip, r0
 8001c50:	4611      	mov	r1, r2
 8001c52:	4620      	mov	r0, r4
 8001c54:	461a      	mov	r2, r3
 8001c56:	2300      	movs	r3, #0
 8001c58:	602b      	str	r3, [r5, #0]
 8001c5a:	4664      	mov	r4, ip
 8001c5c:	f001 fb6e 	bl	800333c <_read>
 8001c60:	1c43      	adds	r3, r0, #1
 8001c62:	d000      	beq.n	8001c66 <_read_r+0x1e>
 8001c64:	bd38      	pop	{r3, r4, r5, pc}
 8001c66:	682b      	ldr	r3, [r5, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0fb      	beq.n	8001c64 <_read_r+0x1c>
 8001c6c:	6023      	str	r3, [r4, #0]
 8001c6e:	bd38      	pop	{r3, r4, r5, pc}
 8001c70:	200002e0 	.word	0x200002e0

08001c74 <_sbrk_r>:
 8001c74:	b538      	push	{r3, r4, r5, lr}
 8001c76:	4d07      	ldr	r5, [pc, #28]	@ (8001c94 <_sbrk_r+0x20>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	4604      	mov	r4, r0
 8001c7c:	4608      	mov	r0, r1
 8001c7e:	602a      	str	r2, [r5, #0]
 8001c80:	f002 fdc0 	bl	8004804 <_sbrk>
 8001c84:	1c43      	adds	r3, r0, #1
 8001c86:	d000      	beq.n	8001c8a <_sbrk_r+0x16>
 8001c88:	bd38      	pop	{r3, r4, r5, pc}
 8001c8a:	682b      	ldr	r3, [r5, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0fb      	beq.n	8001c88 <_sbrk_r+0x14>
 8001c90:	6023      	str	r3, [r4, #0]
 8001c92:	bd38      	pop	{r3, r4, r5, pc}
 8001c94:	200002e0 	.word	0x200002e0

08001c98 <_write_r>:
 8001c98:	b538      	push	{r3, r4, r5, lr}
 8001c9a:	460c      	mov	r4, r1
 8001c9c:	4d08      	ldr	r5, [pc, #32]	@ (8001cc0 <_write_r+0x28>)
 8001c9e:	4684      	mov	ip, r0
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	602b      	str	r3, [r5, #0]
 8001caa:	4664      	mov	r4, ip
 8001cac:	f001 fb4e 	bl	800334c <_write>
 8001cb0:	1c43      	adds	r3, r0, #1
 8001cb2:	d000      	beq.n	8001cb6 <_write_r+0x1e>
 8001cb4:	bd38      	pop	{r3, r4, r5, pc}
 8001cb6:	682b      	ldr	r3, [r5, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0fb      	beq.n	8001cb4 <_write_r+0x1c>
 8001cbc:	6023      	str	r3, [r4, #0]
 8001cbe:	bd38      	pop	{r3, r4, r5, pc}
 8001cc0:	200002e0 	.word	0x200002e0

08001cc4 <__errno>:
 8001cc4:	4b01      	ldr	r3, [pc, #4]	@ (8001ccc <__errno+0x8>)
 8001cc6:	6818      	ldr	r0, [r3, #0]
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	2000000c 	.word	0x2000000c

08001cd0 <__libc_init_array>:
 8001cd0:	b570      	push	{r4, r5, r6, lr}
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d10 <__libc_init_array+0x40>)
 8001cd4:	4d0f      	ldr	r5, [pc, #60]	@ (8001d14 <__libc_init_array+0x44>)
 8001cd6:	42ab      	cmp	r3, r5
 8001cd8:	eba3 0605 	sub.w	r6, r3, r5
 8001cdc:	d007      	beq.n	8001cee <__libc_init_array+0x1e>
 8001cde:	10b6      	asrs	r6, r6, #2
 8001ce0:	2400      	movs	r4, #0
 8001ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ce6:	3401      	adds	r4, #1
 8001ce8:	4798      	blx	r3
 8001cea:	42a6      	cmp	r6, r4
 8001cec:	d8f9      	bhi.n	8001ce2 <__libc_init_array+0x12>
 8001cee:	f002 fdc9 	bl	8004884 <_init>
 8001cf2:	4d09      	ldr	r5, [pc, #36]	@ (8001d18 <__libc_init_array+0x48>)
 8001cf4:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <__libc_init_array+0x4c>)
 8001cf6:	1b5e      	subs	r6, r3, r5
 8001cf8:	42ab      	cmp	r3, r5
 8001cfa:	ea4f 06a6 	mov.w	r6, r6, asr #2
 8001cfe:	d006      	beq.n	8001d0e <__libc_init_array+0x3e>
 8001d00:	2400      	movs	r4, #0
 8001d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d06:	3401      	adds	r4, #1
 8001d08:	4798      	blx	r3
 8001d0a:	42a6      	cmp	r6, r4
 8001d0c:	d8f9      	bhi.n	8001d02 <__libc_init_array+0x32>
 8001d0e:	bd70      	pop	{r4, r5, r6, pc}
 8001d10:	080049b8 	.word	0x080049b8
 8001d14:	080049b8 	.word	0x080049b8
 8001d18:	080049b8 	.word	0x080049b8
 8001d1c:	080049bc 	.word	0x080049bc

08001d20 <__retarget_lock_init>:
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop

08001d24 <__retarget_lock_init_recursive>:
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop

08001d28 <__retarget_lock_close>:
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop

08001d2c <__retarget_lock_close_recursive>:
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop

08001d30 <__retarget_lock_acquire>:
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop

08001d34 <__retarget_lock_acquire_recursive>:
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop

08001d38 <__retarget_lock_try_acquire>:
 8001d38:	2001      	movs	r0, #1
 8001d3a:	4770      	bx	lr

08001d3c <__retarget_lock_try_acquire_recursive>:
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	4770      	bx	lr

08001d40 <__retarget_lock_release>:
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop

08001d44 <__retarget_lock_release_recursive>:
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop

08001d48 <memcpy>:
 8001d48:	4684      	mov	ip, r0
 8001d4a:	ea41 0300 	orr.w	r3, r1, r0
 8001d4e:	f013 0303 	ands.w	r3, r3, #3
 8001d52:	d16d      	bne.n	8001e30 <memcpy+0xe8>
 8001d54:	3a40      	subs	r2, #64	@ 0x40
 8001d56:	d341      	bcc.n	8001ddc <memcpy+0x94>
 8001d58:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d5c:	f840 3b04 	str.w	r3, [r0], #4
 8001d60:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d64:	f840 3b04 	str.w	r3, [r0], #4
 8001d68:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d6c:	f840 3b04 	str.w	r3, [r0], #4
 8001d70:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d74:	f840 3b04 	str.w	r3, [r0], #4
 8001d78:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d7c:	f840 3b04 	str.w	r3, [r0], #4
 8001d80:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d84:	f840 3b04 	str.w	r3, [r0], #4
 8001d88:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d8c:	f840 3b04 	str.w	r3, [r0], #4
 8001d90:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d94:	f840 3b04 	str.w	r3, [r0], #4
 8001d98:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d9c:	f840 3b04 	str.w	r3, [r0], #4
 8001da0:	f851 3b04 	ldr.w	r3, [r1], #4
 8001da4:	f840 3b04 	str.w	r3, [r0], #4
 8001da8:	f851 3b04 	ldr.w	r3, [r1], #4
 8001dac:	f840 3b04 	str.w	r3, [r0], #4
 8001db0:	f851 3b04 	ldr.w	r3, [r1], #4
 8001db4:	f840 3b04 	str.w	r3, [r0], #4
 8001db8:	f851 3b04 	ldr.w	r3, [r1], #4
 8001dbc:	f840 3b04 	str.w	r3, [r0], #4
 8001dc0:	f851 3b04 	ldr.w	r3, [r1], #4
 8001dc4:	f840 3b04 	str.w	r3, [r0], #4
 8001dc8:	f851 3b04 	ldr.w	r3, [r1], #4
 8001dcc:	f840 3b04 	str.w	r3, [r0], #4
 8001dd0:	f851 3b04 	ldr.w	r3, [r1], #4
 8001dd4:	f840 3b04 	str.w	r3, [r0], #4
 8001dd8:	3a40      	subs	r2, #64	@ 0x40
 8001dda:	d2bd      	bcs.n	8001d58 <memcpy+0x10>
 8001ddc:	3230      	adds	r2, #48	@ 0x30
 8001dde:	d311      	bcc.n	8001e04 <memcpy+0xbc>
 8001de0:	f851 3b04 	ldr.w	r3, [r1], #4
 8001de4:	f840 3b04 	str.w	r3, [r0], #4
 8001de8:	f851 3b04 	ldr.w	r3, [r1], #4
 8001dec:	f840 3b04 	str.w	r3, [r0], #4
 8001df0:	f851 3b04 	ldr.w	r3, [r1], #4
 8001df4:	f840 3b04 	str.w	r3, [r0], #4
 8001df8:	f851 3b04 	ldr.w	r3, [r1], #4
 8001dfc:	f840 3b04 	str.w	r3, [r0], #4
 8001e00:	3a10      	subs	r2, #16
 8001e02:	d2ed      	bcs.n	8001de0 <memcpy+0x98>
 8001e04:	320c      	adds	r2, #12
 8001e06:	d305      	bcc.n	8001e14 <memcpy+0xcc>
 8001e08:	f851 3b04 	ldr.w	r3, [r1], #4
 8001e0c:	f840 3b04 	str.w	r3, [r0], #4
 8001e10:	3a04      	subs	r2, #4
 8001e12:	d2f9      	bcs.n	8001e08 <memcpy+0xc0>
 8001e14:	3204      	adds	r2, #4
 8001e16:	d008      	beq.n	8001e2a <memcpy+0xe2>
 8001e18:	07d2      	lsls	r2, r2, #31
 8001e1a:	bf1c      	itt	ne
 8001e1c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001e20:	f800 3b01 	strbne.w	r3, [r0], #1
 8001e24:	d301      	bcc.n	8001e2a <memcpy+0xe2>
 8001e26:	880b      	ldrh	r3, [r1, #0]
 8001e28:	8003      	strh	r3, [r0, #0]
 8001e2a:	4660      	mov	r0, ip
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	2a08      	cmp	r2, #8
 8001e32:	d313      	bcc.n	8001e5c <memcpy+0x114>
 8001e34:	078b      	lsls	r3, r1, #30
 8001e36:	d08d      	beq.n	8001d54 <memcpy+0xc>
 8001e38:	f010 0303 	ands.w	r3, r0, #3
 8001e3c:	d08a      	beq.n	8001d54 <memcpy+0xc>
 8001e3e:	f1c3 0304 	rsb	r3, r3, #4
 8001e42:	1ad2      	subs	r2, r2, r3
 8001e44:	07db      	lsls	r3, r3, #31
 8001e46:	bf1c      	itt	ne
 8001e48:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001e4c:	f800 3b01 	strbne.w	r3, [r0], #1
 8001e50:	d380      	bcc.n	8001d54 <memcpy+0xc>
 8001e52:	f831 3b02 	ldrh.w	r3, [r1], #2
 8001e56:	f820 3b02 	strh.w	r3, [r0], #2
 8001e5a:	e77b      	b.n	8001d54 <memcpy+0xc>
 8001e5c:	3a04      	subs	r2, #4
 8001e5e:	d3d9      	bcc.n	8001e14 <memcpy+0xcc>
 8001e60:	3a01      	subs	r2, #1
 8001e62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e66:	f800 3b01 	strb.w	r3, [r0], #1
 8001e6a:	d2f9      	bcs.n	8001e60 <memcpy+0x118>
 8001e6c:	780b      	ldrb	r3, [r1, #0]
 8001e6e:	7003      	strb	r3, [r0, #0]
 8001e70:	784b      	ldrb	r3, [r1, #1]
 8001e72:	7043      	strb	r3, [r0, #1]
 8001e74:	788b      	ldrb	r3, [r1, #2]
 8001e76:	7083      	strb	r3, [r0, #2]
 8001e78:	4660      	mov	r0, ip
 8001e7a:	4770      	bx	lr

08001e7c <__assert_func>:
 8001e7c:	b500      	push	{lr}
 8001e7e:	4c0b      	ldr	r4, [pc, #44]	@ (8001eac <__assert_func+0x30>)
 8001e80:	6825      	ldr	r5, [r4, #0]
 8001e82:	4614      	mov	r4, r2
 8001e84:	68ee      	ldr	r6, [r5, #12]
 8001e86:	461a      	mov	r2, r3
 8001e88:	b085      	sub	sp, #20
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	460d      	mov	r5, r1
 8001e8e:	b14c      	cbz	r4, 8001ea4 <__assert_func+0x28>
 8001e90:	4907      	ldr	r1, [pc, #28]	@ (8001eb0 <__assert_func+0x34>)
 8001e92:	9500      	str	r5, [sp, #0]
 8001e94:	e9cd 1401 	strd	r1, r4, [sp, #4]
 8001e98:	4630      	mov	r0, r6
 8001e9a:	4906      	ldr	r1, [pc, #24]	@ (8001eb4 <__assert_func+0x38>)
 8001e9c:	f000 f948 	bl	8002130 <fiprintf>
 8001ea0:	f000 f95a 	bl	8002158 <abort>
 8001ea4:	4904      	ldr	r1, [pc, #16]	@ (8001eb8 <__assert_func+0x3c>)
 8001ea6:	460c      	mov	r4, r1
 8001ea8:	e7f3      	b.n	8001e92 <__assert_func+0x16>
 8001eaa:	bf00      	nop
 8001eac:	2000000c 	.word	0x2000000c
 8001eb0:	08004934 	.word	0x08004934
 8001eb4:	08004944 	.word	0x08004944
 8001eb8:	08004940 	.word	0x08004940

08001ebc <__assert>:
 8001ebc:	b508      	push	{r3, lr}
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f7ff ffdb 	bl	8001e7c <__assert_func>
 8001ec6:	bf00      	nop

08001ec8 <_free_r>:
 8001ec8:	2900      	cmp	r1, #0
 8001eca:	d050      	beq.n	8001f6e <_free_r+0xa6>
 8001ecc:	b538      	push	{r3, r4, r5, lr}
 8001ece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ed2:	1f0c      	subs	r4, r1, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	bfb8      	it	lt
 8001ed8:	18e4      	addlt	r4, r4, r3
 8001eda:	4605      	mov	r5, r0
 8001edc:	f7ff fba8 	bl	8001630 <__malloc_lock>
 8001ee0:	4a27      	ldr	r2, [pc, #156]	@ (8001f80 <_free_r+0xb8>)
 8001ee2:	6813      	ldr	r3, [r2, #0]
 8001ee4:	b12b      	cbz	r3, 8001ef2 <_free_r+0x2a>
 8001ee6:	42a3      	cmp	r3, r4
 8001ee8:	d90c      	bls.n	8001f04 <_free_r+0x3c>
 8001eea:	6821      	ldr	r1, [r4, #0]
 8001eec:	1860      	adds	r0, r4, r1
 8001eee:	4283      	cmp	r3, r0
 8001ef0:	d02c      	beq.n	8001f4c <_free_r+0x84>
 8001ef2:	6063      	str	r3, [r4, #4]
 8001ef4:	4628      	mov	r0, r5
 8001ef6:	6014      	str	r4, [r2, #0]
 8001ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001efc:	f7ff bb9e 	b.w	800163c <__malloc_unlock>
 8001f00:	42a3      	cmp	r3, r4
 8001f02:	d80f      	bhi.n	8001f24 <_free_r+0x5c>
 8001f04:	461a      	mov	r2, r3
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1f9      	bne.n	8001f00 <_free_r+0x38>
 8001f0c:	6811      	ldr	r1, [r2, #0]
 8001f0e:	1850      	adds	r0, r2, r1
 8001f10:	4284      	cmp	r4, r0
 8001f12:	d017      	beq.n	8001f44 <_free_r+0x7c>
 8001f14:	d32c      	bcc.n	8001f70 <_free_r+0xa8>
 8001f16:	6063      	str	r3, [r4, #4]
 8001f18:	6054      	str	r4, [r2, #4]
 8001f1a:	4628      	mov	r0, r5
 8001f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f20:	f7ff bb8c 	b.w	800163c <__malloc_unlock>
 8001f24:	6811      	ldr	r1, [r2, #0]
 8001f26:	1850      	adds	r0, r2, r1
 8001f28:	42a0      	cmp	r0, r4
 8001f2a:	d014      	beq.n	8001f56 <_free_r+0x8e>
 8001f2c:	d820      	bhi.n	8001f70 <_free_r+0xa8>
 8001f2e:	6821      	ldr	r1, [r4, #0]
 8001f30:	1860      	adds	r0, r4, r1
 8001f32:	4283      	cmp	r3, r0
 8001f34:	d1ef      	bne.n	8001f16 <_free_r+0x4e>
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4408      	add	r0, r1
 8001f3c:	e9c4 0300 	strd	r0, r3, [r4]
 8001f40:	6054      	str	r4, [r2, #4]
 8001f42:	e7ea      	b.n	8001f1a <_free_r+0x52>
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	440b      	add	r3, r1
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	e7e6      	b.n	8001f1a <_free_r+0x52>
 8001f4c:	6818      	ldr	r0, [r3, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	4408      	add	r0, r1
 8001f52:	6020      	str	r0, [r4, #0]
 8001f54:	e7cd      	b.n	8001ef2 <_free_r+0x2a>
 8001f56:	6820      	ldr	r0, [r4, #0]
 8001f58:	4401      	add	r1, r0
 8001f5a:	1850      	adds	r0, r2, r1
 8001f5c:	4283      	cmp	r3, r0
 8001f5e:	6011      	str	r1, [r2, #0]
 8001f60:	d1db      	bne.n	8001f1a <_free_r+0x52>
 8001f62:	e9d3 0400 	ldrd	r0, r4, [r3]
 8001f66:	4401      	add	r1, r0
 8001f68:	e9c2 1400 	strd	r1, r4, [r2]
 8001f6c:	e7d5      	b.n	8001f1a <_free_r+0x52>
 8001f6e:	4770      	bx	lr
 8001f70:	230c      	movs	r3, #12
 8001f72:	602b      	str	r3, [r5, #0]
 8001f74:	4628      	mov	r0, r5
 8001f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f7a:	f7ff bb5f 	b.w	800163c <__malloc_unlock>
 8001f7e:	bf00      	nop
 8001f80:	200001a0 	.word	0x200001a0

08001f84 <__sflush_r>:
 8001f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f86:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8001f8a:	4607      	mov	r7, r0
 8001f8c:	0718      	lsls	r0, r3, #28
 8001f8e:	460c      	mov	r4, r1
 8001f90:	d439      	bmi.n	8002006 <__sflush_r+0x82>
 8001f92:	684a      	ldr	r2, [r1, #4]
 8001f94:	2a00      	cmp	r2, #0
 8001f96:	dd53      	ble.n	8002040 <__sflush_r+0xbc>
 8001f98:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8001f9a:	2d00      	cmp	r5, #0
 8001f9c:	d031      	beq.n	8002002 <__sflush_r+0x7e>
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	683e      	ldr	r6, [r7, #0]
 8001fa2:	603a      	str	r2, [r7, #0]
 8001fa4:	f413 5280 	ands.w	r2, r3, #4096	@ 0x1000
 8001fa8:	6a21      	ldr	r1, [r4, #32]
 8001faa:	d155      	bne.n	8002058 <__sflush_r+0xd4>
 8001fac:	2301      	movs	r3, #1
 8001fae:	4638      	mov	r0, r7
 8001fb0:	47a8      	blx	r5
 8001fb2:	1c41      	adds	r1, r0, #1
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	d05e      	beq.n	8002076 <__sflush_r+0xf2>
 8001fb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fbc:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8001fbe:	6a21      	ldr	r1, [r4, #32]
 8001fc0:	075b      	lsls	r3, r3, #29
 8001fc2:	d505      	bpl.n	8001fd0 <__sflush_r+0x4c>
 8001fc4:	6863      	ldr	r3, [r4, #4]
 8001fc6:	1ad2      	subs	r2, r2, r3
 8001fc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001fca:	b10b      	cbz	r3, 8001fd0 <__sflush_r+0x4c>
 8001fcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001fce:	1ad2      	subs	r2, r2, r3
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	4638      	mov	r0, r7
 8001fd4:	47a8      	blx	r5
 8001fd6:	1c45      	adds	r5, r0, #1
 8001fd8:	d040      	beq.n	800205c <__sflush_r+0xd8>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	6063      	str	r3, [r4, #4]
 8001fde:	6923      	ldr	r3, [r4, #16]
 8001fe0:	6023      	str	r3, [r4, #0]
 8001fe2:	89a3      	ldrh	r3, [r4, #12]
 8001fe4:	04d9      	lsls	r1, r3, #19
 8001fe6:	d500      	bpl.n	8001fea <__sflush_r+0x66>
 8001fe8:	6560      	str	r0, [r4, #84]	@ 0x54
 8001fea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001fec:	603e      	str	r6, [r7, #0]
 8001fee:	b141      	cbz	r1, 8002002 <__sflush_r+0x7e>
 8001ff0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001ff4:	4299      	cmp	r1, r3
 8001ff6:	d002      	beq.n	8001ffe <__sflush_r+0x7a>
 8001ff8:	4638      	mov	r0, r7
 8001ffa:	f7ff ff65 	bl	8001ec8 <_free_r>
 8001ffe:	2300      	movs	r3, #0
 8002000:	6363      	str	r3, [r4, #52]	@ 0x34
 8002002:	2000      	movs	r0, #0
 8002004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002006:	690e      	ldr	r6, [r1, #16]
 8002008:	2e00      	cmp	r6, #0
 800200a:	d0fa      	beq.n	8002002 <__sflush_r+0x7e>
 800200c:	079b      	lsls	r3, r3, #30
 800200e:	680d      	ldr	r5, [r1, #0]
 8002010:	bf08      	it	eq
 8002012:	694b      	ldreq	r3, [r1, #20]
 8002014:	600e      	str	r6, [r1, #0]
 8002016:	bf18      	it	ne
 8002018:	2300      	movne	r3, #0
 800201a:	1bad      	subs	r5, r5, r6
 800201c:	608b      	str	r3, [r1, #8]
 800201e:	e00c      	b.n	800203a <__sflush_r+0xb6>
 8002020:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002024:	6a21      	ldr	r1, [r4, #32]
 8002026:	462b      	mov	r3, r5
 8002028:	4632      	mov	r2, r6
 800202a:	4638      	mov	r0, r7
 800202c:	47e0      	blx	ip
 800202e:	f1b0 0c00 	subs.w	ip, r0, #0
 8002032:	eba5 050c 	sub.w	r5, r5, ip
 8002036:	4466      	add	r6, ip
 8002038:	dd06      	ble.n	8002048 <__sflush_r+0xc4>
 800203a:	2d00      	cmp	r5, #0
 800203c:	dcf0      	bgt.n	8002020 <__sflush_r+0x9c>
 800203e:	e7e0      	b.n	8002002 <__sflush_r+0x7e>
 8002040:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8002042:	2a00      	cmp	r2, #0
 8002044:	dca8      	bgt.n	8001f98 <__sflush_r+0x14>
 8002046:	e7dc      	b.n	8002002 <__sflush_r+0x7e>
 8002048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800204c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002050:	81a3      	strh	r3, [r4, #12]
 8002052:	f04f 30ff 	mov.w	r0, #4294967295
 8002056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002058:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800205a:	e7b1      	b.n	8001fc0 <__sflush_r+0x3c>
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002062:	b18a      	cbz	r2, 8002088 <__sflush_r+0x104>
 8002064:	2a1d      	cmp	r2, #29
 8002066:	d001      	beq.n	800206c <__sflush_r+0xe8>
 8002068:	2a16      	cmp	r2, #22
 800206a:	d1ef      	bne.n	800204c <__sflush_r+0xc8>
 800206c:	6923      	ldr	r3, [r4, #16]
 800206e:	2200      	movs	r2, #0
 8002070:	e9c4 3200 	strd	r3, r2, [r4]
 8002074:	e7b9      	b.n	8001fea <__sflush_r+0x66>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d09d      	beq.n	8001fb8 <__sflush_r+0x34>
 800207c:	2b1d      	cmp	r3, #29
 800207e:	d001      	beq.n	8002084 <__sflush_r+0x100>
 8002080:	2b16      	cmp	r3, #22
 8002082:	d1e1      	bne.n	8002048 <__sflush_r+0xc4>
 8002084:	603e      	str	r6, [r7, #0]
 8002086:	e7bc      	b.n	8002002 <__sflush_r+0x7e>
 8002088:	6062      	str	r2, [r4, #4]
 800208a:	6922      	ldr	r2, [r4, #16]
 800208c:	6022      	str	r2, [r4, #0]
 800208e:	04da      	lsls	r2, r3, #19
 8002090:	d4aa      	bmi.n	8001fe8 <__sflush_r+0x64>
 8002092:	e7aa      	b.n	8001fea <__sflush_r+0x66>

08002094 <_fflush_r>:
 8002094:	b538      	push	{r3, r4, r5, lr}
 8002096:	690b      	ldr	r3, [r1, #16]
 8002098:	b1cb      	cbz	r3, 80020ce <_fflush_r+0x3a>
 800209a:	460c      	mov	r4, r1
 800209c:	4605      	mov	r5, r0
 800209e:	b108      	cbz	r0, 80020a4 <_fflush_r+0x10>
 80020a0:	6a03      	ldr	r3, [r0, #32]
 80020a2:	b1bb      	cbz	r3, 80020d4 <_fflush_r+0x40>
 80020a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020a8:	b18b      	cbz	r3, 80020ce <_fflush_r+0x3a>
 80020aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80020ac:	07d0      	lsls	r0, r2, #31
 80020ae:	d401      	bmi.n	80020b4 <_fflush_r+0x20>
 80020b0:	0599      	lsls	r1, r3, #22
 80020b2:	d512      	bpl.n	80020da <_fflush_r+0x46>
 80020b4:	4628      	mov	r0, r5
 80020b6:	4621      	mov	r1, r4
 80020b8:	f7ff ff64 	bl	8001f84 <__sflush_r>
 80020bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80020be:	07da      	lsls	r2, r3, #31
 80020c0:	4605      	mov	r5, r0
 80020c2:	d402      	bmi.n	80020ca <_fflush_r+0x36>
 80020c4:	89a3      	ldrh	r3, [r4, #12]
 80020c6:	059b      	lsls	r3, r3, #22
 80020c8:	d50b      	bpl.n	80020e2 <_fflush_r+0x4e>
 80020ca:	4628      	mov	r0, r5
 80020cc:	bd38      	pop	{r3, r4, r5, pc}
 80020ce:	2500      	movs	r5, #0
 80020d0:	4628      	mov	r0, r5
 80020d2:	bd38      	pop	{r3, r4, r5, pc}
 80020d4:	f7ff fc4e 	bl	8001974 <__sinit>
 80020d8:	e7e4      	b.n	80020a4 <_fflush_r+0x10>
 80020da:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020dc:	f7ff fe2a 	bl	8001d34 <__retarget_lock_acquire_recursive>
 80020e0:	e7e8      	b.n	80020b4 <_fflush_r+0x20>
 80020e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020e4:	f7ff fe2e 	bl	8001d44 <__retarget_lock_release_recursive>
 80020e8:	e7ef      	b.n	80020ca <_fflush_r+0x36>
 80020ea:	bf00      	nop

080020ec <fflush>:
 80020ec:	4601      	mov	r1, r0
 80020ee:	b118      	cbz	r0, 80020f8 <fflush+0xc>
 80020f0:	4b04      	ldr	r3, [pc, #16]	@ (8002104 <fflush+0x18>)
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	f7ff bfce 	b.w	8002094 <_fflush_r>
 80020f8:	4a03      	ldr	r2, [pc, #12]	@ (8002108 <fflush+0x1c>)
 80020fa:	4904      	ldr	r1, [pc, #16]	@ (800210c <fflush+0x20>)
 80020fc:	4804      	ldr	r0, [pc, #16]	@ (8002110 <fflush+0x24>)
 80020fe:	f7ff bc89 	b.w	8001a14 <_fwalk_sglue>
 8002102:	bf00      	nop
 8002104:	2000000c 	.word	0x2000000c
 8002108:	20000000 	.word	0x20000000
 800210c:	08002095 	.word	0x08002095
 8002110:	20000010 	.word	0x20000010

08002114 <_fiprintf_r>:
 8002114:	b40c      	push	{r2, r3}
 8002116:	b500      	push	{lr}
 8002118:	b083      	sub	sp, #12
 800211a:	ab04      	add	r3, sp, #16
 800211c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	f000 f85d 	bl	80021e0 <_vfiprintf_r>
 8002126:	b003      	add	sp, #12
 8002128:	f85d eb04 	ldr.w	lr, [sp], #4
 800212c:	b002      	add	sp, #8
 800212e:	4770      	bx	lr

08002130 <fiprintf>:
 8002130:	b40e      	push	{r1, r2, r3}
 8002132:	b510      	push	{r4, lr}
 8002134:	b083      	sub	sp, #12
 8002136:	ab05      	add	r3, sp, #20
 8002138:	4c06      	ldr	r4, [pc, #24]	@ (8002154 <fiprintf+0x24>)
 800213a:	f853 2b04 	ldr.w	r2, [r3], #4
 800213e:	9301      	str	r3, [sp, #4]
 8002140:	4601      	mov	r1, r0
 8002142:	6820      	ldr	r0, [r4, #0]
 8002144:	f000 f84c 	bl	80021e0 <_vfiprintf_r>
 8002148:	b003      	add	sp, #12
 800214a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800214e:	b003      	add	sp, #12
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	2000000c 	.word	0x2000000c

08002158 <abort>:
 8002158:	b508      	push	{r3, lr}
 800215a:	2006      	movs	r0, #6
 800215c:	f000 febe 	bl	8002edc <raise>
 8002160:	2001      	movs	r0, #1
 8002162:	f001 f8fb 	bl	800335c <_exit>
 8002166:	bf00      	nop

08002168 <__sfputc_r>:
 8002168:	6893      	ldr	r3, [r2, #8]
 800216a:	3b01      	subs	r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	6093      	str	r3, [r2, #8]
 8002170:	da05      	bge.n	800217e <__sfputc_r+0x16>
 8002172:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8002176:	4563      	cmp	r3, ip
 8002178:	db07      	blt.n	800218a <__sfputc_r+0x22>
 800217a:	290a      	cmp	r1, #10
 800217c:	d005      	beq.n	800218a <__sfputc_r+0x22>
 800217e:	6813      	ldr	r3, [r2, #0]
 8002180:	1c58      	adds	r0, r3, #1
 8002182:	6010      	str	r0, [r2, #0]
 8002184:	7019      	strb	r1, [r3, #0]
 8002186:	4608      	mov	r0, r1
 8002188:	4770      	bx	lr
 800218a:	f000 bce3 	b.w	8002b54 <__swbuf_r>
 800218e:	bf00      	nop

08002190 <__sfputs_r>:
 8002190:	b19b      	cbz	r3, 80021ba <__sfputs_r+0x2a>
 8002192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002194:	4413      	add	r3, r2
 8002196:	4606      	mov	r6, r0
 8002198:	460f      	mov	r7, r1
 800219a:	1e54      	subs	r4, r2, #1
 800219c:	1e5d      	subs	r5, r3, #1
 800219e:	e001      	b.n	80021a4 <__sfputs_r+0x14>
 80021a0:	42ac      	cmp	r4, r5
 80021a2:	d008      	beq.n	80021b6 <__sfputs_r+0x26>
 80021a4:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80021a8:	463a      	mov	r2, r7
 80021aa:	4630      	mov	r0, r6
 80021ac:	f7ff ffdc 	bl	8002168 <__sfputc_r>
 80021b0:	1c43      	adds	r3, r0, #1
 80021b2:	d1f5      	bne.n	80021a0 <__sfputs_r+0x10>
 80021b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021b6:	2000      	movs	r0, #0
 80021b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021ba:	2000      	movs	r0, #0
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop

080021c0 <__sprint_r>:
 80021c0:	6893      	ldr	r3, [r2, #8]
 80021c2:	b510      	push	{r4, lr}
 80021c4:	4614      	mov	r4, r2
 80021c6:	b91b      	cbnz	r3, 80021d0 <__sprint_r+0x10>
 80021c8:	4618      	mov	r0, r3
 80021ca:	2300      	movs	r3, #0
 80021cc:	6063      	str	r3, [r4, #4]
 80021ce:	bd10      	pop	{r4, pc}
 80021d0:	f000 fb44 	bl	800285c <__sfvwrite_r>
 80021d4:	2300      	movs	r3, #0
 80021d6:	60a3      	str	r3, [r4, #8]
 80021d8:	2300      	movs	r3, #0
 80021da:	6063      	str	r3, [r4, #4]
 80021dc:	bd10      	pop	{r4, pc}
 80021de:	bf00      	nop

080021e0 <_vfiprintf_r>:
 80021e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021e4:	b0a1      	sub	sp, #132	@ 0x84
 80021e6:	468b      	mov	fp, r1
 80021e8:	4691      	mov	r9, r2
 80021ea:	461c      	mov	r4, r3
 80021ec:	9004      	str	r0, [sp, #16]
 80021ee:	b118      	cbz	r0, 80021f8 <_vfiprintf_r+0x18>
 80021f0:	6a03      	ldr	r3, [r0, #32]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 8147 	beq.w	8002486 <_vfiprintf_r+0x2a6>
 80021f8:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 80021fc:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8002200:	07d2      	lsls	r2, r2, #31
 8002202:	d402      	bmi.n	800220a <_vfiprintf_r+0x2a>
 8002204:	059f      	lsls	r7, r3, #22
 8002206:	f140 8137 	bpl.w	8002478 <_vfiprintf_r+0x298>
 800220a:	071e      	lsls	r6, r3, #28
 800220c:	f140 809e 	bpl.w	800234c <_vfiprintf_r+0x16c>
 8002210:	f8db 3010 	ldr.w	r3, [fp, #16]
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 8099 	beq.w	800234c <_vfiprintf_r+0x16c>
 800221a:	2300      	movs	r3, #0
 800221c:	46ca      	mov	sl, r9
 800221e:	930d      	str	r3, [sp, #52]	@ 0x34
 8002220:	f243 0320 	movw	r3, #12320	@ 0x3020
 8002224:	f8ad 3039 	strh.w	r3, [sp, #57]	@ 0x39
 8002228:	f89a 3000 	ldrb.w	r3, [sl]
 800222c:	4e97      	ldr	r6, [pc, #604]	@ (800248c <_vfiprintf_r+0x2ac>)
 800222e:	9407      	str	r4, [sp, #28]
 8002230:	2701      	movs	r7, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d07a      	beq.n	800232c <_vfiprintf_r+0x14c>
 8002236:	46d1      	mov	r9, sl
 8002238:	e004      	b.n	8002244 <_vfiprintf_r+0x64>
 800223a:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 809a 	beq.w	8002378 <_vfiprintf_r+0x198>
 8002244:	2b25      	cmp	r3, #37	@ 0x25
 8002246:	d1f8      	bne.n	800223a <_vfiprintf_r+0x5a>
 8002248:	ebb9 080a 	subs.w	r8, r9, sl
 800224c:	f040 8097 	bne.w	800237e <_vfiprintf_r+0x19e>
 8002250:	f899 3000 	ldrb.w	r3, [r9]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d069      	beq.n	800232c <_vfiprintf_r+0x14c>
 8002258:	2300      	movs	r3, #0
 800225a:	f04f 32ff 	mov.w	r2, #4294967295
 800225e:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
 8002262:	f109 0901 	add.w	r9, r9, #1
 8002266:	9308      	str	r3, [sp, #32]
 8002268:	930b      	str	r3, [sp, #44]	@ 0x2c
 800226a:	f88d 3063 	strb.w	r3, [sp, #99]	@ 0x63
 800226e:	931e      	str	r3, [sp, #120]	@ 0x78
 8002270:	e005      	b.n	800227e <_vfiprintf_r+0x9e>
 8002272:	9a08      	ldr	r2, [sp, #32]
 8002274:	fa07 f303 	lsl.w	r3, r7, r3
 8002278:	431a      	orrs	r2, r3
 800227a:	9208      	str	r2, [sp, #32]
 800227c:	46a1      	mov	r9, r4
 800227e:	464c      	mov	r4, r9
 8002280:	2205      	movs	r2, #5
 8002282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002286:	4630      	mov	r0, r6
 8002288:	f000 fee2 	bl	8003050 <memchr>
 800228c:	46a2      	mov	sl, r4
 800228e:	1b83      	subs	r3, r0, r6
 8002290:	2800      	cmp	r0, #0
 8002292:	d1ee      	bne.n	8002272 <_vfiprintf_r+0x92>
 8002294:	9b08      	ldr	r3, [sp, #32]
 8002296:	06d8      	lsls	r0, r3, #27
 8002298:	bf44      	itt	mi
 800229a:	2220      	movmi	r2, #32
 800229c:	f88d 2063 	strbmi.w	r2, [sp, #99]	@ 0x63
 80022a0:	0719      	lsls	r1, r3, #28
 80022a2:	f899 1000 	ldrb.w	r1, [r9]
 80022a6:	bf44      	itt	mi
 80022a8:	222b      	movmi	r2, #43	@ 0x2b
 80022aa:	f88d 2063 	strbmi.w	r2, [sp, #99]	@ 0x63
 80022ae:	292a      	cmp	r1, #42	@ 0x2a
 80022b0:	d17b      	bne.n	80023aa <_vfiprintf_r+0x1ca>
 80022b2:	9a07      	ldr	r2, [sp, #28]
 80022b4:	6811      	ldr	r1, [r2, #0]
 80022b6:	3204      	adds	r2, #4
 80022b8:	2900      	cmp	r1, #0
 80022ba:	9207      	str	r2, [sp, #28]
 80022bc:	f2c0 80b0 	blt.w	8002420 <_vfiprintf_r+0x240>
 80022c0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80022c2:	f899 1001 	ldrb.w	r1, [r9, #1]
 80022c6:	292e      	cmp	r1, #46	@ 0x2e
 80022c8:	f000 8086 	beq.w	80023d8 <_vfiprintf_r+0x1f8>
 80022cc:	4c70      	ldr	r4, [pc, #448]	@ (8002490 <_vfiprintf_r+0x2b0>)
 80022ce:	2203      	movs	r2, #3
 80022d0:	4620      	mov	r0, r4
 80022d2:	f000 febd 	bl	8003050 <memchr>
 80022d6:	b138      	cbz	r0, 80022e8 <_vfiprintf_r+0x108>
 80022d8:	9b08      	ldr	r3, [sp, #32]
 80022da:	1b00      	subs	r0, r0, r4
 80022dc:	2240      	movs	r2, #64	@ 0x40
 80022de:	4082      	lsls	r2, r0
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f10a 0a01 	add.w	sl, sl, #1
 80022e6:	9308      	str	r3, [sp, #32]
 80022e8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80022ec:	4869      	ldr	r0, [pc, #420]	@ (8002494 <_vfiprintf_r+0x2b4>)
 80022ee:	f88d 1038 	strb.w	r1, [sp, #56]	@ 0x38
 80022f2:	2206      	movs	r2, #6
 80022f4:	f000 feac 	bl	8003050 <memchr>
 80022f8:	2800      	cmp	r0, #0
 80022fa:	f000 8097 	beq.w	800242c <_vfiprintf_r+0x24c>
 80022fe:	4b66      	ldr	r3, [pc, #408]	@ (8002498 <_vfiprintf_r+0x2b8>)
 8002300:	2b00      	cmp	r3, #0
 8002302:	d07e      	beq.n	8002402 <_vfiprintf_r+0x222>
 8002304:	aa07      	add	r2, sp, #28
 8002306:	9200      	str	r2, [sp, #0]
 8002308:	4b64      	ldr	r3, [pc, #400]	@ (800249c <_vfiprintf_r+0x2bc>)
 800230a:	9804      	ldr	r0, [sp, #16]
 800230c:	465a      	mov	r2, fp
 800230e:	a908      	add	r1, sp, #32
 8002310:	f3af 8000 	nop.w
 8002314:	9003      	str	r0, [sp, #12]
 8002316:	9b03      	ldr	r3, [sp, #12]
 8002318:	3301      	adds	r3, #1
 800231a:	d007      	beq.n	800232c <_vfiprintf_r+0x14c>
 800231c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800231e:	9a03      	ldr	r2, [sp, #12]
 8002320:	4413      	add	r3, r2
 8002322:	930d      	str	r3, [sp, #52]	@ 0x34
 8002324:	f89a 3000 	ldrb.w	r3, [sl]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d184      	bne.n	8002236 <_vfiprintf_r+0x56>
 800232c:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8002330:	f013 0f01 	tst.w	r3, #1
 8002334:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8002338:	d102      	bne.n	8002340 <_vfiprintf_r+0x160>
 800233a:	059a      	lsls	r2, r3, #22
 800233c:	f140 8095 	bpl.w	800246a <_vfiprintf_r+0x28a>
 8002340:	065b      	lsls	r3, r3, #25
 8002342:	d416      	bmi.n	8002372 <_vfiprintf_r+0x192>
 8002344:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002346:	b021      	add	sp, #132	@ 0x84
 8002348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800234c:	9804      	ldr	r0, [sp, #16]
 800234e:	4659      	mov	r1, fp
 8002350:	f000 fc50 	bl	8002bf4 <__swsetup_r>
 8002354:	2800      	cmp	r0, #0
 8002356:	f43f af60 	beq.w	800221a <_vfiprintf_r+0x3a>
 800235a:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 800235e:	07dd      	lsls	r5, r3, #31
 8002360:	d407      	bmi.n	8002372 <_vfiprintf_r+0x192>
 8002362:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8002366:	059c      	lsls	r4, r3, #22
 8002368:	d403      	bmi.n	8002372 <_vfiprintf_r+0x192>
 800236a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 800236e:	f7ff fce9 	bl	8001d44 <__retarget_lock_release_recursive>
 8002372:	f04f 30ff 	mov.w	r0, #4294967295
 8002376:	e7e6      	b.n	8002346 <_vfiprintf_r+0x166>
 8002378:	ebb9 080a 	subs.w	r8, r9, sl
 800237c:	d0d6      	beq.n	800232c <_vfiprintf_r+0x14c>
 800237e:	f10a 35ff 	add.w	r5, sl, #4294967295
 8002382:	f8cd 9014 	str.w	r9, [sp, #20]
 8002386:	46a9      	mov	r9, r5
 8002388:	9d04      	ldr	r5, [sp, #16]
 800238a:	e001      	b.n	8002390 <_vfiprintf_r+0x1b0>
 800238c:	45a0      	cmp	r8, r4
 800238e:	d93f      	bls.n	8002410 <_vfiprintf_r+0x230>
 8002390:	464c      	mov	r4, r9
 8002392:	465a      	mov	r2, fp
 8002394:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8002398:	4628      	mov	r0, r5
 800239a:	f7ff fee5 	bl	8002168 <__sfputc_r>
 800239e:	3402      	adds	r4, #2
 80023a0:	3001      	adds	r0, #1
 80023a2:	eba4 040a 	sub.w	r4, r4, sl
 80023a6:	d1f1      	bne.n	800238c <_vfiprintf_r+0x1ac>
 80023a8:	e7c0      	b.n	800232c <_vfiprintf_r+0x14c>
 80023aa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80023ae:	2a09      	cmp	r2, #9
 80023b0:	bf88      	it	hi
 80023b2:	46ca      	movhi	sl, r9
 80023b4:	d887      	bhi.n	80022c6 <_vfiprintf_r+0xe6>
 80023b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80023b8:	e000      	b.n	80023bc <_vfiprintf_r+0x1dc>
 80023ba:	3401      	adds	r4, #1
 80023bc:	7821      	ldrb	r1, [r4, #0]
 80023be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80023c2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80023c6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80023ca:	2a09      	cmp	r2, #9
 80023cc:	d9f5      	bls.n	80023ba <_vfiprintf_r+0x1da>
 80023ce:	292e      	cmp	r1, #46	@ 0x2e
 80023d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80023d2:	46a2      	mov	sl, r4
 80023d4:	f47f af7a 	bne.w	80022cc <_vfiprintf_r+0xec>
 80023d8:	f89a 1001 	ldrb.w	r1, [sl, #1]
 80023dc:	292a      	cmp	r1, #42	@ 0x2a
 80023de:	d12f      	bne.n	8002440 <_vfiprintf_r+0x260>
 80023e0:	9b07      	ldr	r3, [sp, #28]
 80023e2:	f89a 1002 	ldrb.w	r1, [sl, #2]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80023ea:	3304      	adds	r3, #4
 80023ec:	2a00      	cmp	r2, #0
 80023ee:	f10a 0002 	add.w	r0, sl, #2
 80023f2:	9307      	str	r3, [sp, #28]
 80023f4:	bfb8      	it	lt
 80023f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80023fa:	4682      	mov	sl, r0
 80023fc:	bfb8      	it	lt
 80023fe:	9309      	strlt	r3, [sp, #36]	@ 0x24
 8002400:	e764      	b.n	80022cc <_vfiprintf_r+0xec>
 8002402:	9b07      	ldr	r3, [sp, #28]
 8002404:	3307      	adds	r3, #7
 8002406:	f023 0307 	bic.w	r3, r3, #7
 800240a:	3308      	adds	r3, #8
 800240c:	9307      	str	r3, [sp, #28]
 800240e:	e785      	b.n	800231c <_vfiprintf_r+0x13c>
 8002410:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8002412:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8002416:	4441      	add	r1, r8
 8002418:	f899 3000 	ldrb.w	r3, [r9]
 800241c:	910d      	str	r1, [sp, #52]	@ 0x34
 800241e:	e719      	b.n	8002254 <_vfiprintf_r+0x74>
 8002420:	4249      	negs	r1, r1
 8002422:	f043 0302 	orr.w	r3, r3, #2
 8002426:	910b      	str	r1, [sp, #44]	@ 0x2c
 8002428:	9308      	str	r3, [sp, #32]
 800242a:	e74a      	b.n	80022c2 <_vfiprintf_r+0xe2>
 800242c:	aa07      	add	r2, sp, #28
 800242e:	9200      	str	r2, [sp, #0]
 8002430:	4b1a      	ldr	r3, [pc, #104]	@ (800249c <_vfiprintf_r+0x2bc>)
 8002432:	9804      	ldr	r0, [sp, #16]
 8002434:	465a      	mov	r2, fp
 8002436:	a908      	add	r1, sp, #32
 8002438:	f000 f8d0 	bl	80025dc <_printf_i>
 800243c:	9003      	str	r0, [sp, #12]
 800243e:	e76a      	b.n	8002316 <_vfiprintf_r+0x136>
 8002440:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8002444:	2300      	movs	r3, #0
 8002446:	2a09      	cmp	r2, #9
 8002448:	9309      	str	r3, [sp, #36]	@ 0x24
 800244a:	f10a 0a01 	add.w	sl, sl, #1
 800244e:	f63f af3d 	bhi.w	80022cc <_vfiprintf_r+0xec>
 8002452:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8002456:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800245a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800245e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8002462:	2a09      	cmp	r2, #9
 8002464:	d9f5      	bls.n	8002452 <_vfiprintf_r+0x272>
 8002466:	9309      	str	r3, [sp, #36]	@ 0x24
 8002468:	e730      	b.n	80022cc <_vfiprintf_r+0xec>
 800246a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 800246e:	f7ff fc69 	bl	8001d44 <__retarget_lock_release_recursive>
 8002472:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8002476:	e763      	b.n	8002340 <_vfiprintf_r+0x160>
 8002478:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 800247c:	f7ff fc5a 	bl	8001d34 <__retarget_lock_acquire_recursive>
 8002480:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8002484:	e6c1      	b.n	800220a <_vfiprintf_r+0x2a>
 8002486:	f7ff fa75 	bl	8001974 <__sinit>
 800248a:	e6b5      	b.n	80021f8 <_vfiprintf_r+0x18>
 800248c:	08004974 	.word	0x08004974
 8002490:	0800497c 	.word	0x0800497c
 8002494:	08004980 	.word	0x08004980
 8002498:	00000000 	.word	0x00000000
 800249c:	08002191 	.word	0x08002191

080024a0 <vfiprintf>:
 80024a0:	b410      	push	{r4}
 80024a2:	4c04      	ldr	r4, [pc, #16]	@ (80024b4 <vfiprintf+0x14>)
 80024a4:	4684      	mov	ip, r0
 80024a6:	4613      	mov	r3, r2
 80024a8:	6820      	ldr	r0, [r4, #0]
 80024aa:	bc10      	pop	{r4}
 80024ac:	460a      	mov	r2, r1
 80024ae:	4661      	mov	r1, ip
 80024b0:	f7ff be96 	b.w	80021e0 <_vfiprintf_r>
 80024b4:	2000000c 	.word	0x2000000c

080024b8 <_printf_common>:
 80024b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024bc:	4692      	mov	sl, r2
 80024be:	461f      	mov	r7, r3
 80024c0:	690a      	ldr	r2, [r1, #16]
 80024c2:	688b      	ldr	r3, [r1, #8]
 80024c4:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80024c8:	429a      	cmp	r2, r3
 80024ca:	bfb8      	it	lt
 80024cc:	461a      	movlt	r2, r3
 80024ce:	f8ca 2000 	str.w	r2, [sl]
 80024d2:	f891 3043 	ldrb.w	r3, [r1, #67]	@ 0x43
 80024d6:	460c      	mov	r4, r1
 80024d8:	4606      	mov	r6, r0
 80024da:	b113      	cbz	r3, 80024e2 <_printf_common+0x2a>
 80024dc:	3201      	adds	r2, #1
 80024de:	f8ca 2000 	str.w	r2, [sl]
 80024e2:	6822      	ldr	r2, [r4, #0]
 80024e4:	0691      	lsls	r1, r2, #26
 80024e6:	d55f      	bpl.n	80025a8 <_printf_common+0xf0>
 80024e8:	f8da 3000 	ldr.w	r3, [sl]
 80024ec:	3302      	adds	r3, #2
 80024ee:	f8ca 3000 	str.w	r3, [sl]
 80024f2:	6822      	ldr	r2, [r4, #0]
 80024f4:	f012 0f06 	tst.w	r2, #6
 80024f8:	4611      	mov	r1, r2
 80024fa:	d11d      	bne.n	8002538 <_printf_common+0x80>
 80024fc:	68e1      	ldr	r1, [r4, #12]
 80024fe:	4299      	cmp	r1, r3
 8002500:	bfd8      	it	le
 8002502:	4611      	movle	r1, r2
 8002504:	dd18      	ble.n	8002538 <_printf_common+0x80>
 8002506:	f104 0b19 	add.w	fp, r4, #25
 800250a:	f04f 0800 	mov.w	r8, #0
 800250e:	e005      	b.n	800251c <_printf_common+0x64>
 8002510:	68e5      	ldr	r5, [r4, #12]
 8002512:	f8da 3000 	ldr.w	r3, [sl]
 8002516:	1aed      	subs	r5, r5, r3
 8002518:	4545      	cmp	r5, r8
 800251a:	dd0c      	ble.n	8002536 <_printf_common+0x7e>
 800251c:	2301      	movs	r3, #1
 800251e:	465a      	mov	r2, fp
 8002520:	4639      	mov	r1, r7
 8002522:	4630      	mov	r0, r6
 8002524:	47c8      	blx	r9
 8002526:	3001      	adds	r0, #1
 8002528:	f108 0801 	add.w	r8, r8, #1
 800252c:	d1f0      	bne.n	8002510 <_printf_common+0x58>
 800252e:	f04f 30ff 	mov.w	r0, #4294967295
 8002532:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002536:	6821      	ldr	r1, [r4, #0]
 8002538:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800253c:	3b00      	subs	r3, #0
 800253e:	bf18      	it	ne
 8002540:	2301      	movne	r3, #1
 8002542:	068a      	lsls	r2, r1, #26
 8002544:	d50a      	bpl.n	800255c <_printf_common+0xa4>
 8002546:	18e1      	adds	r1, r4, r3
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	2030      	movs	r0, #48	@ 0x30
 800254c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002550:	4422      	add	r2, r4
 8002552:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002556:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800255a:	3302      	adds	r3, #2
 800255c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002560:	4639      	mov	r1, r7
 8002562:	4630      	mov	r0, r6
 8002564:	47c8      	blx	r9
 8002566:	3001      	adds	r0, #1
 8002568:	d0e1      	beq.n	800252e <_printf_common+0x76>
 800256a:	6823      	ldr	r3, [r4, #0]
 800256c:	f8da 5000 	ldr.w	r5, [sl]
 8002570:	6921      	ldr	r1, [r4, #16]
 8002572:	f003 0306 	and.w	r3, r3, #6
 8002576:	2b04      	cmp	r3, #4
 8002578:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 800257c:	d01b      	beq.n	80025b6 <_printf_common+0xfe>
 800257e:	428a      	cmp	r2, r1
 8002580:	dd20      	ble.n	80025c4 <_printf_common+0x10c>
 8002582:	f04f 0800 	mov.w	r8, #0
 8002586:	1a52      	subs	r2, r2, r1
 8002588:	4490      	add	r8, r2
 800258a:	341a      	adds	r4, #26
 800258c:	2500      	movs	r5, #0
 800258e:	e001      	b.n	8002594 <_printf_common+0xdc>
 8002590:	4545      	cmp	r5, r8
 8002592:	da17      	bge.n	80025c4 <_printf_common+0x10c>
 8002594:	2301      	movs	r3, #1
 8002596:	4622      	mov	r2, r4
 8002598:	4639      	mov	r1, r7
 800259a:	4630      	mov	r0, r6
 800259c:	47c8      	blx	r9
 800259e:	3001      	adds	r0, #1
 80025a0:	f105 0501 	add.w	r5, r5, #1
 80025a4:	d1f4      	bne.n	8002590 <_printf_common+0xd8>
 80025a6:	e7c2      	b.n	800252e <_printf_common+0x76>
 80025a8:	f012 0f06 	tst.w	r2, #6
 80025ac:	d00d      	beq.n	80025ca <_printf_common+0x112>
 80025ae:	3b00      	subs	r3, #0
 80025b0:	bf18      	it	ne
 80025b2:	2301      	movne	r3, #1
 80025b4:	e7d2      	b.n	800255c <_printf_common+0xa4>
 80025b6:	1b40      	subs	r0, r0, r5
 80025b8:	428a      	cmp	r2, r1
 80025ba:	ea20 78e0 	bic.w	r8, r0, r0, asr #31
 80025be:	dce2      	bgt.n	8002586 <_printf_common+0xce>
 80025c0:	2800      	cmp	r0, #0
 80025c2:	dce2      	bgt.n	800258a <_printf_common+0xd2>
 80025c4:	2000      	movs	r0, #0
 80025c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025ca:	68e1      	ldr	r1, [r4, #12]
 80025cc:	f8da 3000 	ldr.w	r3, [sl]
 80025d0:	4299      	cmp	r1, r3
 80025d2:	bfd8      	it	le
 80025d4:	4611      	movle	r1, r2
 80025d6:	dc96      	bgt.n	8002506 <_printf_common+0x4e>
 80025d8:	e7ae      	b.n	8002538 <_printf_common+0x80>
 80025da:	bf00      	nop

080025dc <_printf_i>:
 80025dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025e0:	460c      	mov	r4, r1
 80025e2:	b084      	sub	sp, #16
 80025e4:	4617      	mov	r7, r2
 80025e6:	7e22      	ldrb	r2, [r4, #24]
 80025e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80025ea:	4606      	mov	r6, r0
 80025ec:	4698      	mov	r8, r3
 80025ee:	f104 0c43 	add.w	ip, r4, #67	@ 0x43
 80025f2:	2a00      	cmp	r2, #0
 80025f4:	d035      	beq.n	8002662 <_printf_i+0x86>
 80025f6:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
 80025fa:	b2d8      	uxtb	r0, r3
 80025fc:	2820      	cmp	r0, #32
 80025fe:	d869      	bhi.n	80026d4 <_printf_i+0xf8>
 8002600:	2b20      	cmp	r3, #32
 8002602:	d867      	bhi.n	80026d4 <_printf_i+0xf8>
 8002604:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002608:	006600e0 	.word	0x006600e0
 800260c:	00660066 	.word	0x00660066
 8002610:	00660066 	.word	0x00660066
 8002614:	00660066 	.word	0x00660066
 8002618:	00660066 	.word	0x00660066
 800261c:	00940066 	.word	0x00940066
 8002620:	00660070 	.word	0x00660070
 8002624:	00660066 	.word	0x00660066
 8002628:	00700066 	.word	0x00700066
 800262c:	00660066 	.word	0x00660066
 8002630:	00660066 	.word	0x00660066
 8002634:	00830021 	.word	0x00830021
 8002638:	006600ae 	.word	0x006600ae
 800263c:	009e0066 	.word	0x009e0066
 8002640:	00830066 	.word	0x00830066
 8002644:	00660066 	.word	0x00660066
 8002648:	00e6      	.short	0x00e6
 800264a:	680b      	ldr	r3, [r1, #0]
 800264c:	6822      	ldr	r2, [r4, #0]
 800264e:	6960      	ldr	r0, [r4, #20]
 8002650:	1d1d      	adds	r5, r3, #4
 8002652:	600d      	str	r5, [r1, #0]
 8002654:	0611      	lsls	r1, r2, #24
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	d402      	bmi.n	8002660 <_printf_i+0x84>
 800265a:	0652      	lsls	r2, r2, #25
 800265c:	f100 80dc 	bmi.w	8002818 <_printf_i+0x23c>
 8002660:	6018      	str	r0, [r3, #0]
 8002662:	2300      	movs	r3, #0
 8002664:	46e1      	mov	r9, ip
 8002666:	6123      	str	r3, [r4, #16]
 8002668:	f8cd 8000 	str.w	r8, [sp]
 800266c:	463b      	mov	r3, r7
 800266e:	aa03      	add	r2, sp, #12
 8002670:	4621      	mov	r1, r4
 8002672:	4630      	mov	r0, r6
 8002674:	f7ff ff20 	bl	80024b8 <_printf_common>
 8002678:	3001      	adds	r0, #1
 800267a:	d020      	beq.n	80026be <_printf_i+0xe2>
 800267c:	6923      	ldr	r3, [r4, #16]
 800267e:	464a      	mov	r2, r9
 8002680:	4639      	mov	r1, r7
 8002682:	4630      	mov	r0, r6
 8002684:	47c0      	blx	r8
 8002686:	3001      	adds	r0, #1
 8002688:	d019      	beq.n	80026be <_printf_i+0xe2>
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	68e0      	ldr	r0, [r4, #12]
 800268e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8002692:	079b      	lsls	r3, r3, #30
 8002694:	d518      	bpl.n	80026c8 <_printf_i+0xec>
 8002696:	4548      	cmp	r0, r9
 8002698:	dd16      	ble.n	80026c8 <_printf_i+0xec>
 800269a:	f104 0a19 	add.w	sl, r4, #25
 800269e:	2500      	movs	r5, #0
 80026a0:	e004      	b.n	80026ac <_printf_i+0xd0>
 80026a2:	68e0      	ldr	r0, [r4, #12]
 80026a4:	eba0 0309 	sub.w	r3, r0, r9
 80026a8:	42ab      	cmp	r3, r5
 80026aa:	dd0d      	ble.n	80026c8 <_printf_i+0xec>
 80026ac:	2301      	movs	r3, #1
 80026ae:	4652      	mov	r2, sl
 80026b0:	4639      	mov	r1, r7
 80026b2:	4630      	mov	r0, r6
 80026b4:	47c0      	blx	r8
 80026b6:	3001      	adds	r0, #1
 80026b8:	f105 0501 	add.w	r5, r5, #1
 80026bc:	d1f1      	bne.n	80026a2 <_printf_i+0xc6>
 80026be:	f04f 30ff 	mov.w	r0, #4294967295
 80026c2:	b004      	add	sp, #16
 80026c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026c8:	4548      	cmp	r0, r9
 80026ca:	bfb8      	it	lt
 80026cc:	4648      	movlt	r0, r9
 80026ce:	b004      	add	sp, #16
 80026d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026d4:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 80026d8:	2001      	movs	r0, #1
 80026da:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 80026de:	2300      	movs	r3, #0
 80026e0:	6120      	str	r0, [r4, #16]
 80026e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80026e6:	e7bf      	b.n	8002668 <_printf_i+0x8c>
 80026e8:	680a      	ldr	r2, [r1, #0]
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	1d10      	adds	r0, r2, #4
 80026ee:	6008      	str	r0, [r1, #0]
 80026f0:	0618      	lsls	r0, r3, #24
 80026f2:	d402      	bmi.n	80026fa <_printf_i+0x11e>
 80026f4:	0659      	lsls	r1, r3, #25
 80026f6:	f100 8093 	bmi.w	8002820 <_printf_i+0x244>
 80026fa:	6810      	ldr	r0, [r2, #0]
 80026fc:	4601      	mov	r1, r0
 80026fe:	2800      	cmp	r0, #0
 8002700:	6862      	ldr	r2, [r4, #4]
 8002702:	f2c0 8091 	blt.w	8002828 <_printf_i+0x24c>
 8002706:	4853      	ldr	r0, [pc, #332]	@ (8002854 <_printf_i+0x278>)
 8002708:	f04f 0e0a 	mov.w	lr, #10
 800270c:	e04a      	b.n	80027a4 <_printf_i+0x1c8>
 800270e:	680b      	ldr	r3, [r1, #0]
 8002710:	6820      	ldr	r0, [r4, #0]
 8002712:	1d1d      	adds	r5, r3, #4
 8002714:	600d      	str	r5, [r1, #0]
 8002716:	0605      	lsls	r5, r0, #24
 8002718:	d401      	bmi.n	800271e <_printf_i+0x142>
 800271a:	0641      	lsls	r1, r0, #25
 800271c:	d47e      	bmi.n	800281c <_printf_i+0x240>
 800271e:	6819      	ldr	r1, [r3, #0]
 8002720:	484c      	ldr	r0, [pc, #304]	@ (8002854 <_printf_i+0x278>)
 8002722:	2a6f      	cmp	r2, #111	@ 0x6f
 8002724:	bf14      	ite	ne
 8002726:	f04f 0e0a 	movne.w	lr, #10
 800272a:	f04f 0e08 	moveq.w	lr, #8
 800272e:	e035      	b.n	800279c <_printf_i+0x1c0>
 8002730:	680b      	ldr	r3, [r1, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	3304      	adds	r3, #4
 8002736:	600b      	str	r3, [r1, #0]
 8002738:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 800273c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 8002740:	2001      	movs	r0, #1
 8002742:	e7cc      	b.n	80026de <_printf_i+0x102>
 8002744:	680b      	ldr	r3, [r1, #0]
 8002746:	6862      	ldr	r2, [r4, #4]
 8002748:	1d18      	adds	r0, r3, #4
 800274a:	6008      	str	r0, [r1, #0]
 800274c:	f8d3 9000 	ldr.w	r9, [r3]
 8002750:	2100      	movs	r1, #0
 8002752:	4648      	mov	r0, r9
 8002754:	f000 fc7c 	bl	8003050 <memchr>
 8002758:	2800      	cmp	r0, #0
 800275a:	d079      	beq.n	8002850 <_printf_i+0x274>
 800275c:	eba0 0009 	sub.w	r0, r0, r9
 8002760:	6060      	str	r0, [r4, #4]
 8002762:	e7bc      	b.n	80026de <_printf_i+0x102>
 8002764:	6823      	ldr	r3, [r4, #0]
 8002766:	f043 0320 	orr.w	r3, r3, #32
 800276a:	6023      	str	r3, [r4, #0]
 800276c:	2278      	movs	r2, #120	@ 0x78
 800276e:	483a      	ldr	r0, [pc, #232]	@ (8002858 <_printf_i+0x27c>)
 8002770:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 8002774:	680a      	ldr	r2, [r1, #0]
 8002776:	1d15      	adds	r5, r2, #4
 8002778:	600d      	str	r5, [r1, #0]
 800277a:	061d      	lsls	r5, r3, #24
 800277c:	d44a      	bmi.n	8002814 <_printf_i+0x238>
 800277e:	0659      	lsls	r1, r3, #25
 8002780:	d548      	bpl.n	8002814 <_printf_i+0x238>
 8002782:	8811      	ldrh	r1, [r2, #0]
 8002784:	07dd      	lsls	r5, r3, #31
 8002786:	bf44      	itt	mi
 8002788:	f043 0320 	orrmi.w	r3, r3, #32
 800278c:	6023      	strmi	r3, [r4, #0]
 800278e:	b919      	cbnz	r1, 8002798 <_printf_i+0x1bc>
 8002790:	6823      	ldr	r3, [r4, #0]
 8002792:	f023 0320 	bic.w	r3, r3, #32
 8002796:	6023      	str	r3, [r4, #0]
 8002798:	f04f 0e10 	mov.w	lr, #16
 800279c:	2300      	movs	r3, #0
 800279e:	6862      	ldr	r2, [r4, #4]
 80027a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80027a4:	2a00      	cmp	r2, #0
 80027a6:	60a2      	str	r2, [r4, #8]
 80027a8:	db16      	blt.n	80027d8 <_printf_i+0x1fc>
 80027aa:	6823      	ldr	r3, [r4, #0]
 80027ac:	f023 0304 	bic.w	r3, r3, #4
 80027b0:	6023      	str	r3, [r4, #0]
 80027b2:	b989      	cbnz	r1, 80027d8 <_printf_i+0x1fc>
 80027b4:	2a00      	cmp	r2, #0
 80027b6:	d145      	bne.n	8002844 <_printf_i+0x268>
 80027b8:	46e1      	mov	r9, ip
 80027ba:	f1be 0f08 	cmp.w	lr, #8
 80027be:	d01c      	beq.n	80027fa <_printf_i+0x21e>
 80027c0:	ebac 0309 	sub.w	r3, ip, r9
 80027c4:	6123      	str	r3, [r4, #16]
 80027c6:	e74f      	b.n	8002668 <_printf_i+0x8c>
 80027c8:	2358      	movs	r3, #88	@ 0x58
 80027ca:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80027ce:	4821      	ldr	r0, [pc, #132]	@ (8002854 <_printf_i+0x278>)
 80027d0:	6823      	ldr	r3, [r4, #0]
 80027d2:	e7cf      	b.n	8002774 <_printf_i+0x198>
 80027d4:	6823      	ldr	r3, [r4, #0]
 80027d6:	e7c9      	b.n	800276c <_printf_i+0x190>
 80027d8:	4675      	mov	r5, lr
 80027da:	46e1      	mov	r9, ip
 80027dc:	fbb1 f3f5 	udiv	r3, r1, r5
 80027e0:	fb05 1a13 	mls	sl, r5, r3, r1
 80027e4:	460a      	mov	r2, r1
 80027e6:	42aa      	cmp	r2, r5
 80027e8:	f810 100a 	ldrb.w	r1, [r0, sl]
 80027ec:	f809 1d01 	strb.w	r1, [r9, #-1]!
 80027f0:	4619      	mov	r1, r3
 80027f2:	d2f3      	bcs.n	80027dc <_printf_i+0x200>
 80027f4:	f1be 0f08 	cmp.w	lr, #8
 80027f8:	d1e2      	bne.n	80027c0 <_printf_i+0x1e4>
 80027fa:	6823      	ldr	r3, [r4, #0]
 80027fc:	07d8      	lsls	r0, r3, #31
 80027fe:	d5df      	bpl.n	80027c0 <_printf_i+0x1e4>
 8002800:	6862      	ldr	r2, [r4, #4]
 8002802:	6923      	ldr	r3, [r4, #16]
 8002804:	429a      	cmp	r2, r3
 8002806:	dcdb      	bgt.n	80027c0 <_printf_i+0x1e4>
 8002808:	2330      	movs	r3, #48	@ 0x30
 800280a:	f809 3c01 	strb.w	r3, [r9, #-1]
 800280e:	f109 39ff 	add.w	r9, r9, #4294967295
 8002812:	e7d5      	b.n	80027c0 <_printf_i+0x1e4>
 8002814:	6811      	ldr	r1, [r2, #0]
 8002816:	e7b5      	b.n	8002784 <_printf_i+0x1a8>
 8002818:	8018      	strh	r0, [r3, #0]
 800281a:	e722      	b.n	8002662 <_printf_i+0x86>
 800281c:	8819      	ldrh	r1, [r3, #0]
 800281e:	e77f      	b.n	8002720 <_printf_i+0x144>
 8002820:	f9b2 1000 	ldrsh.w	r1, [r2]
 8002824:	4608      	mov	r0, r1
 8002826:	e76a      	b.n	80026fe <_printf_i+0x122>
 8002828:	202d      	movs	r0, #45	@ 0x2d
 800282a:	2a00      	cmp	r2, #0
 800282c:	60a2      	str	r2, [r4, #8]
 800282e:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
 8002832:	db02      	blt.n	800283a <_printf_i+0x25e>
 8002834:	f023 0304 	bic.w	r3, r3, #4
 8002838:	6023      	str	r3, [r4, #0]
 800283a:	250a      	movs	r5, #10
 800283c:	4805      	ldr	r0, [pc, #20]	@ (8002854 <_printf_i+0x278>)
 800283e:	4249      	negs	r1, r1
 8002840:	46ae      	mov	lr, r5
 8002842:	e7ca      	b.n	80027da <_printf_i+0x1fe>
 8002844:	7803      	ldrb	r3, [r0, #0]
 8002846:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800284a:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 800284e:	e7b4      	b.n	80027ba <_printf_i+0x1de>
 8002850:	6860      	ldr	r0, [r4, #4]
 8002852:	e744      	b.n	80026de <_printf_i+0x102>
 8002854:	08004988 	.word	0x08004988
 8002858:	0800499c 	.word	0x0800499c

0800285c <__sfvwrite_r>:
 800285c:	6893      	ldr	r3, [r2, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 80f6 	beq.w	8002a50 <__sfvwrite_r+0x1f4>
 8002864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002868:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
 800286c:	f01c 0f08 	tst.w	ip, #8
 8002870:	b083      	sub	sp, #12
 8002872:	4690      	mov	r8, r2
 8002874:	4681      	mov	r9, r0
 8002876:	460c      	mov	r4, r1
 8002878:	d031      	beq.n	80028de <__sfvwrite_r+0x82>
 800287a:	690b      	ldr	r3, [r1, #16]
 800287c:	b37b      	cbz	r3, 80028de <__sfvwrite_r+0x82>
 800287e:	f01c 0702 	ands.w	r7, ip, #2
 8002882:	f8d8 6000 	ldr.w	r6, [r8]
 8002886:	d038      	beq.n	80028fa <__sfvwrite_r+0x9e>
 8002888:	2700      	movs	r7, #0
 800288a:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 800288e:	6a21      	ldr	r1, [r4, #32]
 8002890:	f8df a2bc 	ldr.w	sl, [pc, #700]	@ 8002b50 <__sfvwrite_r+0x2f4>
 8002894:	463d      	mov	r5, r7
 8002896:	4555      	cmp	r5, sl
 8002898:	462b      	mov	r3, r5
 800289a:	463a      	mov	r2, r7
 800289c:	bf28      	it	cs
 800289e:	4653      	movcs	r3, sl
 80028a0:	4648      	mov	r0, r9
 80028a2:	b1c5      	cbz	r5, 80028d6 <__sfvwrite_r+0x7a>
 80028a4:	47d8      	blx	fp
 80028a6:	2800      	cmp	r0, #0
 80028a8:	f340 80c8 	ble.w	8002a3c <__sfvwrite_r+0x1e0>
 80028ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80028b0:	1a1b      	subs	r3, r3, r0
 80028b2:	4407      	add	r7, r0
 80028b4:	1a2d      	subs	r5, r5, r0
 80028b6:	f8c8 3008 	str.w	r3, [r8, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 80b4 	beq.w	8002a28 <__sfvwrite_r+0x1cc>
 80028c0:	4555      	cmp	r5, sl
 80028c2:	462b      	mov	r3, r5
 80028c4:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 80028c8:	6a21      	ldr	r1, [r4, #32]
 80028ca:	bf28      	it	cs
 80028cc:	4653      	movcs	r3, sl
 80028ce:	463a      	mov	r2, r7
 80028d0:	4648      	mov	r0, r9
 80028d2:	2d00      	cmp	r5, #0
 80028d4:	d1e6      	bne.n	80028a4 <__sfvwrite_r+0x48>
 80028d6:	e9d6 7500 	ldrd	r7, r5, [r6]
 80028da:	3608      	adds	r6, #8
 80028dc:	e7db      	b.n	8002896 <__sfvwrite_r+0x3a>
 80028de:	4621      	mov	r1, r4
 80028e0:	4648      	mov	r0, r9
 80028e2:	f000 f987 	bl	8002bf4 <__swsetup_r>
 80028e6:	2800      	cmp	r0, #0
 80028e8:	f040 80ad 	bne.w	8002a46 <__sfvwrite_r+0x1ea>
 80028ec:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 80028f0:	f8d8 6000 	ldr.w	r6, [r8]
 80028f4:	f01c 0702 	ands.w	r7, ip, #2
 80028f8:	d1c6      	bne.n	8002888 <__sfvwrite_r+0x2c>
 80028fa:	f01c 0a01 	ands.w	sl, ip, #1
 80028fe:	d163      	bne.n	80029c8 <__sfvwrite_r+0x16c>
 8002900:	6823      	ldr	r3, [r4, #0]
 8002902:	68a1      	ldr	r1, [r4, #8]
 8002904:	4657      	mov	r7, sl
 8002906:	4618      	mov	r0, r3
 8002908:	468b      	mov	fp, r1
 800290a:	2f00      	cmp	r7, #0
 800290c:	d058      	beq.n	80029c0 <__sfvwrite_r+0x164>
 800290e:	f41c 7f00 	tst.w	ip, #512	@ 0x200
 8002912:	f000 80b1 	beq.w	8002a78 <__sfvwrite_r+0x21c>
 8002916:	42b9      	cmp	r1, r7
 8002918:	460a      	mov	r2, r1
 800291a:	f200 80dd 	bhi.w	8002ad8 <__sfvwrite_r+0x27c>
 800291e:	f41c 6f90 	tst.w	ip, #1152	@ 0x480
 8002922:	d02f      	beq.n	8002984 <__sfvwrite_r+0x128>
 8002924:	6921      	ldr	r1, [r4, #16]
 8002926:	6962      	ldr	r2, [r4, #20]
 8002928:	1a5d      	subs	r5, r3, r1
 800292a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800292e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8002932:	1c6b      	adds	r3, r5, #1
 8002934:	1052      	asrs	r2, r2, #1
 8002936:	443b      	add	r3, r7
 8002938:	4293      	cmp	r3, r2
 800293a:	bf92      	itee	ls
 800293c:	4693      	movls	fp, r2
 800293e:	469b      	movhi	fp, r3
 8002940:	461a      	movhi	r2, r3
 8002942:	f41c 6f80 	tst.w	ip, #1024	@ 0x400
 8002946:	f000 80e6 	beq.w	8002b16 <__sfvwrite_r+0x2ba>
 800294a:	4611      	mov	r1, r2
 800294c:	4648      	mov	r0, r9
 800294e:	f7fe fdf3 	bl	8001538 <_malloc_r>
 8002952:	2800      	cmp	r0, #0
 8002954:	f000 80f5 	beq.w	8002b42 <__sfvwrite_r+0x2e6>
 8002958:	462a      	mov	r2, r5
 800295a:	6921      	ldr	r1, [r4, #16]
 800295c:	9001      	str	r0, [sp, #4]
 800295e:	f7ff f9f3 	bl	8001d48 <memcpy>
 8002962:	89a2      	ldrh	r2, [r4, #12]
 8002964:	9b01      	ldr	r3, [sp, #4]
 8002966:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800296a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800296e:	81a2      	strh	r2, [r4, #12]
 8002970:	1958      	adds	r0, r3, r5
 8002972:	ebab 0505 	sub.w	r5, fp, r5
 8002976:	f8c4 b014 	str.w	fp, [r4, #20]
 800297a:	6123      	str	r3, [r4, #16]
 800297c:	60a5      	str	r5, [r4, #8]
 800297e:	6020      	str	r0, [r4, #0]
 8002980:	46bb      	mov	fp, r7
 8002982:	463a      	mov	r2, r7
 8002984:	4651      	mov	r1, sl
 8002986:	9201      	str	r2, [sp, #4]
 8002988:	f000 f994 	bl	8002cb4 <memmove>
 800298c:	68a1      	ldr	r1, [r4, #8]
 800298e:	6823      	ldr	r3, [r4, #0]
 8002990:	9a01      	ldr	r2, [sp, #4]
 8002992:	eba1 010b 	sub.w	r1, r1, fp
 8002996:	441a      	add	r2, r3
 8002998:	463d      	mov	r5, r7
 800299a:	60a1      	str	r1, [r4, #8]
 800299c:	6022      	str	r2, [r4, #0]
 800299e:	2700      	movs	r7, #0
 80029a0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80029a4:	1b5b      	subs	r3, r3, r5
 80029a6:	44aa      	add	sl, r5
 80029a8:	f8c8 3008 	str.w	r3, [r8, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d03b      	beq.n	8002a28 <__sfvwrite_r+0x1cc>
 80029b0:	6823      	ldr	r3, [r4, #0]
 80029b2:	68a1      	ldr	r1, [r4, #8]
 80029b4:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 80029b8:	4618      	mov	r0, r3
 80029ba:	468b      	mov	fp, r1
 80029bc:	2f00      	cmp	r7, #0
 80029be:	d1a6      	bne.n	800290e <__sfvwrite_r+0xb2>
 80029c0:	e9d6 a700 	ldrd	sl, r7, [r6]
 80029c4:	3608      	adds	r6, #8
 80029c6:	e79e      	b.n	8002906 <__sfvwrite_r+0xaa>
 80029c8:	4638      	mov	r0, r7
 80029ca:	46bb      	mov	fp, r7
 80029cc:	463d      	mov	r5, r7
 80029ce:	2d00      	cmp	r5, #0
 80029d0:	d040      	beq.n	8002a54 <__sfvwrite_r+0x1f8>
 80029d2:	2800      	cmp	r0, #0
 80029d4:	d045      	beq.n	8002a62 <__sfvwrite_r+0x206>
 80029d6:	463a      	mov	r2, r7
 80029d8:	e9d4 c304 	ldrd	ip, r3, [r4, #16]
 80029dc:	6820      	ldr	r0, [r4, #0]
 80029de:	68a1      	ldr	r1, [r4, #8]
 80029e0:	42aa      	cmp	r2, r5
 80029e2:	bf28      	it	cs
 80029e4:	462a      	movcs	r2, r5
 80029e6:	4560      	cmp	r0, ip
 80029e8:	d904      	bls.n	80029f4 <__sfvwrite_r+0x198>
 80029ea:	eb01 0a03 	add.w	sl, r1, r3
 80029ee:	4552      	cmp	r2, sl
 80029f0:	f300 8082 	bgt.w	8002af8 <__sfvwrite_r+0x29c>
 80029f4:	4293      	cmp	r3, r2
 80029f6:	dc72      	bgt.n	8002ade <__sfvwrite_r+0x282>
 80029f8:	6a21      	ldr	r1, [r4, #32]
 80029fa:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80029fe:	465a      	mov	r2, fp
 8002a00:	4648      	mov	r0, r9
 8002a02:	47e0      	blx	ip
 8002a04:	f1b0 0a00 	subs.w	sl, r0, #0
 8002a08:	dd18      	ble.n	8002a3c <__sfvwrite_r+0x1e0>
 8002a0a:	ebb7 070a 	subs.w	r7, r7, sl
 8002a0e:	d00f      	beq.n	8002a30 <__sfvwrite_r+0x1d4>
 8002a10:	2001      	movs	r0, #1
 8002a12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8002a16:	eba3 030a 	sub.w	r3, r3, sl
 8002a1a:	44d3      	add	fp, sl
 8002a1c:	eba5 050a 	sub.w	r5, r5, sl
 8002a20:	f8c8 3008 	str.w	r3, [r8, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1d2      	bne.n	80029ce <__sfvwrite_r+0x172>
 8002a28:	2000      	movs	r0, #0
 8002a2a:	b003      	add	sp, #12
 8002a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a30:	4621      	mov	r1, r4
 8002a32:	4648      	mov	r0, r9
 8002a34:	f7ff fb2e 	bl	8002094 <_fflush_r>
 8002a38:	2800      	cmp	r0, #0
 8002a3a:	d0ea      	beq.n	8002a12 <__sfvwrite_r+0x1b6>
 8002a3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a44:	81a3      	strh	r3, [r4, #12]
 8002a46:	f04f 30ff 	mov.w	r0, #4294967295
 8002a4a:	b003      	add	sp, #12
 8002a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a50:	2000      	movs	r0, #0
 8002a52:	4770      	bx	lr
 8002a54:	6875      	ldr	r5, [r6, #4]
 8002a56:	4633      	mov	r3, r6
 8002a58:	3608      	adds	r6, #8
 8002a5a:	2d00      	cmp	r5, #0
 8002a5c:	d0fa      	beq.n	8002a54 <__sfvwrite_r+0x1f8>
 8002a5e:	f8d3 b000 	ldr.w	fp, [r3]
 8002a62:	462a      	mov	r2, r5
 8002a64:	210a      	movs	r1, #10
 8002a66:	4658      	mov	r0, fp
 8002a68:	f000 faf2 	bl	8003050 <memchr>
 8002a6c:	2800      	cmp	r0, #0
 8002a6e:	d065      	beq.n	8002b3c <__sfvwrite_r+0x2e0>
 8002a70:	3001      	adds	r0, #1
 8002a72:	eba0 070b 	sub.w	r7, r0, fp
 8002a76:	e7ae      	b.n	80029d6 <__sfvwrite_r+0x17a>
 8002a78:	6922      	ldr	r2, [r4, #16]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d314      	bcc.n	8002aa8 <__sfvwrite_r+0x24c>
 8002a7e:	6962      	ldr	r2, [r4, #20]
 8002a80:	42ba      	cmp	r2, r7
 8002a82:	d811      	bhi.n	8002aa8 <__sfvwrite_r+0x24c>
 8002a84:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8002a88:	42bb      	cmp	r3, r7
 8002a8a:	bf28      	it	cs
 8002a8c:	463b      	movcs	r3, r7
 8002a8e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8002a90:	fb93 f3f2 	sdiv	r3, r3, r2
 8002a94:	6a21      	ldr	r1, [r4, #32]
 8002a96:	fb02 f303 	mul.w	r3, r2, r3
 8002a9a:	4648      	mov	r0, r9
 8002a9c:	4652      	mov	r2, sl
 8002a9e:	47a8      	blx	r5
 8002aa0:	1e05      	subs	r5, r0, #0
 8002aa2:	ddcb      	ble.n	8002a3c <__sfvwrite_r+0x1e0>
 8002aa4:	1b7f      	subs	r7, r7, r5
 8002aa6:	e77b      	b.n	80029a0 <__sfvwrite_r+0x144>
 8002aa8:	42b9      	cmp	r1, r7
 8002aaa:	bf28      	it	cs
 8002aac:	4639      	movcs	r1, r7
 8002aae:	460d      	mov	r5, r1
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	460a      	mov	r2, r1
 8002ab4:	4651      	mov	r1, sl
 8002ab6:	f000 f8fd 	bl	8002cb4 <memmove>
 8002aba:	68a1      	ldr	r1, [r4, #8]
 8002abc:	6823      	ldr	r3, [r4, #0]
 8002abe:	1b49      	subs	r1, r1, r5
 8002ac0:	442b      	add	r3, r5
 8002ac2:	60a1      	str	r1, [r4, #8]
 8002ac4:	6023      	str	r3, [r4, #0]
 8002ac6:	2900      	cmp	r1, #0
 8002ac8:	d1ec      	bne.n	8002aa4 <__sfvwrite_r+0x248>
 8002aca:	4621      	mov	r1, r4
 8002acc:	4648      	mov	r0, r9
 8002ace:	f7ff fae1 	bl	8002094 <_fflush_r>
 8002ad2:	2800      	cmp	r0, #0
 8002ad4:	d0e6      	beq.n	8002aa4 <__sfvwrite_r+0x248>
 8002ad6:	e7b1      	b.n	8002a3c <__sfvwrite_r+0x1e0>
 8002ad8:	46bb      	mov	fp, r7
 8002ada:	463a      	mov	r2, r7
 8002adc:	e752      	b.n	8002984 <__sfvwrite_r+0x128>
 8002ade:	4659      	mov	r1, fp
 8002ae0:	9201      	str	r2, [sp, #4]
 8002ae2:	f000 f8e7 	bl	8002cb4 <memmove>
 8002ae6:	9a01      	ldr	r2, [sp, #4]
 8002ae8:	68a3      	ldr	r3, [r4, #8]
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	60a3      	str	r3, [r4, #8]
 8002aee:	6823      	ldr	r3, [r4, #0]
 8002af0:	4413      	add	r3, r2
 8002af2:	6023      	str	r3, [r4, #0]
 8002af4:	4692      	mov	sl, r2
 8002af6:	e788      	b.n	8002a0a <__sfvwrite_r+0x1ae>
 8002af8:	4659      	mov	r1, fp
 8002afa:	4652      	mov	r2, sl
 8002afc:	f000 f8da 	bl	8002cb4 <memmove>
 8002b00:	6823      	ldr	r3, [r4, #0]
 8002b02:	4453      	add	r3, sl
 8002b04:	6023      	str	r3, [r4, #0]
 8002b06:	4621      	mov	r1, r4
 8002b08:	4648      	mov	r0, r9
 8002b0a:	f7ff fac3 	bl	8002094 <_fflush_r>
 8002b0e:	2800      	cmp	r0, #0
 8002b10:	f43f af7b 	beq.w	8002a0a <__sfvwrite_r+0x1ae>
 8002b14:	e792      	b.n	8002a3c <__sfvwrite_r+0x1e0>
 8002b16:	4648      	mov	r0, r9
 8002b18:	f000 faea 	bl	80030f0 <_realloc_r>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2800      	cmp	r0, #0
 8002b20:	f47f af26 	bne.w	8002970 <__sfvwrite_r+0x114>
 8002b24:	6921      	ldr	r1, [r4, #16]
 8002b26:	4648      	mov	r0, r9
 8002b28:	f7ff f9ce 	bl	8001ec8 <_free_r>
 8002b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b30:	220c      	movs	r2, #12
 8002b32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b36:	f8c9 2000 	str.w	r2, [r9]
 8002b3a:	e781      	b.n	8002a40 <__sfvwrite_r+0x1e4>
 8002b3c:	1c6a      	adds	r2, r5, #1
 8002b3e:	4617      	mov	r7, r2
 8002b40:	e74a      	b.n	80029d8 <__sfvwrite_r+0x17c>
 8002b42:	220c      	movs	r2, #12
 8002b44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b48:	f8c9 2000 	str.w	r2, [r9]
 8002b4c:	e778      	b.n	8002a40 <__sfvwrite_r+0x1e4>
 8002b4e:	bf00      	nop
 8002b50:	7ffffc00 	.word	0x7ffffc00

08002b54 <__swbuf_r>:
 8002b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b56:	460d      	mov	r5, r1
 8002b58:	4614      	mov	r4, r2
 8002b5a:	4606      	mov	r6, r0
 8002b5c:	b110      	cbz	r0, 8002b64 <__swbuf_r+0x10>
 8002b5e:	6a03      	ldr	r3, [r0, #32]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d037      	beq.n	8002bd4 <__swbuf_r+0x80>
 8002b64:	89a3      	ldrh	r3, [r4, #12]
 8002b66:	69a2      	ldr	r2, [r4, #24]
 8002b68:	60a2      	str	r2, [r4, #8]
 8002b6a:	071a      	lsls	r2, r3, #28
 8002b6c:	d519      	bpl.n	8002ba2 <__swbuf_r+0x4e>
 8002b6e:	6923      	ldr	r3, [r4, #16]
 8002b70:	b1bb      	cbz	r3, 8002ba2 <__swbuf_r+0x4e>
 8002b72:	6822      	ldr	r2, [r4, #0]
 8002b74:	6961      	ldr	r1, [r4, #20]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	b2ed      	uxtb	r5, r5
 8002b7a:	4299      	cmp	r1, r3
 8002b7c:	462f      	mov	r7, r5
 8002b7e:	dd20      	ble.n	8002bc2 <__swbuf_r+0x6e>
 8002b80:	3301      	adds	r3, #1
 8002b82:	68a1      	ldr	r1, [r4, #8]
 8002b84:	3901      	subs	r1, #1
 8002b86:	60a1      	str	r1, [r4, #8]
 8002b88:	1c51      	adds	r1, r2, #1
 8002b8a:	6021      	str	r1, [r4, #0]
 8002b8c:	7015      	strb	r5, [r2, #0]
 8002b8e:	6962      	ldr	r2, [r4, #20]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d00d      	beq.n	8002bb0 <__swbuf_r+0x5c>
 8002b94:	89a3      	ldrh	r3, [r4, #12]
 8002b96:	07db      	lsls	r3, r3, #31
 8002b98:	d501      	bpl.n	8002b9e <__swbuf_r+0x4a>
 8002b9a:	2d0a      	cmp	r5, #10
 8002b9c:	d008      	beq.n	8002bb0 <__swbuf_r+0x5c>
 8002b9e:	4638      	mov	r0, r7
 8002ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	4630      	mov	r0, r6
 8002ba6:	f000 f825 	bl	8002bf4 <__swsetup_r>
 8002baa:	b938      	cbnz	r0, 8002bbc <__swbuf_r+0x68>
 8002bac:	6923      	ldr	r3, [r4, #16]
 8002bae:	e7e0      	b.n	8002b72 <__swbuf_r+0x1e>
 8002bb0:	4621      	mov	r1, r4
 8002bb2:	4630      	mov	r0, r6
 8002bb4:	f7ff fa6e 	bl	8002094 <_fflush_r>
 8002bb8:	2800      	cmp	r0, #0
 8002bba:	d0f0      	beq.n	8002b9e <__swbuf_r+0x4a>
 8002bbc:	f04f 37ff 	mov.w	r7, #4294967295
 8002bc0:	e7ed      	b.n	8002b9e <__swbuf_r+0x4a>
 8002bc2:	4621      	mov	r1, r4
 8002bc4:	4630      	mov	r0, r6
 8002bc6:	f7ff fa65 	bl	8002094 <_fflush_r>
 8002bca:	2800      	cmp	r0, #0
 8002bcc:	d1f6      	bne.n	8002bbc <__swbuf_r+0x68>
 8002bce:	6822      	ldr	r2, [r4, #0]
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e7d6      	b.n	8002b82 <__swbuf_r+0x2e>
 8002bd4:	f7fe fece 	bl	8001974 <__sinit>
 8002bd8:	e7c4      	b.n	8002b64 <__swbuf_r+0x10>
 8002bda:	bf00      	nop

08002bdc <__swbuf>:
 8002bdc:	b410      	push	{r4}
 8002bde:	4c04      	ldr	r4, [pc, #16]	@ (8002bf0 <__swbuf+0x14>)
 8002be0:	4603      	mov	r3, r0
 8002be2:	460a      	mov	r2, r1
 8002be4:	6820      	ldr	r0, [r4, #0]
 8002be6:	bc10      	pop	{r4}
 8002be8:	4619      	mov	r1, r3
 8002bea:	f7ff bfb3 	b.w	8002b54 <__swbuf_r>
 8002bee:	bf00      	nop
 8002bf0:	2000000c 	.word	0x2000000c

08002bf4 <__swsetup_r>:
 8002bf4:	b538      	push	{r3, r4, r5, lr}
 8002bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8002cb0 <__swsetup_r+0xbc>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4605      	mov	r5, r0
 8002bfc:	460c      	mov	r4, r1
 8002bfe:	b113      	cbz	r3, 8002c06 <__swsetup_r+0x12>
 8002c00:	6a1a      	ldr	r2, [r3, #32]
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d04b      	beq.n	8002c9e <__swsetup_r+0xaa>
 8002c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c0a:	0718      	lsls	r0, r3, #28
 8002c0c:	d51c      	bpl.n	8002c48 <__swsetup_r+0x54>
 8002c0e:	6922      	ldr	r2, [r4, #16]
 8002c10:	b322      	cbz	r2, 8002c5c <__swsetup_r+0x68>
 8002c12:	f013 0101 	ands.w	r1, r3, #1
 8002c16:	d007      	beq.n	8002c28 <__swsetup_r+0x34>
 8002c18:	6961      	ldr	r1, [r4, #20]
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	4249      	negs	r1, r1
 8002c1e:	60a0      	str	r0, [r4, #8]
 8002c20:	61a1      	str	r1, [r4, #24]
 8002c22:	b13a      	cbz	r2, 8002c34 <__swsetup_r+0x40>
 8002c24:	2000      	movs	r0, #0
 8002c26:	bd38      	pop	{r3, r4, r5, pc}
 8002c28:	0798      	lsls	r0, r3, #30
 8002c2a:	bf58      	it	pl
 8002c2c:	6961      	ldrpl	r1, [r4, #20]
 8002c2e:	60a1      	str	r1, [r4, #8]
 8002c30:	2a00      	cmp	r2, #0
 8002c32:	d1f7      	bne.n	8002c24 <__swsetup_r+0x30>
 8002c34:	0619      	lsls	r1, r3, #24
 8002c36:	bf58      	it	pl
 8002c38:	4610      	movpl	r0, r2
 8002c3a:	d5f4      	bpl.n	8002c26 <__swsetup_r+0x32>
 8002c3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c40:	81a3      	strh	r3, [r4, #12]
 8002c42:	f04f 30ff 	mov.w	r0, #4294967295
 8002c46:	bd38      	pop	{r3, r4, r5, pc}
 8002c48:	06d9      	lsls	r1, r3, #27
 8002c4a:	d52c      	bpl.n	8002ca6 <__swsetup_r+0xb2>
 8002c4c:	075a      	lsls	r2, r3, #29
 8002c4e:	d412      	bmi.n	8002c76 <__swsetup_r+0x82>
 8002c50:	6922      	ldr	r2, [r4, #16]
 8002c52:	f043 0308 	orr.w	r3, r3, #8
 8002c56:	81a3      	strh	r3, [r4, #12]
 8002c58:	2a00      	cmp	r2, #0
 8002c5a:	d1da      	bne.n	8002c12 <__swsetup_r+0x1e>
 8002c5c:	f403 7120 	and.w	r1, r3, #640	@ 0x280
 8002c60:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8002c64:	d0d5      	beq.n	8002c12 <__swsetup_r+0x1e>
 8002c66:	4621      	mov	r1, r4
 8002c68:	4628      	mov	r0, r5
 8002c6a:	f000 fa75 	bl	8003158 <__smakebuf_r>
 8002c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c72:	6922      	ldr	r2, [r4, #16]
 8002c74:	e7cd      	b.n	8002c12 <__swsetup_r+0x1e>
 8002c76:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002c78:	b151      	cbz	r1, 8002c90 <__swsetup_r+0x9c>
 8002c7a:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 8002c7e:	4291      	cmp	r1, r2
 8002c80:	d004      	beq.n	8002c8c <__swsetup_r+0x98>
 8002c82:	4628      	mov	r0, r5
 8002c84:	f7ff f920 	bl	8001ec8 <_free_r>
 8002c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	6362      	str	r2, [r4, #52]	@ 0x34
 8002c90:	6922      	ldr	r2, [r4, #16]
 8002c92:	2100      	movs	r1, #0
 8002c94:	e9c4 2100 	strd	r2, r1, [r4]
 8002c98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002c9c:	e7d9      	b.n	8002c52 <__swsetup_r+0x5e>
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe fe68 	bl	8001974 <__sinit>
 8002ca4:	e7af      	b.n	8002c06 <__swsetup_r+0x12>
 8002ca6:	2209      	movs	r2, #9
 8002ca8:	602a      	str	r2, [r5, #0]
 8002caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cae:	e7c7      	b.n	8002c40 <__swsetup_r+0x4c>
 8002cb0:	2000000c 	.word	0x2000000c

08002cb4 <memmove>:
 8002cb4:	4288      	cmp	r0, r1
 8002cb6:	d90e      	bls.n	8002cd6 <memmove+0x22>
 8002cb8:	188b      	adds	r3, r1, r2
 8002cba:	4283      	cmp	r3, r0
 8002cbc:	d90b      	bls.n	8002cd6 <memmove+0x22>
 8002cbe:	eb00 0c02 	add.w	ip, r0, r2
 8002cc2:	2a00      	cmp	r2, #0
 8002cc4:	d06e      	beq.n	8002da4 <memmove+0xf0>
 8002cc6:	4662      	mov	r2, ip
 8002cc8:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 8002ccc:	f802 cd01 	strb.w	ip, [r2, #-1]!
 8002cd0:	4299      	cmp	r1, r3
 8002cd2:	d1f9      	bne.n	8002cc8 <memmove+0x14>
 8002cd4:	4770      	bx	lr
 8002cd6:	2a0f      	cmp	r2, #15
 8002cd8:	d80f      	bhi.n	8002cfa <memmove+0x46>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f102 3cff 	add.w	ip, r2, #4294967295
 8002ce0:	2a00      	cmp	r2, #0
 8002ce2:	d05f      	beq.n	8002da4 <memmove+0xf0>
 8002ce4:	f10c 0c01 	add.w	ip, ip, #1
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	448c      	add	ip, r1
 8002cec:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002cf0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002cf4:	4561      	cmp	r1, ip
 8002cf6:	d1f9      	bne.n	8002cec <memmove+0x38>
 8002cf8:	4770      	bx	lr
 8002cfa:	ea40 0301 	orr.w	r3, r0, r1
 8002cfe:	079b      	lsls	r3, r3, #30
 8002d00:	d151      	bne.n	8002da6 <memmove+0xf2>
 8002d02:	f1a2 0310 	sub.w	r3, r2, #16
 8002d06:	b570      	push	{r4, r5, r6, lr}
 8002d08:	f101 0c20 	add.w	ip, r1, #32
 8002d0c:	f023 050f 	bic.w	r5, r3, #15
 8002d10:	f101 0e10 	add.w	lr, r1, #16
 8002d14:	f100 0410 	add.w	r4, r0, #16
 8002d18:	44ac      	add	ip, r5
 8002d1a:	091b      	lsrs	r3, r3, #4
 8002d1c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 8002d20:	f844 5c10 	str.w	r5, [r4, #-16]
 8002d24:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 8002d28:	f844 5c0c 	str.w	r5, [r4, #-12]
 8002d2c:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 8002d30:	f844 5c08 	str.w	r5, [r4, #-8]
 8002d34:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 8002d38:	f844 5c04 	str.w	r5, [r4, #-4]
 8002d3c:	f10e 0e10 	add.w	lr, lr, #16
 8002d40:	45e6      	cmp	lr, ip
 8002d42:	f104 0410 	add.w	r4, r4, #16
 8002d46:	d1e9      	bne.n	8002d1c <memmove+0x68>
 8002d48:	3301      	adds	r3, #1
 8002d4a:	f012 0f0c 	tst.w	r2, #12
 8002d4e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8002d52:	f002 040f 	and.w	r4, r2, #15
 8002d56:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8002d5a:	d028      	beq.n	8002dae <memmove+0xfa>
 8002d5c:	3c04      	subs	r4, #4
 8002d5e:	f024 0603 	bic.w	r6, r4, #3
 8002d62:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 8002d66:	441e      	add	r6, r3
 8002d68:	1f1c      	subs	r4, r3, #4
 8002d6a:	468e      	mov	lr, r1
 8002d6c:	f85e 5b04 	ldr.w	r5, [lr], #4
 8002d70:	f844 5f04 	str.w	r5, [r4, #4]!
 8002d74:	42b4      	cmp	r4, r6
 8002d76:	d1f9      	bne.n	8002d6c <memmove+0xb8>
 8002d78:	f10c 0401 	add.w	r4, ip, #1
 8002d7c:	f002 0203 	and.w	r2, r2, #3
 8002d80:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002d84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8002d88:	f102 3cff 	add.w	ip, r2, #4294967295
 8002d8c:	b14a      	cbz	r2, 8002da2 <memmove+0xee>
 8002d8e:	f10c 0c01 	add.w	ip, ip, #1
 8002d92:	3b01      	subs	r3, #1
 8002d94:	448c      	add	ip, r1
 8002d96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d9e:	4561      	cmp	r1, ip
 8002da0:	d1f9      	bne.n	8002d96 <memmove+0xe2>
 8002da2:	bd70      	pop	{r4, r5, r6, pc}
 8002da4:	4770      	bx	lr
 8002da6:	f102 3cff 	add.w	ip, r2, #4294967295
 8002daa:	4603      	mov	r3, r0
 8002dac:	e79a      	b.n	8002ce4 <memmove+0x30>
 8002dae:	4622      	mov	r2, r4
 8002db0:	e7ea      	b.n	8002d88 <memmove+0xd4>
 8002db2:	bf00      	nop

08002db4 <_init_signal_r>:
 8002db4:	b538      	push	{r3, r4, r5, lr}
 8002db6:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8002db8:	b10c      	cbz	r4, 8002dbe <_init_signal_r+0xa>
 8002dba:	2000      	movs	r0, #0
 8002dbc:	bd38      	pop	{r3, r4, r5, pc}
 8002dbe:	2180      	movs	r1, #128	@ 0x80
 8002dc0:	4605      	mov	r5, r0
 8002dc2:	f7fe fbb9 	bl	8001538 <_malloc_r>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8002dca:	b130      	cbz	r0, 8002dda <_init_signal_r+0x26>
 8002dcc:	1f03      	subs	r3, r0, #4
 8002dce:	327c      	adds	r2, #124	@ 0x7c
 8002dd0:	f843 4f04 	str.w	r4, [r3, #4]!
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d1fb      	bne.n	8002dd0 <_init_signal_r+0x1c>
 8002dd8:	e7ef      	b.n	8002dba <_init_signal_r+0x6>
 8002dda:	f04f 30ff 	mov.w	r0, #4294967295
 8002dde:	bd38      	pop	{r3, r4, r5, pc}

08002de0 <_signal_r>:
 8002de0:	b530      	push	{r4, r5, lr}
 8002de2:	291f      	cmp	r1, #31
 8002de4:	b083      	sub	sp, #12
 8002de6:	4605      	mov	r5, r0
 8002de8:	d808      	bhi.n	8002dfc <_signal_r+0x1c>
 8002dea:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002dec:	460c      	mov	r4, r1
 8002dee:	b153      	cbz	r3, 8002e06 <_signal_r+0x26>
 8002df0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002df4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8002df8:	b003      	add	sp, #12
 8002dfa:	bd30      	pop	{r4, r5, pc}
 8002dfc:	2316      	movs	r3, #22
 8002dfe:	6003      	str	r3, [r0, #0]
 8002e00:	f04f 30ff 	mov.w	r0, #4294967295
 8002e04:	e7f8      	b.n	8002df8 <_signal_r+0x18>
 8002e06:	2180      	movs	r1, #128	@ 0x80
 8002e08:	9201      	str	r2, [sp, #4]
 8002e0a:	f7fe fb95 	bl	8001538 <_malloc_r>
 8002e0e:	9a01      	ldr	r2, [sp, #4]
 8002e10:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8002e12:	4603      	mov	r3, r0
 8002e14:	2800      	cmp	r0, #0
 8002e16:	d0f3      	beq.n	8002e00 <_signal_r+0x20>
 8002e18:	1f01      	subs	r1, r0, #4
 8002e1a:	f100 057c 	add.w	r5, r0, #124	@ 0x7c
 8002e1e:	2000      	movs	r0, #0
 8002e20:	f841 0f04 	str.w	r0, [r1, #4]!
 8002e24:	42a9      	cmp	r1, r5
 8002e26:	d1fb      	bne.n	8002e20 <_signal_r+0x40>
 8002e28:	e7e2      	b.n	8002df0 <_signal_r+0x10>
 8002e2a:	bf00      	nop

08002e2c <_raise_r>:
 8002e2c:	291f      	cmp	r1, #31
 8002e2e:	b538      	push	{r3, r4, r5, lr}
 8002e30:	4605      	mov	r5, r0
 8002e32:	d81e      	bhi.n	8002e72 <_raise_r+0x46>
 8002e34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002e36:	460c      	mov	r4, r1
 8002e38:	b16a      	cbz	r2, 8002e56 <_raise_r+0x2a>
 8002e3a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002e3e:	b153      	cbz	r3, 8002e56 <_raise_r+0x2a>
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d006      	beq.n	8002e52 <_raise_r+0x26>
 8002e44:	1c59      	adds	r1, r3, #1
 8002e46:	d010      	beq.n	8002e6a <_raise_r+0x3e>
 8002e48:	2100      	movs	r1, #0
 8002e4a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8002e4e:	4620      	mov	r0, r4
 8002e50:	4798      	blx	r3
 8002e52:	2000      	movs	r0, #0
 8002e54:	bd38      	pop	{r3, r4, r5, pc}
 8002e56:	4628      	mov	r0, r5
 8002e58:	f000 f8f2 	bl	8003040 <_getpid_r>
 8002e5c:	4622      	mov	r2, r4
 8002e5e:	4601      	mov	r1, r0
 8002e60:	4628      	mov	r0, r5
 8002e62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e66:	f000 b8d5 	b.w	8003014 <_kill_r>
 8002e6a:	2316      	movs	r3, #22
 8002e6c:	6003      	str	r3, [r0, #0]
 8002e6e:	2001      	movs	r0, #1
 8002e70:	bd38      	pop	{r3, r4, r5, pc}
 8002e72:	2316      	movs	r3, #22
 8002e74:	6003      	str	r3, [r0, #0]
 8002e76:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7a:	bd38      	pop	{r3, r4, r5, pc}

08002e7c <__sigtramp_r>:
 8002e7c:	291f      	cmp	r1, #31
 8002e7e:	d82a      	bhi.n	8002ed6 <__sigtramp_r+0x5a>
 8002e80:	b538      	push	{r3, r4, r5, lr}
 8002e82:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002e84:	460c      	mov	r4, r1
 8002e86:	4605      	mov	r5, r0
 8002e88:	b1a3      	cbz	r3, 8002eb4 <__sigtramp_r+0x38>
 8002e8a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8002e8e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002e92:	b14a      	cbz	r2, 8002ea8 <__sigtramp_r+0x2c>
 8002e94:	1c51      	adds	r1, r2, #1
 8002e96:	d00b      	beq.n	8002eb0 <__sigtramp_r+0x34>
 8002e98:	2a01      	cmp	r2, #1
 8002e9a:	d007      	beq.n	8002eac <__sigtramp_r+0x30>
 8002e9c:	2500      	movs	r5, #0
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	601d      	str	r5, [r3, #0]
 8002ea2:	4790      	blx	r2
 8002ea4:	4628      	mov	r0, r5
 8002ea6:	bd38      	pop	{r3, r4, r5, pc}
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	bd38      	pop	{r3, r4, r5, pc}
 8002eac:	2003      	movs	r0, #3
 8002eae:	bd38      	pop	{r3, r4, r5, pc}
 8002eb0:	2002      	movs	r0, #2
 8002eb2:	bd38      	pop	{r3, r4, r5, pc}
 8002eb4:	2180      	movs	r1, #128	@ 0x80
 8002eb6:	f7fe fb3f 	bl	8001538 <_malloc_r>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8002ebe:	b138      	cbz	r0, 8002ed0 <__sigtramp_r+0x54>
 8002ec0:	1f02      	subs	r2, r0, #4
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	307c      	adds	r0, #124	@ 0x7c
 8002ec6:	f842 1f04 	str.w	r1, [r2, #4]!
 8002eca:	4290      	cmp	r0, r2
 8002ecc:	d1fb      	bne.n	8002ec6 <__sigtramp_r+0x4a>
 8002ece:	e7dc      	b.n	8002e8a <__sigtramp_r+0xe>
 8002ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed4:	bd38      	pop	{r3, r4, r5, pc}
 8002ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eda:	4770      	bx	lr

08002edc <raise>:
 8002edc:	b538      	push	{r3, r4, r5, lr}
 8002ede:	4b13      	ldr	r3, [pc, #76]	@ (8002f2c <raise+0x50>)
 8002ee0:	281f      	cmp	r0, #31
 8002ee2:	681d      	ldr	r5, [r3, #0]
 8002ee4:	d81d      	bhi.n	8002f22 <raise+0x46>
 8002ee6:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8002ee8:	4604      	mov	r4, r0
 8002eea:	b162      	cbz	r2, 8002f06 <raise+0x2a>
 8002eec:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8002ef0:	b14b      	cbz	r3, 8002f06 <raise+0x2a>
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d005      	beq.n	8002f02 <raise+0x26>
 8002ef6:	1c59      	adds	r1, r3, #1
 8002ef8:	d00f      	beq.n	8002f1a <raise+0x3e>
 8002efa:	2100      	movs	r1, #0
 8002efc:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 8002f00:	4798      	blx	r3
 8002f02:	2000      	movs	r0, #0
 8002f04:	bd38      	pop	{r3, r4, r5, pc}
 8002f06:	4628      	mov	r0, r5
 8002f08:	f000 f89a 	bl	8003040 <_getpid_r>
 8002f0c:	4622      	mov	r2, r4
 8002f0e:	4601      	mov	r1, r0
 8002f10:	4628      	mov	r0, r5
 8002f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f16:	f000 b87d 	b.w	8003014 <_kill_r>
 8002f1a:	2316      	movs	r3, #22
 8002f1c:	602b      	str	r3, [r5, #0]
 8002f1e:	2001      	movs	r0, #1
 8002f20:	bd38      	pop	{r3, r4, r5, pc}
 8002f22:	2316      	movs	r3, #22
 8002f24:	602b      	str	r3, [r5, #0]
 8002f26:	f04f 30ff 	mov.w	r0, #4294967295
 8002f2a:	bd38      	pop	{r3, r4, r5, pc}
 8002f2c:	2000000c 	.word	0x2000000c

08002f30 <signal>:
 8002f30:	4b11      	ldr	r3, [pc, #68]	@ (8002f78 <signal+0x48>)
 8002f32:	281f      	cmp	r0, #31
 8002f34:	b570      	push	{r4, r5, r6, lr}
 8002f36:	681e      	ldr	r6, [r3, #0]
 8002f38:	d808      	bhi.n	8002f4c <signal+0x1c>
 8002f3a:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 8002f3c:	4604      	mov	r4, r0
 8002f3e:	460d      	mov	r5, r1
 8002f40:	b14b      	cbz	r3, 8002f56 <signal+0x26>
 8002f42:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002f46:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
 8002f4a:	bd70      	pop	{r4, r5, r6, pc}
 8002f4c:	2316      	movs	r3, #22
 8002f4e:	6033      	str	r3, [r6, #0]
 8002f50:	f04f 30ff 	mov.w	r0, #4294967295
 8002f54:	bd70      	pop	{r4, r5, r6, pc}
 8002f56:	2180      	movs	r1, #128	@ 0x80
 8002f58:	4630      	mov	r0, r6
 8002f5a:	f7fe faed 	bl	8001538 <_malloc_r>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8002f62:	2800      	cmp	r0, #0
 8002f64:	d0f4      	beq.n	8002f50 <signal+0x20>
 8002f66:	1f02      	subs	r2, r0, #4
 8002f68:	2100      	movs	r1, #0
 8002f6a:	307c      	adds	r0, #124	@ 0x7c
 8002f6c:	f842 1f04 	str.w	r1, [r2, #4]!
 8002f70:	4290      	cmp	r0, r2
 8002f72:	d1fb      	bne.n	8002f6c <signal+0x3c>
 8002f74:	e7e5      	b.n	8002f42 <signal+0x12>
 8002f76:	bf00      	nop
 8002f78:	2000000c 	.word	0x2000000c

08002f7c <_init_signal>:
 8002f7c:	b538      	push	{r3, r4, r5, lr}
 8002f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002fac <_init_signal+0x30>)
 8002f80:	681d      	ldr	r5, [r3, #0]
 8002f82:	6bec      	ldr	r4, [r5, #60]	@ 0x3c
 8002f84:	b10c      	cbz	r4, 8002f8a <_init_signal+0xe>
 8002f86:	2000      	movs	r0, #0
 8002f88:	bd38      	pop	{r3, r4, r5, pc}
 8002f8a:	2180      	movs	r1, #128	@ 0x80
 8002f8c:	4628      	mov	r0, r5
 8002f8e:	f7fe fad3 	bl	8001538 <_malloc_r>
 8002f92:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8002f94:	b138      	cbz	r0, 8002fa6 <_init_signal+0x2a>
 8002f96:	1f03      	subs	r3, r0, #4
 8002f98:	f100 027c 	add.w	r2, r0, #124	@ 0x7c
 8002f9c:	f843 4f04 	str.w	r4, [r3, #4]!
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d1fb      	bne.n	8002f9c <_init_signal+0x20>
 8002fa4:	e7ef      	b.n	8002f86 <_init_signal+0xa>
 8002fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8002faa:	bd38      	pop	{r3, r4, r5, pc}
 8002fac:	2000000c 	.word	0x2000000c

08002fb0 <__sigtramp>:
 8002fb0:	b538      	push	{r3, r4, r5, lr}
 8002fb2:	4b17      	ldr	r3, [pc, #92]	@ (8003010 <__sigtramp+0x60>)
 8002fb4:	281f      	cmp	r0, #31
 8002fb6:	681d      	ldr	r5, [r3, #0]
 8002fb8:	d826      	bhi.n	8003008 <__sigtramp+0x58>
 8002fba:	4604      	mov	r4, r0
 8002fbc:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 8002fbe:	b1a0      	cbz	r0, 8002fea <__sigtramp+0x3a>
 8002fc0:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8002fc4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8002fc8:	b14b      	cbz	r3, 8002fde <__sigtramp+0x2e>
 8002fca:	1c5a      	adds	r2, r3, #1
 8002fcc:	d00b      	beq.n	8002fe6 <__sigtramp+0x36>
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d007      	beq.n	8002fe2 <__sigtramp+0x32>
 8002fd2:	2500      	movs	r5, #0
 8002fd4:	6005      	str	r5, [r0, #0]
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	4798      	blx	r3
 8002fda:	4628      	mov	r0, r5
 8002fdc:	bd38      	pop	{r3, r4, r5, pc}
 8002fde:	2001      	movs	r0, #1
 8002fe0:	bd38      	pop	{r3, r4, r5, pc}
 8002fe2:	2003      	movs	r0, #3
 8002fe4:	bd38      	pop	{r3, r4, r5, pc}
 8002fe6:	2002      	movs	r0, #2
 8002fe8:	bd38      	pop	{r3, r4, r5, pc}
 8002fea:	2180      	movs	r1, #128	@ 0x80
 8002fec:	4628      	mov	r0, r5
 8002fee:	f7fe faa3 	bl	8001538 <_malloc_r>
 8002ff2:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8002ff4:	b140      	cbz	r0, 8003008 <__sigtramp+0x58>
 8002ff6:	1f03      	subs	r3, r0, #4
 8002ff8:	f100 017c 	add.w	r1, r0, #124	@ 0x7c
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f843 2f04 	str.w	r2, [r3, #4]!
 8003002:	4299      	cmp	r1, r3
 8003004:	d1fb      	bne.n	8002ffe <__sigtramp+0x4e>
 8003006:	e7db      	b.n	8002fc0 <__sigtramp+0x10>
 8003008:	f04f 30ff 	mov.w	r0, #4294967295
 800300c:	bd38      	pop	{r3, r4, r5, pc}
 800300e:	bf00      	nop
 8003010:	2000000c 	.word	0x2000000c

08003014 <_kill_r>:
 8003014:	b570      	push	{r4, r5, r6, lr}
 8003016:	460c      	mov	r4, r1
 8003018:	4d08      	ldr	r5, [pc, #32]	@ (800303c <_kill_r+0x28>)
 800301a:	4603      	mov	r3, r0
 800301c:	2600      	movs	r6, #0
 800301e:	4620      	mov	r0, r4
 8003020:	4611      	mov	r1, r2
 8003022:	461c      	mov	r4, r3
 8003024:	602e      	str	r6, [r5, #0]
 8003026:	f000 f979 	bl	800331c <_kill>
 800302a:	1c43      	adds	r3, r0, #1
 800302c:	d000      	beq.n	8003030 <_kill_r+0x1c>
 800302e:	bd70      	pop	{r4, r5, r6, pc}
 8003030:	682b      	ldr	r3, [r5, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0fb      	beq.n	800302e <_kill_r+0x1a>
 8003036:	6023      	str	r3, [r4, #0]
 8003038:	bd70      	pop	{r4, r5, r6, pc}
 800303a:	bf00      	nop
 800303c:	200002e0 	.word	0x200002e0

08003040 <_getpid_r>:
 8003040:	f000 b954 	b.w	80032ec <_getpid>
 8003044:	0000      	movs	r0, r0
 8003046:	0000      	movs	r0, r0
 8003048:	0000      	movs	r0, r0
 800304a:	0000      	movs	r0, r0
 800304c:	0000      	movs	r0, r0
 800304e:	0000      	movs	r0, r0

08003050 <memchr>:
 8003050:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8003054:	2a10      	cmp	r2, #16
 8003056:	db2b      	blt.n	80030b0 <memchr+0x60>
 8003058:	f010 0f07 	tst.w	r0, #7
 800305c:	d008      	beq.n	8003070 <memchr+0x20>
 800305e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003062:	3a01      	subs	r2, #1
 8003064:	428b      	cmp	r3, r1
 8003066:	d02d      	beq.n	80030c4 <memchr+0x74>
 8003068:	f010 0f07 	tst.w	r0, #7
 800306c:	b342      	cbz	r2, 80030c0 <memchr+0x70>
 800306e:	d1f6      	bne.n	800305e <memchr+0xe>
 8003070:	b4f0      	push	{r4, r5, r6, r7}
 8003072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8003076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800307a:	f022 0407 	bic.w	r4, r2, #7
 800307e:	f07f 0700 	mvns.w	r7, #0
 8003082:	2300      	movs	r3, #0
 8003084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8003088:	3c08      	subs	r4, #8
 800308a:	ea85 0501 	eor.w	r5, r5, r1
 800308e:	ea86 0601 	eor.w	r6, r6, r1
 8003092:	fa85 f547 	uadd8	r5, r5, r7
 8003096:	faa3 f587 	sel	r5, r3, r7
 800309a:	fa86 f647 	uadd8	r6, r6, r7
 800309e:	faa5 f687 	sel	r6, r5, r7
 80030a2:	b98e      	cbnz	r6, 80030c8 <memchr+0x78>
 80030a4:	d1ee      	bne.n	8003084 <memchr+0x34>
 80030a6:	bcf0      	pop	{r4, r5, r6, r7}
 80030a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80030ac:	f002 0207 	and.w	r2, r2, #7
 80030b0:	b132      	cbz	r2, 80030c0 <memchr+0x70>
 80030b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80030b6:	3a01      	subs	r2, #1
 80030b8:	ea83 0301 	eor.w	r3, r3, r1
 80030bc:	b113      	cbz	r3, 80030c4 <memchr+0x74>
 80030be:	d1f8      	bne.n	80030b2 <memchr+0x62>
 80030c0:	2000      	movs	r0, #0
 80030c2:	4770      	bx	lr
 80030c4:	3801      	subs	r0, #1
 80030c6:	4770      	bx	lr
 80030c8:	2d00      	cmp	r5, #0
 80030ca:	bf06      	itte	eq
 80030cc:	4635      	moveq	r5, r6
 80030ce:	3803      	subeq	r0, #3
 80030d0:	3807      	subne	r0, #7
 80030d2:	f015 0f01 	tst.w	r5, #1
 80030d6:	d107      	bne.n	80030e8 <memchr+0x98>
 80030d8:	3001      	adds	r0, #1
 80030da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80030de:	bf02      	ittt	eq
 80030e0:	3001      	addeq	r0, #1
 80030e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80030e6:	3001      	addeq	r0, #1
 80030e8:	bcf0      	pop	{r4, r5, r6, r7}
 80030ea:	3801      	subs	r0, #1
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop

080030f0 <_realloc_r>:
 80030f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030f4:	4614      	mov	r4, r2
 80030f6:	b349      	cbz	r1, 800314c <_realloc_r+0x5c>
 80030f8:	b1ea      	cbz	r2, 8003136 <_realloc_r+0x46>
 80030fa:	4606      	mov	r6, r0
 80030fc:	460d      	mov	r5, r1
 80030fe:	f000 f8dd 	bl	80032bc <_malloc_usable_size_r>
 8003102:	4284      	cmp	r4, r0
 8003104:	4607      	mov	r7, r0
 8003106:	d802      	bhi.n	800310e <_realloc_r+0x1e>
 8003108:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800310c:	d81a      	bhi.n	8003144 <_realloc_r+0x54>
 800310e:	4621      	mov	r1, r4
 8003110:	4630      	mov	r0, r6
 8003112:	f7fe fa11 	bl	8001538 <_malloc_r>
 8003116:	4680      	mov	r8, r0
 8003118:	b178      	cbz	r0, 800313a <_realloc_r+0x4a>
 800311a:	42bc      	cmp	r4, r7
 800311c:	4622      	mov	r2, r4
 800311e:	4629      	mov	r1, r5
 8003120:	bf28      	it	cs
 8003122:	463a      	movcs	r2, r7
 8003124:	f7fe fe10 	bl	8001d48 <memcpy>
 8003128:	4630      	mov	r0, r6
 800312a:	4629      	mov	r1, r5
 800312c:	f7fe fecc 	bl	8001ec8 <_free_r>
 8003130:	4640      	mov	r0, r8
 8003132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003136:	f7fe fec7 	bl	8001ec8 <_free_r>
 800313a:	f04f 0800 	mov.w	r8, #0
 800313e:	4640      	mov	r0, r8
 8003140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003144:	46a8      	mov	r8, r5
 8003146:	4640      	mov	r0, r8
 8003148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800314c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003150:	4611      	mov	r1, r2
 8003152:	f7fe b9f1 	b.w	8001538 <_malloc_r>
 8003156:	bf00      	nop

08003158 <__smakebuf_r>:
 8003158:	b570      	push	{r4, r5, r6, lr}
 800315a:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800315e:	460c      	mov	r4, r1
 8003160:	0799      	lsls	r1, r3, #30
 8003162:	b096      	sub	sp, #88	@ 0x58
 8003164:	d507      	bpl.n	8003176 <__smakebuf_r+0x1e>
 8003166:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800316a:	2201      	movs	r2, #1
 800316c:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8003170:	6023      	str	r3, [r4, #0]
 8003172:	b016      	add	sp, #88	@ 0x58
 8003174:	bd70      	pop	{r4, r5, r6, pc}
 8003176:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800317a:	2900      	cmp	r1, #0
 800317c:	4605      	mov	r5, r0
 800317e:	db29      	blt.n	80031d4 <__smakebuf_r+0x7c>
 8003180:	466a      	mov	r2, sp
 8003182:	f000 f873 	bl	800326c <_fstat_r>
 8003186:	2800      	cmp	r0, #0
 8003188:	db22      	blt.n	80031d0 <__smakebuf_r+0x78>
 800318a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800318e:	4628      	mov	r0, r5
 8003190:	9e01      	ldr	r6, [sp, #4]
 8003192:	f7fe f9d1 	bl	8001538 <_malloc_r>
 8003196:	b388      	cbz	r0, 80031fc <__smakebuf_r+0xa4>
 8003198:	89a3      	ldrh	r3, [r4, #12]
 800319a:	6020      	str	r0, [r4, #0]
 800319c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031a0:	f406 4670 	and.w	r6, r6, #61440	@ 0xf000
 80031a4:	81a3      	strh	r3, [r4, #12]
 80031a6:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
 80031aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031ae:	e9c4 0304 	strd	r0, r3, [r4, #16]
 80031b2:	d1de      	bne.n	8003172 <__smakebuf_r+0x1a>
 80031b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031b8:	4628      	mov	r0, r5
 80031ba:	f000 f86d 	bl	8003298 <_isatty_r>
 80031be:	2800      	cmp	r0, #0
 80031c0:	d0d7      	beq.n	8003172 <__smakebuf_r+0x1a>
 80031c2:	89a3      	ldrh	r3, [r4, #12]
 80031c4:	f023 0303 	bic.w	r3, r3, #3
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	81a3      	strh	r3, [r4, #12]
 80031ce:	e7d0      	b.n	8003172 <__smakebuf_r+0x1a>
 80031d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80031d8:	bf14      	ite	ne
 80031da:	2640      	movne	r6, #64	@ 0x40
 80031dc:	f44f 6680 	moveq.w	r6, #1024	@ 0x400
 80031e0:	4631      	mov	r1, r6
 80031e2:	4628      	mov	r0, r5
 80031e4:	f7fe f9a8 	bl	8001538 <_malloc_r>
 80031e8:	b140      	cbz	r0, 80031fc <__smakebuf_r+0xa4>
 80031ea:	89a3      	ldrh	r3, [r4, #12]
 80031ec:	6020      	str	r0, [r4, #0]
 80031ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031f2:	e9c4 0604 	strd	r0, r6, [r4, #16]
 80031f6:	81a3      	strh	r3, [r4, #12]
 80031f8:	b016      	add	sp, #88	@ 0x58
 80031fa:	bd70      	pop	{r4, r5, r6, pc}
 80031fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003200:	059a      	lsls	r2, r3, #22
 8003202:	d4b6      	bmi.n	8003172 <__smakebuf_r+0x1a>
 8003204:	f023 0303 	bic.w	r3, r3, #3
 8003208:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800320c:	f043 0302 	orr.w	r3, r3, #2
 8003210:	2101      	movs	r1, #1
 8003212:	e9c4 2104 	strd	r2, r1, [r4, #16]
 8003216:	81a3      	strh	r3, [r4, #12]
 8003218:	6022      	str	r2, [r4, #0]
 800321a:	e7aa      	b.n	8003172 <__smakebuf_r+0x1a>

0800321c <__swhatbuf_r>:
 800321c:	b570      	push	{r4, r5, r6, lr}
 800321e:	460c      	mov	r4, r1
 8003220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003224:	2900      	cmp	r1, #0
 8003226:	b096      	sub	sp, #88	@ 0x58
 8003228:	4615      	mov	r5, r2
 800322a:	461e      	mov	r6, r3
 800322c:	db0f      	blt.n	800324e <__swhatbuf_r+0x32>
 800322e:	466a      	mov	r2, sp
 8003230:	f000 f81c 	bl	800326c <_fstat_r>
 8003234:	2800      	cmp	r0, #0
 8003236:	db0a      	blt.n	800324e <__swhatbuf_r+0x32>
 8003238:	9b01      	ldr	r3, [sp, #4]
 800323a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800323e:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8003242:	fab3 f383 	clz	r3, r3
 8003246:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	e008      	b.n	8003260 <__swhatbuf_r+0x44>
 800324e:	89a2      	ldrh	r2, [r4, #12]
 8003250:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	bf14      	ite	ne
 800325a:	2240      	movne	r2, #64	@ 0x40
 800325c:	f44f 6280 	moveq.w	r2, #1024	@ 0x400
 8003260:	2000      	movs	r0, #0
 8003262:	6033      	str	r3, [r6, #0]
 8003264:	602a      	str	r2, [r5, #0]
 8003266:	b016      	add	sp, #88	@ 0x58
 8003268:	bd70      	pop	{r4, r5, r6, pc}
 800326a:	bf00      	nop

0800326c <_fstat_r>:
 800326c:	b570      	push	{r4, r5, r6, lr}
 800326e:	460c      	mov	r4, r1
 8003270:	4d08      	ldr	r5, [pc, #32]	@ (8003294 <_fstat_r+0x28>)
 8003272:	4603      	mov	r3, r0
 8003274:	2600      	movs	r6, #0
 8003276:	4620      	mov	r0, r4
 8003278:	4611      	mov	r1, r2
 800327a:	461c      	mov	r4, r3
 800327c:	602e      	str	r6, [r5, #0]
 800327e:	f000 f82d 	bl	80032dc <_fstat>
 8003282:	1c43      	adds	r3, r0, #1
 8003284:	d000      	beq.n	8003288 <_fstat_r+0x1c>
 8003286:	bd70      	pop	{r4, r5, r6, pc}
 8003288:	682b      	ldr	r3, [r5, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0fb      	beq.n	8003286 <_fstat_r+0x1a>
 800328e:	6023      	str	r3, [r4, #0]
 8003290:	bd70      	pop	{r4, r5, r6, pc}
 8003292:	bf00      	nop
 8003294:	200002e0 	.word	0x200002e0

08003298 <_isatty_r>:
 8003298:	b538      	push	{r3, r4, r5, lr}
 800329a:	4d07      	ldr	r5, [pc, #28]	@ (80032b8 <_isatty_r+0x20>)
 800329c:	2200      	movs	r2, #0
 800329e:	4604      	mov	r4, r0
 80032a0:	4608      	mov	r0, r1
 80032a2:	602a      	str	r2, [r5, #0]
 80032a4:	f000 f832 	bl	800330c <_isatty>
 80032a8:	1c43      	adds	r3, r0, #1
 80032aa:	d000      	beq.n	80032ae <_isatty_r+0x16>
 80032ac:	bd38      	pop	{r3, r4, r5, pc}
 80032ae:	682b      	ldr	r3, [r5, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0fb      	beq.n	80032ac <_isatty_r+0x14>
 80032b4:	6023      	str	r3, [r4, #0]
 80032b6:	bd38      	pop	{r3, r4, r5, pc}
 80032b8:	200002e0 	.word	0x200002e0

080032bc <_malloc_usable_size_r>:
 80032bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032c0:	1f18      	subs	r0, r3, #4
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bfbc      	itt	lt
 80032c6:	580b      	ldrlt	r3, [r1, r0]
 80032c8:	18c0      	addlt	r0, r0, r3
 80032ca:	4770      	bx	lr

080032cc <_close>:
 80032cc:	4b02      	ldr	r3, [pc, #8]	@ (80032d8 <_close+0xc>)
 80032ce:	2258      	movs	r2, #88	@ 0x58
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	f04f 30ff 	mov.w	r0, #4294967295
 80032d6:	4770      	bx	lr
 80032d8:	200002e0 	.word	0x200002e0

080032dc <_fstat>:
 80032dc:	4b02      	ldr	r3, [pc, #8]	@ (80032e8 <_fstat+0xc>)
 80032de:	2258      	movs	r2, #88	@ 0x58
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	f04f 30ff 	mov.w	r0, #4294967295
 80032e6:	4770      	bx	lr
 80032e8:	200002e0 	.word	0x200002e0

080032ec <_getpid>:
 80032ec:	4b02      	ldr	r3, [pc, #8]	@ (80032f8 <_getpid+0xc>)
 80032ee:	2258      	movs	r2, #88	@ 0x58
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	f04f 30ff 	mov.w	r0, #4294967295
 80032f6:	4770      	bx	lr
 80032f8:	200002e0 	.word	0x200002e0

080032fc <_gettimeofday>:
 80032fc:	4b02      	ldr	r3, [pc, #8]	@ (8003308 <_gettimeofday+0xc>)
 80032fe:	2258      	movs	r2, #88	@ 0x58
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	f04f 30ff 	mov.w	r0, #4294967295
 8003306:	4770      	bx	lr
 8003308:	200002e0 	.word	0x200002e0

0800330c <_isatty>:
 800330c:	4b02      	ldr	r3, [pc, #8]	@ (8003318 <_isatty+0xc>)
 800330e:	2258      	movs	r2, #88	@ 0x58
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	2000      	movs	r0, #0
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	200002e0 	.word	0x200002e0

0800331c <_kill>:
 800331c:	4b02      	ldr	r3, [pc, #8]	@ (8003328 <_kill+0xc>)
 800331e:	2258      	movs	r2, #88	@ 0x58
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	f04f 30ff 	mov.w	r0, #4294967295
 8003326:	4770      	bx	lr
 8003328:	200002e0 	.word	0x200002e0

0800332c <_lseek>:
 800332c:	4b02      	ldr	r3, [pc, #8]	@ (8003338 <_lseek+0xc>)
 800332e:	2258      	movs	r2, #88	@ 0x58
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	f04f 30ff 	mov.w	r0, #4294967295
 8003336:	4770      	bx	lr
 8003338:	200002e0 	.word	0x200002e0

0800333c <_read>:
 800333c:	4b02      	ldr	r3, [pc, #8]	@ (8003348 <_read+0xc>)
 800333e:	2258      	movs	r2, #88	@ 0x58
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	f04f 30ff 	mov.w	r0, #4294967295
 8003346:	4770      	bx	lr
 8003348:	200002e0 	.word	0x200002e0

0800334c <_write>:
 800334c:	4b02      	ldr	r3, [pc, #8]	@ (8003358 <_write+0xc>)
 800334e:	2258      	movs	r2, #88	@ 0x58
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	f04f 30ff 	mov.w	r0, #4294967295
 8003356:	4770      	bx	lr
 8003358:	200002e0 	.word	0x200002e0

0800335c <_exit>:
 800335c:	e7fe      	b.n	800335c <_exit>
 800335e:	bf00      	nop

08003360 <__do_global_dtors_aux>:
 8003360:	b510      	push	{r4, lr}
 8003362:	4c05      	ldr	r4, [pc, #20]	@ (8003378 <__do_global_dtors_aux+0x18>)
 8003364:	7823      	ldrb	r3, [r4, #0]
 8003366:	b933      	cbnz	r3, 8003376 <__do_global_dtors_aux+0x16>
 8003368:	4b04      	ldr	r3, [pc, #16]	@ (800337c <__do_global_dtors_aux+0x1c>)
 800336a:	b113      	cbz	r3, 8003372 <__do_global_dtors_aux+0x12>
 800336c:	4804      	ldr	r0, [pc, #16]	@ (8003380 <__do_global_dtors_aux+0x20>)
 800336e:	f3af 8000 	nop.w
 8003372:	2301      	movs	r3, #1
 8003374:	7023      	strb	r3, [r4, #0]
 8003376:	bd10      	pop	{r4, pc}
 8003378:	20000301 	.word	0x20000301
 800337c:	00000000 	.word	0x00000000
 8003380:	08004884 	.word	0x08004884

08003384 <frame_dummy>:
 8003384:	b508      	push	{r3, lr}
 8003386:	4b03      	ldr	r3, [pc, #12]	@ (8003394 <frame_dummy+0x10>)
 8003388:	b11b      	cbz	r3, 8003392 <frame_dummy+0xe>
 800338a:	4903      	ldr	r1, [pc, #12]	@ (8003398 <frame_dummy+0x14>)
 800338c:	4803      	ldr	r0, [pc, #12]	@ (800339c <frame_dummy+0x18>)
 800338e:	f3af 8000 	nop.w
 8003392:	bd08      	pop	{r3, pc}
 8003394:	00000000 	.word	0x00000000
 8003398:	20000304 	.word	0x20000304
 800339c:	08004884 	.word	0x08004884

080033a0 <handle>:
/// This function will handle the 'p' command send from the capture board.
/// It returns the squared version of the scmd given.
/// It does this in approximately equal time, which allows us to see clear
/// differences between different scmd values.
uint8_t handle(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 80033a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  volatile uint8_t result = 0;

  int arr[4] = {7,5,4,2};
 80033a2:	4b18      	ldr	r3, [pc, #96]	@ (8003404 <handle+0x64>)
{
 80033a4:	460c      	mov	r4, r1
  int arr[4] = {7,5,4,2};
 80033a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
{
 80033a8:	b089      	sub	sp, #36	@ 0x24
  int arr[4] = {7,5,4,2};
 80033aa:	ae04      	add	r6, sp, #16
  network net = construct_network(5, 4, arr);
 80033ac:	ad02      	add	r5, sp, #8
  int arr[4] = {7,5,4,2};
 80033ae:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  volatile uint8_t result = 0;
 80033b2:	2700      	movs	r7, #0
  network net = construct_network(5, 4, arr);
 80033b4:	4633      	mov	r3, r6
 80033b6:	2204      	movs	r2, #4
 80033b8:	4628      	mov	r0, r5
 80033ba:	2105      	movs	r1, #5
  volatile uint8_t result = 0;
 80033bc:	f88d 7007 	strb.w	r7, [sp, #7]
  network net = construct_network(5, 4, arr);
 80033c0:	f000 f89b 	bl	80034fa <construct_network>

  int ****random_indices = generate_random_indices(net);
 80033c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80033c8:	f000 f8f7 	bl	80035ba <generate_random_indices>

  // Stop measurement.
  trigger_low();


  result = scmd*scmd;
 80033cc:	fb14 f404 	smulbb	r4, r4, r4
  int ****random_indices = generate_random_indices(net);
 80033d0:	4606      	mov	r6, r0
  result = scmd*scmd;
 80033d2:	b2e4      	uxtb	r4, r4
  trigger_high();
 80033d4:	f000 fbfc 	bl	8003bd0 <trigger_high>
  forward_shuffled_without_overhead_activations_at_end(net, random_indices, 2);
 80033d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80033dc:	4632      	mov	r2, r6
 80033de:	2302      	movs	r3, #2
 80033e0:	f000 f92e 	bl	8003640 <forward_shuffled_without_overhead_activations_at_end>
  trigger_low();
 80033e4:	f000 fbfb 	bl	8003bde <trigger_low>
  result = scmd*scmd;
 80033e8:	f88d 4007 	strb.w	r4, [sp, #7]
  // For now we can just return the result back to the user.
  uint8_t buff[1] = { result };
 80033ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80033f0:	f88d 3004 	strb.w	r3, [sp, #4]
  simpleserial_put('r', 1, buff);
 80033f4:	aa01      	add	r2, sp, #4
 80033f6:	2101      	movs	r1, #1
 80033f8:	2072      	movs	r0, #114	@ 0x72
 80033fa:	f000 fa83 	bl	8003904 <simpleserial_put>

  return 0;
}
 80033fe:	4638      	mov	r0, r7
 8003400:	b009      	add	sp, #36	@ 0x24
 8003402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003404:	080048a0 	.word	0x080048a0

08003408 <main>:

int main(void) {
 8003408:	b508      	push	{r3, lr}
  // Setup the specific chipset.
  platform_init();
 800340a:	f000 fb3f 	bl	8003a8c <platform_init>
  // Setup serial communication line.
  init_uart();
 800340e:	f000 fb7d 	bl	8003b0c <init_uart>
  // Setup measurement trigger.
  trigger_setup();
 8003412:	f000 fbb9 	bl	8003b88 <trigger_setup>

  simpleserial_init();
 8003416:	f000 fa63 	bl	80038e0 <simpleserial_init>

  // Insert your handlers here.
  simpleserial_addcmd('p', 16, handle);
 800341a:	4a04      	ldr	r2, [pc, #16]	@ (800342c <main+0x24>)
 800341c:	2110      	movs	r1, #16
 800341e:	2070      	movs	r0, #112	@ 0x70
 8003420:	f000 fa44 	bl	80038ac <simpleserial_addcmd>

  // What for the capture board to send commands and handle them.
  while (1)
    simpleserial_get();
 8003424:	f000 fac6 	bl	80039b4 <simpleserial_get>
  while (1)
 8003428:	e7fc      	b.n	8003424 <main+0x1c>
 800342a:	bf00      	nop
 800342c:	080033a1 	.word	0x080033a1

08003430 <shuffleArray>:
    int temp = *a;
    *a = *b;
    *b = temp;
}

void shuffleArray(int arr[], int size){
 8003430:	b538      	push	{r3, r4, r5, lr}
 8003432:	4605      	mov	r5, r0
    srand(time(NULL));
 8003434:	2000      	movs	r0, #0
void shuffleArray(int arr[], int size){
 8003436:	460c      	mov	r4, r1
    srand(time(NULL));
 8003438:	f7fe fbac 	bl	8001b94 <time>
 800343c:	f7fe f904 	bl	8001648 <srand>
    for (int i = size - 1; i > 0; i--) {
 8003440:	3c01      	subs	r4, #1
 8003442:	2c00      	cmp	r4, #0
 8003444:	dc00      	bgt.n	8003448 <shuffleArray+0x18>
        int j = rand() % (i + 1);
        swap(&arr[i], &arr[j]);
    }
}
 8003446:	bd38      	pop	{r3, r4, r5, pc}
        int j = rand() % (i + 1);
 8003448:	f7fe f930 	bl	80016ac <rand>
 800344c:	1c63      	adds	r3, r4, #1
 800344e:	fb90 f2f3 	sdiv	r2, r0, r3
 8003452:	fb02 0013 	mls	r0, r2, r3, r0
    int temp = *a;
 8003456:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    *a = *b;
 800345a:	f855 2020 	ldr.w	r2, [r5, r0, lsl #2]
 800345e:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
    *b = temp;
 8003462:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
 8003466:	e7eb      	b.n	8003440 <shuffleArray+0x10>

08003468 <get_random_indices>:

int* get_random_indices(int size){
 8003468:	b538      	push	{r3, r4, r5, lr}
 800346a:	4605      	mov	r5, r0
    int *arr = malloc(size * sizeof(int));
 800346c:	0080      	lsls	r0, r0, #2
 800346e:	f7fe f82f 	bl	80014d0 <malloc>
    for (int i=0; i<size; i++){
 8003472:	2300      	movs	r3, #0
    int *arr = malloc(size * sizeof(int));
 8003474:	4604      	mov	r4, r0
    for (int i=0; i<size; i++){
 8003476:	42ab      	cmp	r3, r5
 8003478:	db05      	blt.n	8003486 <get_random_indices+0x1e>
        arr[i] = i;
    }
    shuffleArray(arr, size);
 800347a:	4620      	mov	r0, r4
 800347c:	4629      	mov	r1, r5
 800347e:	f7ff ffd7 	bl	8003430 <shuffleArray>
    return arr;
}
 8003482:	4620      	mov	r0, r4
 8003484:	bd38      	pop	{r3, r4, r5, pc}
        arr[i] = i;
 8003486:	f844 3023 	str.w	r3, [r4, r3, lsl #2]
    for (int i=0; i<size; i++){
 800348a:	3301      	adds	r3, #1
 800348c:	e7f3      	b.n	8003476 <get_random_indices+0xe>

0800348e <create_neuron>:

neuron create_neuron(int num_out_weights){
 800348e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003492:	4604      	mov	r4, r0
    neuron new_neuron;
    new_neuron.bias = 0.0;
    new_neuron.z = 0.0;
    new_neuron.a = 0.0;
    new_neuron.weights = (float*) malloc(num_out_weights * sizeof(float));
 8003494:	0088      	lsls	r0, r1, #2
neuron create_neuron(int num_out_weights){
 8003496:	460d      	mov	r5, r1
    new_neuron.weights = (float*) malloc(num_out_weights * sizeof(float));
 8003498:	f7fe f81a 	bl	80014d0 <malloc>
    new_neuron.num_weights = num_out_weights;

    for (int i=0; i<num_out_weights; i++){
 800349c:	2700      	movs	r7, #0
    new_neuron.weights = (float*) malloc(num_out_weights * sizeof(float));
 800349e:	4606      	mov	r6, r0
        new_neuron.weights[i] = ((float)rand())/((float)RAND_MAX);
 80034a0:	f04f 5840 	mov.w	r8, #805306368	@ 0x30000000
    for (int i=0; i<num_out_weights; i++){
 80034a4:	42af      	cmp	r7, r5
 80034a6:	db08      	blt.n	80034ba <create_neuron+0x2c>
    }
    return new_neuron;
 80034a8:	2300      	movs	r3, #0
 80034aa:	e9c4 5600 	strd	r5, r6, [r4]
 80034ae:	60a3      	str	r3, [r4, #8]
 80034b0:	60e3      	str	r3, [r4, #12]
 80034b2:	6123      	str	r3, [r4, #16]
}
 80034b4:	4620      	mov	r0, r4
 80034b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        new_neuron.weights[i] = ((float)rand())/((float)RAND_MAX);
 80034ba:	f7fe f8f7 	bl	80016ac <rand>
 80034be:	f7fd ff3d 	bl	800133c <__aeabi_i2f>
 80034c2:	4641      	mov	r1, r8
 80034c4:	f7fd f8e8 	bl	8000698 <__aeabi_fmul>
 80034c8:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
    for (int i=0; i<num_out_weights; i++){
 80034cc:	3701      	adds	r7, #1
 80034ce:	e7e9      	b.n	80034a4 <create_neuron+0x16>

080034d0 <create_layer>:

layer create_layer(int num_neurons){
 80034d0:	b538      	push	{r3, r4, r5, lr}
 80034d2:	4604      	mov	r4, r0
    layer lay;
    lay.num_neurons = num_neurons;
    lay.neurons = (neuron*) malloc(num_neurons * sizeof(neuron));
 80034d4:	2014      	movs	r0, #20
 80034d6:	4348      	muls	r0, r1
layer create_layer(int num_neurons){
 80034d8:	460d      	mov	r5, r1
    lay.neurons = (neuron*) malloc(num_neurons * sizeof(neuron));
 80034da:	f7fd fff9 	bl	80014d0 <malloc>
    return lay;
 80034de:	e9c4 5000 	strd	r5, r0, [r4]
}
 80034e2:	4620      	mov	r0, r4
 80034e4:	bd38      	pop	{r3, r4, r5, pc}

080034e6 <create_network>:

network create_network(int num_layers){
 80034e6:	b538      	push	{r3, r4, r5, lr}
 80034e8:	4604      	mov	r4, r0
    network net;
    net.num_layers = num_layers;
    net.layers = (layer*) malloc(num_layers * sizeof(layer));
 80034ea:	00c8      	lsls	r0, r1, #3
network create_network(int num_layers){
 80034ec:	460d      	mov	r5, r1
    net.layers = (layer*) malloc(num_layers * sizeof(layer));
 80034ee:	f7fd ffef 	bl	80014d0 <malloc>
    return net;
 80034f2:	e9c4 5000 	strd	r5, r0, [r4]
}
 80034f6:	4620      	mov	r0, r4
 80034f8:	bd38      	pop	{r3, r4, r5, pc}

080034fa <construct_network>:

network construct_network(int num_outputs, int num_layers, int *num_neurons) {
 80034fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034fe:	b089      	sub	sp, #36	@ 0x24
 8003500:	4607      	mov	r7, r0
 8003502:	9100      	str	r1, [sp, #0]

    network net = create_network(num_layers);
 8003504:	4611      	mov	r1, r2
network construct_network(int num_outputs, int num_layers, int *num_neurons) {
 8003506:	4614      	mov	r4, r2
 8003508:	4698      	mov	r8, r3
    network net = create_network(num_layers);
 800350a:	f7ff ffec 	bl	80034e6 <create_network>
 800350e:	687e      	ldr	r6, [r7, #4]
    int i, j;
    for (i=0; i<num_layers; i++){
 8003510:	2500      	movs	r5, #0
 8003512:	42a5      	cmp	r5, r4
 8003514:	db15      	blt.n	8003542 <construct_network+0x48>
        net.layers[i] = create_layer(num_neurons[i]);
    }

    // For each layer create neurons with number of weights eqaual to the number of neurons in the following layer
    for (i=1; i<num_layers; i++){
 8003516:	2501      	movs	r5, #1
        for (j=0; j<net.layers[i - 1].num_neurons; j++){
 8003518:	f1a6 0908 	sub.w	r9, r6, #8
            net.layers[i - 1].neurons[j] = create_neuron(net.layers[i].num_neurons);
 800351c:	f1a6 0a04 	sub.w	sl, r6, #4
    for (i=1; i<num_layers; i++){
 8003520:	42a5      	cmp	r5, r4
 8003522:	db34      	blt.n	800358e <construct_network+0x94>
        }
    }
    // Create neurons for the last layer - the number of outputs is given "by the user"
    for (j=0; j<net.layers[num_layers - 1].num_neurons; j++){
 8003524:	f104 5400 	add.w	r4, r4, #536870912	@ 0x20000000
 8003528:	3c01      	subs	r4, #1
 800352a:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
        net.layers[num_layers - 1].neurons[j] = create_neuron(num_outputs);
 800352e:	f04f 0814 	mov.w	r8, #20
    for (j=0; j<net.layers[num_layers - 1].num_neurons; j++){
 8003532:	2600      	movs	r6, #0
 8003534:	6823      	ldr	r3, [r4, #0]
 8003536:	42b3      	cmp	r3, r6
 8003538:	dc2e      	bgt.n	8003598 <construct_network+0x9e>
    }
    return net;
}
 800353a:	4638      	mov	r0, r7
 800353c:	b009      	add	sp, #36	@ 0x24
 800353e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        net.layers[i] = create_layer(num_neurons[i]);
 8003542:	f858 1025 	ldr.w	r1, [r8, r5, lsl #2]
 8003546:	eb06 00c5 	add.w	r0, r6, r5, lsl #3
 800354a:	f7ff ffc1 	bl	80034d0 <create_layer>
    for (i=0; i<num_layers; i++){
 800354e:	3501      	adds	r5, #1
 8003550:	e7df      	b.n	8003512 <construct_network+0x18>
            net.layers[i - 1].neurons[j] = create_neuron(net.layers[i].num_neurons);
 8003552:	f85a 3035 	ldr.w	r3, [sl, r5, lsl #3]
 8003556:	f856 1035 	ldr.w	r1, [r6, r5, lsl #3]
 800355a:	fb0b 3308 	mla	r3, fp, r8, r3
 800355e:	a802      	add	r0, sp, #8
 8003560:	9301      	str	r3, [sp, #4]
 8003562:	f7ff ff94 	bl	800348e <create_neuron>
 8003566:	9b01      	ldr	r3, [sp, #4]
 8003568:	f10d 0e08 	add.w	lr, sp, #8
 800356c:	469c      	mov	ip, r3
 800356e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003572:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003576:	f8de 3000 	ldr.w	r3, [lr]
 800357a:	f8cc 3000 	str.w	r3, [ip]
        for (j=0; j<net.layers[i - 1].num_neurons; j++){
 800357e:	f108 0801 	add.w	r8, r8, #1
 8003582:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
 8003586:	4543      	cmp	r3, r8
 8003588:	dce3      	bgt.n	8003552 <construct_network+0x58>
    for (i=1; i<num_layers; i++){
 800358a:	3501      	adds	r5, #1
 800358c:	e7c8      	b.n	8003520 <construct_network+0x26>
        for (j=0; j<net.layers[i - 1].num_neurons; j++){
 800358e:	f04f 0800 	mov.w	r8, #0
            net.layers[i - 1].neurons[j] = create_neuron(net.layers[i].num_neurons);
 8003592:	f04f 0b14 	mov.w	fp, #20
 8003596:	e7f4      	b.n	8003582 <construct_network+0x88>
        net.layers[num_layers - 1].neurons[j] = create_neuron(num_outputs);
 8003598:	9900      	ldr	r1, [sp, #0]
 800359a:	6865      	ldr	r5, [r4, #4]
 800359c:	a802      	add	r0, sp, #8
 800359e:	f7ff ff76 	bl	800348e <create_neuron>
 80035a2:	f10d 0c08 	add.w	ip, sp, #8
 80035a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80035aa:	fb08 5506 	mla	r5, r8, r6, r5
 80035ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035b0:	f8dc 3000 	ldr.w	r3, [ip]
 80035b4:	602b      	str	r3, [r5, #0]
    for (j=0; j<net.layers[num_layers - 1].num_neurons; j++){
 80035b6:	3601      	adds	r6, #1
 80035b8:	e7bc      	b.n	8003534 <construct_network+0x3a>

080035ba <generate_random_indices>:

void forward_layer(network net, int layer_idx){
    
}

int ****generate_random_indices(network net) {
 80035ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i, j, k;

    int **rand_n_indices = malloc((net.num_layers - 1) * sizeof(int*));
 80035be:	1e44      	subs	r4, r0, #1
int ****generate_random_indices(network net) {
 80035c0:	b087      	sub	sp, #28
 80035c2:	ab02      	add	r3, sp, #8
    int **rand_n_indices = malloc((net.num_layers - 1) * sizeof(int*));
 80035c4:	00a4      	lsls	r4, r4, #2
int ****generate_random_indices(network net) {
 80035c6:	e883 0003 	stmia.w	r3, {r0, r1}
 80035ca:	4681      	mov	r9, r0
    int **rand_n_indices = malloc((net.num_layers - 1) * sizeof(int*));
 80035cc:	4620      	mov	r0, r4
 80035ce:	460f      	mov	r7, r1
 80035d0:	f7fd ff7e 	bl	80014d0 <malloc>
 80035d4:	4605      	mov	r5, r0
 80035d6:	9005      	str	r0, [sp, #20]
    int ***rand_ws_indices  = malloc((net.num_layers - 1) * sizeof(int**));
 80035d8:	4620      	mov	r0, r4
 80035da:	f7fd ff79 	bl	80014d0 <malloc>
 80035de:	3d04      	subs	r5, #4
 80035e0:	4606      	mov	r6, r0
    
    for (i=1; i<net.num_layers; i++){
 80035e2:	f1a0 0a04 	sub.w	sl, r0, #4
 80035e6:	2401      	movs	r4, #1


        int **rand_w_indices = malloc((net.layers[i].num_neurons) * sizeof(int*));
        // for each neuron in this layer
        for (j=0; j<net.layers[i].num_neurons; j++){
            int *rand_w_idx = get_random_indices(net.layers[i - 1].num_neurons);
 80035e8:	f1a7 0b08 	sub.w	fp, r7, #8
    for (i=1; i<net.num_layers; i++){
 80035ec:	454c      	cmp	r4, r9
 80035ee:	db08      	blt.n	8003602 <generate_random_indices+0x48>
        rand_ws_indices[i - 1] = rand_w_indices;
    }

    int ***rand_n_indices_ptr = &rand_n_indices;

    int ****returned_ptr = malloc(2 * sizeof(int***));
 80035f0:	2008      	movs	r0, #8
 80035f2:	f7fd ff6d 	bl	80014d0 <malloc>
    returned_ptr[0] = rand_n_indices_ptr;
 80035f6:	aa05      	add	r2, sp, #20
    returned_ptr[1] = rand_ws_indices;
 80035f8:	e9c0 2600 	strd	r2, r6, [r0]

    return returned_ptr;
}
 80035fc:	b007      	add	sp, #28
 80035fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int *rand_n_idx = get_random_indices(net.layers[i].num_neurons);
 8003602:	f857 0034 	ldr.w	r0, [r7, r4, lsl #3]
 8003606:	f7ff ff2f 	bl	8003468 <get_random_indices>
        rand_n_indices[i - 1] = rand_n_idx;
 800360a:	f845 0f04 	str.w	r0, [r5, #4]!
        int **rand_w_indices = malloc((net.layers[i].num_neurons) * sizeof(int*));
 800360e:	f857 0034 	ldr.w	r0, [r7, r4, lsl #3]
 8003612:	0080      	lsls	r0, r0, #2
 8003614:	f7fd ff5c 	bl	80014d0 <malloc>
        for (j=0; j<net.layers[i].num_neurons; j++){
 8003618:	2300      	movs	r3, #0
        int **rand_w_indices = malloc((net.layers[i].num_neurons) * sizeof(int*));
 800361a:	4680      	mov	r8, r0
        for (j=0; j<net.layers[i].num_neurons; j++){
 800361c:	f857 2034 	ldr.w	r2, [r7, r4, lsl #3]
 8003620:	429a      	cmp	r2, r3
 8003622:	dc03      	bgt.n	800362c <generate_random_indices+0x72>
        rand_ws_indices[i - 1] = rand_w_indices;
 8003624:	f84a 8f04 	str.w	r8, [sl, #4]!
    for (i=1; i<net.num_layers; i++){
 8003628:	3401      	adds	r4, #1
 800362a:	e7df      	b.n	80035ec <generate_random_indices+0x32>
            int *rand_w_idx = get_random_indices(net.layers[i - 1].num_neurons);
 800362c:	f85b 0034 	ldr.w	r0, [fp, r4, lsl #3]
 8003630:	9301      	str	r3, [sp, #4]
 8003632:	f7ff ff19 	bl	8003468 <get_random_indices>
            rand_w_indices[j] = rand_w_idx;
 8003636:	9b01      	ldr	r3, [sp, #4]
 8003638:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
        for (j=0; j<net.layers[i].num_neurons; j++){
 800363c:	3301      	adds	r3, #1
 800363e:	e7ed      	b.n	800361c <generate_random_indices+0x62>

08003640 <forward_shuffled_without_overhead_activations_at_end>:
            }
        }   
    }
}

void forward_shuffled_without_overhead_activations_at_end(network net, int**** random_indices, int dummy_operations) {
 8003640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003644:	b091      	sub	sp, #68	@ 0x44
 8003646:	ac08      	add	r4, sp, #32
 8003648:	9302      	str	r3, [sp, #8]
    int i, j, k, nidx;
    int *rand_n_idx, *rand_w_idx;

    int **rand_n_indices = *random_indices[0];
 800364a:	6813      	ldr	r3, [r2, #0]
 800364c:	9001      	str	r0, [sp, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	9304      	str	r3, [sp, #16]
    int ***rand_ws_indices = random_indices[1];
 8003652:	6853      	ldr	r3, [r2, #4]
 8003654:	9305      	str	r3, [sp, #20]
void forward_shuffled_without_overhead_activations_at_end(network net, int**** random_indices, int dummy_operations) {
 8003656:	e884 0003 	stmia.w	r4, {r0, r1}

    uint8_t result, scmd = 16;
    // for each layer
    for (volatile i=1; i<net.num_layers; i++){
 800365a:	2301      	movs	r3, #1
 800365c:	460c      	mov	r4, r1
 800365e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003660:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003662:	9a01      	ldr	r2, [sp, #4]
 8003664:	4293      	cmp	r3, r2
 8003666:	db02      	blt.n	800366e <forward_shuffled_without_overhead_activations_at_end+0x2e>
                result = scmd *scmd;
                result = scmd *scmd;
            }
        } 
    }
}
 8003668:	b011      	add	sp, #68	@ 0x44
 800366a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rand_n_idx = rand_n_indices[i - 1];
 800366e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003670:	9a04      	ldr	r2, [sp, #16]
 8003672:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003676:	3b01      	subs	r3, #1
        for (volatile j=0; j<net.layers[i].num_neurons; j++){
 8003678:	f04f 0800 	mov.w	r8, #0
        rand_n_idx = rand_n_indices[i - 1];
 800367c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003680:	9306      	str	r3, [sp, #24]
        for (volatile j=0; j<net.layers[i].num_neurons; j++){
 8003682:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8003686:	2514      	movs	r5, #20
            for (volatile k=0; k<net.layers[i - 1].num_neurons; k++){
 8003688:	f06f 4960 	mvn.w	r9, #3758096384	@ 0xe0000000
        for (volatile j=0; j<net.layers[i].num_neurons; j++){
 800368c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800368e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003690:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8003694:	429a      	cmp	r2, r3
 8003696:	dc12      	bgt.n	80036be <forward_shuffled_without_overhead_activations_at_end+0x7e>
        for (volatile j=0; j<net.layers[i].num_neurons; j++) {
 8003698:	2300      	movs	r3, #0
 800369a:	930e      	str	r3, [sp, #56]	@ 0x38
            if(i < net.num_layers-1){
 800369c:	9b01      	ldr	r3, [sp, #4]
                net.layers[i].neurons[nidx].a = 1/(1+exp(-net.layers[i].neurons[nidx].z));
 800369e:	437d      	muls	r5, r7
            if(i < net.num_layers-1){
 80036a0:	f103 38ff 	add.w	r8, r3, #4294967295
        for (volatile j=0; j<net.layers[i].num_neurons; j++) {
 80036a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80036a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80036a8:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	dc7d      	bgt.n	80037ac <forward_shuffled_without_overhead_activations_at_end+0x16c>
        if (dummy_operations > 0){
 80036b0:	9b02      	ldr	r3, [sp, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f300 80b8 	bgt.w	8003828 <forward_shuffled_without_overhead_activations_at_end+0x1e8>
    for (volatile i=1; i<net.num_layers; i++){
 80036b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80036ba:	3301      	adds	r3, #1
 80036bc:	e7cf      	b.n	800365e <forward_shuffled_without_overhead_activations_at_end+0x1e>
            nidx = rand_n_idx[j];  
 80036be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80036c0:	9a06      	ldr	r2, [sp, #24]
            rand_w_idx = rand_ws_indices[i - 1][j];
 80036c2:	9905      	ldr	r1, [sp, #20]
            nidx = rand_n_idx[j];  
 80036c4:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
            net.layers[i].neurons[nidx].z = net.layers[i].neurons[nidx].bias;
 80036c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80036ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80036cc:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80036d0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80036d4:	6852      	ldr	r2, [r2, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	fb05 f607 	mul.w	r6, r5, r7
 80036dc:	4432      	add	r2, r6
 80036de:	4433      	add	r3, r6
 80036e0:	6892      	ldr	r2, [r2, #8]
 80036e2:	60da      	str	r2, [r3, #12]
            rand_w_idx = rand_ws_indices[i - 1][j];
 80036e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80036e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
            for (volatile k=0; k<net.layers[i - 1].num_neurons; k++){
 80036e8:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
            rand_w_idx = rand_ws_indices[i - 1][j];
 80036ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036f0:	3b01      	subs	r3, #1
 80036f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                ((net.layers[i-1].neurons[rand_w_idx[k]].weights[nidx]) * (net.layers[i-1].neurons[rand_w_idx[k]].a));
 80036fa:	00ba      	lsls	r2, r7, #2
 80036fc:	9203      	str	r2, [sp, #12]
            for (volatile k=0; k<net.layers[i - 1].num_neurons; k++){
 80036fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003700:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8003702:	4449      	add	r1, r9
 8003704:	f854 1031 	ldr.w	r1, [r4, r1, lsl #3]
 8003708:	4281      	cmp	r1, r0
 800370a:	dc12      	bgt.n	8003732 <forward_shuffled_without_overhead_activations_at_end+0xf2>
            net.layers[i].neurons[nidx].a = net.layers[i].neurons[nidx].z;
 800370c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800370e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003710:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8003714:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8003718:	6852      	ldr	r2, [r2, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	4432      	add	r2, r6
 800371e:	4433      	add	r3, r6
 8003720:	68d2      	ldr	r2, [r2, #12]
 8003722:	611a      	str	r2, [r3, #16]
            if (dummy_operations > 1){
 8003724:	9b02      	ldr	r3, [sp, #8]
 8003726:	2b01      	cmp	r3, #1
 8003728:	dc37      	bgt.n	800379a <forward_shuffled_without_overhead_activations_at_end+0x15a>
        for (volatile j=0; j<net.layers[i].num_neurons; j++){
 800372a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800372c:	3301      	adds	r3, #1
 800372e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003730:	e7ac      	b.n	800368c <forward_shuffled_without_overhead_activations_at_end+0x4c>
                net.layers[i].neurons[nidx].z = net.layers[i].neurons[nidx].z +
 8003732:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
                ((net.layers[i-1].neurons[rand_w_idx[k]].weights[nidx]) * (net.layers[i-1].neurons[rand_w_idx[k]].a));
 8003736:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003738:	f8dd e030 	ldr.w	lr, [sp, #48]	@ 0x30
 800373c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800373e:	f853 e02e 	ldr.w	lr, [r3, lr, lsl #2]
 8003742:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003744:	9307      	str	r3, [sp, #28]
 8003746:	4448      	add	r0, r9
 8003748:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800374c:	4449      	add	r1, r9
 800374e:	6840      	ldr	r0, [r0, #4]
 8003750:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003754:	9b03      	ldr	r3, [sp, #12]
                net.layers[i].neurons[nidx].z = net.layers[i].neurons[nidx].z +
 8003756:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
                ((net.layers[i-1].neurons[rand_w_idx[k]].weights[nidx]) * (net.layers[i-1].neurons[rand_w_idx[k]].a));
 800375a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800375e:	fb05 000e 	mla	r0, r5, lr, r0
 8003762:	6849      	ldr	r1, [r1, #4]
 8003764:	6840      	ldr	r0, [r0, #4]
 8003766:	fb05 1102 	mla	r1, r5, r2, r1
                net.layers[i].neurons[nidx].z = net.layers[i].neurons[nidx].z +
 800376a:	eb04 0bcb 	add.w	fp, r4, fp, lsl #3
                ((net.layers[i-1].neurons[rand_w_idx[k]].weights[nidx]) * (net.layers[i-1].neurons[rand_w_idx[k]].a));
 800376e:	58c0      	ldr	r0, [r0, r3]
 8003770:	6909      	ldr	r1, [r1, #16]
 8003772:	f7fc ff91 	bl	8000698 <__aeabi_fmul>
                net.layers[i].neurons[nidx].z = net.layers[i].neurons[nidx].z +
 8003776:	f8db 1004 	ldr.w	r1, [fp, #4]
 800377a:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
 800377e:	4431      	add	r1, r6
 8003780:	f8da a004 	ldr.w	sl, [sl, #4]
 8003784:	68c9      	ldr	r1, [r1, #12]
 8003786:	f7fd fd25 	bl	80011d4 <__addsf3>
            for (volatile k=0; k<net.layers[i - 1].num_neurons; k++){
 800378a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800378c:	9b07      	ldr	r3, [sp, #28]
                net.layers[i].neurons[nidx].z = net.layers[i].neurons[nidx].z +
 800378e:	44b2      	add	sl, r6
            for (volatile k=0; k<net.layers[i - 1].num_neurons; k++){
 8003790:	3101      	adds	r1, #1
                net.layers[i].neurons[nidx].z = net.layers[i].neurons[nidx].z +
 8003792:	f8ca 000c 	str.w	r0, [sl, #12]
            for (volatile k=0; k<net.layers[i - 1].num_neurons; k++){
 8003796:	910c      	str	r1, [sp, #48]	@ 0x30
 8003798:	e7b1      	b.n	80036fe <forward_shuffled_without_overhead_activations_at_end+0xbe>
            for (volatile int dummy_i = 0; dummy_i<50; dummy_i++) {
 800379a:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 800379e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80037a0:	2b31      	cmp	r3, #49	@ 0x31
 80037a2:	dcc2      	bgt.n	800372a <forward_shuffled_without_overhead_activations_at_end+0xea>
 80037a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80037a6:	3301      	adds	r3, #1
 80037a8:	930d      	str	r3, [sp, #52]	@ 0x34
 80037aa:	e7f8      	b.n	800379e <forward_shuffled_without_overhead_activations_at_end+0x15e>
            if(i < net.num_layers-1){
 80037ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80037ae:	4598      	cmp	r8, r3
                if((net.layers[i].neurons[nidx].z) < 0)
 80037b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80037b2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	442b      	add	r3, r5
            if(i < net.num_layers-1){
 80037ba:	dd1b      	ble.n	80037f4 <forward_shuffled_without_overhead_activations_at_end+0x1b4>
                if((net.layers[i].neurons[nidx].z) < 0)
 80037bc:	68d8      	ldr	r0, [r3, #12]
 80037be:	2100      	movs	r1, #0
 80037c0:	f7fd fe5e 	bl	8001480 <__aeabi_fcmplt>
 80037c4:	b150      	cbz	r0, 80037dc <forward_shuffled_without_overhead_activations_at_end+0x19c>
                    net.layers[i].neurons[nidx].a = 0;
 80037c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80037c8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80037cc:	2200      	movs	r2, #0
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	442b      	add	r3, r5
                    net.layers[i].neurons[nidx].a = net.layers[i].neurons[nidx].z;
 80037d2:	611a      	str	r2, [r3, #16]
        for (volatile j=0; j<net.layers[i].num_neurons; j++) {
 80037d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80037d6:	3301      	adds	r3, #1
 80037d8:	930e      	str	r3, [sp, #56]	@ 0x38
 80037da:	e763      	b.n	80036a4 <forward_shuffled_without_overhead_activations_at_end+0x64>
                    net.layers[i].neurons[nidx].a = net.layers[i].neurons[nidx].z;
 80037dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80037de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80037e0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80037e4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80037e8:	6852      	ldr	r2, [r2, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	442a      	add	r2, r5
 80037ee:	442b      	add	r3, r5
 80037f0:	68d2      	ldr	r2, [r2, #12]
 80037f2:	e7ee      	b.n	80037d2 <forward_shuffled_without_overhead_activations_at_end+0x192>
                net.layers[i].neurons[nidx].a = 1/(1+exp(-net.layers[i].neurons[nidx].z));
 80037f4:	68d8      	ldr	r0, [r3, #12]
 80037f6:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80037fa:	f7fd f965 	bl	8000ac8 <__aeabi_f2d>
 80037fe:	f7fc fcc7 	bl	8000190 <exp>
 8003802:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003804:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8003808:	2200      	movs	r2, #0
 800380a:	685e      	ldr	r6, [r3, #4]
 800380c:	4b0b      	ldr	r3, [pc, #44]	@ (800383c <forward_shuffled_without_overhead_activations_at_end+0x1fc>)
 800380e:	f7fc fffd 	bl	800080c <__adddf3>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	2000      	movs	r0, #0
 8003818:	4908      	ldr	r1, [pc, #32]	@ (800383c <forward_shuffled_without_overhead_activations_at_end+0x1fc>)
 800381a:	f7fd fad7 	bl	8000dcc <__aeabi_ddiv>
 800381e:	f7fd fc83 	bl	8001128 <__aeabi_d2f>
 8003822:	442e      	add	r6, r5
 8003824:	6130      	str	r0, [r6, #16]
 8003826:	e7d5      	b.n	80037d4 <forward_shuffled_without_overhead_activations_at_end+0x194>
            for (volatile int dummy_i = 0; dummy_i<50; dummy_i++) {
 8003828:	2300      	movs	r3, #0
 800382a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800382c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800382e:	2b31      	cmp	r3, #49	@ 0x31
 8003830:	f73f af42 	bgt.w	80036b8 <forward_shuffled_without_overhead_activations_at_end+0x78>
 8003834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003836:	3301      	adds	r3, #1
 8003838:	e7f7      	b.n	800382a <forward_shuffled_without_overhead_activations_at_end+0x1ea>
 800383a:	bf00      	nop
 800383c:	3ff00000 	.word	0x3ff00000

08003840 <ss_crc>:


// 0xA6 formerly 
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 8003840:	b510      	push	{r4, lr}
 8003842:	4602      	mov	r2, r0
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 8003844:	4401      	add	r1, r0
	uint8_t crc = 0x00;
 8003846:	2000      	movs	r0, #0
	while (len--) {
 8003848:	428a      	cmp	r2, r1
 800384a:	d100      	bne.n	800384e <ss_crc+0xe>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
		}
	}
	return crc;

}
 800384c:	bd10      	pop	{r4, pc}
		crc ^= *buf++;
 800384e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8003852:	2408      	movs	r4, #8
 8003854:	4058      	eors	r0, r3
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8003856:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800385a:	ea4f 0340 	mov.w	r3, r0, lsl #1
 800385e:	bf18      	it	ne
 8003860:	f083 034d 	eorne.w	r3, r3, #77	@ 0x4d
		for (k = 0; k < 8; k++) {
 8003864:	3c01      	subs	r4, #1
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8003866:	b2d8      	uxtb	r0, r3
		for (k = 0; k < 8; k++) {
 8003868:	d1f5      	bne.n	8003856 <ss_crc+0x16>
 800386a:	e7ed      	b.n	8003848 <ss_crc+0x8>

0800386c <stuff_data>:
    return 0x00;

}

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
 800386c:	b530      	push	{r4, r5, lr}
	uint8_t i = 1;
	uint8_t last = 0;
 800386e:	2200      	movs	r2, #0
 8003870:	4604      	mov	r4, r0
	uint8_t i = 1;
 8003872:	2301      	movs	r3, #1
	for (; i < len; i++) {
 8003874:	428b      	cmp	r3, r1
 8003876:	d301      	bcc.n	800387c <stuff_data+0x10>
			buf[last] = i - last;
			last = i;
		}
	}
	return 0x00;
}
 8003878:	2000      	movs	r0, #0
 800387a:	bd30      	pop	{r4, r5, pc}
		if (buf[i] == FRAME_BYTE) {
 800387c:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8003880:	b915      	cbnz	r5, 8003888 <stuff_data+0x1c>
			buf[last] = i - last;
 8003882:	1a9d      	subs	r5, r3, r2
 8003884:	5485      	strb	r5, [r0, r2]
 8003886:	461a      	mov	r2, r3
	for (; i < len; i++) {
 8003888:	3301      	adds	r3, #1
 800388a:	b2db      	uxtb	r3, r3
 800388c:	e7f2      	b.n	8003874 <stuff_data+0x8>

0800388e <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 800388e:	b530      	push	{r4, r5, lr}
	uint8_t next = buf[0];
 8003890:	7804      	ldrb	r4, [r0, #0]
	buf[0] = 0x00;
 8003892:	2500      	movs	r5, #0
{
 8003894:	4602      	mov	r2, r0
	buf[0] = 0x00;
 8003896:	7005      	strb	r5, [r0, #0]
	uint8_t next = buf[0];
 8003898:	4620      	mov	r0, r4
	//len -= 1;
	uint8_t tmp = next;
	while ((next < len) && tmp != 0) {
 800389a:	4288      	cmp	r0, r1
 800389c:	d200      	bcs.n	80038a0 <unstuff_data+0x12>
 800389e:	b904      	cbnz	r4, 80038a2 <unstuff_data+0x14>
		tmp = buf[next];
		buf[next] = FRAME_BYTE;
		next += tmp;
	}
	return next;
}
 80038a0:	bd30      	pop	{r4, r5, pc}
		tmp = buf[next];
 80038a2:	5c14      	ldrb	r4, [r2, r0]
		buf[next] = FRAME_BYTE;
 80038a4:	5415      	strb	r5, [r2, r0]
		next += tmp;
 80038a6:	1903      	adds	r3, r0, r4
 80038a8:	b2d8      	uxtb	r0, r3
 80038aa:	e7f6      	b.n	800389a <unstuff_data+0xc>

080038ac <simpleserial_addcmd>:
	simpleserial_addcmd('v', 0, check_version);
    simpleserial_addcmd('w', 0, ss_get_commands);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 80038ac:	b538      	push	{r3, r4, r5, lr}
	if(num_commands >= MAX_SS_CMDS) {
 80038ae:	4d0b      	ldr	r5, [pc, #44]	@ (80038dc <simpleserial_addcmd+0x30>)
 80038b0:	682b      	ldr	r3, [r5, #0]
 80038b2:	2b0f      	cmp	r3, #15
 80038b4:	dd04      	ble.n	80038c0 <simpleserial_addcmd+0x14>
		putch('a');
 80038b6:	2061      	movs	r0, #97	@ 0x61
		return 1;
	}

	if(len >= MAX_SS_LEN) {
		putch('b');
 80038b8:	f000 f9b2 	bl	8003c20 <putch>
		return 1;
 80038bc:	2001      	movs	r0, #1
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 80038be:	bd38      	pop	{r3, r4, r5, pc}
	if(len >= MAX_SS_LEN) {
 80038c0:	29ff      	cmp	r1, #255	@ 0xff
 80038c2:	d901      	bls.n	80038c8 <simpleserial_addcmd+0x1c>
		putch('b');
 80038c4:	2062      	movs	r0, #98	@ 0x62
 80038c6:	e7f7      	b.n	80038b8 <simpleserial_addcmd+0xc>
	commands[num_commands].c   = c;
 80038c8:	240c      	movs	r4, #12
 80038ca:	fb04 5403 	mla	r4, r4, r3, r5
	num_commands++;
 80038ce:	3301      	adds	r3, #1
	commands[num_commands].c   = c;
 80038d0:	7120      	strb	r0, [r4, #4]
	commands[num_commands].fp  = fp;
 80038d2:	e9c4 1202 	strd	r1, r2, [r4, #8]
	num_commands++;
 80038d6:	602b      	str	r3, [r5, #0]
	return 0;
 80038d8:	2000      	movs	r0, #0
 80038da:	e7f0      	b.n	80038be <simpleserial_addcmd+0x12>
 80038dc:	2000005c 	.word	0x2000005c

080038e0 <simpleserial_init>:
{
 80038e0:	b508      	push	{r3, lr}
	simpleserial_addcmd('v', 0, check_version);
 80038e2:	4a06      	ldr	r2, [pc, #24]	@ (80038fc <simpleserial_init+0x1c>)
 80038e4:	2100      	movs	r1, #0
 80038e6:	2076      	movs	r0, #118	@ 0x76
 80038e8:	f7ff ffe0 	bl	80038ac <simpleserial_addcmd>
}
 80038ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    simpleserial_addcmd('w', 0, ss_get_commands);
 80038f0:	4a03      	ldr	r2, [pc, #12]	@ (8003900 <simpleserial_init+0x20>)
 80038f2:	2100      	movs	r1, #0
 80038f4:	2077      	movs	r0, #119	@ 0x77
 80038f6:	f7ff bfd9 	b.w	80038ac <simpleserial_addcmd>
 80038fa:	bf00      	nop
 80038fc:	0800395b 	.word	0x0800395b
 8003900:	08003979 	.word	0x08003979

08003904 <simpleserial_put>:
	simpleserial_put('e', 0x01, &err);
	return;
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8003904:	b570      	push	{r4, r5, r6, lr}
 8003906:	b0c0      	sub	sp, #256	@ 0x100
 8003908:	460c      	mov	r4, r1
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 800390a:	2500      	movs	r5, #0
{
 800390c:	4611      	mov	r1, r2
	data_buf[1] = c;
 800390e:	f88d 0001 	strb.w	r0, [sp, #1]
	data_buf[2] = size;
	int i = 0;
	for (; i < size; i++) {
		data_buf[i + 3] = output[i];
 8003912:	4622      	mov	r2, r4
 8003914:	f10d 0003 	add.w	r0, sp, #3
	data_buf[2] = size;
 8003918:	f88d 4002 	strb.w	r4, [sp, #2]
	data_buf[0] = 0x00;
 800391c:	f88d 5000 	strb.w	r5, [sp]
		data_buf[i + 3] = output[i];
 8003920:	f7fe fa12 	bl	8001d48 <memcpy>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8003924:	1ca1      	adds	r1, r4, #2
 8003926:	b2c9      	uxtb	r1, r1
 8003928:	f10d 0001 	add.w	r0, sp, #1
 800392c:	f7ff ff88 	bl	8003840 <ss_crc>
 8003930:	eb0d 0304 	add.w	r3, sp, r4
	data_buf[i + 4] = 0x00;
 8003934:	1d26      	adds	r6, r4, #4
	stuff_data(data_buf, i + 5);
 8003936:	1d61      	adds	r1, r4, #5
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8003938:	70d8      	strb	r0, [r3, #3]
	stuff_data(data_buf, i + 5);
 800393a:	b2c9      	uxtb	r1, r1
 800393c:	4668      	mov	r0, sp
	data_buf[i + 4] = 0x00;
 800393e:	f80d 5006 	strb.w	r5, [sp, r6]
	stuff_data(data_buf, i + 5);
 8003942:	f7ff ff93 	bl	800386c <stuff_data>
	for (int i = 0; i < size + 5; i++) {
 8003946:	466c      	mov	r4, sp
		putch(data_buf[i]);
 8003948:	f814 0b01 	ldrb.w	r0, [r4], #1
	for (int i = 0; i < size + 5; i++) {
 800394c:	3501      	adds	r5, #1
		putch(data_buf[i]);
 800394e:	f000 f967 	bl	8003c20 <putch>
	for (int i = 0; i < size + 5; i++) {
 8003952:	42ae      	cmp	r6, r5
 8003954:	daf8      	bge.n	8003948 <simpleserial_put+0x44>
	}
}
 8003956:	b040      	add	sp, #256	@ 0x100
 8003958:	bd70      	pop	{r4, r5, r6, pc}

0800395a <check_version>:
{
 800395a:	b507      	push	{r0, r1, r2, lr}
	uint8_t ver = SS_VER;
 800395c:	2303      	movs	r3, #3
	simpleserial_put('r', 1, &ver);
 800395e:	f10d 0207 	add.w	r2, sp, #7
 8003962:	2101      	movs	r1, #1
 8003964:	2072      	movs	r0, #114	@ 0x72
	uint8_t ver = SS_VER;
 8003966:	f88d 3007 	strb.w	r3, [sp, #7]
	simpleserial_put('r', 1, &ver);
 800396a:	f7ff ffcb 	bl	8003904 <simpleserial_put>
}
 800396e:	2000      	movs	r0, #0
 8003970:	b003      	add	sp, #12
 8003972:	f85d fb04 	ldr.w	pc, [sp], #4
 8003976:	0000      	movs	r0, r0

08003978 <ss_get_commands>:
{
 8003978:	b530      	push	{r4, r5, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800397a:	480d      	ldr	r0, [pc, #52]	@ (80039b0 <ss_get_commands+0x38>)
 800397c:	7801      	ldrb	r1, [r0, #0]
{
 800397e:	b085      	sub	sp, #20
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8003980:	2200      	movs	r2, #0
        cmd_chars[i] = commands[i].c;
 8003982:	240c      	movs	r4, #12
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8003984:	b2d3      	uxtb	r3, r2
 8003986:	428b      	cmp	r3, r1
 8003988:	f102 0201 	add.w	r2, r2, #1
 800398c:	db06      	blt.n	800399c <ss_get_commands+0x24>
    simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 800398e:	466a      	mov	r2, sp
 8003990:	2072      	movs	r0, #114	@ 0x72
 8003992:	f7ff ffb7 	bl	8003904 <simpleserial_put>
}
 8003996:	2000      	movs	r0, #0
 8003998:	b005      	add	sp, #20
 800399a:	bd30      	pop	{r4, r5, pc}
        cmd_chars[i] = commands[i].c;
 800399c:	f103 0510 	add.w	r5, r3, #16
 80039a0:	fb04 0303 	mla	r3, r4, r3, r0
 80039a4:	446d      	add	r5, sp
 80039a6:	791b      	ldrb	r3, [r3, #4]
 80039a8:	f805 3c10 	strb.w	r3, [r5, #-16]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80039ac:	e7ea      	b.n	8003984 <ss_get_commands+0xc>
 80039ae:	bf00      	nop
 80039b0:	2000005c 	.word	0x2000005c

080039b4 <simpleserial_get>:
{
 80039b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039b8:	b0c2      	sub	sp, #264	@ 0x108
	uint8_t err = 0;
 80039ba:	2500      	movs	r5, #0
 80039bc:	ae02      	add	r6, sp, #8
 80039be:	f88d 5007 	strb.w	r5, [sp, #7]
	for (int i = 0; i < 4; i++) {
 80039c2:	4634      	mov	r4, r6
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 80039c4:	f000 f912 	bl	8003bec <getch>
 80039c8:	f806 0b01 	strb.w	r0, [r6], #1
		if (data_buf[i] == FRAME_BYTE) {
 80039cc:	b958      	cbnz	r0, 80039e6 <simpleserial_get+0x32>
			goto ERROR;
 80039ce:	2005      	movs	r0, #5
			err = SS_ERR_FRAME_BYTE;
 80039d0:	f88d 0007 	strb.w	r0, [sp, #7]
	simpleserial_put('e', 0x01, &err);
 80039d4:	f10d 0207 	add.w	r2, sp, #7
 80039d8:	2101      	movs	r1, #1
 80039da:	2065      	movs	r0, #101	@ 0x65
 80039dc:	f7ff ff92 	bl	8003904 <simpleserial_put>
}
 80039e0:	b042      	add	sp, #264	@ 0x108
 80039e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < 4; i++) {
 80039e6:	3501      	adds	r5, #1
 80039e8:	2d04      	cmp	r5, #4
 80039ea:	d1eb      	bne.n	80039c4 <simpleserial_get+0x10>
	uint8_t next_frame = unstuff_data(data_buf, 4);
 80039ec:	4629      	mov	r1, r5
 80039ee:	4620      	mov	r0, r4
 80039f0:	f7ff ff4d 	bl	800388e <unstuff_data>
	for(c = 0; c < num_commands; c++)
 80039f4:	4f24      	ldr	r7, [pc, #144]	@ (8003a88 <simpleserial_get+0xd4>)
		if(commands[c].c == data_buf[1])
 80039f6:	7861      	ldrb	r1, [r4, #1]
	for(c = 0; c < num_commands; c++)
 80039f8:	683a      	ldr	r2, [r7, #0]
	uint8_t next_frame = unstuff_data(data_buf, 4);
 80039fa:	4680      	mov	r8, r0
	for(c = 0; c < num_commands; c++)
 80039fc:	2300      	movs	r3, #0
		if(commands[c].c == data_buf[1])
 80039fe:	200c      	movs	r0, #12
	for(c = 0; c < num_commands; c++)
 8003a00:	fa5f f983 	uxtb.w	r9, r3
 8003a04:	4591      	cmp	r9, r2
 8003a06:	db02      	blt.n	8003a0e <simpleserial_get+0x5a>
	if (c == num_commands) {
 8003a08:	d107      	bne.n	8003a1a <simpleserial_get+0x66>
 8003a0a:	2001      	movs	r0, #1
 8003a0c:	e7e0      	b.n	80039d0 <simpleserial_get+0x1c>
		if(commands[c].c == data_buf[1])
 8003a0e:	fb00 7609 	mla	r6, r0, r9, r7
 8003a12:	3301      	adds	r3, #1
 8003a14:	7936      	ldrb	r6, [r6, #4]
 8003a16:	428e      	cmp	r6, r1
 8003a18:	d1f2      	bne.n	8003a00 <simpleserial_get+0x4c>
	if ((data_buf[3] + 5) < next_frame) {
 8003a1a:	78e3      	ldrb	r3, [r4, #3]
 8003a1c:	3305      	adds	r3, #5
 8003a1e:	4543      	cmp	r3, r8
 8003a20:	da02      	bge.n	8003a28 <simpleserial_get+0x74>
		goto ERROR;
 8003a22:	2004      	movs	r0, #4
 8003a24:	e7d4      	b.n	80039d0 <simpleserial_get+0x1c>
	for (; i < data_buf[3] + 5; i++) {
 8003a26:	4635      	mov	r5, r6
		data_buf[i] = getch();
 8003a28:	f000 f8e0 	bl	8003bec <getch>
 8003a2c:	5560      	strb	r0, [r4, r5]
		if (data_buf[i] == FRAME_BYTE) {
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	d0cd      	beq.n	80039ce <simpleserial_get+0x1a>
	for (; i < data_buf[3] + 5; i++) {
 8003a32:	78e3      	ldrb	r3, [r4, #3]
 8003a34:	1c6e      	adds	r6, r5, #1
 8003a36:	3304      	adds	r3, #4
 8003a38:	42b3      	cmp	r3, r6
 8003a3a:	daf4      	bge.n	8003a26 <simpleserial_get+0x72>
	data_buf[i] = getch();
 8003a3c:	f000 f8d6 	bl	8003bec <getch>
 8003a40:	55a0      	strb	r0, [r4, r6]
	if (data_buf[i] != FRAME_BYTE) {
 8003a42:	2800      	cmp	r0, #0
 8003a44:	d1ed      	bne.n	8003a22 <simpleserial_get+0x6e>
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 8003a46:	f1c8 0301 	rsb	r3, r8, #1
 8003a4a:	fa53 f186 	uxtab	r1, r3, r6
 8003a4e:	b2c9      	uxtb	r1, r1
 8003a50:	fa5f fa86 	uxtb.w	sl, r6
 8003a54:	eb04 0008 	add.w	r0, r4, r8
 8003a58:	f7ff ff19 	bl	800388e <unstuff_data>
	uint8_t crc = ss_crc(data_buf+1, i-2);
 8003a5c:	f1aa 0102 	sub.w	r1, sl, #2
 8003a60:	b2c9      	uxtb	r1, r1
 8003a62:	f10d 0009 	add.w	r0, sp, #9
 8003a66:	f7ff feeb 	bl	8003840 <ss_crc>
	if (crc != data_buf[i-1]) {
 8003a6a:	5d63      	ldrb	r3, [r4, r5]
 8003a6c:	4283      	cmp	r3, r0
 8003a6e:	d109      	bne.n	8003a84 <simpleserial_get+0xd0>
	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 8003a70:	230c      	movs	r3, #12
 8003a72:	fb03 7709 	mla	r7, r3, r9, r7
 8003a76:	78e2      	ldrb	r2, [r4, #3]
 8003a78:	68fd      	ldr	r5, [r7, #12]
 8003a7a:	78a1      	ldrb	r1, [r4, #2]
 8003a7c:	7860      	ldrb	r0, [r4, #1]
 8003a7e:	446b      	add	r3, sp
 8003a80:	47a8      	blx	r5
 8003a82:	e7a5      	b.n	80039d0 <simpleserial_get+0x1c>
 8003a84:	2002      	movs	r0, #2
 8003a86:	e7a3      	b.n	80039d0 <simpleserial_get+0x1c>
 8003a88:	2000005c 	.word	0x2000005c

08003a8c <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8003a8c:	b570      	push	{r4, r5, r6, lr}
 8003a8e:	b096      	sub	sp, #88	@ 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8003a90:	2400      	movs	r4, #0
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8003a92:	2603      	movs	r6, #3
 8003a94:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003a98:	a80c      	add	r0, sp, #48	@ 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8003a9a:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8003a9c:	e9cd 630c 	strd	r6, r3, [sp, #48]	@ 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8003aa0:	9410      	str	r4, [sp, #64]	@ 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8003aa2:	9414      	str	r4, [sp, #80]	@ 0x50
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003aa4:	f000 f8d4 	bl	8003c50 <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8003aa8:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8003aaa:	4621      	mov	r1, r4
 8003aac:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8003aae:	e9cd 3502 	strd	r3, r5, [sp, #8]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ab2:	e9cd 4404 	strd	r4, r4, [sp, #16]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ab6:	9406      	str	r4, [sp, #24]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8003ab8:	f000 fb1c 	bl	80040f4 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003abc:	4b11      	ldr	r3, [pc, #68]	@ (8003b04 <platform_init+0x78>)
 8003abe:	695a      	ldr	r2, [r3, #20]
 8003ac0:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003ac4:	615a      	str	r2, [r3, #20]
 8003ac6:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003ac8:	e9cd 4609 	strd	r4, r6, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003acc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8003ad0:	4c0d      	ldr	r4, [pc, #52]	@ (8003b08 <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ad2:	9301      	str	r3, [sp, #4]
 8003ad4:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8003ad6:	a907      	add	r1, sp, #28
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8003ad8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8003adc:	4620      	mov	r0, r4
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8003ade:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8003ae2:	f000 fba7 	bl	8004234 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8003ae6:	462a      	mov	r2, r5
 8003ae8:	4620      	mov	r0, r4
 8003aea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003aee:	f000 fc61 	bl	80043b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8003af2:	462a      	mov	r2, r5
 8003af4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003af8:	4620      	mov	r0, r4
 8003afa:	f000 fc5b 	bl	80043b4 <HAL_GPIO_WritePin>
#endif
}
 8003afe:	b016      	add	sp, #88	@ 0x58
 8003b00:	bd70      	pop	{r4, r5, r6, pc}
 8003b02:	bf00      	nop
 8003b04:	40021000 	.word	0x40021000
 8003b08:	48000800 	.word	0x48000800

08003b0c <init_uart>:

void init_uart(void)
{
 8003b0c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8003b0e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
{
 8003b12:	b088      	sub	sp, #32
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8003b14:	2302      	movs	r3, #2
 8003b16:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GpioInit.Pull      = GPIO_PULLUP;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 8003b22:	4c16      	ldr	r4, [pc, #88]	@ (8003b7c <init_uart+0x70>)
  GpioInit.Alternate = GPIO_AF7_USART1;
 8003b24:	2307      	movs	r3, #7
 8003b26:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8003b28:	6963      	ldr	r3, [r4, #20]
 8003b2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b2e:	6163      	str	r3, [r4, #20]
 8003b30:	6963      	ldr	r3, [r4, #20]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b36:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8003b38:	a903      	add	r1, sp, #12
 8003b3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  __GPIOA_CLK_ENABLE();
 8003b3e:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8003b40:	f000 fb78 	bl	8004234 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8003b44:	480e      	ldr	r0, [pc, #56]	@ (8003b80 <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 8003b46:	f8df c03c 	ldr.w	ip, [pc, #60]	@ 8003b84 <init_uart+0x78>
 8003b4a:	f44f 3361 	mov.w	r3, #230400	@ 0x38400
 8003b4e:	e9c0 c300 	strd	ip, r3, [r0]
  #else
  UartHandle.Init.BaudRate   = 38400;
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8003b52:	2300      	movs	r3, #0
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8003b54:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8003b58:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8003b5a:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8003b5c:	230c      	movs	r3, #12
 8003b5e:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 8003b60:	69a3      	ldr	r3, [r4, #24]
 8003b62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b66:	61a3      	str	r3, [r4, #24]
 8003b68:	69a3      	ldr	r3, [r4, #24]
 8003b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b6e:	9302      	str	r3, [sp, #8]
 8003b70:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 8003b72:	f000 fd5b 	bl	800462c <HAL_UART_Init>
}
 8003b76:	b008      	add	sp, #32
 8003b78:	bd10      	pop	{r4, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	20000120 	.word	0x20000120
 8003b84:	40013800 	.word	0x40013800

08003b88 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b88:	4b10      	ldr	r3, [pc, #64]	@ (8003bcc <trigger_setup+0x44>)
{
 8003b8a:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b8c:	695a      	ldr	r2, [r3, #20]
 8003b8e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003b92:	615a      	str	r2, [r3, #20]
 8003b94:	695b      	ldr	r3, [r3, #20]
{
 8003b96:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8003ba0:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e9cd 4301 	strd	r4, r3, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003baa:	2500      	movs	r5, #0
 8003bac:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8003bae:	a901      	add	r1, sp, #4
 8003bb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003bb4:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8003bb8:	f000 fb3c 	bl	8004234 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8003bbc:	462a      	mov	r2, r5
 8003bbe:	4621      	mov	r1, r4
 8003bc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bc4:	f000 fbf6 	bl	80043b4 <HAL_GPIO_WritePin>
}
 8003bc8:	b007      	add	sp, #28
 8003bca:	bd30      	pop	{r4, r5, pc}
 8003bcc:	40021000 	.word	0x40021000

08003bd0 <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003bd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bda:	f000 bbeb 	b.w	80043b4 <HAL_GPIO_WritePin>

08003bde <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8003bde:	2200      	movs	r2, #0
 8003be0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003be4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003be8:	f000 bbe4 	b.w	80043b4 <HAL_GPIO_WritePin>

08003bec <getch>:
}

char getch(void)
{
 8003bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8003bee:	4d0a      	ldr	r5, [pc, #40]	@ (8003c18 <getch+0x2c>)
    USART1->ICR |= (1 << 3);
 8003bf0:	4c0a      	ldr	r4, [pc, #40]	@ (8003c1c <getch+0x30>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8003bf2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f10d 0107 	add.w	r1, sp, #7
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	f000 fd95 	bl	800472c <HAL_UART_Receive>
 8003c02:	b918      	cbnz	r0, 8003c0c <getch+0x20>
  //putch(d);
  return d;
}
 8003c04:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003c08:	b003      	add	sp, #12
 8003c0a:	bd30      	pop	{r4, r5, pc}
    USART1->ICR |= (1 << 3);
 8003c0c:	6a23      	ldr	r3, [r4, #32]
 8003c0e:	f043 0308 	orr.w	r3, r3, #8
 8003c12:	6223      	str	r3, [r4, #32]
 8003c14:	e7ed      	b.n	8003bf2 <getch+0x6>
 8003c16:	bf00      	nop
 8003c18:	20000120 	.word	0x20000120
 8003c1c:	40013800 	.word	0x40013800

08003c20 <putch>:

void putch(char c)
{
 8003c20:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8003c22:	f241 3388 	movw	r3, #5000	@ 0x1388
  uint8_t d  = c;
 8003c26:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f10d 0107 	add.w	r1, sp, #7
 8003c30:	4802      	ldr	r0, [pc, #8]	@ (8003c3c <putch+0x1c>)
 8003c32:	f000 fd25 	bl	8004680 <HAL_UART_Transmit>
}
 8003c36:	b003      	add	sp, #12
 8003c38:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c3c:	20000120 	.word	0x20000120

08003c40 <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 8003c40:	4b02      	ldr	r3, [pc, #8]	@ (8003c4c <HAL_GetTick+0xc>)
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	1c42      	adds	r2, r0, #1
 8003c46:	601a      	str	r2, [r3, #0]
}
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20000190 	.word	0x20000190

08003c50 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c50:	6803      	ldr	r3, [r0, #0]
{
 8003c52:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c56:	07d9      	lsls	r1, r3, #31
{
 8003c58:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c5a:	d411      	bmi.n	8003c80 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	079a      	lsls	r2, r3, #30
 8003c60:	f100 808b 	bmi.w	8003d7a <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	071e      	lsls	r6, r3, #28
 8003c68:	f100 80f3 	bmi.w	8003e52 <HAL_RCC_OscConfig+0x202>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	075d      	lsls	r5, r3, #29
 8003c70:	f100 8136 	bmi.w	8003ee0 <HAL_RCC_OscConfig+0x290>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c74:	69e2      	ldr	r2, [r4, #28]
 8003c76:	2a00      	cmp	r2, #0
 8003c78:	f040 81b8 	bne.w	8003fec <HAL_RCC_OscConfig+0x39c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	e01f      	b.n	8003cc0 <HAL_RCC_OscConfig+0x70>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003c80:	49b3      	ldr	r1, [pc, #716]	@ (8003f50 <HAL_RCC_OscConfig+0x300>)
 8003c82:	684b      	ldr	r3, [r1, #4]
 8003c84:	f003 030c 	and.w	r3, r3, #12
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d007      	beq.n	8003c9c <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c8c:	684b      	ldr	r3, [r1, #4]
 8003c8e:	f003 030c 	and.w	r3, r3, #12
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d117      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x76>
 8003c96:	684b      	ldr	r3, [r1, #4]
 8003c98:	03db      	lsls	r3, r3, #15
 8003c9a:	d514      	bpl.n	8003cc6 <HAL_RCC_OscConfig+0x76>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ca0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca4:	6809      	ldr	r1, [r1, #0]
 8003ca6:	fa93 f3a3 	rbit	r3, r3
 8003caa:	2201      	movs	r2, #1
 8003cac:	fab3 f383 	clz	r3, r3
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	420b      	tst	r3, r1
 8003cb6:	d0d1      	beq.n	8003c5c <HAL_RCC_OscConfig+0xc>
 8003cb8:	6863      	ldr	r3, [r4, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1ce      	bne.n	8003c5c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8003cbe:	2001      	movs	r0, #1
}
 8003cc0:	b003      	add	sp, #12
 8003cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cc6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cce:	d120      	bne.n	8003d12 <HAL_RCC_OscConfig+0xc2>
 8003cd0:	680b      	ldr	r3, [r1, #0]
 8003cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cd6:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cd8:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8003cda:	f023 030f 	bic.w	r3, r3, #15
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	62cb      	str	r3, [r1, #44]	@ 0x2c
        tickstart = HAL_GetTick();
 8003ce2:	f7ff ffad 	bl	8003c40 <HAL_GetTick>
 8003ce6:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
 8003cea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cec:	2701      	movs	r7, #1
 8003cee:	fa96 f3a6 	rbit	r3, r6
 8003cf2:	680a      	ldr	r2, [r1, #0]
 8003cf4:	fa96 f3a6 	rbit	r3, r6
 8003cf8:	fab3 f383 	clz	r3, r3
 8003cfc:	fa07 f303 	lsl.w	r3, r7, r3
 8003d00:	4213      	tst	r3, r2
 8003d02:	d1ab      	bne.n	8003c5c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d04:	f7ff ff9c 	bl	8003c40 <HAL_GetTick>
 8003d08:	1b40      	subs	r0, r0, r5
 8003d0a:	2864      	cmp	r0, #100	@ 0x64
 8003d0c:	d9ef      	bls.n	8003cee <HAL_RCC_OscConfig+0x9e>
            return HAL_TIMEOUT;
 8003d0e:	2003      	movs	r0, #3
 8003d10:	e7d6      	b.n	8003cc0 <HAL_RCC_OscConfig+0x70>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d12:	bb1b      	cbnz	r3, 8003d5c <HAL_RCC_OscConfig+0x10c>
 8003d14:	680b      	ldr	r3, [r1, #0]
 8003d16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d1a:	600b      	str	r3, [r1, #0]
 8003d1c:	680b      	ldr	r3, [r1, #0]
 8003d1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d22:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d24:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8003d26:	f023 030f 	bic.w	r3, r3, #15
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	62cb      	str	r3, [r1, #44]	@ 0x2c
        tickstart = HAL_GetTick();
 8003d2e:	f7ff ff87 	bl	8003c40 <HAL_GetTick>
 8003d32:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
 8003d36:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d38:	2701      	movs	r7, #1
 8003d3a:	fa96 f3a6 	rbit	r3, r6
 8003d3e:	680a      	ldr	r2, [r1, #0]
 8003d40:	fa96 f3a6 	rbit	r3, r6
 8003d44:	fab3 f383 	clz	r3, r3
 8003d48:	fa07 f303 	lsl.w	r3, r7, r3
 8003d4c:	4213      	tst	r3, r2
 8003d4e:	d085      	beq.n	8003c5c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d50:	f7ff ff76 	bl	8003c40 <HAL_GetTick>
 8003d54:	1b40      	subs	r0, r0, r5
 8003d56:	2864      	cmp	r0, #100	@ 0x64
 8003d58:	d9ef      	bls.n	8003d3a <HAL_RCC_OscConfig+0xea>
 8003d5a:	e7d8      	b.n	8003d0e <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d60:	680b      	ldr	r3, [r1, #0]
 8003d62:	d103      	bne.n	8003d6c <HAL_RCC_OscConfig+0x11c>
 8003d64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d68:	600b      	str	r3, [r1, #0]
 8003d6a:	e7b1      	b.n	8003cd0 <HAL_RCC_OscConfig+0x80>
 8003d6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d70:	600b      	str	r3, [r1, #0]
 8003d72:	680b      	ldr	r3, [r1, #0]
 8003d74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d78:	e7ad      	b.n	8003cd6 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d7a:	4975      	ldr	r1, [pc, #468]	@ (8003f50 <HAL_RCC_OscConfig+0x300>)
 8003d7c:	684b      	ldr	r3, [r1, #4]
 8003d7e:	f013 0f0c 	tst.w	r3, #12
 8003d82:	d007      	beq.n	8003d94 <HAL_RCC_OscConfig+0x144>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d84:	684b      	ldr	r3, [r1, #4]
 8003d86:	f003 030c 	and.w	r3, r3, #12
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d11f      	bne.n	8003dce <HAL_RCC_OscConfig+0x17e>
 8003d8e:	684b      	ldr	r3, [r1, #4]
 8003d90:	03df      	lsls	r7, r3, #15
 8003d92:	d41c      	bmi.n	8003dce <HAL_RCC_OscConfig+0x17e>
 8003d94:	2302      	movs	r3, #2
 8003d96:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d9a:	6808      	ldr	r0, [r1, #0]
 8003d9c:	fa93 f3a3 	rbit	r3, r3
 8003da0:	2201      	movs	r2, #1
 8003da2:	fab3 f383 	clz	r3, r3
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	4203      	tst	r3, r0
 8003dac:	d002      	beq.n	8003db4 <HAL_RCC_OscConfig+0x164>
 8003dae:	6923      	ldr	r3, [r4, #16]
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d184      	bne.n	8003cbe <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db4:	6808      	ldr	r0, [r1, #0]
 8003db6:	22f8      	movs	r2, #248	@ 0xf8
 8003db8:	fa92 f2a2 	rbit	r2, r2
 8003dbc:	6963      	ldr	r3, [r4, #20]
 8003dbe:	fab2 f282 	clz	r2, r2
 8003dc2:	4093      	lsls	r3, r2
 8003dc4:	f020 02f8 	bic.w	r2, r0, #248	@ 0xf8
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	600b      	str	r3, [r1, #0]
 8003dcc:	e74a      	b.n	8003c64 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dce:	6922      	ldr	r2, [r4, #16]
 8003dd0:	2501      	movs	r5, #1
 8003dd2:	b1f2      	cbz	r2, 8003e12 <HAL_RCC_OscConfig+0x1c2>
 8003dd4:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8003dd8:	fab3 f383 	clz	r3, r3
 8003ddc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003de0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	2702      	movs	r7, #2
 8003de8:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8003dea:	f7ff ff29 	bl	8003c40 <HAL_GetTick>
 8003dee:	4606      	mov	r6, r0
 8003df0:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df4:	680a      	ldr	r2, [r1, #0]
 8003df6:	fa97 f3a7 	rbit	r3, r7
 8003dfa:	fab3 f383 	clz	r3, r3
 8003dfe:	fa05 f303 	lsl.w	r3, r5, r3
 8003e02:	4213      	tst	r3, r2
 8003e04:	d1d6      	bne.n	8003db4 <HAL_RCC_OscConfig+0x164>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e06:	f7ff ff1b 	bl	8003c40 <HAL_GetTick>
 8003e0a:	1b80      	subs	r0, r0, r6
 8003e0c:	2802      	cmp	r0, #2
 8003e0e:	d9ef      	bls.n	8003df0 <HAL_RCC_OscConfig+0x1a0>
 8003e10:	e77d      	b.n	8003d0e <HAL_RCC_OscConfig+0xbe>
 8003e12:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8003e16:	fab3 f383 	clz	r3, r3
 8003e1a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003e1e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	2702      	movs	r7, #2
 8003e26:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003e28:	f7ff ff0a 	bl	8003c40 <HAL_GetTick>
 8003e2c:	4606      	mov	r6, r0
 8003e2e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e32:	680a      	ldr	r2, [r1, #0]
 8003e34:	fa97 f3a7 	rbit	r3, r7
 8003e38:	fab3 f383 	clz	r3, r3
 8003e3c:	fa05 f303 	lsl.w	r3, r5, r3
 8003e40:	4213      	tst	r3, r2
 8003e42:	f43f af0f 	beq.w	8003c64 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e46:	f7ff fefb 	bl	8003c40 <HAL_GetTick>
 8003e4a:	1b80      	subs	r0, r0, r6
 8003e4c:	2802      	cmp	r0, #2
 8003e4e:	d9ee      	bls.n	8003e2e <HAL_RCC_OscConfig+0x1de>
 8003e50:	e75d      	b.n	8003d0e <HAL_RCC_OscConfig+0xbe>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e52:	69a2      	ldr	r2, [r4, #24]
 8003e54:	4d3e      	ldr	r5, [pc, #248]	@ (8003f50 <HAL_RCC_OscConfig+0x300>)
 8003e56:	483f      	ldr	r0, [pc, #252]	@ (8003f54 <HAL_RCC_OscConfig+0x304>)
 8003e58:	2101      	movs	r1, #1
 8003e5a:	b302      	cbz	r2, 8003e9e <HAL_RCC_OscConfig+0x24e>
 8003e5c:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 8003e60:	fab3 f383 	clz	r3, r3
 8003e64:	4403      	add	r3, r0
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	2602      	movs	r6, #2
 8003e6a:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 8003e6c:	f7ff fee8 	bl	8003c40 <HAL_GetTick>
 8003e70:	4607      	mov	r7, r0
 8003e72:	fa96 f3a6 	rbit	r3, r6
 8003e76:	fa96 f3a6 	rbit	r3, r6
 8003e7a:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e7e:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8003e80:	fa96 f3a6 	rbit	r3, r6
 8003e84:	fab3 f383 	clz	r3, r3
 8003e88:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8c:	4213      	tst	r3, r2
 8003e8e:	f47f aeed 	bne.w	8003c6c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e92:	f7ff fed5 	bl	8003c40 <HAL_GetTick>
 8003e96:	1bc0      	subs	r0, r0, r7
 8003e98:	2802      	cmp	r0, #2
 8003e9a:	d9ea      	bls.n	8003e72 <HAL_RCC_OscConfig+0x222>
 8003e9c:	e737      	b.n	8003d0e <HAL_RCC_OscConfig+0xbe>
 8003e9e:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 8003ea2:	fab3 f383 	clz	r3, r3
 8003ea6:	4403      	add	r3, r0
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	2602      	movs	r6, #2
 8003eac:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003eae:	f7ff fec7 	bl	8003c40 <HAL_GetTick>
 8003eb2:	4607      	mov	r7, r0
 8003eb4:	fa96 f3a6 	rbit	r3, r6
 8003eb8:	fa96 f3a6 	rbit	r3, r6
 8003ebc:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec0:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8003ec2:	fa96 f3a6 	rbit	r3, r6
 8003ec6:	fab3 f383 	clz	r3, r3
 8003eca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ece:	4213      	tst	r3, r2
 8003ed0:	f43f aecc 	beq.w	8003c6c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ed4:	f7ff feb4 	bl	8003c40 <HAL_GetTick>
 8003ed8:	1bc0      	subs	r0, r0, r7
 8003eda:	2802      	cmp	r0, #2
 8003edc:	d9ea      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x264>
 8003ede:	e716      	b.n	8003d0e <HAL_RCC_OscConfig+0xbe>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ee0:	491b      	ldr	r1, [pc, #108]	@ (8003f50 <HAL_RCC_OscConfig+0x300>)
 8003ee2:	69cb      	ldr	r3, [r1, #28]
 8003ee4:	00d8      	lsls	r0, r3, #3
 8003ee6:	d431      	bmi.n	8003f4c <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ee8:	69cb      	ldr	r3, [r1, #28]
 8003eea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eee:	61cb      	str	r3, [r1, #28]
 8003ef0:	69cb      	ldr	r3, [r1, #28]
 8003ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ef6:	9301      	str	r3, [sp, #4]
 8003ef8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003efa:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efc:	4e16      	ldr	r6, [pc, #88]	@ (8003f58 <HAL_RCC_OscConfig+0x308>)
 8003efe:	6833      	ldr	r3, [r6, #0]
 8003f00:	05da      	lsls	r2, r3, #23
 8003f02:	d52b      	bpl.n	8003f5c <HAL_RCC_OscConfig+0x30c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f04:	68e3      	ldr	r3, [r4, #12]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d138      	bne.n	8003f7c <HAL_RCC_OscConfig+0x32c>
 8003f0a:	6a0b      	ldr	r3, [r1, #32]
 8003f0c:	f043 0301 	orr.w	r3, r3, #1
 8003f10:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8003f12:	f7ff fe95 	bl	8003c40 <HAL_GetTick>
 8003f16:	2602      	movs	r6, #2
 8003f18:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1a:	f04f 0801 	mov.w	r8, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f1e:	f241 3988 	movw	r9, #5000	@ 0x1388
 8003f22:	fa96 f3a6 	rbit	r3, r6
 8003f26:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2a:	6a0a      	ldr	r2, [r1, #32]
 8003f2c:	fa96 f3a6 	rbit	r3, r6
 8003f30:	fab3 f383 	clz	r3, r3
 8003f34:	fa08 f303 	lsl.w	r3, r8, r3
 8003f38:	4213      	tst	r3, r2
 8003f3a:	d051      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x390>
    if(pwrclkchanged == SET)
 8003f3c:	2d00      	cmp	r5, #0
 8003f3e:	f43f ae99 	beq.w	8003c74 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f42:	69cb      	ldr	r3, [r1, #28]
 8003f44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f48:	61cb      	str	r3, [r1, #28]
 8003f4a:	e693      	b.n	8003c74 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8003f4c:	2500      	movs	r5, #0
 8003f4e:	e7d5      	b.n	8003efc <HAL_RCC_OscConfig+0x2ac>
 8003f50:	40021000 	.word	0x40021000
 8003f54:	10908120 	.word	0x10908120
 8003f58:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f5c:	6833      	ldr	r3, [r6, #0]
 8003f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f62:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003f64:	f7ff fe6c 	bl	8003c40 <HAL_GetTick>
 8003f68:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6a:	6833      	ldr	r3, [r6, #0]
 8003f6c:	05db      	lsls	r3, r3, #23
 8003f6e:	d4c9      	bmi.n	8003f04 <HAL_RCC_OscConfig+0x2b4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f70:	f7ff fe66 	bl	8003c40 <HAL_GetTick>
 8003f74:	1bc0      	subs	r0, r0, r7
 8003f76:	2864      	cmp	r0, #100	@ 0x64
 8003f78:	d9f7      	bls.n	8003f6a <HAL_RCC_OscConfig+0x31a>
 8003f7a:	e6c8      	b.n	8003d0e <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f7c:	bb13      	cbnz	r3, 8003fc4 <HAL_RCC_OscConfig+0x374>
 8003f7e:	6a0b      	ldr	r3, [r1, #32]
 8003f80:	f023 0301 	bic.w	r3, r3, #1
 8003f84:	620b      	str	r3, [r1, #32]
 8003f86:	6a0b      	ldr	r3, [r1, #32]
 8003f88:	f023 0304 	bic.w	r3, r3, #4
 8003f8c:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8003f8e:	f7ff fe57 	bl	8003c40 <HAL_GetTick>
 8003f92:	2602      	movs	r6, #2
 8003f94:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f96:	f04f 0801 	mov.w	r8, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f9a:	f241 3988 	movw	r9, #5000	@ 0x1388
 8003f9e:	fa96 f3a6 	rbit	r3, r6
 8003fa2:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa6:	6a0a      	ldr	r2, [r1, #32]
 8003fa8:	fa96 f3a6 	rbit	r3, r6
 8003fac:	fab3 f383 	clz	r3, r3
 8003fb0:	fa08 f303 	lsl.w	r3, r8, r3
 8003fb4:	4213      	tst	r3, r2
 8003fb6:	d0c1      	beq.n	8003f3c <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb8:	f7ff fe42 	bl	8003c40 <HAL_GetTick>
 8003fbc:	1bc0      	subs	r0, r0, r7
 8003fbe:	4548      	cmp	r0, r9
 8003fc0:	d9ed      	bls.n	8003f9e <HAL_RCC_OscConfig+0x34e>
 8003fc2:	e6a4      	b.n	8003d0e <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc4:	2b05      	cmp	r3, #5
 8003fc6:	6a0b      	ldr	r3, [r1, #32]
 8003fc8:	d103      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x382>
 8003fca:	f043 0304 	orr.w	r3, r3, #4
 8003fce:	620b      	str	r3, [r1, #32]
 8003fd0:	e79b      	b.n	8003f0a <HAL_RCC_OscConfig+0x2ba>
 8003fd2:	f023 0301 	bic.w	r3, r3, #1
 8003fd6:	620b      	str	r3, [r1, #32]
 8003fd8:	6a0b      	ldr	r3, [r1, #32]
 8003fda:	f023 0304 	bic.w	r3, r3, #4
 8003fde:	e797      	b.n	8003f10 <HAL_RCC_OscConfig+0x2c0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe0:	f7ff fe2e 	bl	8003c40 <HAL_GetTick>
 8003fe4:	1bc0      	subs	r0, r0, r7
 8003fe6:	4548      	cmp	r0, r9
 8003fe8:	d99b      	bls.n	8003f22 <HAL_RCC_OscConfig+0x2d2>
 8003fea:	e690      	b.n	8003d0e <HAL_RCC_OscConfig+0xbe>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fec:	493f      	ldr	r1, [pc, #252]	@ (80040ec <HAL_RCC_OscConfig+0x49c>)
 8003fee:	684b      	ldr	r3, [r1, #4]
 8003ff0:	f003 030c 	and.w	r3, r3, #12
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	f43f ae62 	beq.w	8003cbe <HAL_RCC_OscConfig+0x6e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ffa:	2a02      	cmp	r2, #2
 8003ffc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004000:	d150      	bne.n	80040a4 <HAL_RCC_OscConfig+0x454>
 8004002:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8004006:	fab3 f383 	clz	r3, r3
 800400a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800400e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004018:	f7ff fe12 	bl	8003c40 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800401c:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 80040f0 <HAL_RCC_OscConfig+0x4a0>
        tickstart = HAL_GetTick();
 8004020:	4606      	mov	r6, r0
 8004022:	f04f 7700 	mov.w	r7, #33554432	@ 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004026:	2501      	movs	r5, #1
 8004028:	fa97 f3a7 	rbit	r3, r7
 800402c:	680a      	ldr	r2, [r1, #0]
 800402e:	fa97 f3a7 	rbit	r3, r7
 8004032:	fab3 f383 	clz	r3, r3
 8004036:	fa05 f303 	lsl.w	r3, r5, r3
 800403a:	4213      	tst	r3, r2
 800403c:	d12c      	bne.n	8004098 <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800403e:	e9d4 0308 	ldrd	r0, r3, [r4, #32]
 8004042:	684a      	ldr	r2, [r1, #4]
 8004044:	4303      	orrs	r3, r0
 8004046:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 800404a:	4313      	orrs	r3, r2
 800404c:	604b      	str	r3, [r1, #4]
 800404e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004052:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8004056:	fab3 f383 	clz	r3, r3
 800405a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800405e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004062:	009b      	lsls	r3, r3, #2
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004064:	4f22      	ldr	r7, [pc, #136]	@ (80040f0 <HAL_RCC_OscConfig+0x4a0>)
        __HAL_RCC_PLL_ENABLE();
 8004066:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8004068:	f7ff fdea 	bl	8003c40 <HAL_GetTick>
 800406c:	f04f 7500 	mov.w	r5, #33554432	@ 0x2000000
 8004070:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004072:	2601      	movs	r6, #1
 8004074:	fa95 f3a5 	rbit	r3, r5
 8004078:	680a      	ldr	r2, [r1, #0]
 800407a:	fa95 f3a5 	rbit	r3, r5
 800407e:	fab3 f383 	clz	r3, r3
 8004082:	fa06 f303 	lsl.w	r3, r6, r3
 8004086:	4213      	tst	r3, r2
 8004088:	f47f adf8 	bne.w	8003c7c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800408c:	f7ff fdd8 	bl	8003c40 <HAL_GetTick>
 8004090:	1b00      	subs	r0, r0, r4
 8004092:	42b8      	cmp	r0, r7
 8004094:	d9ee      	bls.n	8004074 <HAL_RCC_OscConfig+0x424>
 8004096:	e63a      	b.n	8003d0e <HAL_RCC_OscConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004098:	f7ff fdd2 	bl	8003c40 <HAL_GetTick>
 800409c:	1b83      	subs	r3, r0, r6
 800409e:	4543      	cmp	r3, r8
 80040a0:	d9c2      	bls.n	8004028 <HAL_RCC_OscConfig+0x3d8>
 80040a2:	e634      	b.n	8003d0e <HAL_RCC_OscConfig+0xbe>
 80040a4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80040a8:	fab3 f383 	clz	r3, r3
 80040ac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80040b0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	2200      	movs	r2, #0
 80040b8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80040ba:	f7ff fdc1 	bl	8003c40 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040be:	4f0c      	ldr	r7, [pc, #48]	@ (80040f0 <HAL_RCC_OscConfig+0x4a0>)
        tickstart = HAL_GetTick();
 80040c0:	4604      	mov	r4, r0
 80040c2:	f04f 7500 	mov.w	r5, #33554432	@ 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c6:	2601      	movs	r6, #1
 80040c8:	fa95 f3a5 	rbit	r3, r5
 80040cc:	680a      	ldr	r2, [r1, #0]
 80040ce:	fa95 f3a5 	rbit	r3, r5
 80040d2:	fab3 f383 	clz	r3, r3
 80040d6:	fa06 f303 	lsl.w	r3, r6, r3
 80040da:	4213      	tst	r3, r2
 80040dc:	f43f adce 	beq.w	8003c7c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e0:	f7ff fdae 	bl	8003c40 <HAL_GetTick>
 80040e4:	1b00      	subs	r0, r0, r4
 80040e6:	42b8      	cmp	r0, r7
 80040e8:	d9ee      	bls.n	80040c8 <HAL_RCC_OscConfig+0x478>
 80040ea:	e610      	b.n	8003d0e <HAL_RCC_OscConfig+0xbe>
 80040ec:	40021000 	.word	0x40021000
 80040f0:	00030d40 	.word	0x00030d40

080040f4 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80040f4:	4a4d      	ldr	r2, [pc, #308]	@ (800422c <HAL_RCC_ClockConfig+0x138>)
{
 80040f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80040f8:	6813      	ldr	r3, [r2, #0]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	428b      	cmp	r3, r1
{
 8004100:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004102:	d311      	bcc.n	8004128 <HAL_RCC_ClockConfig+0x34>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004104:	6822      	ldr	r2, [r4, #0]
 8004106:	0795      	lsls	r5, r2, #30
 8004108:	d41a      	bmi.n	8004140 <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800410a:	07d0      	lsls	r0, r2, #31
 800410c:	d420      	bmi.n	8004150 <HAL_RCC_ClockConfig+0x5c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800410e:	4a47      	ldr	r2, [pc, #284]	@ (800422c <HAL_RCC_ClockConfig+0x138>)
 8004110:	6813      	ldr	r3, [r2, #0]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	428b      	cmp	r3, r1
 8004118:	d86c      	bhi.n	80041f4 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411a:	6822      	ldr	r2, [r4, #0]
 800411c:	0751      	lsls	r1, r2, #29
 800411e:	d474      	bmi.n	800420a <HAL_RCC_ClockConfig+0x116>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004120:	0713      	lsls	r3, r2, #28
 8004122:	d47a      	bmi.n	800421a <HAL_RCC_ClockConfig+0x126>
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8004124:	2000      	movs	r0, #0
 8004126:	e00a      	b.n	800413e <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004128:	6813      	ldr	r3, [r2, #0]
 800412a:	f023 0307 	bic.w	r3, r3, #7
 800412e:	430b      	orrs	r3, r1
 8004130:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004132:	6813      	ldr	r3, [r2, #0]
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	428b      	cmp	r3, r1
 800413a:	d0e3      	beq.n	8004104 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 800413c:	2001      	movs	r0, #1
}
 800413e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004140:	483b      	ldr	r0, [pc, #236]	@ (8004230 <HAL_RCC_ClockConfig+0x13c>)
 8004142:	68a5      	ldr	r5, [r4, #8]
 8004144:	6843      	ldr	r3, [r0, #4]
 8004146:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800414a:	432b      	orrs	r3, r5
 800414c:	6043      	str	r3, [r0, #4]
 800414e:	e7dc      	b.n	800410a <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004150:	6862      	ldr	r2, [r4, #4]
 8004152:	4d37      	ldr	r5, [pc, #220]	@ (8004230 <HAL_RCC_ClockConfig+0x13c>)
 8004154:	2a01      	cmp	r2, #1
 8004156:	d125      	bne.n	80041a4 <HAL_RCC_ClockConfig+0xb0>
 8004158:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800415c:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004160:	6828      	ldr	r0, [r5, #0]
 8004162:	fa93 f3a3 	rbit	r3, r3
 8004166:	fab3 f383 	clz	r3, r3
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004170:	d0e4      	beq.n	800413c <HAL_RCC_ClockConfig+0x48>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004172:	686b      	ldr	r3, [r5, #4]
 8004174:	f023 0303 	bic.w	r3, r3, #3
 8004178:	4313      	orrs	r3, r2
 800417a:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800417c:	f7ff fd60 	bl	8003c40 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004180:	6863      	ldr	r3, [r4, #4]
 8004182:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8004184:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004186:	f241 3788 	movw	r7, #5000	@ 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800418a:	d11c      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800418c:	686b      	ldr	r3, [r5, #4]
 800418e:	f003 030c 	and.w	r3, r3, #12
 8004192:	2b04      	cmp	r3, #4
 8004194:	d0bb      	beq.n	800410e <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004196:	f7ff fd53 	bl	8003c40 <HAL_GetTick>
 800419a:	1b80      	subs	r0, r0, r6
 800419c:	42b8      	cmp	r0, r7
 800419e:	d9f5      	bls.n	800418c <HAL_RCC_ClockConfig+0x98>
          return HAL_TIMEOUT;
 80041a0:	2003      	movs	r0, #3
 80041a2:	e7cc      	b.n	800413e <HAL_RCC_ClockConfig+0x4a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041a4:	2a02      	cmp	r2, #2
 80041a6:	bf0c      	ite	eq
 80041a8:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 80041ac:	2302      	movne	r3, #2
 80041ae:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b2:	682e      	ldr	r6, [r5, #0]
 80041b4:	fa93 f3a3 	rbit	r3, r3
 80041b8:	2001      	movs	r0, #1
 80041ba:	fab3 f383 	clz	r3, r3
 80041be:	fa00 f303 	lsl.w	r3, r0, r3
 80041c2:	4233      	tst	r3, r6
 80041c4:	e7d4      	b.n	8004170 <HAL_RCC_ClockConfig+0x7c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d10f      	bne.n	80041ea <HAL_RCC_ClockConfig+0xf6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041ca:	686b      	ldr	r3, [r5, #4]
 80041cc:	f003 030c 	and.w	r3, r3, #12
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d09c      	beq.n	800410e <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d4:	f7ff fd34 	bl	8003c40 <HAL_GetTick>
 80041d8:	1b80      	subs	r0, r0, r6
 80041da:	42b8      	cmp	r0, r7
 80041dc:	d9f5      	bls.n	80041ca <HAL_RCC_ClockConfig+0xd6>
 80041de:	e7df      	b.n	80041a0 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e0:	f7ff fd2e 	bl	8003c40 <HAL_GetTick>
 80041e4:	1b80      	subs	r0, r0, r6
 80041e6:	42b8      	cmp	r0, r7
 80041e8:	d8da      	bhi.n	80041a0 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80041ea:	686b      	ldr	r3, [r5, #4]
 80041ec:	f013 0f0c 	tst.w	r3, #12
 80041f0:	d1f6      	bne.n	80041e0 <HAL_RCC_ClockConfig+0xec>
 80041f2:	e78c      	b.n	800410e <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f4:	6813      	ldr	r3, [r2, #0]
 80041f6:	f023 0307 	bic.w	r3, r3, #7
 80041fa:	430b      	orrs	r3, r1
 80041fc:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041fe:	6813      	ldr	r3, [r2, #0]
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	428b      	cmp	r3, r1
 8004206:	d199      	bne.n	800413c <HAL_RCC_ClockConfig+0x48>
 8004208:	e787      	b.n	800411a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800420a:	4909      	ldr	r1, [pc, #36]	@ (8004230 <HAL_RCC_ClockConfig+0x13c>)
 800420c:	68e0      	ldr	r0, [r4, #12]
 800420e:	684b      	ldr	r3, [r1, #4]
 8004210:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004214:	4303      	orrs	r3, r0
 8004216:	604b      	str	r3, [r1, #4]
 8004218:	e782      	b.n	8004120 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800421a:	4a05      	ldr	r2, [pc, #20]	@ (8004230 <HAL_RCC_ClockConfig+0x13c>)
 800421c:	6921      	ldr	r1, [r4, #16]
 800421e:	6853      	ldr	r3, [r2, #4]
 8004220:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004224:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004228:	6053      	str	r3, [r2, #4]
 800422a:	e77b      	b.n	8004124 <HAL_RCC_ClockConfig+0x30>
 800422c:	40022000 	.word	0x40022000
 8004230:	40021000 	.word	0x40021000

08004234 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004238:	f8df 816c 	ldr.w	r8, [pc, #364]	@ 80043a8 <HAL_GPIO_Init+0x174>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800423c:	4c5b      	ldr	r4, [pc, #364]	@ (80043ac <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00U;
 800423e:	2300      	movs	r3, #0
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8004240:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != RESET)
 8004244:	680a      	ldr	r2, [r1, #0]
 8004246:	fa32 f503 	lsrs.w	r5, r2, r3
 800424a:	d102      	bne.n	8004252 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 800424c:	b003      	add	sp, #12
 800424e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004252:	2501      	movs	r5, #1
 8004254:	fa05 fa03 	lsl.w	sl, r5, r3
    if(iocurrent)
 8004258:	ea1a 0202 	ands.w	r2, sl, r2
 800425c:	f000 8099 	beq.w	8004392 <HAL_GPIO_Init+0x15e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004260:	684d      	ldr	r5, [r1, #4]
 8004262:	f025 0e10 	bic.w	lr, r5, #16
 8004266:	f1be 0f02 	cmp.w	lr, #2
 800426a:	d111      	bne.n	8004290 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3];
 800426c:	08df      	lsrs	r7, r3, #3
 800426e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004272:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8004276:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004278:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800427c:	fa09 fb0c 	lsl.w	fp, r9, ip
 8004280:	ea26 0b0b 	bic.w	fp, r6, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004284:	690e      	ldr	r6, [r1, #16]
 8004286:	fa06 f60c 	lsl.w	r6, r6, ip
 800428a:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->AFR[position >> 3] = temp;
 800428e:	623e      	str	r6, [r7, #32]
      temp = GPIOx->MODER;
 8004290:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004294:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004298:	2603      	movs	r6, #3
 800429a:	fa06 f70c 	lsl.w	r7, r6, ip
 800429e:	ea2b 0b07 	bic.w	fp, fp, r7
 80042a2:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042a4:	f005 0703 	and.w	r7, r5, #3
 80042a8:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042ac:	f10e 3eff 	add.w	lr, lr, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042b0:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042b4:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 80042b8:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042ba:	d811      	bhi.n	80042e0 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 80042bc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042be:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042c2:	68cf      	ldr	r7, [r1, #12]
 80042c4:	fa07 f70c 	lsl.w	r7, r7, ip
 80042c8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80042cc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80042ce:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042d0:	ea27 0e0a 	bic.w	lr, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80042d4:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80042d8:	409f      	lsls	r7, r3
 80042da:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80042de:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80042e0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042e2:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042e4:	688e      	ldr	r6, [r1, #8]
 80042e6:	fa06 f60c 	lsl.w	r6, r6, ip
 80042ea:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 80042ec:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042ee:	00ee      	lsls	r6, r5, #3
 80042f0:	d54f      	bpl.n	8004392 <HAL_GPIO_Init+0x15e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042f2:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80042f6:	f046 0601 	orr.w	r6, r6, #1
 80042fa:	f8c8 6018 	str.w	r6, [r8, #24]
 80042fe:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8004302:	f023 0703 	bic.w	r7, r3, #3
 8004306:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 800430a:	f006 0601 	and.w	r6, r6, #1
 800430e:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 8004312:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8004314:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004318:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800431a:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800431c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004320:	fa09 fe0c 	lsl.w	lr, r9, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004324:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8004328:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800432c:	d033      	beq.n	8004396 <HAL_GPIO_Init+0x162>
 800432e:	4e20      	ldr	r6, [pc, #128]	@ (80043b0 <HAL_GPIO_Init+0x17c>)
 8004330:	42b0      	cmp	r0, r6
 8004332:	d032      	beq.n	800439a <HAL_GPIO_Init+0x166>
 8004334:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004338:	42b0      	cmp	r0, r6
 800433a:	d030      	beq.n	800439e <HAL_GPIO_Init+0x16a>
 800433c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004340:	42b0      	cmp	r0, r6
 8004342:	d02e      	beq.n	80043a2 <HAL_GPIO_Init+0x16e>
 8004344:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004348:	42b0      	cmp	r0, r6
 800434a:	bf14      	ite	ne
 800434c:	2605      	movne	r6, #5
 800434e:	2604      	moveq	r6, #4
 8004350:	fa06 f60c 	lsl.w	r6, r6, ip
 8004354:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8004358:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800435a:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 800435c:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800435e:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
        temp &= ~((uint32_t)iocurrent);
 8004362:	bf0c      	ite	eq
 8004364:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8004366:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 8004368:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800436a:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800436c:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8004370:	bf0c      	ite	eq
 8004372:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8004374:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 8004376:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8004378:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800437a:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 800437e:	bf0c      	ite	eq
 8004380:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8004382:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 8004384:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8004386:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004388:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 800438a:	bf54      	ite	pl
 800438c:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800438e:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 8004390:	60e6      	str	r6, [r4, #12]
    position++;
 8004392:	3301      	adds	r3, #1
 8004394:	e756      	b.n	8004244 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004396:	2600      	movs	r6, #0
 8004398:	e7da      	b.n	8004350 <HAL_GPIO_Init+0x11c>
 800439a:	2601      	movs	r6, #1
 800439c:	e7d8      	b.n	8004350 <HAL_GPIO_Init+0x11c>
 800439e:	2602      	movs	r6, #2
 80043a0:	e7d6      	b.n	8004350 <HAL_GPIO_Init+0x11c>
 80043a2:	2603      	movs	r6, #3
 80043a4:	e7d4      	b.n	8004350 <HAL_GPIO_Init+0x11c>
 80043a6:	bf00      	nop
 80043a8:	40021000 	.word	0x40021000
 80043ac:	40010400 	.word	0x40010400
 80043b0:	48000400 	.word	0x48000400

080043b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043b4:	b10a      	cbz	r2, 80043ba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043b6:	6181      	str	r1, [r0, #24]
 80043b8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043ba:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80043bc:	4770      	bx	lr
 80043be:	0000      	movs	r0, r0

080043c0 <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80043c0:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043c2:	6883      	ldr	r3, [r0, #8]
 80043c4:	69c1      	ldr	r1, [r0, #28]
{
 80043c6:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043c8:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80043ca:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043cc:	432b      	orrs	r3, r5
 80043ce:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80043d0:	f424 4416 	bic.w	r4, r4, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043d4:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80043d6:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043da:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80043dc:	4323      	orrs	r3, r4
 80043de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043e0:	6853      	ldr	r3, [r2, #4]
 80043e2:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80043e4:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043e6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80043ea:	4323      	orrs	r3, r4
 80043ec:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80043ee:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80043f0:	6983      	ldr	r3, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80043f2:	f424 6430 	bic.w	r4, r4, #2816	@ 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80043f6:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80043f8:	4323      	orrs	r3, r4
 80043fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043fc:	4b54      	ldr	r3, [pc, #336]	@ (8004550 <UART_SetConfig+0x190>)
 80043fe:	429a      	cmp	r2, r3
 8004400:	d112      	bne.n	8004428 <UART_SetConfig+0x68>
 8004402:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 8004406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d06b      	beq.n	80044e8 <UART_SetConfig+0x128>
 8004410:	2b03      	cmp	r3, #3
 8004412:	d01e      	beq.n	8004452 <UART_SetConfig+0x92>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004414:	6840      	ldr	r0, [r0, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004416:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800441a:	ea4f 0350 	mov.w	r3, r0, lsr #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800441e:	f040 8089 	bne.w	8004534 <UART_SetConfig+0x174>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004422:	f503 0361 	add.w	r3, r3, #14745600	@ 0xe10000
 8004426:	e01e      	b.n	8004466 <UART_SetConfig+0xa6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004428:	4b4a      	ldr	r3, [pc, #296]	@ (8004554 <UART_SetConfig+0x194>)
 800442a:	429a      	cmp	r2, r3
 800442c:	d11e      	bne.n	800446c <UART_SetConfig+0xac>
 800442e:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 8004432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004434:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004438:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800443c:	d054      	beq.n	80044e8 <UART_SetConfig+0x128>
 800443e:	d805      	bhi.n	800444c <UART_SetConfig+0x8c>
 8004440:	2b00      	cmp	r3, #0
 8004442:	d05a      	beq.n	80044fa <UART_SetConfig+0x13a>
 8004444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004448:	d0e4      	beq.n	8004414 <UART_SetConfig+0x54>
 800444a:	e038      	b.n	80044be <UART_SetConfig+0xfe>
 800444c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004450:	d135      	bne.n	80044be <UART_SetConfig+0xfe>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004452:	6840      	ldr	r0, [r0, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004454:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004458:	ea4f 0350 	mov.w	r3, r0, lsr #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800445c:	d16f      	bne.n	800453e <UART_SetConfig+0x17e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800445e:	f103 73f4 	add.w	r3, r3, #31981568	@ 0x1e80000
 8004462:	f503 4390 	add.w	r3, r3, #18432	@ 0x4800
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004466:	fbb3 f3f0 	udiv	r3, r3, r0
 800446a:	e050      	b.n	800450e <UART_SetConfig+0x14e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800446c:	4b3a      	ldr	r3, [pc, #232]	@ (8004558 <UART_SetConfig+0x198>)
 800446e:	429a      	cmp	r2, r3
 8004470:	d10f      	bne.n	8004492 <UART_SetConfig+0xd2>
 8004472:	f503 33e4 	add.w	r3, r3, #116736	@ 0x1c800
 8004476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004478:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800447c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004480:	d032      	beq.n	80044e8 <UART_SetConfig+0x128>
 8004482:	d803      	bhi.n	800448c <UART_SetConfig+0xcc>
 8004484:	b3cb      	cbz	r3, 80044fa <UART_SetConfig+0x13a>
 8004486:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800448a:	e7dd      	b.n	8004448 <UART_SetConfig+0x88>
 800448c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004490:	e7de      	b.n	8004450 <UART_SetConfig+0x90>
 8004492:	4b32      	ldr	r3, [pc, #200]	@ (800455c <UART_SetConfig+0x19c>)
 8004494:	429a      	cmp	r2, r3
 8004496:	d10f      	bne.n	80044b8 <UART_SetConfig+0xf8>
 8004498:	f503 33e2 	add.w	r3, r3, #115712	@ 0x1c400
 800449c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80044a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044a6:	d01f      	beq.n	80044e8 <UART_SetConfig+0x128>
 80044a8:	d803      	bhi.n	80044b2 <UART_SetConfig+0xf2>
 80044aa:	b333      	cbz	r3, 80044fa <UART_SetConfig+0x13a>
 80044ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044b0:	e7ca      	b.n	8004448 <UART_SetConfig+0x88>
 80044b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044b6:	e7cb      	b.n	8004450 <UART_SetConfig+0x90>
 80044b8:	4b29      	ldr	r3, [pc, #164]	@ (8004560 <UART_SetConfig+0x1a0>)
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d005      	beq.n	80044ca <UART_SetConfig+0x10a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044be:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80044c2:	f04f 0001 	mov.w	r0, #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044c6:	d02b      	beq.n	8004520 <UART_SetConfig+0x160>
    }
  }

  return ret;

}
 80044c8:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044ca:	4b26      	ldr	r3, [pc, #152]	@ (8004564 <UART_SetConfig+0x1a4>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ce:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80044d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044d6:	d007      	beq.n	80044e8 <UART_SetConfig+0x128>
 80044d8:	d803      	bhi.n	80044e2 <UART_SetConfig+0x122>
 80044da:	b173      	cbz	r3, 80044fa <UART_SetConfig+0x13a>
 80044dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044e0:	e7b2      	b.n	8004448 <UART_SetConfig+0x88>
 80044e2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80044e6:	e7b3      	b.n	8004450 <UART_SetConfig+0x90>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80044e8:	6840      	ldr	r0, [r0, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ea:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80044ee:	ea4f 0350 	mov.w	r3, r0, lsr #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044f2:	d129      	bne.n	8004548 <UART_SetConfig+0x188>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80044f4:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80044f8:	e7b5      	b.n	8004466 <UART_SetConfig+0xa6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044fa:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80044fe:	6841      	ldr	r1, [r0, #4]
 8004500:	ea4f 0351 	mov.w	r3, r1, lsr #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004504:	d10e      	bne.n	8004524 <UART_SetConfig+0x164>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004506:	f503 0361 	add.w	r3, r3, #14745600	@ 0xe10000
 800450a:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800450e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004510:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8004512:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004516:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800451a:	430b      	orrs	r3, r1
 800451c:	60d3      	str	r3, [r2, #12]
 800451e:	e7d3      	b.n	80044c8 <UART_SetConfig+0x108>
  uint16_t usartdiv                   = 0x0000U;
 8004520:	2300      	movs	r3, #0
 8004522:	e7f6      	b.n	8004512 <UART_SetConfig+0x152>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004524:	f503 03e1 	add.w	r3, r3, #7372800	@ 0x708000
 8004528:	fbb3 f3f1 	udiv	r3, r3, r1
 800452c:	b29b      	uxth	r3, r3
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800452e:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004530:	2000      	movs	r0, #0
 8004532:	e7c9      	b.n	80044c8 <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004534:	f503 03e1 	add.w	r3, r3, #7372800	@ 0x708000
 8004538:	fbb3 f3f0 	udiv	r3, r3, r0
 800453c:	e7f6      	b.n	800452c <UART_SetConfig+0x16c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800453e:	f503 0374 	add.w	r3, r3, #15990784	@ 0xf40000
 8004542:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8004546:	e7f7      	b.n	8004538 <UART_SetConfig+0x178>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004548:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800454c:	e7f4      	b.n	8004538 <UART_SetConfig+0x178>
 800454e:	bf00      	nop
 8004550:	40013800 	.word	0x40013800
 8004554:	40004400 	.word	0x40004400
 8004558:	40004800 	.word	0x40004800
 800455c:	40004c00 	.word	0x40004c00
 8004560:	40005000 	.word	0x40005000
 8004564:	40021000 	.word	0x40021000

08004568 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800456c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004570:	4604      	mov	r4, r0
 8004572:	4616      	mov	r6, r2
 8004574:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004576:	6825      	ldr	r5, [r4, #0]
 8004578:	69eb      	ldr	r3, [r5, #28]
 800457a:	ea31 0303 	bics.w	r3, r1, r3
 800457e:	bf0c      	ite	eq
 8004580:	2301      	moveq	r3, #1
 8004582:	2300      	movne	r3, #0
 8004584:	42b3      	cmp	r3, r6
 8004586:	d001      	beq.n	800458c <UART_WaitOnFlagUntilTimeout+0x24>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004588:	2000      	movs	r0, #0
 800458a:	e016      	b.n	80045ba <UART_WaitOnFlagUntilTimeout+0x52>
    if(Timeout != HAL_MAX_DELAY)
 800458c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004590:	d0f2      	beq.n	8004578 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8004592:	f1b8 0f00 	cmp.w	r8, #0
 8004596:	d112      	bne.n	80045be <UART_WaitOnFlagUntilTimeout+0x56>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800459e:	602b      	str	r3, [r5, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a0:	68ab      	ldr	r3, [r5, #8]
 80045a2:	f023 0301 	bic.w	r3, r3, #1
 80045a6:	60ab      	str	r3, [r5, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80045a8:	2320      	movs	r3, #32
 80045aa:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80045ae:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
        __HAL_UNLOCK(huart);
 80045b2:	2300      	movs	r3, #0
 80045b4:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
        return HAL_TIMEOUT;
 80045b8:	2003      	movs	r0, #3
}
 80045ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80045be:	f7ff fb3f 	bl	8003c40 <HAL_GetTick>
 80045c2:	1bc0      	subs	r0, r0, r7
 80045c4:	4540      	cmp	r0, r8
 80045c6:	d9d6      	bls.n	8004576 <UART_WaitOnFlagUntilTimeout+0xe>
 80045c8:	e7e6      	b.n	8004598 <UART_WaitOnFlagUntilTimeout+0x30>

080045ca <UART_CheckIdleState>:
{
 80045ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045cc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ce:	2100      	movs	r1, #0
 80045d0:	66c1      	str	r1, [r0, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 80045d2:	f7ff fb35 	bl	8003c40 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045d6:	6826      	ldr	r6, [r4, #0]
 80045d8:	6833      	ldr	r3, [r6, #0]
 80045da:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80045dc:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045de:	d416      	bmi.n	800460e <UART_CheckIdleState+0x44>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045e0:	6833      	ldr	r3, [r6, #0]
 80045e2:	075b      	lsls	r3, r3, #29
 80045e4:	d50a      	bpl.n	80045fc <UART_CheckIdleState+0x32>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	2200      	movs	r2, #0
 80045ee:	462b      	mov	r3, r5
 80045f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80045f4:	4620      	mov	r0, r4
 80045f6:	f7ff ffb7 	bl	8004568 <UART_WaitOnFlagUntilTimeout>
 80045fa:	b9a0      	cbnz	r0, 8004626 <UART_CheckIdleState+0x5c>
  huart->gState  = HAL_UART_STATE_READY;
 80045fc:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80045fe:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8004600:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
  __HAL_UNLOCK(huart);
 8004604:	f884 0068 	strb.w	r0, [r4, #104]	@ 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8004608:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
  return HAL_OK;
 800460c:	e00c      	b.n	8004628 <UART_CheckIdleState+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800460e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	460a      	mov	r2, r1
 8004616:	4603      	mov	r3, r0
 8004618:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800461c:	4620      	mov	r0, r4
 800461e:	f7ff ffa3 	bl	8004568 <UART_WaitOnFlagUntilTimeout>
 8004622:	2800      	cmp	r0, #0
 8004624:	d0dc      	beq.n	80045e0 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8004626:	2003      	movs	r0, #3
}
 8004628:	b002      	add	sp, #8
 800462a:	bd70      	pop	{r4, r5, r6, pc}

0800462c <HAL_UART_Init>:
{
 800462c:	b538      	push	{r3, r4, r5, lr}
  if(huart == NULL)
 800462e:	4604      	mov	r4, r0
 8004630:	b320      	cbz	r0, 800467c <HAL_UART_Init+0x50>
  if(huart->gState == HAL_UART_STATE_RESET)
 8004632:	f890 3069 	ldrb.w	r3, [r0, #105]	@ 0x69
 8004636:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800463a:	b90b      	cbnz	r3, 8004640 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800463c:	f880 2068 	strb.w	r2, [r0, #104]	@ 0x68
  __HAL_UART_DISABLE(huart);
 8004640:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004642:	2324      	movs	r3, #36	@ 0x24
 8004644:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
  __HAL_UART_DISABLE(huart);
 8004648:	682b      	ldr	r3, [r5, #0]
 800464a:	f023 0301 	bic.w	r3, r3, #1
 800464e:	602b      	str	r3, [r5, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004650:	4620      	mov	r0, r4
 8004652:	f7ff feb5 	bl	80043c0 <UART_SetConfig>
 8004656:	2801      	cmp	r0, #1
 8004658:	d010      	beq.n	800467c <HAL_UART_Init+0x50>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800465a:	686b      	ldr	r3, [r5, #4]
 800465c:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8004660:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004662:	68ab      	ldr	r3, [r5, #8]
 8004664:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8004668:	60ab      	str	r3, [r5, #8]
  __HAL_UART_ENABLE(huart);
 800466a:	682b      	ldr	r3, [r5, #0]
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	602b      	str	r3, [r5, #0]
  return UART_CheckIdleState(huart);
 8004672:	4620      	mov	r0, r4
}
 8004674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return UART_CheckIdleState(huart);
 8004678:	f7ff bfa7 	b.w	80045ca <UART_CheckIdleState>
}
 800467c:	2001      	movs	r0, #1
 800467e:	bd38      	pop	{r3, r4, r5, pc}

08004680 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004682:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004684:	f890 3069 	ldrb.w	r3, [r0, #105]	@ 0x69
 8004688:	2b20      	cmp	r3, #32
{
 800468a:	460d      	mov	r5, r1
 800468c:	4604      	mov	r4, r0
 800468e:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8004690:	d14a      	bne.n	8004728 <HAL_UART_Transmit+0xa8>
  {
    if((pData == NULL ) || (Size == 0U))
 8004692:	2d00      	cmp	r5, #0
 8004694:	d046      	beq.n	8004724 <HAL_UART_Transmit+0xa4>
 8004696:	2a00      	cmp	r2, #0
 8004698:	d044      	beq.n	8004724 <HAL_UART_Transmit+0xa4>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800469a:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d042      	beq.n	8004728 <HAL_UART_Transmit+0xa8>
 80046a2:	2301      	movs	r3, #1
 80046a4:	f880 3068 	strb.w	r3, [r0, #104]	@ 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a8:	2300      	movs	r3, #0
 80046aa:	66c3      	str	r3, [r0, #108]	@ 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046ac:	2321      	movs	r3, #33	@ 0x21
 80046ae:	f880 3069 	strb.w	r3, [r0, #105]	@ 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80046b2:	f7ff fac5 	bl	8003c40 <HAL_GetTick>

    huart->TxXferSize = Size;
 80046b6:	f8a4 1050 	strh.w	r1, [r4, #80]	@ 0x50
    tickstart = HAL_GetTick();
 80046ba:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 80046bc:	f8a4 1052 	strh.w	r1, [r4, #82]	@ 0x52
    while(huart->TxXferCount > 0U)
 80046c0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 80046c4:	b292      	uxth	r2, r2
 80046c6:	b962      	cbnz	r2, 80046e2 <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046c8:	9600      	str	r6, [sp, #0]
 80046ca:	463b      	mov	r3, r7
 80046cc:	2140      	movs	r1, #64	@ 0x40
 80046ce:	4620      	mov	r0, r4
 80046d0:	f7ff ff4a 	bl	8004568 <UART_WaitOnFlagUntilTimeout>
 80046d4:	b998      	cbnz	r0, 80046fe <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046d6:	2320      	movs	r3, #32
 80046d8:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046dc:	f884 0068 	strb.w	r0, [r4, #104]	@ 0x68

    return HAL_OK;
 80046e0:	e00e      	b.n	8004700 <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 80046e2:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 80046e6:	3a01      	subs	r2, #1
 80046e8:	b292      	uxth	r2, r2
 80046ea:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046ee:	463b      	mov	r3, r7
 80046f0:	9600      	str	r6, [sp, #0]
 80046f2:	2200      	movs	r2, #0
 80046f4:	2180      	movs	r1, #128	@ 0x80
 80046f6:	4620      	mov	r0, r4
 80046f8:	f7ff ff36 	bl	8004568 <UART_WaitOnFlagUntilTimeout>
 80046fc:	b110      	cbz	r0, 8004704 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 80046fe:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004700:	b003      	add	sp, #12
 8004702:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004704:	68a3      	ldr	r3, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004706:	6822      	ldr	r2, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800470c:	d107      	bne.n	800471e <HAL_UART_Transmit+0x9e>
 800470e:	6923      	ldr	r3, [r4, #16]
 8004710:	b92b      	cbnz	r3, 800471e <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004712:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004716:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800471a:	8513      	strh	r3, [r2, #40]	@ 0x28
 800471c:	e7d0      	b.n	80046c0 <HAL_UART_Transmit+0x40>
 800471e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004722:	e7fa      	b.n	800471a <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 8004724:	2001      	movs	r0, #1
 8004726:	e7eb      	b.n	8004700 <HAL_UART_Transmit+0x80>
    __HAL_LOCK(huart);
 8004728:	2002      	movs	r0, #2
 800472a:	e7e9      	b.n	8004700 <HAL_UART_Transmit+0x80>

0800472c <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800472c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004730:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8004732:	f890 306a 	ldrb.w	r3, [r0, #106]	@ 0x6a
 8004736:	2b20      	cmp	r3, #32
{
 8004738:	460d      	mov	r5, r1
 800473a:	4604      	mov	r4, r0
 800473c:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 800473e:	d15c      	bne.n	80047fa <HAL_UART_Receive+0xce>
  {
    if((pData == NULL ) || (Size == 0U))
 8004740:	2d00      	cmp	r5, #0
 8004742:	d058      	beq.n	80047f6 <HAL_UART_Receive+0xca>
 8004744:	2a00      	cmp	r2, #0
 8004746:	d056      	beq.n	80047f6 <HAL_UART_Receive+0xca>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004748:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 800474c:	2b01      	cmp	r3, #1
 800474e:	d054      	beq.n	80047fa <HAL_UART_Receive+0xce>
 8004750:	2301      	movs	r3, #1
 8004752:	f880 3068 	strb.w	r3, [r0, #104]	@ 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 8004756:	6803      	ldr	r3, [r0, #0]
 8004758:	f04f 32ff 	mov.w	r2, #4294967295
 800475c:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800475e:	2300      	movs	r3, #0
 8004760:	66c3      	str	r3, [r0, #108]	@ 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004762:	2322      	movs	r3, #34	@ 0x22
 8004764:	f880 306a 	strb.w	r3, [r0, #106]	@ 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004768:	f7ff fa6a 	bl	8003c40 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800476c:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 800476e:	f8a4 1058 	strh.w	r1, [r4, #88]	@ 0x58
    UART_MASK_COMPUTATION(huart);
 8004772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8004776:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 8004778:	f8a4 105a 	strh.w	r1, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 800477c:	d115      	bne.n	80047aa <HAL_UART_Receive+0x7e>
 800477e:	6923      	ldr	r3, [r4, #16]
 8004780:	b98b      	cbnz	r3, 80047a6 <HAL_UART_Receive+0x7a>
 8004782:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8004786:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
    uhMask = huart->Mask;
 800478a:	f8b4 705c 	ldrh.w	r7, [r4, #92]	@ 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 800478e:	f8b4 005a 	ldrh.w	r0, [r4, #90]	@ 0x5a
 8004792:	b280      	uxth	r0, r0
 8004794:	b980      	cbnz	r0, 80047b8 <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004796:	2320      	movs	r3, #32
 8004798:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800479c:	f884 0068 	strb.w	r0, [r4, #104]	@ 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 80047a0:	b002      	add	sp, #8
 80047a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 80047a6:	23ff      	movs	r3, #255	@ 0xff
 80047a8:	e7ed      	b.n	8004786 <HAL_UART_Receive+0x5a>
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1ed      	bne.n	800478a <HAL_UART_Receive+0x5e>
 80047ae:	6923      	ldr	r3, [r4, #16]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0f8      	beq.n	80047a6 <HAL_UART_Receive+0x7a>
 80047b4:	237f      	movs	r3, #127	@ 0x7f
 80047b6:	e7e6      	b.n	8004786 <HAL_UART_Receive+0x5a>
      huart->RxXferCount--;
 80047b8:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 80047bc:	3a01      	subs	r2, #1
 80047be:	b292      	uxth	r2, r2
 80047c0:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80047c4:	4643      	mov	r3, r8
 80047c6:	9600      	str	r6, [sp, #0]
 80047c8:	2200      	movs	r2, #0
 80047ca:	2120      	movs	r1, #32
 80047cc:	4620      	mov	r0, r4
 80047ce:	f7ff fecb 	bl	8004568 <UART_WaitOnFlagUntilTimeout>
 80047d2:	b9a0      	cbnz	r0, 80047fe <HAL_UART_Receive+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047d4:	68a2      	ldr	r2, [r4, #8]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80047d6:	6823      	ldr	r3, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047d8:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 80047dc:	d106      	bne.n	80047ec <HAL_UART_Receive+0xc0>
 80047de:	6922      	ldr	r2, [r4, #16]
 80047e0:	b922      	cbnz	r2, 80047ec <HAL_UART_Receive+0xc0>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80047e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80047e4:	403b      	ands	r3, r7
 80047e6:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 80047ea:	e7d0      	b.n	800478e <HAL_UART_Receive+0x62>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80047ec:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80047ee:	403b      	ands	r3, r7
 80047f0:	f805 3b01 	strb.w	r3, [r5], #1
 80047f4:	e7cb      	b.n	800478e <HAL_UART_Receive+0x62>
      return  HAL_ERROR;
 80047f6:	2001      	movs	r0, #1
 80047f8:	e7d2      	b.n	80047a0 <HAL_UART_Receive+0x74>
    __HAL_LOCK(huart);
 80047fa:	2002      	movs	r0, #2
 80047fc:	e7d0      	b.n	80047a0 <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 80047fe:	2003      	movs	r0, #3
 8004800:	e7ce      	b.n	80047a0 <HAL_UART_Receive+0x74>
 8004802:	0000      	movs	r0, r0

08004804 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004804:	4a0a      	ldr	r2, [pc, #40]	@ (8004830 <_sbrk+0x2c>)
 8004806:	6811      	ldr	r1, [r2, #0]
{
 8004808:	b508      	push	{r3, lr}
 800480a:	4603      	mov	r3, r0
	if (heap_end == 0)
 800480c:	b909      	cbnz	r1, 8004812 <_sbrk+0xe>
		heap_end = &end;
 800480e:	4909      	ldr	r1, [pc, #36]	@ (8004834 <_sbrk+0x30>)
 8004810:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8004812:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8004814:	4669      	mov	r1, sp
 8004816:	4403      	add	r3, r0
 8004818:	428b      	cmp	r3, r1
 800481a:	d906      	bls.n	800482a <_sbrk+0x26>
	{
		errno = ENOMEM;
 800481c:	f7fd fa52 	bl	8001cc4 <__errno>
 8004820:	230c      	movs	r3, #12
 8004822:	6003      	str	r3, [r0, #0]
		return (char *) -1;
 8004824:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (char *) prev_heap_end;
}
 8004828:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800482a:	6013      	str	r3, [r2, #0]
	return (char *) prev_heap_end;
 800482c:	e7fc      	b.n	8004828 <_sbrk+0x24>
 800482e:	bf00      	nop
 8004830:	20000198 	.word	0x20000198
 8004834:	20000320 	.word	0x20000320

08004838 <Reset_Handler>:
 8004838:	2100      	movs	r1, #0
 800483a:	e003      	b.n	8004844 <LoopCopyDataInit>

0800483c <CopyDataInit>:
 800483c:	4b0b      	ldr	r3, [pc, #44]	@ (800486c <LoopForever+0x2>)
 800483e:	585b      	ldr	r3, [r3, r1]
 8004840:	5043      	str	r3, [r0, r1]
 8004842:	3104      	adds	r1, #4

08004844 <LoopCopyDataInit>:
 8004844:	480a      	ldr	r0, [pc, #40]	@ (8004870 <LoopForever+0x6>)
 8004846:	4b0b      	ldr	r3, [pc, #44]	@ (8004874 <LoopForever+0xa>)
 8004848:	1842      	adds	r2, r0, r1
 800484a:	429a      	cmp	r2, r3
 800484c:	d3f6      	bcc.n	800483c <CopyDataInit>
 800484e:	4a0a      	ldr	r2, [pc, #40]	@ (8004878 <LoopForever+0xe>)
 8004850:	e002      	b.n	8004858 <LoopFillZerobss>

08004852 <FillZerobss>:
 8004852:	2300      	movs	r3, #0
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	3204      	adds	r2, #4

08004858 <LoopFillZerobss>:
 8004858:	4b08      	ldr	r3, [pc, #32]	@ (800487c <LoopForever+0x12>)
 800485a:	429a      	cmp	r2, r3
 800485c:	d3f9      	bcc.n	8004852 <FillZerobss>
 800485e:	f3af 8000 	nop.w
 8004862:	f7fd fa35 	bl	8001cd0 <__libc_init_array>
 8004866:	f7fe fdcf 	bl	8003408 <main>

0800486a <LoopForever>:
 800486a:	e7fe      	b.n	800486a <LoopForever>
 800486c:	080049c0 	.word	0x080049c0
 8004870:	20000000 	.word	0x20000000
 8004874:	2000005c 	.word	0x2000005c
 8004878:	2000005c 	.word	0x2000005c
 800487c:	2000031c 	.word	0x2000031c

08004880 <BusFault_Handler>:
 8004880:	e7fe      	b.n	8004880 <BusFault_Handler>
 8004882:	0000      	movs	r0, r0

08004884 <_init>:
 8004884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004886:	bf00      	nop
 8004888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800488a:	bc08      	pop	{r3}
 800488c:	469e      	mov	lr, r3
 800488e:	4770      	bx	lr

08004890 <_fini>:
 8004890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004892:	bf00      	nop
 8004894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004896:	bc08      	pop	{r3}
 8004898:	469e      	mov	lr, r3
 800489a:	4770      	bx	lr
