
simpleserial-target-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ab8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003c48  08003c48  00004c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d30  08003d30  0000506c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d30  08003d30  00004d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d38  08003d38  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d38  08003d38  00004d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d3c  08003d3c  00004d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003d40  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  2000006c  08003dac  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000330  08003dac  00005330  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017960  00000000  00000000  00005096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005568  00000000  00000000  0001c9f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000339c  00000000  00000000  00021f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a8  00000000  00000000  00025300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000730  00000000  00000000  00025aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000094b5  00000000  00000000  000261d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000030f8  00000000  00000000  0002f68d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000012  00000000  00000000  00032785  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001634  00000000  00000000  00032798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  00033dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000070  00000000  00000000  00033f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loclists 00003110  00000000  00000000  00033f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_rnglists 000002c1  00000000  00000000  00037090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 00000140  00000000  00000000  00037351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <expf>:
 8000190:	b538      	push	{r3, r4, r5, lr}
 8000192:	4604      	mov	r4, r0
 8000194:	f000 f82c 	bl	80001f0 <__ieee754_expf>
 8000198:	4605      	mov	r5, r0
 800019a:	4620      	mov	r0, r4
 800019c:	f000 f820 	bl	80001e0 <finitef>
 80001a0:	b148      	cbz	r0, 80001b6 <expf+0x26>
 80001a2:	490d      	ldr	r1, [pc, #52]	@ (80001d8 <expf+0x48>)
 80001a4:	4620      	mov	r0, r4
 80001a6:	f000 fc57 	bl	8000a58 <__aeabi_fcmpgt>
 80001aa:	b930      	cbnz	r0, 80001ba <expf+0x2a>
 80001ac:	490b      	ldr	r1, [pc, #44]	@ (80001dc <expf+0x4c>)
 80001ae:	4620      	mov	r0, r4
 80001b0:	f000 fc34 	bl	8000a1c <__aeabi_fcmplt>
 80001b4:	b948      	cbnz	r0, 80001ca <expf+0x3a>
 80001b6:	4628      	mov	r0, r5
 80001b8:	bd38      	pop	{r3, r4, r5, pc}
 80001ba:	f001 f85b 	bl	8001274 <__errno>
 80001be:	f04f 45ff 	mov.w	r5, #2139095040	@ 0x7f800000
 80001c2:	2322      	movs	r3, #34	@ 0x22
 80001c4:	6003      	str	r3, [r0, #0]
 80001c6:	4628      	mov	r0, r5
 80001c8:	bd38      	pop	{r3, r4, r5, pc}
 80001ca:	f001 f853 	bl	8001274 <__errno>
 80001ce:	2322      	movs	r3, #34	@ 0x22
 80001d0:	2500      	movs	r5, #0
 80001d2:	6003      	str	r3, [r0, #0]
 80001d4:	e7ef      	b.n	80001b6 <expf+0x26>
 80001d6:	bf00      	nop
 80001d8:	42b17217 	.word	0x42b17217
 80001dc:	c2cff1b5 	.word	0xc2cff1b5

080001e0 <finitef>:
 80001e0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80001e4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80001e8:	bfac      	ite	ge
 80001ea:	2000      	movge	r0, #0
 80001ec:	2001      	movlt	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__ieee754_expf>:
 80001f0:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80001f4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	4604      	mov	r4, r0
 80001fe:	d86c      	bhi.n	80002da <__ieee754_expf+0xea>
 8000200:	ea4f 75d0 	mov.w	r5, r0, lsr #31
 8000204:	f000 80c6 	beq.w	8000394 <__ieee754_expf+0x1a4>
 8000208:	497b      	ldr	r1, [pc, #492]	@ (80003f8 <__ieee754_expf+0x208>)
 800020a:	4288      	cmp	r0, r1
 800020c:	f300 80b4 	bgt.w	8000378 <__ieee754_expf+0x188>
 8000210:	2800      	cmp	r0, #0
 8000212:	f2c0 80b6 	blt.w	8000382 <__ieee754_expf+0x192>
 8000216:	4b79      	ldr	r3, [pc, #484]	@ (80003fc <__ieee754_expf+0x20c>)
 8000218:	429a      	cmp	r2, r3
 800021a:	d963      	bls.n	80002e4 <__ieee754_expf+0xf4>
 800021c:	4b78      	ldr	r3, [pc, #480]	@ (8000400 <__ieee754_expf+0x210>)
 800021e:	429a      	cmp	r2, r3
 8000220:	f200 80c5 	bhi.w	80003ae <__ieee754_expf+0x1be>
 8000224:	4e77      	ldr	r6, [pc, #476]	@ (8000404 <__ieee754_expf+0x214>)
 8000226:	4620      	mov	r0, r4
 8000228:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 800022c:	f000 f94e 	bl	80004cc <__aeabi_fsub>
 8000230:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8000234:	f1c5 0601 	rsb	r6, r5, #1
 8000238:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800023c:	4607      	mov	r7, r0
 800023e:	1b76      	subs	r6, r6, r5
 8000240:	4641      	mov	r1, r8
 8000242:	4638      	mov	r0, r7
 8000244:	f000 f942 	bl	80004cc <__aeabi_fsub>
 8000248:	4601      	mov	r1, r0
 800024a:	4604      	mov	r4, r0
 800024c:	f000 fa48 	bl	80006e0 <__aeabi_fmul>
 8000250:	496d      	ldr	r1, [pc, #436]	@ (8000408 <__ieee754_expf+0x218>)
 8000252:	4605      	mov	r5, r0
 8000254:	f000 fa44 	bl	80006e0 <__aeabi_fmul>
 8000258:	496c      	ldr	r1, [pc, #432]	@ (800040c <__ieee754_expf+0x21c>)
 800025a:	f000 f937 	bl	80004cc <__aeabi_fsub>
 800025e:	4629      	mov	r1, r5
 8000260:	f000 fa3e 	bl	80006e0 <__aeabi_fmul>
 8000264:	496a      	ldr	r1, [pc, #424]	@ (8000410 <__ieee754_expf+0x220>)
 8000266:	f000 f933 	bl	80004d0 <__addsf3>
 800026a:	4629      	mov	r1, r5
 800026c:	f000 fa38 	bl	80006e0 <__aeabi_fmul>
 8000270:	4968      	ldr	r1, [pc, #416]	@ (8000414 <__ieee754_expf+0x224>)
 8000272:	f000 f92b 	bl	80004cc <__aeabi_fsub>
 8000276:	4629      	mov	r1, r5
 8000278:	f000 fa32 	bl	80006e0 <__aeabi_fmul>
 800027c:	4966      	ldr	r1, [pc, #408]	@ (8000418 <__ieee754_expf+0x228>)
 800027e:	f000 f927 	bl	80004d0 <__addsf3>
 8000282:	4629      	mov	r1, r5
 8000284:	f000 fa2c 	bl	80006e0 <__aeabi_fmul>
 8000288:	4601      	mov	r1, r0
 800028a:	4620      	mov	r0, r4
 800028c:	f000 f91e 	bl	80004cc <__aeabi_fsub>
 8000290:	4605      	mov	r5, r0
 8000292:	4601      	mov	r1, r0
 8000294:	4620      	mov	r0, r4
 8000296:	f000 fa23 	bl	80006e0 <__aeabi_fmul>
 800029a:	46aa      	mov	sl, r5
 800029c:	4681      	mov	r9, r0
 800029e:	2e00      	cmp	r6, #0
 80002a0:	d052      	beq.n	8000348 <__ieee754_expf+0x158>
 80002a2:	4629      	mov	r1, r5
 80002a4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80002a8:	f000 f910 	bl	80004cc <__aeabi_fsub>
 80002ac:	4601      	mov	r1, r0
 80002ae:	4648      	mov	r0, r9
 80002b0:	f000 faca 	bl	8000848 <__aeabi_fdiv>
 80002b4:	4601      	mov	r1, r0
 80002b6:	4640      	mov	r0, r8
 80002b8:	f000 f908 	bl	80004cc <__aeabi_fsub>
 80002bc:	4639      	mov	r1, r7
 80002be:	f000 f905 	bl	80004cc <__aeabi_fsub>
 80002c2:	4601      	mov	r1, r0
 80002c4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80002c8:	f000 f900 	bl	80004cc <__aeabi_fsub>
 80002cc:	f116 0f7d 	cmn.w	r6, #125	@ 0x7d
 80002d0:	db64      	blt.n	800039c <__ieee754_expf+0x1ac>
 80002d2:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	4601      	mov	r1, r0
 80002dc:	f000 f8f8 	bl	80004d0 <__addsf3>
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	f1b2 5f50 	cmp.w	r2, #872415232	@ 0x34000000
 80002e8:	d209      	bcs.n	80002fe <__ieee754_expf+0x10e>
 80002ea:	494c      	ldr	r1, [pc, #304]	@ (800041c <__ieee754_expf+0x22c>)
 80002ec:	4620      	mov	r0, r4
 80002ee:	f000 f8ef 	bl	80004d0 <__addsf3>
 80002f2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80002f6:	f000 fbaf 	bl	8000a58 <__aeabi_fcmpgt>
 80002fa:	2800      	cmp	r0, #0
 80002fc:	d175      	bne.n	80003ea <__ieee754_expf+0x1fa>
 80002fe:	4621      	mov	r1, r4
 8000300:	4620      	mov	r0, r4
 8000302:	f000 f9ed 	bl	80006e0 <__aeabi_fmul>
 8000306:	4940      	ldr	r1, [pc, #256]	@ (8000408 <__ieee754_expf+0x218>)
 8000308:	4605      	mov	r5, r0
 800030a:	f000 f9e9 	bl	80006e0 <__aeabi_fmul>
 800030e:	493f      	ldr	r1, [pc, #252]	@ (800040c <__ieee754_expf+0x21c>)
 8000310:	f000 f8dc 	bl	80004cc <__aeabi_fsub>
 8000314:	4629      	mov	r1, r5
 8000316:	f000 f9e3 	bl	80006e0 <__aeabi_fmul>
 800031a:	493d      	ldr	r1, [pc, #244]	@ (8000410 <__ieee754_expf+0x220>)
 800031c:	f000 f8d8 	bl	80004d0 <__addsf3>
 8000320:	4629      	mov	r1, r5
 8000322:	f000 f9dd 	bl	80006e0 <__aeabi_fmul>
 8000326:	493b      	ldr	r1, [pc, #236]	@ (8000414 <__ieee754_expf+0x224>)
 8000328:	f000 f8d0 	bl	80004cc <__aeabi_fsub>
 800032c:	4629      	mov	r1, r5
 800032e:	f000 f9d7 	bl	80006e0 <__aeabi_fmul>
 8000332:	4939      	ldr	r1, [pc, #228]	@ (8000418 <__ieee754_expf+0x228>)
 8000334:	f000 f8cc 	bl	80004d0 <__addsf3>
 8000338:	4629      	mov	r1, r5
 800033a:	f000 f9d1 	bl	80006e0 <__aeabi_fmul>
 800033e:	4601      	mov	r1, r0
 8000340:	4620      	mov	r0, r4
 8000342:	f000 f8c3 	bl	80004cc <__aeabi_fsub>
 8000346:	4682      	mov	sl, r0
 8000348:	4651      	mov	r1, sl
 800034a:	4620      	mov	r0, r4
 800034c:	f000 f9c8 	bl	80006e0 <__aeabi_fmul>
 8000350:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000354:	4605      	mov	r5, r0
 8000356:	4650      	mov	r0, sl
 8000358:	f000 f8b8 	bl	80004cc <__aeabi_fsub>
 800035c:	4601      	mov	r1, r0
 800035e:	4628      	mov	r0, r5
 8000360:	f000 fa72 	bl	8000848 <__aeabi_fdiv>
 8000364:	4621      	mov	r1, r4
 8000366:	f000 f8b1 	bl	80004cc <__aeabi_fsub>
 800036a:	4601      	mov	r1, r0
 800036c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8000370:	f000 f8ac 	bl	80004cc <__aeabi_fsub>
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800037c:	2000      	movs	r0, #0
 800037e:	f000 b877 	b.w	8000470 <__math_oflowf>
 8000382:	4b27      	ldr	r3, [pc, #156]	@ (8000420 <__ieee754_expf+0x230>)
 8000384:	429a      	cmp	r2, r3
 8000386:	f67f af46 	bls.w	8000216 <__ieee754_expf+0x26>
 800038a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800038e:	2000      	movs	r0, #0
 8000390:	f000 b86a 	b.w	8000468 <__math_uflowf>
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0a3      	beq.n	80002e0 <__ieee754_expf+0xf0>
 8000398:	2000      	movs	r0, #0
 800039a:	e7a1      	b.n	80002e0 <__ieee754_expf+0xf0>
 800039c:	3664      	adds	r6, #100	@ 0x64
 800039e:	f04f 6158 	mov.w	r1, #226492416	@ 0xd800000
 80003a2:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
 80003a6:	f000 f99b 	bl	80006e0 <__aeabi_fmul>
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	491d      	ldr	r1, [pc, #116]	@ (8000424 <__ieee754_expf+0x234>)
 80003b0:	4620      	mov	r0, r4
 80003b2:	f000 f995 	bl	80006e0 <__aeabi_fmul>
 80003b6:	4b13      	ldr	r3, [pc, #76]	@ (8000404 <__ieee754_expf+0x214>)
 80003b8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80003bc:	6919      	ldr	r1, [r3, #16]
 80003be:	f000 f887 	bl	80004d0 <__addsf3>
 80003c2:	f000 fb69 	bl	8000a98 <__aeabi_f2iz>
 80003c6:	4606      	mov	r6, r0
 80003c8:	f000 f936 	bl	8000638 <__aeabi_i2f>
 80003cc:	4916      	ldr	r1, [pc, #88]	@ (8000428 <__ieee754_expf+0x238>)
 80003ce:	4605      	mov	r5, r0
 80003d0:	f000 f986 	bl	80006e0 <__aeabi_fmul>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4620      	mov	r0, r4
 80003d8:	f000 f878 	bl	80004cc <__aeabi_fsub>
 80003dc:	4913      	ldr	r1, [pc, #76]	@ (800042c <__ieee754_expf+0x23c>)
 80003de:	4607      	mov	r7, r0
 80003e0:	4628      	mov	r0, r5
 80003e2:	f000 f97d 	bl	80006e0 <__aeabi_fmul>
 80003e6:	4680      	mov	r8, r0
 80003e8:	e72a      	b.n	8000240 <__ieee754_expf+0x50>
 80003ea:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80003ee:	4620      	mov	r0, r4
 80003f0:	f000 f86e 	bl	80004d0 <__addsf3>
 80003f4:	e774      	b.n	80002e0 <__ieee754_expf+0xf0>
 80003f6:	bf00      	nop
 80003f8:	42b17217 	.word	0x42b17217
 80003fc:	3eb17218 	.word	0x3eb17218
 8000400:	3f851591 	.word	0x3f851591
 8000404:	08003c48 	.word	0x08003c48
 8000408:	3331bb4c 	.word	0x3331bb4c
 800040c:	35ddea0e 	.word	0x35ddea0e
 8000410:	388ab355 	.word	0x388ab355
 8000414:	3b360b61 	.word	0x3b360b61
 8000418:	3e2aaaab 	.word	0x3e2aaaab
 800041c:	7149f2ca 	.word	0x7149f2ca
 8000420:	42cff1b5 	.word	0x42cff1b5
 8000424:	3fb8aa3b 	.word	0x3fb8aa3b
 8000428:	3f317180 	.word	0x3f317180
 800042c:	3717f7d1 	.word	0x3717f7d1

08000430 <with_errnof>:
 8000430:	b538      	push	{r3, r4, r5, lr}
 8000432:	4605      	mov	r5, r0
 8000434:	460c      	mov	r4, r1
 8000436:	f000 ff1d 	bl	8001274 <__errno>
 800043a:	4603      	mov	r3, r0
 800043c:	4628      	mov	r0, r5
 800043e:	601c      	str	r4, [r3, #0]
 8000440:	bd38      	pop	{r3, r4, r5, pc}
 8000442:	bf00      	nop

08000444 <xflowf>:
 8000444:	b508      	push	{r3, lr}
 8000446:	b138      	cbz	r0, 8000458 <xflowf+0x14>
 8000448:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800044c:	f000 f948 	bl	80006e0 <__aeabi_fmul>
 8000450:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000454:	2122      	movs	r1, #34	@ 0x22
 8000456:	e7eb      	b.n	8000430 <with_errnof>
 8000458:	4608      	mov	r0, r1
 800045a:	f000 f941 	bl	80006e0 <__aeabi_fmul>
 800045e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000462:	2122      	movs	r1, #34	@ 0x22
 8000464:	e7e4      	b.n	8000430 <with_errnof>
 8000466:	bf00      	nop

08000468 <__math_uflowf>:
 8000468:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800046c:	e7ea      	b.n	8000444 <xflowf>
 800046e:	bf00      	nop

08000470 <__math_oflowf>:
 8000470:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8000474:	e7e6      	b.n	8000444 <xflowf>
 8000476:	bf00      	nop

08000478 <__math_divzerof>:
 8000478:	b508      	push	{r3, lr}
 800047a:	b138      	cbz	r0, 800048c <__math_divzerof+0x14>
 800047c:	4805      	ldr	r0, [pc, #20]	@ (8000494 <__math_divzerof+0x1c>)
 800047e:	2100      	movs	r1, #0
 8000480:	f000 f9e2 	bl	8000848 <__aeabi_fdiv>
 8000484:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000488:	2122      	movs	r1, #34	@ 0x22
 800048a:	e7d1      	b.n	8000430 <with_errnof>
 800048c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8000490:	e7f5      	b.n	800047e <__math_divzerof+0x6>
 8000492:	bf00      	nop
 8000494:	bf800000 	.word	0xbf800000

08000498 <__math_invalidf>:
 8000498:	b510      	push	{r4, lr}
 800049a:	4601      	mov	r1, r0
 800049c:	4604      	mov	r4, r0
 800049e:	f000 f815 	bl	80004cc <__aeabi_fsub>
 80004a2:	4601      	mov	r1, r0
 80004a4:	f000 f9d0 	bl	8000848 <__aeabi_fdiv>
 80004a8:	4621      	mov	r1, r4
 80004aa:	4603      	mov	r3, r0
 80004ac:	4620      	mov	r0, r4
 80004ae:	461c      	mov	r4, r3
 80004b0:	f000 fadc 	bl	8000a6c <__aeabi_fcmpun>
 80004b4:	b920      	cbnz	r0, 80004c0 <__math_invalidf+0x28>
 80004b6:	4620      	mov	r0, r4
 80004b8:	2121      	movs	r1, #33	@ 0x21
 80004ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80004be:	e7b7      	b.n	8000430 <with_errnof>
 80004c0:	4620      	mov	r0, r4
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_frsub>:
 80004c4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__addsf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_fsub>:
 80004cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080004d0 <__addsf3>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	bf1f      	itttt	ne
 80004d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004d8:	ea92 0f03 	teqne	r2, r3
 80004dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004e4:	d06a      	beq.n	80005bc <__addsf3+0xec>
 80004e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80004ee:	bfc1      	itttt	gt
 80004f0:	18d2      	addgt	r2, r2, r3
 80004f2:	4041      	eorgt	r1, r0
 80004f4:	4048      	eorgt	r0, r1
 80004f6:	4041      	eorgt	r1, r0
 80004f8:	bfb8      	it	lt
 80004fa:	425b      	neglt	r3, r3
 80004fc:	2b19      	cmp	r3, #25
 80004fe:	bf88      	it	hi
 8000500:	4770      	bxhi	lr
 8000502:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000506:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800050a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800050e:	bf18      	it	ne
 8000510:	4240      	negne	r0, r0
 8000512:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000516:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800051a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800051e:	bf18      	it	ne
 8000520:	4249      	negne	r1, r1
 8000522:	ea92 0f03 	teq	r2, r3
 8000526:	d03f      	beq.n	80005a8 <__addsf3+0xd8>
 8000528:	f1a2 0201 	sub.w	r2, r2, #1
 800052c:	fa41 fc03 	asr.w	ip, r1, r3
 8000530:	eb10 000c 	adds.w	r0, r0, ip
 8000534:	f1c3 0320 	rsb	r3, r3, #32
 8000538:	fa01 f103 	lsl.w	r1, r1, r3
 800053c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000540:	d502      	bpl.n	8000548 <__addsf3+0x78>
 8000542:	4249      	negs	r1, r1
 8000544:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000548:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800054c:	d313      	bcc.n	8000576 <__addsf3+0xa6>
 800054e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000552:	d306      	bcc.n	8000562 <__addsf3+0x92>
 8000554:	0840      	lsrs	r0, r0, #1
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	f102 0201 	add.w	r2, r2, #1
 800055e:	2afe      	cmp	r2, #254	@ 0xfe
 8000560:	d251      	bcs.n	8000606 <__addsf3+0x136>
 8000562:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000566:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800056a:	bf08      	it	eq
 800056c:	f020 0001 	biceq.w	r0, r0, #1
 8000570:	ea40 0003 	orr.w	r0, r0, r3
 8000574:	4770      	bx	lr
 8000576:	0049      	lsls	r1, r1, #1
 8000578:	eb40 0000 	adc.w	r0, r0, r0
 800057c:	3a01      	subs	r2, #1
 800057e:	bf28      	it	cs
 8000580:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000584:	d2ed      	bcs.n	8000562 <__addsf3+0x92>
 8000586:	fab0 fc80 	clz	ip, r0
 800058a:	f1ac 0c08 	sub.w	ip, ip, #8
 800058e:	ebb2 020c 	subs.w	r2, r2, ip
 8000592:	fa00 f00c 	lsl.w	r0, r0, ip
 8000596:	bfaa      	itet	ge
 8000598:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800059c:	4252      	neglt	r2, r2
 800059e:	4318      	orrge	r0, r3
 80005a0:	bfbc      	itt	lt
 80005a2:	40d0      	lsrlt	r0, r2
 80005a4:	4318      	orrlt	r0, r3
 80005a6:	4770      	bx	lr
 80005a8:	f092 0f00 	teq	r2, #0
 80005ac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80005b0:	bf06      	itte	eq
 80005b2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80005b6:	3201      	addeq	r2, #1
 80005b8:	3b01      	subne	r3, #1
 80005ba:	e7b5      	b.n	8000528 <__addsf3+0x58>
 80005bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005c4:	bf18      	it	ne
 80005c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005ca:	d021      	beq.n	8000610 <__addsf3+0x140>
 80005cc:	ea92 0f03 	teq	r2, r3
 80005d0:	d004      	beq.n	80005dc <__addsf3+0x10c>
 80005d2:	f092 0f00 	teq	r2, #0
 80005d6:	bf08      	it	eq
 80005d8:	4608      	moveq	r0, r1
 80005da:	4770      	bx	lr
 80005dc:	ea90 0f01 	teq	r0, r1
 80005e0:	bf1c      	itt	ne
 80005e2:	2000      	movne	r0, #0
 80005e4:	4770      	bxne	lr
 80005e6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80005ea:	d104      	bne.n	80005f6 <__addsf3+0x126>
 80005ec:	0040      	lsls	r0, r0, #1
 80005ee:	bf28      	it	cs
 80005f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80005f4:	4770      	bx	lr
 80005f6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80005fa:	bf3c      	itt	cc
 80005fc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000600:	4770      	bxcc	lr
 8000602:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000606:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800060a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800060e:	4770      	bx	lr
 8000610:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000614:	bf16      	itet	ne
 8000616:	4608      	movne	r0, r1
 8000618:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800061c:	4601      	movne	r1, r0
 800061e:	0242      	lsls	r2, r0, #9
 8000620:	bf06      	itte	eq
 8000622:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000626:	ea90 0f01 	teqeq	r0, r1
 800062a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800062e:	4770      	bx	lr

08000630 <__aeabi_ui2f>:
 8000630:	f04f 0300 	mov.w	r3, #0
 8000634:	e004      	b.n	8000640 <__aeabi_i2f+0x8>
 8000636:	bf00      	nop

08000638 <__aeabi_i2f>:
 8000638:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	ea5f 0c00 	movs.w	ip, r0
 8000644:	bf08      	it	eq
 8000646:	4770      	bxeq	lr
 8000648:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800064c:	4601      	mov	r1, r0
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	e01c      	b.n	800068e <__aeabi_l2f+0x2a>

08000654 <__aeabi_ul2f>:
 8000654:	ea50 0201 	orrs.w	r2, r0, r1
 8000658:	bf08      	it	eq
 800065a:	4770      	bxeq	lr
 800065c:	f04f 0300 	mov.w	r3, #0
 8000660:	e00a      	b.n	8000678 <__aeabi_l2f+0x14>
 8000662:	bf00      	nop

08000664 <__aeabi_l2f>:
 8000664:	ea50 0201 	orrs.w	r2, r0, r1
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000670:	d502      	bpl.n	8000678 <__aeabi_l2f+0x14>
 8000672:	4240      	negs	r0, r0
 8000674:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000678:	ea5f 0c01 	movs.w	ip, r1
 800067c:	bf02      	ittt	eq
 800067e:	4684      	moveq	ip, r0
 8000680:	4601      	moveq	r1, r0
 8000682:	2000      	moveq	r0, #0
 8000684:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000688:	bf08      	it	eq
 800068a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800068e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000692:	fabc f28c 	clz	r2, ip
 8000696:	3a08      	subs	r2, #8
 8000698:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800069c:	db10      	blt.n	80006c0 <__aeabi_l2f+0x5c>
 800069e:	fa01 fc02 	lsl.w	ip, r1, r2
 80006a2:	4463      	add	r3, ip
 80006a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006a8:	f1c2 0220 	rsb	r2, r2, #32
 80006ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80006b0:	fa20 f202 	lsr.w	r2, r0, r2
 80006b4:	eb43 0002 	adc.w	r0, r3, r2
 80006b8:	bf08      	it	eq
 80006ba:	f020 0001 	biceq.w	r0, r0, #1
 80006be:	4770      	bx	lr
 80006c0:	f102 0220 	add.w	r2, r2, #32
 80006c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80006c8:	f1c2 0220 	rsb	r2, r2, #32
 80006cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006d0:	fa21 f202 	lsr.w	r2, r1, r2
 80006d4:	eb43 0002 	adc.w	r0, r3, r2
 80006d8:	bf08      	it	eq
 80006da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006de:	4770      	bx	lr

080006e0 <__aeabi_fmul>:
 80006e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80006e8:	bf1e      	ittt	ne
 80006ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80006ee:	ea92 0f0c 	teqne	r2, ip
 80006f2:	ea93 0f0c 	teqne	r3, ip
 80006f6:	d06f      	beq.n	80007d8 <__aeabi_fmul+0xf8>
 80006f8:	441a      	add	r2, r3
 80006fa:	ea80 0c01 	eor.w	ip, r0, r1
 80006fe:	0240      	lsls	r0, r0, #9
 8000700:	bf18      	it	ne
 8000702:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000706:	d01e      	beq.n	8000746 <__aeabi_fmul+0x66>
 8000708:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800070c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000710:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000714:	fba0 3101 	umull	r3, r1, r0, r1
 8000718:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800071c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000720:	bf3e      	ittt	cc
 8000722:	0049      	lslcc	r1, r1, #1
 8000724:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000728:	005b      	lslcc	r3, r3, #1
 800072a:	ea40 0001 	orr.w	r0, r0, r1
 800072e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000732:	2afd      	cmp	r2, #253	@ 0xfd
 8000734:	d81d      	bhi.n	8000772 <__aeabi_fmul+0x92>
 8000736:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800073a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800073e:	bf08      	it	eq
 8000740:	f020 0001 	biceq.w	r0, r0, #1
 8000744:	4770      	bx	lr
 8000746:	f090 0f00 	teq	r0, #0
 800074a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800074e:	bf08      	it	eq
 8000750:	0249      	lsleq	r1, r1, #9
 8000752:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000756:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800075a:	3a7f      	subs	r2, #127	@ 0x7f
 800075c:	bfc2      	ittt	gt
 800075e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000762:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000766:	4770      	bxgt	lr
 8000768:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	3a01      	subs	r2, #1
 8000772:	dc5d      	bgt.n	8000830 <__aeabi_fmul+0x150>
 8000774:	f112 0f19 	cmn.w	r2, #25
 8000778:	bfdc      	itt	le
 800077a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800077e:	4770      	bxle	lr
 8000780:	f1c2 0200 	rsb	r2, r2, #0
 8000784:	0041      	lsls	r1, r0, #1
 8000786:	fa21 f102 	lsr.w	r1, r1, r2
 800078a:	f1c2 0220 	rsb	r2, r2, #32
 800078e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000792:	ea5f 0031 	movs.w	r0, r1, rrx
 8000796:	f140 0000 	adc.w	r0, r0, #0
 800079a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800079e:	bf08      	it	eq
 80007a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007a4:	4770      	bx	lr
 80007a6:	f092 0f00 	teq	r2, #0
 80007aa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80007ae:	bf02      	ittt	eq
 80007b0:	0040      	lsleq	r0, r0, #1
 80007b2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80007b6:	3a01      	subeq	r2, #1
 80007b8:	d0f9      	beq.n	80007ae <__aeabi_fmul+0xce>
 80007ba:	ea40 000c 	orr.w	r0, r0, ip
 80007be:	f093 0f00 	teq	r3, #0
 80007c2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007c6:	bf02      	ittt	eq
 80007c8:	0049      	lsleq	r1, r1, #1
 80007ca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80007ce:	3b01      	subeq	r3, #1
 80007d0:	d0f9      	beq.n	80007c6 <__aeabi_fmul+0xe6>
 80007d2:	ea41 010c 	orr.w	r1, r1, ip
 80007d6:	e78f      	b.n	80006f8 <__aeabi_fmul+0x18>
 80007d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80007dc:	ea92 0f0c 	teq	r2, ip
 80007e0:	bf18      	it	ne
 80007e2:	ea93 0f0c 	teqne	r3, ip
 80007e6:	d00a      	beq.n	80007fe <__aeabi_fmul+0x11e>
 80007e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80007ec:	bf18      	it	ne
 80007ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80007f2:	d1d8      	bne.n	80007a6 <__aeabi_fmul+0xc6>
 80007f4:	ea80 0001 	eor.w	r0, r0, r1
 80007f8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80007fc:	4770      	bx	lr
 80007fe:	f090 0f00 	teq	r0, #0
 8000802:	bf17      	itett	ne
 8000804:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000808:	4608      	moveq	r0, r1
 800080a:	f091 0f00 	teqne	r1, #0
 800080e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000812:	d014      	beq.n	800083e <__aeabi_fmul+0x15e>
 8000814:	ea92 0f0c 	teq	r2, ip
 8000818:	d101      	bne.n	800081e <__aeabi_fmul+0x13e>
 800081a:	0242      	lsls	r2, r0, #9
 800081c:	d10f      	bne.n	800083e <__aeabi_fmul+0x15e>
 800081e:	ea93 0f0c 	teq	r3, ip
 8000822:	d103      	bne.n	800082c <__aeabi_fmul+0x14c>
 8000824:	024b      	lsls	r3, r1, #9
 8000826:	bf18      	it	ne
 8000828:	4608      	movne	r0, r1
 800082a:	d108      	bne.n	800083e <__aeabi_fmul+0x15e>
 800082c:	ea80 0001 	eor.w	r0, r0, r1
 8000830:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000834:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000838:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800083c:	4770      	bx	lr
 800083e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000842:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000846:	4770      	bx	lr

08000848 <__aeabi_fdiv>:
 8000848:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800084c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000850:	bf1e      	ittt	ne
 8000852:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000856:	ea92 0f0c 	teqne	r2, ip
 800085a:	ea93 0f0c 	teqne	r3, ip
 800085e:	d069      	beq.n	8000934 <__aeabi_fdiv+0xec>
 8000860:	eba2 0203 	sub.w	r2, r2, r3
 8000864:	ea80 0c01 	eor.w	ip, r0, r1
 8000868:	0249      	lsls	r1, r1, #9
 800086a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800086e:	d037      	beq.n	80008e0 <__aeabi_fdiv+0x98>
 8000870:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000874:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000878:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000880:	428b      	cmp	r3, r1
 8000882:	bf38      	it	cc
 8000884:	005b      	lslcc	r3, r3, #1
 8000886:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800088a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800088e:	428b      	cmp	r3, r1
 8000890:	bf24      	itt	cs
 8000892:	1a5b      	subcs	r3, r3, r1
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800089c:	bf24      	itt	cs
 800089e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008aa:	bf24      	itt	cs
 80008ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008b8:	bf24      	itt	cs
 80008ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	bf18      	it	ne
 80008c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008ca:	d1e0      	bne.n	800088e <__aeabi_fdiv+0x46>
 80008cc:	2afd      	cmp	r2, #253	@ 0xfd
 80008ce:	f63f af50 	bhi.w	8000772 <__aeabi_fmul+0x92>
 80008d2:	428b      	cmp	r3, r1
 80008d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008d8:	bf08      	it	eq
 80008da:	f020 0001 	biceq.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80008e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008e8:	327f      	adds	r2, #127	@ 0x7f
 80008ea:	bfc2      	ittt	gt
 80008ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80008f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008f4:	4770      	bxgt	lr
 80008f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008fa:	f04f 0300 	mov.w	r3, #0
 80008fe:	3a01      	subs	r2, #1
 8000900:	e737      	b.n	8000772 <__aeabi_fmul+0x92>
 8000902:	f092 0f00 	teq	r2, #0
 8000906:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800090a:	bf02      	ittt	eq
 800090c:	0040      	lsleq	r0, r0, #1
 800090e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000912:	3a01      	subeq	r2, #1
 8000914:	d0f9      	beq.n	800090a <__aeabi_fdiv+0xc2>
 8000916:	ea40 000c 	orr.w	r0, r0, ip
 800091a:	f093 0f00 	teq	r3, #0
 800091e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000922:	bf02      	ittt	eq
 8000924:	0049      	lsleq	r1, r1, #1
 8000926:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800092a:	3b01      	subeq	r3, #1
 800092c:	d0f9      	beq.n	8000922 <__aeabi_fdiv+0xda>
 800092e:	ea41 010c 	orr.w	r1, r1, ip
 8000932:	e795      	b.n	8000860 <__aeabi_fdiv+0x18>
 8000934:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000938:	ea92 0f0c 	teq	r2, ip
 800093c:	d108      	bne.n	8000950 <__aeabi_fdiv+0x108>
 800093e:	0242      	lsls	r2, r0, #9
 8000940:	f47f af7d 	bne.w	800083e <__aeabi_fmul+0x15e>
 8000944:	ea93 0f0c 	teq	r3, ip
 8000948:	f47f af70 	bne.w	800082c <__aeabi_fmul+0x14c>
 800094c:	4608      	mov	r0, r1
 800094e:	e776      	b.n	800083e <__aeabi_fmul+0x15e>
 8000950:	ea93 0f0c 	teq	r3, ip
 8000954:	d104      	bne.n	8000960 <__aeabi_fdiv+0x118>
 8000956:	024b      	lsls	r3, r1, #9
 8000958:	f43f af4c 	beq.w	80007f4 <__aeabi_fmul+0x114>
 800095c:	4608      	mov	r0, r1
 800095e:	e76e      	b.n	800083e <__aeabi_fmul+0x15e>
 8000960:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000964:	bf18      	it	ne
 8000966:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800096a:	d1ca      	bne.n	8000902 <__aeabi_fdiv+0xba>
 800096c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000970:	f47f af5c 	bne.w	800082c <__aeabi_fmul+0x14c>
 8000974:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000978:	f47f af3c 	bne.w	80007f4 <__aeabi_fmul+0x114>
 800097c:	e75f      	b.n	800083e <__aeabi_fmul+0x15e>
 800097e:	bf00      	nop

08000980 <__gesf2>:
 8000980:	f04f 3cff 	mov.w	ip, #4294967295
 8000984:	e006      	b.n	8000994 <__cmpsf2+0x4>
 8000986:	bf00      	nop

08000988 <__lesf2>:
 8000988:	f04f 0c01 	mov.w	ip, #1
 800098c:	e002      	b.n	8000994 <__cmpsf2+0x4>
 800098e:	bf00      	nop

08000990 <__cmpsf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000998:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800099c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009a4:	bf18      	it	ne
 80009a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009aa:	d011      	beq.n	80009d0 <__cmpsf2+0x40>
 80009ac:	b001      	add	sp, #4
 80009ae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80009b2:	bf18      	it	ne
 80009b4:	ea90 0f01 	teqne	r0, r1
 80009b8:	bf58      	it	pl
 80009ba:	ebb2 0003 	subspl.w	r0, r2, r3
 80009be:	bf88      	it	hi
 80009c0:	17c8      	asrhi	r0, r1, #31
 80009c2:	bf38      	it	cc
 80009c4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80009c8:	bf18      	it	ne
 80009ca:	f040 0001 	orrne.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009d4:	d102      	bne.n	80009dc <__cmpsf2+0x4c>
 80009d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80009da:	d105      	bne.n	80009e8 <__cmpsf2+0x58>
 80009dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80009e0:	d1e4      	bne.n	80009ac <__cmpsf2+0x1c>
 80009e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80009e6:	d0e1      	beq.n	80009ac <__cmpsf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cfrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4608      	mov	r0, r1
 80009f4:	4661      	mov	r1, ip
 80009f6:	e7ff      	b.n	80009f8 <__aeabi_cfcmpeq>

080009f8 <__aeabi_cfcmpeq>:
 80009f8:	b50f      	push	{r0, r1, r2, r3, lr}
 80009fa:	f7ff ffc9 	bl	8000990 <__cmpsf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a08 <__aeabi_fcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cfcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_fcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cfcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_fcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cfcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_fcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffd2 	bl	80009f0 <__aeabi_cfrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_fcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc8 	bl	80009f0 <__aeabi_cfrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_fcmpun>:
 8000a6c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a78:	d102      	bne.n	8000a80 <__aeabi_fcmpun+0x14>
 8000a7a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a7e:	d108      	bne.n	8000a92 <__aeabi_fcmpun+0x26>
 8000a80:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a84:	d102      	bne.n	8000a8c <__aeabi_fcmpun+0x20>
 8000a86:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_fcmpun+0x26>
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	f04f 0001 	mov.w	r0, #1
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_f2iz>:
 8000a98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000aa0:	d30f      	bcc.n	8000ac2 <__aeabi_f2iz+0x2a>
 8000aa2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000aa6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000aaa:	d90d      	bls.n	8000ac8 <__aeabi_f2iz+0x30>
 8000aac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ab0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ab4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ab8:	fa23 f002 	lsr.w	r0, r3, r2
 8000abc:	bf18      	it	ne
 8000abe:	4240      	negne	r0, r0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr
 8000ac8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000acc:	d101      	bne.n	8000ad2 <__aeabi_f2iz+0x3a>
 8000ace:	0242      	lsls	r2, r0, #9
 8000ad0:	d105      	bne.n	8000ade <__aeabi_f2iz+0x46>
 8000ad2:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000ad6:	bf08      	it	eq
 8000ad8:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000adc:	4770      	bx	lr
 8000ade:	f04f 0000 	mov.w	r0, #0
 8000ae2:	4770      	bx	lr

08000ae4 <malloc>:
 8000ae4:	4b02      	ldr	r3, [pc, #8]	@ (8000af0 <malloc+0xc>)
 8000ae6:	4601      	mov	r1, r0
 8000ae8:	6818      	ldr	r0, [r3, #0]
 8000aea:	f000 b82f 	b.w	8000b4c <_malloc_r>
 8000aee:	bf00      	nop
 8000af0:	2000001c 	.word	0x2000001c

08000af4 <free>:
 8000af4:	4b02      	ldr	r3, [pc, #8]	@ (8000b00 <free+0xc>)
 8000af6:	4601      	mov	r1, r0
 8000af8:	6818      	ldr	r0, [r3, #0]
 8000afa:	f000 bcbd 	b.w	8001478 <_free_r>
 8000afe:	bf00      	nop
 8000b00:	2000001c 	.word	0x2000001c

08000b04 <sbrk_aligned>:
 8000b04:	b570      	push	{r4, r5, r6, lr}
 8000b06:	4e10      	ldr	r6, [pc, #64]	@ (8000b48 <sbrk_aligned+0x44>)
 8000b08:	6833      	ldr	r3, [r6, #0]
 8000b0a:	4605      	mov	r5, r0
 8000b0c:	460c      	mov	r4, r1
 8000b0e:	b1b3      	cbz	r3, 8000b3e <sbrk_aligned+0x3a>
 8000b10:	4621      	mov	r1, r4
 8000b12:	4628      	mov	r0, r5
 8000b14:	f000 fb86 	bl	8001224 <_sbrk_r>
 8000b18:	1c43      	adds	r3, r0, #1
 8000b1a:	d00c      	beq.n	8000b36 <sbrk_aligned+0x32>
 8000b1c:	1cc4      	adds	r4, r0, #3
 8000b1e:	f024 0403 	bic.w	r4, r4, #3
 8000b22:	42a0      	cmp	r0, r4
 8000b24:	d005      	beq.n	8000b32 <sbrk_aligned+0x2e>
 8000b26:	1a21      	subs	r1, r4, r0
 8000b28:	4628      	mov	r0, r5
 8000b2a:	f000 fb7b 	bl	8001224 <_sbrk_r>
 8000b2e:	3001      	adds	r0, #1
 8000b30:	d001      	beq.n	8000b36 <sbrk_aligned+0x32>
 8000b32:	4620      	mov	r0, r4
 8000b34:	bd70      	pop	{r4, r5, r6, pc}
 8000b36:	f04f 34ff 	mov.w	r4, #4294967295
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	bd70      	pop	{r4, r5, r6, pc}
 8000b3e:	4619      	mov	r1, r3
 8000b40:	f000 fb70 	bl	8001224 <_sbrk_r>
 8000b44:	6030      	str	r0, [r6, #0]
 8000b46:	e7e3      	b.n	8000b10 <sbrk_aligned+0xc>
 8000b48:	200001b0 	.word	0x200001b0

08000b4c <_malloc_r>:
 8000b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b50:	1ccd      	adds	r5, r1, #3
 8000b52:	f025 0503 	bic.w	r5, r5, #3
 8000b56:	3508      	adds	r5, #8
 8000b58:	2d0c      	cmp	r5, #12
 8000b5a:	bf38      	it	cc
 8000b5c:	250c      	movcc	r5, #12
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	b082      	sub	sp, #8
 8000b62:	4606      	mov	r6, r0
 8000b64:	db16      	blt.n	8000b94 <_malloc_r+0x48>
 8000b66:	42a9      	cmp	r1, r5
 8000b68:	d814      	bhi.n	8000b94 <_malloc_r+0x48>
 8000b6a:	4f35      	ldr	r7, [pc, #212]	@ (8000c40 <_malloc_r+0xf4>)
 8000b6c:	f000 f86a 	bl	8000c44 <__malloc_lock>
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	b1aa      	cbz	r2, 8000ba0 <_malloc_r+0x54>
 8000b74:	4614      	mov	r4, r2
 8000b76:	e003      	b.n	8000b80 <_malloc_r+0x34>
 8000b78:	6863      	ldr	r3, [r4, #4]
 8000b7a:	4622      	mov	r2, r4
 8000b7c:	b183      	cbz	r3, 8000ba0 <_malloc_r+0x54>
 8000b7e:	461c      	mov	r4, r3
 8000b80:	6823      	ldr	r3, [r4, #0]
 8000b82:	1b5b      	subs	r3, r3, r5
 8000b84:	d4f8      	bmi.n	8000b78 <_malloc_r+0x2c>
 8000b86:	2b0b      	cmp	r3, #11
 8000b88:	d821      	bhi.n	8000bce <_malloc_r+0x82>
 8000b8a:	42a2      	cmp	r2, r4
 8000b8c:	6863      	ldr	r3, [r4, #4]
 8000b8e:	d055      	beq.n	8000c3c <_malloc_r+0xf0>
 8000b90:	6053      	str	r3, [r2, #4]
 8000b92:	e00d      	b.n	8000bb0 <_malloc_r+0x64>
 8000b94:	230c      	movs	r3, #12
 8000b96:	6033      	str	r3, [r6, #0]
 8000b98:	2000      	movs	r0, #0
 8000b9a:	b002      	add	sp, #8
 8000b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ba0:	4629      	mov	r1, r5
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	f7ff ffae 	bl	8000b04 <sbrk_aligned>
 8000ba8:	1c43      	adds	r3, r0, #1
 8000baa:	4604      	mov	r4, r0
 8000bac:	d019      	beq.n	8000be2 <_malloc_r+0x96>
 8000bae:	6005      	str	r5, [r0, #0]
 8000bb0:	4630      	mov	r0, r6
 8000bb2:	f000 f84d 	bl	8000c50 <__malloc_unlock>
 8000bb6:	f104 000b 	add.w	r0, r4, #11
 8000bba:	1d23      	adds	r3, r4, #4
 8000bbc:	f020 0007 	bic.w	r0, r0, #7
 8000bc0:	1ac2      	subs	r2, r0, r3
 8000bc2:	bf1c      	itt	ne
 8000bc4:	1a1b      	subne	r3, r3, r0
 8000bc6:	50a3      	strne	r3, [r4, r2]
 8000bc8:	b002      	add	sp, #8
 8000bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bce:	1961      	adds	r1, r4, r5
 8000bd0:	42a2      	cmp	r2, r4
 8000bd2:	6025      	str	r5, [r4, #0]
 8000bd4:	bf14      	ite	ne
 8000bd6:	6051      	strne	r1, [r2, #4]
 8000bd8:	6079      	streq	r1, [r7, #4]
 8000bda:	5163      	str	r3, [r4, r5]
 8000bdc:	6863      	ldr	r3, [r4, #4]
 8000bde:	604b      	str	r3, [r1, #4]
 8000be0:	e7e6      	b.n	8000bb0 <_malloc_r+0x64>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	b323      	cbz	r3, 8000c30 <_malloc_r+0xe4>
 8000be6:	461c      	mov	r4, r3
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1fb      	bne.n	8000be6 <_malloc_r+0x9a>
 8000bee:	6822      	ldr	r2, [r4, #0]
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4630      	mov	r0, r6
 8000bf6:	eb04 0802 	add.w	r8, r4, r2
 8000bfa:	f000 fb13 	bl	8001224 <_sbrk_r>
 8000bfe:	4580      	cmp	r8, r0
 8000c00:	d116      	bne.n	8000c30 <_malloc_r+0xe4>
 8000c02:	6822      	ldr	r2, [r4, #0]
 8000c04:	1aad      	subs	r5, r5, r2
 8000c06:	4629      	mov	r1, r5
 8000c08:	4630      	mov	r0, r6
 8000c0a:	f7ff ff7b 	bl	8000b04 <sbrk_aligned>
 8000c0e:	3001      	adds	r0, #1
 8000c10:	d00e      	beq.n	8000c30 <_malloc_r+0xe4>
 8000c12:	6822      	ldr	r2, [r4, #0]
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	9b01      	ldr	r3, [sp, #4]
 8000c18:	442a      	add	r2, r5
 8000c1a:	6022      	str	r2, [r4, #0]
 8000c1c:	6842      	ldr	r2, [r0, #4]
 8000c1e:	b912      	cbnz	r2, 8000c26 <_malloc_r+0xda>
 8000c20:	e00c      	b.n	8000c3c <_malloc_r+0xf0>
 8000c22:	4610      	mov	r0, r2
 8000c24:	6852      	ldr	r2, [r2, #4]
 8000c26:	42a2      	cmp	r2, r4
 8000c28:	d1fb      	bne.n	8000c22 <_malloc_r+0xd6>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	6043      	str	r3, [r0, #4]
 8000c2e:	e7bf      	b.n	8000bb0 <_malloc_r+0x64>
 8000c30:	230c      	movs	r3, #12
 8000c32:	6033      	str	r3, [r6, #0]
 8000c34:	4630      	mov	r0, r6
 8000c36:	f000 f80b 	bl	8000c50 <__malloc_unlock>
 8000c3a:	e7ad      	b.n	8000b98 <_malloc_r+0x4c>
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	e7b7      	b.n	8000bb0 <_malloc_r+0x64>
 8000c40:	200001b0 	.word	0x200001b0

08000c44 <__malloc_lock>:
 8000c44:	4801      	ldr	r0, [pc, #4]	@ (8000c4c <__malloc_lock+0x8>)
 8000c46:	f000 bb4d 	b.w	80012e4 <__retarget_lock_acquire_recursive>
 8000c4a:	bf00      	nop
 8000c4c:	20000308 	.word	0x20000308

08000c50 <__malloc_unlock>:
 8000c50:	4801      	ldr	r0, [pc, #4]	@ (8000c58 <__malloc_unlock+0x8>)
 8000c52:	f000 bb4f 	b.w	80012f4 <__retarget_lock_release_recursive>
 8000c56:	bf00      	nop
 8000c58:	20000308 	.word	0x20000308

08000c5c <srand>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <srand+0x4c>)
 8000c60:	681d      	ldr	r5, [r3, #0]
 8000c62:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8000c64:	4604      	mov	r4, r0
 8000c66:	b11a      	cbz	r2, 8000c70 <srand+0x14>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	e9c2 4304 	strd	r4, r3, [r2, #16]
 8000c6e:	bd38      	pop	{r3, r4, r5, pc}
 8000c70:	2018      	movs	r0, #24
 8000c72:	f7ff ff37 	bl	8000ae4 <malloc>
 8000c76:	4602      	mov	r2, r0
 8000c78:	6328      	str	r0, [r5, #48]	@ 0x30
 8000c7a:	b178      	cbz	r0, 8000c9c <srand+0x40>
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	2100      	movs	r1, #0
 8000c80:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000c84:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <srand+0x50>)
 8000c86:	480a      	ldr	r0, [pc, #40]	@ (8000cb0 <srand+0x54>)
 8000c88:	490a      	ldr	r1, [pc, #40]	@ (8000cb4 <srand+0x58>)
 8000c8a:	6091      	str	r1, [r2, #8]
 8000c8c:	e9c2 0300 	strd	r0, r3, [r2]
 8000c90:	230b      	movs	r3, #11
 8000c92:	8193      	strh	r3, [r2, #12]
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c2 4304 	strd	r4, r3, [r2, #16]
 8000c9a:	bd38      	pop	{r3, r4, r5, pc}
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <srand+0x5c>)
 8000c9e:	4807      	ldr	r0, [pc, #28]	@ (8000cbc <srand+0x60>)
 8000ca0:	2146      	movs	r1, #70	@ 0x46
 8000ca2:	f000 fbc3 	bl	800142c <__assert_func>
 8000ca6:	bf00      	nop
 8000ca8:	2000001c 	.word	0x2000001c
 8000cac:	e66d1234 	.word	0xe66d1234
 8000cb0:	abcd330e 	.word	0xabcd330e
 8000cb4:	0005deec 	.word	0x0005deec
 8000cb8:	08003c60 	.word	0x08003c60
 8000cbc:	08003c78 	.word	0x08003c78

08000cc0 <rand>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	4b19      	ldr	r3, [pc, #100]	@ (8000d28 <rand+0x68>)
 8000cc4:	681c      	ldr	r4, [r3, #0]
 8000cc6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8000cc8:	b18a      	cbz	r2, 8000cee <rand+0x2e>
 8000cca:	6913      	ldr	r3, [r2, #16]
 8000ccc:	4917      	ldr	r1, [pc, #92]	@ (8000d2c <rand+0x6c>)
 8000cce:	6954      	ldr	r4, [r2, #20]
 8000cd0:	4817      	ldr	r0, [pc, #92]	@ (8000d30 <rand+0x70>)
 8000cd2:	fb03 f101 	mul.w	r1, r3, r1
 8000cd6:	fb00 1104 	mla	r1, r0, r4, r1
 8000cda:	fba3 3000 	umull	r3, r0, r3, r0
 8000cde:	3301      	adds	r3, #1
 8000ce0:	eb41 0100 	adc.w	r1, r1, r0
 8000ce4:	e9c2 3104 	strd	r3, r1, [r2, #16]
 8000ce8:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
 8000cee:	2018      	movs	r0, #24
 8000cf0:	f7ff fef8 	bl	8000ae4 <malloc>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	6320      	str	r0, [r4, #48]	@ 0x30
 8000cf8:	b188      	cbz	r0, 8000d1e <rand+0x5e>
 8000cfa:	2401      	movs	r4, #1
 8000cfc:	2500      	movs	r5, #0
 8000cfe:	e9c2 4504 	strd	r4, r5, [r2, #16]
 8000d02:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <rand+0x74>)
 8000d04:	4c0c      	ldr	r4, [pc, #48]	@ (8000d38 <rand+0x78>)
 8000d06:	4809      	ldr	r0, [pc, #36]	@ (8000d2c <rand+0x6c>)
 8000d08:	490c      	ldr	r1, [pc, #48]	@ (8000d3c <rand+0x7c>)
 8000d0a:	6091      	str	r1, [r2, #8]
 8000d0c:	e9c2 4300 	strd	r4, r3, [r2]
 8000d10:	230b      	movs	r3, #11
 8000d12:	8193      	strh	r3, [r2, #12]
 8000d14:	4b0a      	ldr	r3, [pc, #40]	@ (8000d40 <rand+0x80>)
 8000d16:	4601      	mov	r1, r0
 8000d18:	e9c2 3104 	strd	r3, r1, [r2, #16]
 8000d1c:	bd38      	pop	{r3, r4, r5, pc}
 8000d1e:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <rand+0x84>)
 8000d20:	4809      	ldr	r0, [pc, #36]	@ (8000d48 <rand+0x88>)
 8000d22:	2152      	movs	r1, #82	@ 0x52
 8000d24:	f000 fb82 	bl	800142c <__assert_func>
 8000d28:	2000001c 	.word	0x2000001c
 8000d2c:	5851f42d 	.word	0x5851f42d
 8000d30:	4c957f2d 	.word	0x4c957f2d
 8000d34:	e66d1234 	.word	0xe66d1234
 8000d38:	abcd330e 	.word	0xabcd330e
 8000d3c:	0005deec 	.word	0x0005deec
 8000d40:	4c957f2e 	.word	0x4c957f2e
 8000d44:	08003c60 	.word	0x08003c60
 8000d48:	08003c78 	.word	0x08003c78

08000d4c <stdio_exit_handler>:
 8000d4c:	4a02      	ldr	r2, [pc, #8]	@ (8000d58 <stdio_exit_handler+0xc>)
 8000d4e:	4903      	ldr	r1, [pc, #12]	@ (8000d5c <stdio_exit_handler+0x10>)
 8000d50:	4803      	ldr	r0, [pc, #12]	@ (8000d60 <stdio_exit_handler+0x14>)
 8000d52:	f000 b969 	b.w	8001028 <_fwalk_sglue>
 8000d56:	bf00      	nop
 8000d58:	20000010 	.word	0x20000010
 8000d5c:	08001645 	.word	0x08001645
 8000d60:	20000020 	.word	0x20000020

08000d64 <cleanup_stdio>:
 8000d64:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <cleanup_stdio+0x34>)
 8000d66:	6841      	ldr	r1, [r0, #4]
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	b510      	push	{r4, lr}
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	d001      	beq.n	8000d74 <cleanup_stdio+0x10>
 8000d70:	f000 fc68 	bl	8001644 <_fflush_r>
 8000d74:	68a1      	ldr	r1, [r4, #8]
 8000d76:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <cleanup_stdio+0x38>)
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d002      	beq.n	8000d82 <cleanup_stdio+0x1e>
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	f000 fc61 	bl	8001644 <_fflush_r>
 8000d82:	68e1      	ldr	r1, [r4, #12]
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <cleanup_stdio+0x3c>)
 8000d86:	4299      	cmp	r1, r3
 8000d88:	d004      	beq.n	8000d94 <cleanup_stdio+0x30>
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d90:	f000 bc58 	b.w	8001644 <_fflush_r>
 8000d94:	bd10      	pop	{r4, pc}
 8000d96:	bf00      	nop
 8000d98:	200001b8 	.word	0x200001b8
 8000d9c:	20000220 	.word	0x20000220
 8000da0:	20000288 	.word	0x20000288

08000da4 <__fp_lock>:
 8000da4:	b508      	push	{r3, lr}
 8000da6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8000da8:	07da      	lsls	r2, r3, #31
 8000daa:	d402      	bmi.n	8000db2 <__fp_lock+0xe>
 8000dac:	898b      	ldrh	r3, [r1, #12]
 8000dae:	059b      	lsls	r3, r3, #22
 8000db0:	d501      	bpl.n	8000db6 <__fp_lock+0x12>
 8000db2:	2000      	movs	r0, #0
 8000db4:	bd08      	pop	{r3, pc}
 8000db6:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 8000db8:	f000 fa94 	bl	80012e4 <__retarget_lock_acquire_recursive>
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	bd08      	pop	{r3, pc}

08000dc0 <__fp_unlock>:
 8000dc0:	b508      	push	{r3, lr}
 8000dc2:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8000dc4:	07da      	lsls	r2, r3, #31
 8000dc6:	d402      	bmi.n	8000dce <__fp_unlock+0xe>
 8000dc8:	898b      	ldrh	r3, [r1, #12]
 8000dca:	059b      	lsls	r3, r3, #22
 8000dcc:	d501      	bpl.n	8000dd2 <__fp_unlock+0x12>
 8000dce:	2000      	movs	r0, #0
 8000dd0:	bd08      	pop	{r3, pc}
 8000dd2:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 8000dd4:	f000 fa8e 	bl	80012f4 <__retarget_lock_release_recursive>
 8000dd8:	2000      	movs	r0, #0
 8000dda:	bd08      	pop	{r3, pc}

08000ddc <global_stdio_init.part.0>:
 8000ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000de0:	4c31      	ldr	r4, [pc, #196]	@ (8000ea8 <global_stdio_init.part.0+0xcc>)
 8000de2:	4b32      	ldr	r3, [pc, #200]	@ (8000eac <global_stdio_init.part.0+0xd0>)
 8000de4:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 8000eb0 <global_stdio_init.part.0+0xd4>
 8000de8:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 8000eb4 <global_stdio_init.part.0+0xd8>
 8000dec:	4f32      	ldr	r7, [pc, #200]	@ (8000eb8 <global_stdio_init.part.0+0xdc>)
 8000dee:	f8c4 3138 	str.w	r3, [r4, #312]	@ 0x138
 8000df2:	2500      	movs	r5, #0
 8000df4:	4629      	mov	r1, r5
 8000df6:	2304      	movs	r3, #4
 8000df8:	2208      	movs	r2, #8
 8000dfa:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8000dfe:	4e2f      	ldr	r6, [pc, #188]	@ (8000ebc <global_stdio_init.part.0+0xe0>)
 8000e00:	60e3      	str	r3, [r4, #12]
 8000e02:	e9c4 5500 	strd	r5, r5, [r4]
 8000e06:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000e0a:	60a5      	str	r5, [r4, #8]
 8000e0c:	6665      	str	r5, [r4, #100]	@ 0x64
 8000e0e:	61a5      	str	r5, [r4, #24]
 8000e10:	f000 f978 	bl	8001104 <memset>
 8000e14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000e18:	e9c4 4908 	strd	r4, r9, [r4, #32]
 8000e1c:	e9c4 870a 	strd	r8, r7, [r4, #40]	@ 0x28
 8000e20:	6326      	str	r6, [r4, #48]	@ 0x30
 8000e22:	f000 fa57 	bl	80012d4 <__retarget_lock_init_recursive>
 8000e26:	4629      	mov	r1, r5
 8000e28:	4b25      	ldr	r3, [pc, #148]	@ (8000ec0 <global_stdio_init.part.0+0xe4>)
 8000e2a:	6763      	str	r3, [r4, #116]	@ 0x74
 8000e2c:	2208      	movs	r2, #8
 8000e2e:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4
 8000e32:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 8000e36:	e9c4 551e 	strd	r5, r5, [r4, #120]	@ 0x78
 8000e3a:	6725      	str	r5, [r4, #112]	@ 0x70
 8000e3c:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
 8000e40:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
 8000e44:	f000 f95e 	bl	8001104 <memset>
 8000e48:	f104 0368 	add.w	r3, r4, #104	@ 0x68
 8000e4c:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 8000e50:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 8000e54:	e9c4 9823 	strd	r9, r8, [r4, #140]	@ 0x8c
 8000e58:	e9c4 7625 	strd	r7, r6, [r4, #148]	@ 0x94
 8000e5c:	f000 fa3a 	bl	80012d4 <__retarget_lock_init_recursive>
 8000e60:	4b18      	ldr	r3, [pc, #96]	@ (8000ec4 <global_stdio_init.part.0+0xe8>)
 8000e62:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
 8000e66:	4629      	mov	r1, r5
 8000e68:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
 8000e6c:	2208      	movs	r2, #8
 8000e6e:	e9c4 5534 	strd	r5, r5, [r4, #208]	@ 0xd0
 8000e72:	e9c4 5538 	strd	r5, r5, [r4, #224]	@ 0xe0
 8000e76:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
 8000e7a:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8000e7e:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
 8000e82:	f000 f93f 	bl	8001104 <memset>
 8000e86:	f104 03d0 	add.w	r3, r4, #208	@ 0xd0
 8000e8a:	e9c4 873e 	strd	r8, r7, [r4, #248]	@ 0xf8
 8000e8e:	f8c4 90f4 	str.w	r9, [r4, #244]	@ 0xf4
 8000e92:	f504 7094 	add.w	r0, r4, #296	@ 0x128
 8000e96:	f8c4 6100 	str.w	r6, [r4, #256]	@ 0x100
 8000e9a:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
 8000e9e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ea2:	f000 ba17 	b.w	80012d4 <__retarget_lock_init_recursive>
 8000ea6:	bf00      	nop
 8000ea8:	200001b8 	.word	0x200001b8
 8000eac:	08000d4d 	.word	0x08000d4d
 8000eb0:	08001071 	.word	0x08001071
 8000eb4:	08001099 	.word	0x08001099
 8000eb8:	080010d9 	.word	0x080010d9
 8000ebc:	080010fd 	.word	0x080010fd
 8000ec0:	00010009 	.word	0x00010009
 8000ec4:	00020012 	.word	0x00020012

08000ec8 <__sfp>:
 8000ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eca:	4606      	mov	r6, r0
 8000ecc:	482a      	ldr	r0, [pc, #168]	@ (8000f78 <__sfp+0xb0>)
 8000ece:	f000 fa09 	bl	80012e4 <__retarget_lock_acquire_recursive>
 8000ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f7c <__sfp+0xb4>)
 8000ed4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d043      	beq.n	8000f64 <__sfp+0x9c>
 8000edc:	4f28      	ldr	r7, [pc, #160]	@ (8000f80 <__sfp+0xb8>)
 8000ede:	e9d7 3401 	ldrd	r3, r4, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	d504      	bpl.n	8000ef0 <__sfp+0x28>
 8000ee6:	e024      	b.n	8000f32 <__sfp+0x6a>
 8000ee8:	1c5a      	adds	r2, r3, #1
 8000eea:	f104 0468 	add.w	r4, r4, #104	@ 0x68
 8000eee:	d020      	beq.n	8000f32 <__sfp+0x6a>
 8000ef0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	d1f6      	bne.n	8000ee8 <__sfp+0x20>
 8000efa:	4b22      	ldr	r3, [pc, #136]	@ (8000f84 <__sfp+0xbc>)
 8000efc:	60e3      	str	r3, [r4, #12]
 8000efe:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000f02:	6665      	str	r5, [r4, #100]	@ 0x64
 8000f04:	f000 f9e6 	bl	80012d4 <__retarget_lock_init_recursive>
 8000f08:	481b      	ldr	r0, [pc, #108]	@ (8000f78 <__sfp+0xb0>)
 8000f0a:	f000 f9f3 	bl	80012f4 <__retarget_lock_release_recursive>
 8000f0e:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000f12:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000f16:	6025      	str	r5, [r4, #0]
 8000f18:	61a5      	str	r5, [r4, #24]
 8000f1a:	2208      	movs	r2, #8
 8000f1c:	4629      	mov	r1, r5
 8000f1e:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8000f22:	f000 f8ef 	bl	8001104 <memset>
 8000f26:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8000f2a:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 8000f2e:	4620      	mov	r0, r4
 8000f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f32:	683d      	ldr	r5, [r7, #0]
 8000f34:	b10d      	cbz	r5, 8000f3a <__sfp+0x72>
 8000f36:	462f      	mov	r7, r5
 8000f38:	e7d1      	b.n	8000ede <__sfp+0x16>
 8000f3a:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8000f3e:	4630      	mov	r0, r6
 8000f40:	f7ff fe04 	bl	8000b4c <_malloc_r>
 8000f44:	4604      	mov	r4, r0
 8000f46:	b180      	cbz	r0, 8000f6a <__sfp+0xa2>
 8000f48:	2304      	movs	r3, #4
 8000f4a:	6005      	str	r5, [r0, #0]
 8000f4c:	6043      	str	r3, [r0, #4]
 8000f4e:	300c      	adds	r0, #12
 8000f50:	4629      	mov	r1, r5
 8000f52:	60a0      	str	r0, [r4, #8]
 8000f54:	4625      	mov	r5, r4
 8000f56:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8000f5a:	f000 f8d3 	bl	8001104 <memset>
 8000f5e:	603c      	str	r4, [r7, #0]
 8000f60:	462f      	mov	r7, r5
 8000f62:	e7bc      	b.n	8000ede <__sfp+0x16>
 8000f64:	f7ff ff3a 	bl	8000ddc <global_stdio_init.part.0>
 8000f68:	e7b8      	b.n	8000edc <__sfp+0x14>
 8000f6a:	4803      	ldr	r0, [pc, #12]	@ (8000f78 <__sfp+0xb0>)
 8000f6c:	603c      	str	r4, [r7, #0]
 8000f6e:	f000 f9c1 	bl	80012f4 <__retarget_lock_release_recursive>
 8000f72:	230c      	movs	r3, #12
 8000f74:	6033      	str	r3, [r6, #0]
 8000f76:	e7da      	b.n	8000f2e <__sfp+0x66>
 8000f78:	20000314 	.word	0x20000314
 8000f7c:	200001b8 	.word	0x200001b8
 8000f80:	20000010 	.word	0x20000010
 8000f84:	ffff0001 	.word	0xffff0001

08000f88 <__sinit>:
 8000f88:	b510      	push	{r4, lr}
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	480b      	ldr	r0, [pc, #44]	@ (8000fbc <__sinit+0x34>)
 8000f8e:	f000 f9a9 	bl	80012e4 <__retarget_lock_acquire_recursive>
 8000f92:	6a23      	ldr	r3, [r4, #32]
 8000f94:	b92b      	cbnz	r3, 8000fa2 <__sinit+0x1a>
 8000f96:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <__sinit+0x38>)
 8000f98:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <__sinit+0x3c>)
 8000f9a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000f9e:	6222      	str	r2, [r4, #32]
 8000fa0:	b123      	cbz	r3, 8000fac <__sinit+0x24>
 8000fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fa6:	4805      	ldr	r0, [pc, #20]	@ (8000fbc <__sinit+0x34>)
 8000fa8:	f000 b9a4 	b.w	80012f4 <__retarget_lock_release_recursive>
 8000fac:	f7ff ff16 	bl	8000ddc <global_stdio_init.part.0>
 8000fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fb4:	4801      	ldr	r0, [pc, #4]	@ (8000fbc <__sinit+0x34>)
 8000fb6:	f000 b99d 	b.w	80012f4 <__retarget_lock_release_recursive>
 8000fba:	bf00      	nop
 8000fbc:	20000314 	.word	0x20000314
 8000fc0:	200001b8 	.word	0x200001b8
 8000fc4:	08000d65 	.word	0x08000d65

08000fc8 <__sfp_lock_acquire>:
 8000fc8:	4801      	ldr	r0, [pc, #4]	@ (8000fd0 <__sfp_lock_acquire+0x8>)
 8000fca:	f000 b98b 	b.w	80012e4 <__retarget_lock_acquire_recursive>
 8000fce:	bf00      	nop
 8000fd0:	20000314 	.word	0x20000314

08000fd4 <__sfp_lock_release>:
 8000fd4:	4801      	ldr	r0, [pc, #4]	@ (8000fdc <__sfp_lock_release+0x8>)
 8000fd6:	f000 b98d 	b.w	80012f4 <__retarget_lock_release_recursive>
 8000fda:	bf00      	nop
 8000fdc:	20000314 	.word	0x20000314

08000fe0 <__fp_lock_all>:
 8000fe0:	b508      	push	{r3, lr}
 8000fe2:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <__fp_lock_all+0x18>)
 8000fe4:	f000 f97e 	bl	80012e4 <__retarget_lock_acquire_recursive>
 8000fe8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000fec:	4a03      	ldr	r2, [pc, #12]	@ (8000ffc <__fp_lock_all+0x1c>)
 8000fee:	4904      	ldr	r1, [pc, #16]	@ (8001000 <__fp_lock_all+0x20>)
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f000 b819 	b.w	8001028 <_fwalk_sglue>
 8000ff6:	bf00      	nop
 8000ff8:	20000314 	.word	0x20000314
 8000ffc:	20000010 	.word	0x20000010
 8001000:	08000da5 	.word	0x08000da5

08001004 <__fp_unlock_all>:
 8001004:	b508      	push	{r3, lr}
 8001006:	4a05      	ldr	r2, [pc, #20]	@ (800101c <__fp_unlock_all+0x18>)
 8001008:	4905      	ldr	r1, [pc, #20]	@ (8001020 <__fp_unlock_all+0x1c>)
 800100a:	2000      	movs	r0, #0
 800100c:	f000 f80c 	bl	8001028 <_fwalk_sglue>
 8001010:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001014:	4803      	ldr	r0, [pc, #12]	@ (8001024 <__fp_unlock_all+0x20>)
 8001016:	f000 b96d 	b.w	80012f4 <__retarget_lock_release_recursive>
 800101a:	bf00      	nop
 800101c:	20000010 	.word	0x20000010
 8001020:	08000dc1 	.word	0x08000dc1
 8001024:	20000314 	.word	0x20000314

08001028 <_fwalk_sglue>:
 8001028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800102c:	4680      	mov	r8, r0
 800102e:	460f      	mov	r7, r1
 8001030:	4616      	mov	r6, r2
 8001032:	f04f 0900 	mov.w	r9, #0
 8001036:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 800103a:	3d01      	subs	r5, #1
 800103c:	d411      	bmi.n	8001062 <_fwalk_sglue+0x3a>
 800103e:	89a3      	ldrh	r3, [r4, #12]
 8001040:	2b01      	cmp	r3, #1
 8001042:	f105 35ff 	add.w	r5, r5, #4294967295
 8001046:	d908      	bls.n	800105a <_fwalk_sglue+0x32>
 8001048:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800104c:	3301      	adds	r3, #1
 800104e:	4621      	mov	r1, r4
 8001050:	d003      	beq.n	800105a <_fwalk_sglue+0x32>
 8001052:	4640      	mov	r0, r8
 8001054:	47b8      	blx	r7
 8001056:	ea49 0900 	orr.w	r9, r9, r0
 800105a:	1c6b      	adds	r3, r5, #1
 800105c:	f104 0468 	add.w	r4, r4, #104	@ 0x68
 8001060:	d1ed      	bne.n	800103e <_fwalk_sglue+0x16>
 8001062:	6836      	ldr	r6, [r6, #0]
 8001064:	2e00      	cmp	r6, #0
 8001066:	d1e6      	bne.n	8001036 <_fwalk_sglue+0xe>
 8001068:	4648      	mov	r0, r9
 800106a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800106e:	bf00      	nop

08001070 <__sread>:
 8001070:	b510      	push	{r4, lr}
 8001072:	460c      	mov	r4, r1
 8001074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001078:	f000 f8be 	bl	80011f8 <_read_r>
 800107c:	2800      	cmp	r0, #0
 800107e:	db03      	blt.n	8001088 <__sread+0x18>
 8001080:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001082:	4403      	add	r3, r0
 8001084:	6563      	str	r3, [r4, #84]	@ 0x54
 8001086:	bd10      	pop	{r4, pc}
 8001088:	89a3      	ldrh	r3, [r4, #12]
 800108a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800108e:	81a3      	strh	r3, [r4, #12]
 8001090:	bd10      	pop	{r4, pc}
 8001092:	bf00      	nop

08001094 <__seofread>:
 8001094:	2000      	movs	r0, #0
 8001096:	4770      	bx	lr

08001098 <__swrite>:
 8001098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800109c:	460c      	mov	r4, r1
 800109e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 80010a2:	461f      	mov	r7, r3
 80010a4:	05cb      	lsls	r3, r1, #23
 80010a6:	4605      	mov	r5, r0
 80010a8:	4616      	mov	r6, r2
 80010aa:	d40b      	bmi.n	80010c4 <__swrite+0x2c>
 80010ac:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 80010b0:	81a1      	strh	r1, [r4, #12]
 80010b2:	463b      	mov	r3, r7
 80010b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010b8:	4632      	mov	r2, r6
 80010ba:	4628      	mov	r0, r5
 80010bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010c0:	f000 b8c2 	b.w	8001248 <_write_r>
 80010c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010c8:	2302      	movs	r3, #2
 80010ca:	2200      	movs	r2, #0
 80010cc:	f000 f87e 	bl	80011cc <_lseek_r>
 80010d0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80010d4:	e7ea      	b.n	80010ac <__swrite+0x14>
 80010d6:	bf00      	nop

080010d8 <__sseek>:
 80010d8:	b510      	push	{r4, lr}
 80010da:	460c      	mov	r4, r1
 80010dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010e0:	f000 f874 	bl	80011cc <_lseek_r>
 80010e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010e8:	1c42      	adds	r2, r0, #1
 80010ea:	bf0e      	itee	eq
 80010ec:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80010f0:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80010f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80010f6:	81a3      	strh	r3, [r4, #12]
 80010f8:	bd10      	pop	{r4, pc}
 80010fa:	bf00      	nop

080010fc <__sclose>:
 80010fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001100:	f000 b852 	b.w	80011a8 <_close_r>

08001104 <memset>:
 8001104:	0783      	lsls	r3, r0, #30
 8001106:	b530      	push	{r4, r5, lr}
 8001108:	d047      	beq.n	800119a <memset+0x96>
 800110a:	1e54      	subs	r4, r2, #1
 800110c:	2a00      	cmp	r2, #0
 800110e:	d03e      	beq.n	800118e <memset+0x8a>
 8001110:	b2ca      	uxtb	r2, r1
 8001112:	4603      	mov	r3, r0
 8001114:	e001      	b.n	800111a <memset+0x16>
 8001116:	3c01      	subs	r4, #1
 8001118:	d339      	bcc.n	800118e <memset+0x8a>
 800111a:	f803 2b01 	strb.w	r2, [r3], #1
 800111e:	079d      	lsls	r5, r3, #30
 8001120:	d1f9      	bne.n	8001116 <memset+0x12>
 8001122:	2c03      	cmp	r4, #3
 8001124:	d92c      	bls.n	8001180 <memset+0x7c>
 8001126:	b2cd      	uxtb	r5, r1
 8001128:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 800112c:	2c0f      	cmp	r4, #15
 800112e:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 8001132:	d935      	bls.n	80011a0 <memset+0x9c>
 8001134:	f1a4 0210 	sub.w	r2, r4, #16
 8001138:	f022 0c0f 	bic.w	ip, r2, #15
 800113c:	f103 0e10 	add.w	lr, r3, #16
 8001140:	44e6      	add	lr, ip
 8001142:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 8001146:	461a      	mov	r2, r3
 8001148:	6015      	str	r5, [r2, #0]
 800114a:	6055      	str	r5, [r2, #4]
 800114c:	6095      	str	r5, [r2, #8]
 800114e:	60d5      	str	r5, [r2, #12]
 8001150:	3210      	adds	r2, #16
 8001152:	4572      	cmp	r2, lr
 8001154:	d1f8      	bne.n	8001148 <memset+0x44>
 8001156:	f10c 0201 	add.w	r2, ip, #1
 800115a:	f014 0f0c 	tst.w	r4, #12
 800115e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001162:	f004 0c0f 	and.w	ip, r4, #15
 8001166:	d013      	beq.n	8001190 <memset+0x8c>
 8001168:	f1ac 0304 	sub.w	r3, ip, #4
 800116c:	f023 0303 	bic.w	r3, r3, #3
 8001170:	3304      	adds	r3, #4
 8001172:	4413      	add	r3, r2
 8001174:	f842 5b04 	str.w	r5, [r2], #4
 8001178:	429a      	cmp	r2, r3
 800117a:	d1fb      	bne.n	8001174 <memset+0x70>
 800117c:	f00c 0403 	and.w	r4, ip, #3
 8001180:	b12c      	cbz	r4, 800118e <memset+0x8a>
 8001182:	b2c9      	uxtb	r1, r1
 8001184:	441c      	add	r4, r3
 8001186:	f803 1b01 	strb.w	r1, [r3], #1
 800118a:	429c      	cmp	r4, r3
 800118c:	d1fb      	bne.n	8001186 <memset+0x82>
 800118e:	bd30      	pop	{r4, r5, pc}
 8001190:	4664      	mov	r4, ip
 8001192:	4613      	mov	r3, r2
 8001194:	2c00      	cmp	r4, #0
 8001196:	d1f4      	bne.n	8001182 <memset+0x7e>
 8001198:	e7f9      	b.n	800118e <memset+0x8a>
 800119a:	4603      	mov	r3, r0
 800119c:	4614      	mov	r4, r2
 800119e:	e7c0      	b.n	8001122 <memset+0x1e>
 80011a0:	461a      	mov	r2, r3
 80011a2:	46a4      	mov	ip, r4
 80011a4:	e7e0      	b.n	8001168 <memset+0x64>
 80011a6:	bf00      	nop

080011a8 <_close_r>:
 80011a8:	b538      	push	{r3, r4, r5, lr}
 80011aa:	4d07      	ldr	r5, [pc, #28]	@ (80011c8 <_close_r+0x20>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	4604      	mov	r4, r0
 80011b0:	4608      	mov	r0, r1
 80011b2:	602a      	str	r2, [r5, #0]
 80011b4:	f001 fb62 	bl	800287c <_close>
 80011b8:	1c43      	adds	r3, r0, #1
 80011ba:	d000      	beq.n	80011be <_close_r+0x16>
 80011bc:	bd38      	pop	{r3, r4, r5, pc}
 80011be:	682b      	ldr	r3, [r5, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0fb      	beq.n	80011bc <_close_r+0x14>
 80011c4:	6023      	str	r3, [r4, #0]
 80011c6:	bd38      	pop	{r3, r4, r5, pc}
 80011c8:	200002f4 	.word	0x200002f4

080011cc <_lseek_r>:
 80011cc:	b538      	push	{r3, r4, r5, lr}
 80011ce:	460c      	mov	r4, r1
 80011d0:	4d08      	ldr	r5, [pc, #32]	@ (80011f4 <_lseek_r+0x28>)
 80011d2:	4684      	mov	ip, r0
 80011d4:	4611      	mov	r1, r2
 80011d6:	4620      	mov	r0, r4
 80011d8:	461a      	mov	r2, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	602b      	str	r3, [r5, #0]
 80011de:	4664      	mov	r4, ip
 80011e0:	f001 fb74 	bl	80028cc <_lseek>
 80011e4:	1c43      	adds	r3, r0, #1
 80011e6:	d000      	beq.n	80011ea <_lseek_r+0x1e>
 80011e8:	bd38      	pop	{r3, r4, r5, pc}
 80011ea:	682b      	ldr	r3, [r5, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0fb      	beq.n	80011e8 <_lseek_r+0x1c>
 80011f0:	6023      	str	r3, [r4, #0]
 80011f2:	bd38      	pop	{r3, r4, r5, pc}
 80011f4:	200002f4 	.word	0x200002f4

080011f8 <_read_r>:
 80011f8:	b538      	push	{r3, r4, r5, lr}
 80011fa:	460c      	mov	r4, r1
 80011fc:	4d08      	ldr	r5, [pc, #32]	@ (8001220 <_read_r+0x28>)
 80011fe:	4684      	mov	ip, r0
 8001200:	4611      	mov	r1, r2
 8001202:	4620      	mov	r0, r4
 8001204:	461a      	mov	r2, r3
 8001206:	2300      	movs	r3, #0
 8001208:	602b      	str	r3, [r5, #0]
 800120a:	4664      	mov	r4, ip
 800120c:	f001 fb66 	bl	80028dc <_read>
 8001210:	1c43      	adds	r3, r0, #1
 8001212:	d000      	beq.n	8001216 <_read_r+0x1e>
 8001214:	bd38      	pop	{r3, r4, r5, pc}
 8001216:	682b      	ldr	r3, [r5, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0fb      	beq.n	8001214 <_read_r+0x1c>
 800121c:	6023      	str	r3, [r4, #0]
 800121e:	bd38      	pop	{r3, r4, r5, pc}
 8001220:	200002f4 	.word	0x200002f4

08001224 <_sbrk_r>:
 8001224:	b538      	push	{r3, r4, r5, lr}
 8001226:	4d07      	ldr	r5, [pc, #28]	@ (8001244 <_sbrk_r+0x20>)
 8001228:	2200      	movs	r2, #0
 800122a:	4604      	mov	r4, r0
 800122c:	4608      	mov	r0, r1
 800122e:	602a      	str	r2, [r5, #0]
 8001230:	f002 fcbe 	bl	8003bb0 <_sbrk>
 8001234:	1c43      	adds	r3, r0, #1
 8001236:	d000      	beq.n	800123a <_sbrk_r+0x16>
 8001238:	bd38      	pop	{r3, r4, r5, pc}
 800123a:	682b      	ldr	r3, [r5, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0fb      	beq.n	8001238 <_sbrk_r+0x14>
 8001240:	6023      	str	r3, [r4, #0]
 8001242:	bd38      	pop	{r3, r4, r5, pc}
 8001244:	200002f4 	.word	0x200002f4

08001248 <_write_r>:
 8001248:	b538      	push	{r3, r4, r5, lr}
 800124a:	460c      	mov	r4, r1
 800124c:	4d08      	ldr	r5, [pc, #32]	@ (8001270 <_write_r+0x28>)
 800124e:	4684      	mov	ip, r0
 8001250:	4611      	mov	r1, r2
 8001252:	4620      	mov	r0, r4
 8001254:	461a      	mov	r2, r3
 8001256:	2300      	movs	r3, #0
 8001258:	602b      	str	r3, [r5, #0]
 800125a:	4664      	mov	r4, ip
 800125c:	f001 fb46 	bl	80028ec <_write>
 8001260:	1c43      	adds	r3, r0, #1
 8001262:	d000      	beq.n	8001266 <_write_r+0x1e>
 8001264:	bd38      	pop	{r3, r4, r5, pc}
 8001266:	682b      	ldr	r3, [r5, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0fb      	beq.n	8001264 <_write_r+0x1c>
 800126c:	6023      	str	r3, [r4, #0]
 800126e:	bd38      	pop	{r3, r4, r5, pc}
 8001270:	200002f4 	.word	0x200002f4

08001274 <__errno>:
 8001274:	4b01      	ldr	r3, [pc, #4]	@ (800127c <__errno+0x8>)
 8001276:	6818      	ldr	r0, [r3, #0]
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	2000001c 	.word	0x2000001c

08001280 <__libc_init_array>:
 8001280:	b570      	push	{r4, r5, r6, lr}
 8001282:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <__libc_init_array+0x40>)
 8001284:	4d0f      	ldr	r5, [pc, #60]	@ (80012c4 <__libc_init_array+0x44>)
 8001286:	42ab      	cmp	r3, r5
 8001288:	eba3 0605 	sub.w	r6, r3, r5
 800128c:	d007      	beq.n	800129e <__libc_init_array+0x1e>
 800128e:	10b6      	asrs	r6, r6, #2
 8001290:	2400      	movs	r4, #0
 8001292:	f855 3b04 	ldr.w	r3, [r5], #4
 8001296:	3401      	adds	r4, #1
 8001298:	4798      	blx	r3
 800129a:	42a6      	cmp	r6, r4
 800129c:	d8f9      	bhi.n	8001292 <__libc_init_array+0x12>
 800129e:	f002 fcc7 	bl	8003c30 <_init>
 80012a2:	4d09      	ldr	r5, [pc, #36]	@ (80012c8 <__libc_init_array+0x48>)
 80012a4:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <__libc_init_array+0x4c>)
 80012a6:	1b5e      	subs	r6, r3, r5
 80012a8:	42ab      	cmp	r3, r5
 80012aa:	ea4f 06a6 	mov.w	r6, r6, asr #2
 80012ae:	d006      	beq.n	80012be <__libc_init_array+0x3e>
 80012b0:	2400      	movs	r4, #0
 80012b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80012b6:	3401      	adds	r4, #1
 80012b8:	4798      	blx	r3
 80012ba:	42a6      	cmp	r6, r4
 80012bc:	d8f9      	bhi.n	80012b2 <__libc_init_array+0x32>
 80012be:	bd70      	pop	{r4, r5, r6, pc}
 80012c0:	08003d38 	.word	0x08003d38
 80012c4:	08003d38 	.word	0x08003d38
 80012c8:	08003d38 	.word	0x08003d38
 80012cc:	08003d3c 	.word	0x08003d3c

080012d0 <__retarget_lock_init>:
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop

080012d4 <__retarget_lock_init_recursive>:
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop

080012d8 <__retarget_lock_close>:
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop

080012dc <__retarget_lock_close_recursive>:
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop

080012e0 <__retarget_lock_acquire>:
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop

080012e4 <__retarget_lock_acquire_recursive>:
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop

080012e8 <__retarget_lock_try_acquire>:
 80012e8:	2001      	movs	r0, #1
 80012ea:	4770      	bx	lr

080012ec <__retarget_lock_try_acquire_recursive>:
 80012ec:	2001      	movs	r0, #1
 80012ee:	4770      	bx	lr

080012f0 <__retarget_lock_release>:
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop

080012f4 <__retarget_lock_release_recursive>:
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop

080012f8 <memcpy>:
 80012f8:	4684      	mov	ip, r0
 80012fa:	ea41 0300 	orr.w	r3, r1, r0
 80012fe:	f013 0303 	ands.w	r3, r3, #3
 8001302:	d16d      	bne.n	80013e0 <memcpy+0xe8>
 8001304:	3a40      	subs	r2, #64	@ 0x40
 8001306:	d341      	bcc.n	800138c <memcpy+0x94>
 8001308:	f851 3b04 	ldr.w	r3, [r1], #4
 800130c:	f840 3b04 	str.w	r3, [r0], #4
 8001310:	f851 3b04 	ldr.w	r3, [r1], #4
 8001314:	f840 3b04 	str.w	r3, [r0], #4
 8001318:	f851 3b04 	ldr.w	r3, [r1], #4
 800131c:	f840 3b04 	str.w	r3, [r0], #4
 8001320:	f851 3b04 	ldr.w	r3, [r1], #4
 8001324:	f840 3b04 	str.w	r3, [r0], #4
 8001328:	f851 3b04 	ldr.w	r3, [r1], #4
 800132c:	f840 3b04 	str.w	r3, [r0], #4
 8001330:	f851 3b04 	ldr.w	r3, [r1], #4
 8001334:	f840 3b04 	str.w	r3, [r0], #4
 8001338:	f851 3b04 	ldr.w	r3, [r1], #4
 800133c:	f840 3b04 	str.w	r3, [r0], #4
 8001340:	f851 3b04 	ldr.w	r3, [r1], #4
 8001344:	f840 3b04 	str.w	r3, [r0], #4
 8001348:	f851 3b04 	ldr.w	r3, [r1], #4
 800134c:	f840 3b04 	str.w	r3, [r0], #4
 8001350:	f851 3b04 	ldr.w	r3, [r1], #4
 8001354:	f840 3b04 	str.w	r3, [r0], #4
 8001358:	f851 3b04 	ldr.w	r3, [r1], #4
 800135c:	f840 3b04 	str.w	r3, [r0], #4
 8001360:	f851 3b04 	ldr.w	r3, [r1], #4
 8001364:	f840 3b04 	str.w	r3, [r0], #4
 8001368:	f851 3b04 	ldr.w	r3, [r1], #4
 800136c:	f840 3b04 	str.w	r3, [r0], #4
 8001370:	f851 3b04 	ldr.w	r3, [r1], #4
 8001374:	f840 3b04 	str.w	r3, [r0], #4
 8001378:	f851 3b04 	ldr.w	r3, [r1], #4
 800137c:	f840 3b04 	str.w	r3, [r0], #4
 8001380:	f851 3b04 	ldr.w	r3, [r1], #4
 8001384:	f840 3b04 	str.w	r3, [r0], #4
 8001388:	3a40      	subs	r2, #64	@ 0x40
 800138a:	d2bd      	bcs.n	8001308 <memcpy+0x10>
 800138c:	3230      	adds	r2, #48	@ 0x30
 800138e:	d311      	bcc.n	80013b4 <memcpy+0xbc>
 8001390:	f851 3b04 	ldr.w	r3, [r1], #4
 8001394:	f840 3b04 	str.w	r3, [r0], #4
 8001398:	f851 3b04 	ldr.w	r3, [r1], #4
 800139c:	f840 3b04 	str.w	r3, [r0], #4
 80013a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80013a4:	f840 3b04 	str.w	r3, [r0], #4
 80013a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80013ac:	f840 3b04 	str.w	r3, [r0], #4
 80013b0:	3a10      	subs	r2, #16
 80013b2:	d2ed      	bcs.n	8001390 <memcpy+0x98>
 80013b4:	320c      	adds	r2, #12
 80013b6:	d305      	bcc.n	80013c4 <memcpy+0xcc>
 80013b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80013bc:	f840 3b04 	str.w	r3, [r0], #4
 80013c0:	3a04      	subs	r2, #4
 80013c2:	d2f9      	bcs.n	80013b8 <memcpy+0xc0>
 80013c4:	3204      	adds	r2, #4
 80013c6:	d008      	beq.n	80013da <memcpy+0xe2>
 80013c8:	07d2      	lsls	r2, r2, #31
 80013ca:	bf1c      	itt	ne
 80013cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80013d0:	f800 3b01 	strbne.w	r3, [r0], #1
 80013d4:	d301      	bcc.n	80013da <memcpy+0xe2>
 80013d6:	880b      	ldrh	r3, [r1, #0]
 80013d8:	8003      	strh	r3, [r0, #0]
 80013da:	4660      	mov	r0, ip
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	2a08      	cmp	r2, #8
 80013e2:	d313      	bcc.n	800140c <memcpy+0x114>
 80013e4:	078b      	lsls	r3, r1, #30
 80013e6:	d08d      	beq.n	8001304 <memcpy+0xc>
 80013e8:	f010 0303 	ands.w	r3, r0, #3
 80013ec:	d08a      	beq.n	8001304 <memcpy+0xc>
 80013ee:	f1c3 0304 	rsb	r3, r3, #4
 80013f2:	1ad2      	subs	r2, r2, r3
 80013f4:	07db      	lsls	r3, r3, #31
 80013f6:	bf1c      	itt	ne
 80013f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80013fc:	f800 3b01 	strbne.w	r3, [r0], #1
 8001400:	d380      	bcc.n	8001304 <memcpy+0xc>
 8001402:	f831 3b02 	ldrh.w	r3, [r1], #2
 8001406:	f820 3b02 	strh.w	r3, [r0], #2
 800140a:	e77b      	b.n	8001304 <memcpy+0xc>
 800140c:	3a04      	subs	r2, #4
 800140e:	d3d9      	bcc.n	80013c4 <memcpy+0xcc>
 8001410:	3a01      	subs	r2, #1
 8001412:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001416:	f800 3b01 	strb.w	r3, [r0], #1
 800141a:	d2f9      	bcs.n	8001410 <memcpy+0x118>
 800141c:	780b      	ldrb	r3, [r1, #0]
 800141e:	7003      	strb	r3, [r0, #0]
 8001420:	784b      	ldrb	r3, [r1, #1]
 8001422:	7043      	strb	r3, [r0, #1]
 8001424:	788b      	ldrb	r3, [r1, #2]
 8001426:	7083      	strb	r3, [r0, #2]
 8001428:	4660      	mov	r0, ip
 800142a:	4770      	bx	lr

0800142c <__assert_func>:
 800142c:	b500      	push	{lr}
 800142e:	4c0b      	ldr	r4, [pc, #44]	@ (800145c <__assert_func+0x30>)
 8001430:	6825      	ldr	r5, [r4, #0]
 8001432:	4614      	mov	r4, r2
 8001434:	68ee      	ldr	r6, [r5, #12]
 8001436:	461a      	mov	r2, r3
 8001438:	b085      	sub	sp, #20
 800143a:	4603      	mov	r3, r0
 800143c:	460d      	mov	r5, r1
 800143e:	b14c      	cbz	r4, 8001454 <__assert_func+0x28>
 8001440:	4907      	ldr	r1, [pc, #28]	@ (8001460 <__assert_func+0x34>)
 8001442:	9500      	str	r5, [sp, #0]
 8001444:	e9cd 1401 	strd	r1, r4, [sp, #4]
 8001448:	4630      	mov	r0, r6
 800144a:	4906      	ldr	r1, [pc, #24]	@ (8001464 <__assert_func+0x38>)
 800144c:	f000 f948 	bl	80016e0 <fiprintf>
 8001450:	f000 f95a 	bl	8001708 <abort>
 8001454:	4904      	ldr	r1, [pc, #16]	@ (8001468 <__assert_func+0x3c>)
 8001456:	460c      	mov	r4, r1
 8001458:	e7f3      	b.n	8001442 <__assert_func+0x16>
 800145a:	bf00      	nop
 800145c:	2000001c 	.word	0x2000001c
 8001460:	08003cb4 	.word	0x08003cb4
 8001464:	08003cc4 	.word	0x08003cc4
 8001468:	08003cc0 	.word	0x08003cc0

0800146c <__assert>:
 800146c:	b508      	push	{r3, lr}
 800146e:	4613      	mov	r3, r2
 8001470:	2200      	movs	r2, #0
 8001472:	f7ff ffdb 	bl	800142c <__assert_func>
 8001476:	bf00      	nop

08001478 <_free_r>:
 8001478:	2900      	cmp	r1, #0
 800147a:	d050      	beq.n	800151e <_free_r+0xa6>
 800147c:	b538      	push	{r3, r4, r5, lr}
 800147e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001482:	1f0c      	subs	r4, r1, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	bfb8      	it	lt
 8001488:	18e4      	addlt	r4, r4, r3
 800148a:	4605      	mov	r5, r0
 800148c:	f7ff fbda 	bl	8000c44 <__malloc_lock>
 8001490:	4a27      	ldr	r2, [pc, #156]	@ (8001530 <_free_r+0xb8>)
 8001492:	6813      	ldr	r3, [r2, #0]
 8001494:	b12b      	cbz	r3, 80014a2 <_free_r+0x2a>
 8001496:	42a3      	cmp	r3, r4
 8001498:	d90c      	bls.n	80014b4 <_free_r+0x3c>
 800149a:	6821      	ldr	r1, [r4, #0]
 800149c:	1860      	adds	r0, r4, r1
 800149e:	4283      	cmp	r3, r0
 80014a0:	d02c      	beq.n	80014fc <_free_r+0x84>
 80014a2:	6063      	str	r3, [r4, #4]
 80014a4:	4628      	mov	r0, r5
 80014a6:	6014      	str	r4, [r2, #0]
 80014a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014ac:	f7ff bbd0 	b.w	8000c50 <__malloc_unlock>
 80014b0:	42a3      	cmp	r3, r4
 80014b2:	d80f      	bhi.n	80014d4 <_free_r+0x5c>
 80014b4:	461a      	mov	r2, r3
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f9      	bne.n	80014b0 <_free_r+0x38>
 80014bc:	6811      	ldr	r1, [r2, #0]
 80014be:	1850      	adds	r0, r2, r1
 80014c0:	4284      	cmp	r4, r0
 80014c2:	d017      	beq.n	80014f4 <_free_r+0x7c>
 80014c4:	d32c      	bcc.n	8001520 <_free_r+0xa8>
 80014c6:	6063      	str	r3, [r4, #4]
 80014c8:	6054      	str	r4, [r2, #4]
 80014ca:	4628      	mov	r0, r5
 80014cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014d0:	f7ff bbbe 	b.w	8000c50 <__malloc_unlock>
 80014d4:	6811      	ldr	r1, [r2, #0]
 80014d6:	1850      	adds	r0, r2, r1
 80014d8:	42a0      	cmp	r0, r4
 80014da:	d014      	beq.n	8001506 <_free_r+0x8e>
 80014dc:	d820      	bhi.n	8001520 <_free_r+0xa8>
 80014de:	6821      	ldr	r1, [r4, #0]
 80014e0:	1860      	adds	r0, r4, r1
 80014e2:	4283      	cmp	r3, r0
 80014e4:	d1ef      	bne.n	80014c6 <_free_r+0x4e>
 80014e6:	6818      	ldr	r0, [r3, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	4408      	add	r0, r1
 80014ec:	e9c4 0300 	strd	r0, r3, [r4]
 80014f0:	6054      	str	r4, [r2, #4]
 80014f2:	e7ea      	b.n	80014ca <_free_r+0x52>
 80014f4:	6823      	ldr	r3, [r4, #0]
 80014f6:	440b      	add	r3, r1
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e7e6      	b.n	80014ca <_free_r+0x52>
 80014fc:	6818      	ldr	r0, [r3, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	4408      	add	r0, r1
 8001502:	6020      	str	r0, [r4, #0]
 8001504:	e7cd      	b.n	80014a2 <_free_r+0x2a>
 8001506:	6820      	ldr	r0, [r4, #0]
 8001508:	4401      	add	r1, r0
 800150a:	1850      	adds	r0, r2, r1
 800150c:	4283      	cmp	r3, r0
 800150e:	6011      	str	r1, [r2, #0]
 8001510:	d1db      	bne.n	80014ca <_free_r+0x52>
 8001512:	e9d3 0400 	ldrd	r0, r4, [r3]
 8001516:	4401      	add	r1, r0
 8001518:	e9c2 1400 	strd	r1, r4, [r2]
 800151c:	e7d5      	b.n	80014ca <_free_r+0x52>
 800151e:	4770      	bx	lr
 8001520:	230c      	movs	r3, #12
 8001522:	602b      	str	r3, [r5, #0]
 8001524:	4628      	mov	r0, r5
 8001526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800152a:	f7ff bb91 	b.w	8000c50 <__malloc_unlock>
 800152e:	bf00      	nop
 8001530:	200001b4 	.word	0x200001b4

08001534 <__sflush_r>:
 8001534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001536:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800153a:	4607      	mov	r7, r0
 800153c:	0718      	lsls	r0, r3, #28
 800153e:	460c      	mov	r4, r1
 8001540:	d439      	bmi.n	80015b6 <__sflush_r+0x82>
 8001542:	684a      	ldr	r2, [r1, #4]
 8001544:	2a00      	cmp	r2, #0
 8001546:	dd53      	ble.n	80015f0 <__sflush_r+0xbc>
 8001548:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 800154a:	2d00      	cmp	r5, #0
 800154c:	d031      	beq.n	80015b2 <__sflush_r+0x7e>
 800154e:	2200      	movs	r2, #0
 8001550:	683e      	ldr	r6, [r7, #0]
 8001552:	603a      	str	r2, [r7, #0]
 8001554:	f413 5280 	ands.w	r2, r3, #4096	@ 0x1000
 8001558:	6a21      	ldr	r1, [r4, #32]
 800155a:	d155      	bne.n	8001608 <__sflush_r+0xd4>
 800155c:	2301      	movs	r3, #1
 800155e:	4638      	mov	r0, r7
 8001560:	47a8      	blx	r5
 8001562:	1c41      	adds	r1, r0, #1
 8001564:	4602      	mov	r2, r0
 8001566:	d05e      	beq.n	8001626 <__sflush_r+0xf2>
 8001568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800156c:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 800156e:	6a21      	ldr	r1, [r4, #32]
 8001570:	075b      	lsls	r3, r3, #29
 8001572:	d505      	bpl.n	8001580 <__sflush_r+0x4c>
 8001574:	6863      	ldr	r3, [r4, #4]
 8001576:	1ad2      	subs	r2, r2, r3
 8001578:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800157a:	b10b      	cbz	r3, 8001580 <__sflush_r+0x4c>
 800157c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800157e:	1ad2      	subs	r2, r2, r3
 8001580:	2300      	movs	r3, #0
 8001582:	4638      	mov	r0, r7
 8001584:	47a8      	blx	r5
 8001586:	1c45      	adds	r5, r0, #1
 8001588:	d040      	beq.n	800160c <__sflush_r+0xd8>
 800158a:	2300      	movs	r3, #0
 800158c:	6063      	str	r3, [r4, #4]
 800158e:	6923      	ldr	r3, [r4, #16]
 8001590:	6023      	str	r3, [r4, #0]
 8001592:	89a3      	ldrh	r3, [r4, #12]
 8001594:	04d9      	lsls	r1, r3, #19
 8001596:	d500      	bpl.n	800159a <__sflush_r+0x66>
 8001598:	6560      	str	r0, [r4, #84]	@ 0x54
 800159a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800159c:	603e      	str	r6, [r7, #0]
 800159e:	b141      	cbz	r1, 80015b2 <__sflush_r+0x7e>
 80015a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80015a4:	4299      	cmp	r1, r3
 80015a6:	d002      	beq.n	80015ae <__sflush_r+0x7a>
 80015a8:	4638      	mov	r0, r7
 80015aa:	f7ff ff65 	bl	8001478 <_free_r>
 80015ae:	2300      	movs	r3, #0
 80015b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80015b2:	2000      	movs	r0, #0
 80015b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015b6:	690e      	ldr	r6, [r1, #16]
 80015b8:	2e00      	cmp	r6, #0
 80015ba:	d0fa      	beq.n	80015b2 <__sflush_r+0x7e>
 80015bc:	079b      	lsls	r3, r3, #30
 80015be:	680d      	ldr	r5, [r1, #0]
 80015c0:	bf08      	it	eq
 80015c2:	694b      	ldreq	r3, [r1, #20]
 80015c4:	600e      	str	r6, [r1, #0]
 80015c6:	bf18      	it	ne
 80015c8:	2300      	movne	r3, #0
 80015ca:	1bad      	subs	r5, r5, r6
 80015cc:	608b      	str	r3, [r1, #8]
 80015ce:	e00c      	b.n	80015ea <__sflush_r+0xb6>
 80015d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80015d4:	6a21      	ldr	r1, [r4, #32]
 80015d6:	462b      	mov	r3, r5
 80015d8:	4632      	mov	r2, r6
 80015da:	4638      	mov	r0, r7
 80015dc:	47e0      	blx	ip
 80015de:	f1b0 0c00 	subs.w	ip, r0, #0
 80015e2:	eba5 050c 	sub.w	r5, r5, ip
 80015e6:	4466      	add	r6, ip
 80015e8:	dd06      	ble.n	80015f8 <__sflush_r+0xc4>
 80015ea:	2d00      	cmp	r5, #0
 80015ec:	dcf0      	bgt.n	80015d0 <__sflush_r+0x9c>
 80015ee:	e7e0      	b.n	80015b2 <__sflush_r+0x7e>
 80015f0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80015f2:	2a00      	cmp	r2, #0
 80015f4:	dca8      	bgt.n	8001548 <__sflush_r+0x14>
 80015f6:	e7dc      	b.n	80015b2 <__sflush_r+0x7e>
 80015f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001600:	81a3      	strh	r3, [r4, #12]
 8001602:	f04f 30ff 	mov.w	r0, #4294967295
 8001606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001608:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800160a:	e7b1      	b.n	8001570 <__sflush_r+0x3c>
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001612:	b18a      	cbz	r2, 8001638 <__sflush_r+0x104>
 8001614:	2a1d      	cmp	r2, #29
 8001616:	d001      	beq.n	800161c <__sflush_r+0xe8>
 8001618:	2a16      	cmp	r2, #22
 800161a:	d1ef      	bne.n	80015fc <__sflush_r+0xc8>
 800161c:	6923      	ldr	r3, [r4, #16]
 800161e:	2200      	movs	r2, #0
 8001620:	e9c4 3200 	strd	r3, r2, [r4]
 8001624:	e7b9      	b.n	800159a <__sflush_r+0x66>
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d09d      	beq.n	8001568 <__sflush_r+0x34>
 800162c:	2b1d      	cmp	r3, #29
 800162e:	d001      	beq.n	8001634 <__sflush_r+0x100>
 8001630:	2b16      	cmp	r3, #22
 8001632:	d1e1      	bne.n	80015f8 <__sflush_r+0xc4>
 8001634:	603e      	str	r6, [r7, #0]
 8001636:	e7bc      	b.n	80015b2 <__sflush_r+0x7e>
 8001638:	6062      	str	r2, [r4, #4]
 800163a:	6922      	ldr	r2, [r4, #16]
 800163c:	6022      	str	r2, [r4, #0]
 800163e:	04da      	lsls	r2, r3, #19
 8001640:	d4aa      	bmi.n	8001598 <__sflush_r+0x64>
 8001642:	e7aa      	b.n	800159a <__sflush_r+0x66>

08001644 <_fflush_r>:
 8001644:	b538      	push	{r3, r4, r5, lr}
 8001646:	690b      	ldr	r3, [r1, #16]
 8001648:	b1cb      	cbz	r3, 800167e <_fflush_r+0x3a>
 800164a:	460c      	mov	r4, r1
 800164c:	4605      	mov	r5, r0
 800164e:	b108      	cbz	r0, 8001654 <_fflush_r+0x10>
 8001650:	6a03      	ldr	r3, [r0, #32]
 8001652:	b1bb      	cbz	r3, 8001684 <_fflush_r+0x40>
 8001654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001658:	b18b      	cbz	r3, 800167e <_fflush_r+0x3a>
 800165a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800165c:	07d0      	lsls	r0, r2, #31
 800165e:	d401      	bmi.n	8001664 <_fflush_r+0x20>
 8001660:	0599      	lsls	r1, r3, #22
 8001662:	d512      	bpl.n	800168a <_fflush_r+0x46>
 8001664:	4628      	mov	r0, r5
 8001666:	4621      	mov	r1, r4
 8001668:	f7ff ff64 	bl	8001534 <__sflush_r>
 800166c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800166e:	07da      	lsls	r2, r3, #31
 8001670:	4605      	mov	r5, r0
 8001672:	d402      	bmi.n	800167a <_fflush_r+0x36>
 8001674:	89a3      	ldrh	r3, [r4, #12]
 8001676:	059b      	lsls	r3, r3, #22
 8001678:	d50b      	bpl.n	8001692 <_fflush_r+0x4e>
 800167a:	4628      	mov	r0, r5
 800167c:	bd38      	pop	{r3, r4, r5, pc}
 800167e:	2500      	movs	r5, #0
 8001680:	4628      	mov	r0, r5
 8001682:	bd38      	pop	{r3, r4, r5, pc}
 8001684:	f7ff fc80 	bl	8000f88 <__sinit>
 8001688:	e7e4      	b.n	8001654 <_fflush_r+0x10>
 800168a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800168c:	f7ff fe2a 	bl	80012e4 <__retarget_lock_acquire_recursive>
 8001690:	e7e8      	b.n	8001664 <_fflush_r+0x20>
 8001692:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001694:	f7ff fe2e 	bl	80012f4 <__retarget_lock_release_recursive>
 8001698:	e7ef      	b.n	800167a <_fflush_r+0x36>
 800169a:	bf00      	nop

0800169c <fflush>:
 800169c:	4601      	mov	r1, r0
 800169e:	b118      	cbz	r0, 80016a8 <fflush+0xc>
 80016a0:	4b04      	ldr	r3, [pc, #16]	@ (80016b4 <fflush+0x18>)
 80016a2:	6818      	ldr	r0, [r3, #0]
 80016a4:	f7ff bfce 	b.w	8001644 <_fflush_r>
 80016a8:	4a03      	ldr	r2, [pc, #12]	@ (80016b8 <fflush+0x1c>)
 80016aa:	4904      	ldr	r1, [pc, #16]	@ (80016bc <fflush+0x20>)
 80016ac:	4804      	ldr	r0, [pc, #16]	@ (80016c0 <fflush+0x24>)
 80016ae:	f7ff bcbb 	b.w	8001028 <_fwalk_sglue>
 80016b2:	bf00      	nop
 80016b4:	2000001c 	.word	0x2000001c
 80016b8:	20000010 	.word	0x20000010
 80016bc:	08001645 	.word	0x08001645
 80016c0:	20000020 	.word	0x20000020

080016c4 <_fiprintf_r>:
 80016c4:	b40c      	push	{r2, r3}
 80016c6:	b500      	push	{lr}
 80016c8:	b083      	sub	sp, #12
 80016ca:	ab04      	add	r3, sp, #16
 80016cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	f000 f85d 	bl	8001790 <_vfiprintf_r>
 80016d6:	b003      	add	sp, #12
 80016d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80016dc:	b002      	add	sp, #8
 80016de:	4770      	bx	lr

080016e0 <fiprintf>:
 80016e0:	b40e      	push	{r1, r2, r3}
 80016e2:	b510      	push	{r4, lr}
 80016e4:	b083      	sub	sp, #12
 80016e6:	ab05      	add	r3, sp, #20
 80016e8:	4c06      	ldr	r4, [pc, #24]	@ (8001704 <fiprintf+0x24>)
 80016ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	4601      	mov	r1, r0
 80016f2:	6820      	ldr	r0, [r4, #0]
 80016f4:	f000 f84c 	bl	8001790 <_vfiprintf_r>
 80016f8:	b003      	add	sp, #12
 80016fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016fe:	b003      	add	sp, #12
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	2000001c 	.word	0x2000001c

08001708 <abort>:
 8001708:	b508      	push	{r3, lr}
 800170a:	2006      	movs	r0, #6
 800170c:	f000 febe 	bl	800248c <raise>
 8001710:	2001      	movs	r0, #1
 8001712:	f001 f8f3 	bl	80028fc <_exit>
 8001716:	bf00      	nop

08001718 <__sfputc_r>:
 8001718:	6893      	ldr	r3, [r2, #8]
 800171a:	3b01      	subs	r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	6093      	str	r3, [r2, #8]
 8001720:	da05      	bge.n	800172e <__sfputc_r+0x16>
 8001722:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8001726:	4563      	cmp	r3, ip
 8001728:	db07      	blt.n	800173a <__sfputc_r+0x22>
 800172a:	290a      	cmp	r1, #10
 800172c:	d005      	beq.n	800173a <__sfputc_r+0x22>
 800172e:	6813      	ldr	r3, [r2, #0]
 8001730:	1c58      	adds	r0, r3, #1
 8001732:	6010      	str	r0, [r2, #0]
 8001734:	7019      	strb	r1, [r3, #0]
 8001736:	4608      	mov	r0, r1
 8001738:	4770      	bx	lr
 800173a:	f000 bce3 	b.w	8002104 <__swbuf_r>
 800173e:	bf00      	nop

08001740 <__sfputs_r>:
 8001740:	b19b      	cbz	r3, 800176a <__sfputs_r+0x2a>
 8001742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001744:	4413      	add	r3, r2
 8001746:	4606      	mov	r6, r0
 8001748:	460f      	mov	r7, r1
 800174a:	1e54      	subs	r4, r2, #1
 800174c:	1e5d      	subs	r5, r3, #1
 800174e:	e001      	b.n	8001754 <__sfputs_r+0x14>
 8001750:	42ac      	cmp	r4, r5
 8001752:	d008      	beq.n	8001766 <__sfputs_r+0x26>
 8001754:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8001758:	463a      	mov	r2, r7
 800175a:	4630      	mov	r0, r6
 800175c:	f7ff ffdc 	bl	8001718 <__sfputc_r>
 8001760:	1c43      	adds	r3, r0, #1
 8001762:	d1f5      	bne.n	8001750 <__sfputs_r+0x10>
 8001764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001766:	2000      	movs	r0, #0
 8001768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800176a:	2000      	movs	r0, #0
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop

08001770 <__sprint_r>:
 8001770:	6893      	ldr	r3, [r2, #8]
 8001772:	b510      	push	{r4, lr}
 8001774:	4614      	mov	r4, r2
 8001776:	b91b      	cbnz	r3, 8001780 <__sprint_r+0x10>
 8001778:	4618      	mov	r0, r3
 800177a:	2300      	movs	r3, #0
 800177c:	6063      	str	r3, [r4, #4]
 800177e:	bd10      	pop	{r4, pc}
 8001780:	f000 fb44 	bl	8001e0c <__sfvwrite_r>
 8001784:	2300      	movs	r3, #0
 8001786:	60a3      	str	r3, [r4, #8]
 8001788:	2300      	movs	r3, #0
 800178a:	6063      	str	r3, [r4, #4]
 800178c:	bd10      	pop	{r4, pc}
 800178e:	bf00      	nop

08001790 <_vfiprintf_r>:
 8001790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001794:	b0a1      	sub	sp, #132	@ 0x84
 8001796:	468b      	mov	fp, r1
 8001798:	4691      	mov	r9, r2
 800179a:	461c      	mov	r4, r3
 800179c:	9004      	str	r0, [sp, #16]
 800179e:	b118      	cbz	r0, 80017a8 <_vfiprintf_r+0x18>
 80017a0:	6a03      	ldr	r3, [r0, #32]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 8147 	beq.w	8001a36 <_vfiprintf_r+0x2a6>
 80017a8:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 80017ac:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 80017b0:	07d2      	lsls	r2, r2, #31
 80017b2:	d402      	bmi.n	80017ba <_vfiprintf_r+0x2a>
 80017b4:	059f      	lsls	r7, r3, #22
 80017b6:	f140 8137 	bpl.w	8001a28 <_vfiprintf_r+0x298>
 80017ba:	071e      	lsls	r6, r3, #28
 80017bc:	f140 809e 	bpl.w	80018fc <_vfiprintf_r+0x16c>
 80017c0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 8099 	beq.w	80018fc <_vfiprintf_r+0x16c>
 80017ca:	2300      	movs	r3, #0
 80017cc:	46ca      	mov	sl, r9
 80017ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80017d0:	f243 0320 	movw	r3, #12320	@ 0x3020
 80017d4:	f8ad 3039 	strh.w	r3, [sp, #57]	@ 0x39
 80017d8:	f89a 3000 	ldrb.w	r3, [sl]
 80017dc:	4e97      	ldr	r6, [pc, #604]	@ (8001a3c <_vfiprintf_r+0x2ac>)
 80017de:	9407      	str	r4, [sp, #28]
 80017e0:	2701      	movs	r7, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d07a      	beq.n	80018dc <_vfiprintf_r+0x14c>
 80017e6:	46d1      	mov	r9, sl
 80017e8:	e004      	b.n	80017f4 <_vfiprintf_r+0x64>
 80017ea:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 809a 	beq.w	8001928 <_vfiprintf_r+0x198>
 80017f4:	2b25      	cmp	r3, #37	@ 0x25
 80017f6:	d1f8      	bne.n	80017ea <_vfiprintf_r+0x5a>
 80017f8:	ebb9 080a 	subs.w	r8, r9, sl
 80017fc:	f040 8097 	bne.w	800192e <_vfiprintf_r+0x19e>
 8001800:	f899 3000 	ldrb.w	r3, [r9]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d069      	beq.n	80018dc <_vfiprintf_r+0x14c>
 8001808:	2300      	movs	r3, #0
 800180a:	f04f 32ff 	mov.w	r2, #4294967295
 800180e:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
 8001812:	f109 0901 	add.w	r9, r9, #1
 8001816:	9308      	str	r3, [sp, #32]
 8001818:	930b      	str	r3, [sp, #44]	@ 0x2c
 800181a:	f88d 3063 	strb.w	r3, [sp, #99]	@ 0x63
 800181e:	931e      	str	r3, [sp, #120]	@ 0x78
 8001820:	e005      	b.n	800182e <_vfiprintf_r+0x9e>
 8001822:	9a08      	ldr	r2, [sp, #32]
 8001824:	fa07 f303 	lsl.w	r3, r7, r3
 8001828:	431a      	orrs	r2, r3
 800182a:	9208      	str	r2, [sp, #32]
 800182c:	46a1      	mov	r9, r4
 800182e:	464c      	mov	r4, r9
 8001830:	2205      	movs	r2, #5
 8001832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001836:	4630      	mov	r0, r6
 8001838:	f000 fee2 	bl	8002600 <memchr>
 800183c:	46a2      	mov	sl, r4
 800183e:	1b83      	subs	r3, r0, r6
 8001840:	2800      	cmp	r0, #0
 8001842:	d1ee      	bne.n	8001822 <_vfiprintf_r+0x92>
 8001844:	9b08      	ldr	r3, [sp, #32]
 8001846:	06d8      	lsls	r0, r3, #27
 8001848:	bf44      	itt	mi
 800184a:	2220      	movmi	r2, #32
 800184c:	f88d 2063 	strbmi.w	r2, [sp, #99]	@ 0x63
 8001850:	0719      	lsls	r1, r3, #28
 8001852:	f899 1000 	ldrb.w	r1, [r9]
 8001856:	bf44      	itt	mi
 8001858:	222b      	movmi	r2, #43	@ 0x2b
 800185a:	f88d 2063 	strbmi.w	r2, [sp, #99]	@ 0x63
 800185e:	292a      	cmp	r1, #42	@ 0x2a
 8001860:	d17b      	bne.n	800195a <_vfiprintf_r+0x1ca>
 8001862:	9a07      	ldr	r2, [sp, #28]
 8001864:	6811      	ldr	r1, [r2, #0]
 8001866:	3204      	adds	r2, #4
 8001868:	2900      	cmp	r1, #0
 800186a:	9207      	str	r2, [sp, #28]
 800186c:	f2c0 80b0 	blt.w	80019d0 <_vfiprintf_r+0x240>
 8001870:	910b      	str	r1, [sp, #44]	@ 0x2c
 8001872:	f899 1001 	ldrb.w	r1, [r9, #1]
 8001876:	292e      	cmp	r1, #46	@ 0x2e
 8001878:	f000 8086 	beq.w	8001988 <_vfiprintf_r+0x1f8>
 800187c:	4c70      	ldr	r4, [pc, #448]	@ (8001a40 <_vfiprintf_r+0x2b0>)
 800187e:	2203      	movs	r2, #3
 8001880:	4620      	mov	r0, r4
 8001882:	f000 febd 	bl	8002600 <memchr>
 8001886:	b138      	cbz	r0, 8001898 <_vfiprintf_r+0x108>
 8001888:	9b08      	ldr	r3, [sp, #32]
 800188a:	1b00      	subs	r0, r0, r4
 800188c:	2240      	movs	r2, #64	@ 0x40
 800188e:	4082      	lsls	r2, r0
 8001890:	4313      	orrs	r3, r2
 8001892:	f10a 0a01 	add.w	sl, sl, #1
 8001896:	9308      	str	r3, [sp, #32]
 8001898:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800189c:	4869      	ldr	r0, [pc, #420]	@ (8001a44 <_vfiprintf_r+0x2b4>)
 800189e:	f88d 1038 	strb.w	r1, [sp, #56]	@ 0x38
 80018a2:	2206      	movs	r2, #6
 80018a4:	f000 feac 	bl	8002600 <memchr>
 80018a8:	2800      	cmp	r0, #0
 80018aa:	f000 8097 	beq.w	80019dc <_vfiprintf_r+0x24c>
 80018ae:	4b66      	ldr	r3, [pc, #408]	@ (8001a48 <_vfiprintf_r+0x2b8>)
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d07e      	beq.n	80019b2 <_vfiprintf_r+0x222>
 80018b4:	aa07      	add	r2, sp, #28
 80018b6:	9200      	str	r2, [sp, #0]
 80018b8:	4b64      	ldr	r3, [pc, #400]	@ (8001a4c <_vfiprintf_r+0x2bc>)
 80018ba:	9804      	ldr	r0, [sp, #16]
 80018bc:	465a      	mov	r2, fp
 80018be:	a908      	add	r1, sp, #32
 80018c0:	f3af 8000 	nop.w
 80018c4:	9003      	str	r0, [sp, #12]
 80018c6:	9b03      	ldr	r3, [sp, #12]
 80018c8:	3301      	adds	r3, #1
 80018ca:	d007      	beq.n	80018dc <_vfiprintf_r+0x14c>
 80018cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80018ce:	9a03      	ldr	r2, [sp, #12]
 80018d0:	4413      	add	r3, r2
 80018d2:	930d      	str	r3, [sp, #52]	@ 0x34
 80018d4:	f89a 3000 	ldrb.w	r3, [sl]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d184      	bne.n	80017e6 <_vfiprintf_r+0x56>
 80018dc:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80018e0:	f013 0f01 	tst.w	r3, #1
 80018e4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80018e8:	d102      	bne.n	80018f0 <_vfiprintf_r+0x160>
 80018ea:	059a      	lsls	r2, r3, #22
 80018ec:	f140 8095 	bpl.w	8001a1a <_vfiprintf_r+0x28a>
 80018f0:	065b      	lsls	r3, r3, #25
 80018f2:	d416      	bmi.n	8001922 <_vfiprintf_r+0x192>
 80018f4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80018f6:	b021      	add	sp, #132	@ 0x84
 80018f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018fc:	9804      	ldr	r0, [sp, #16]
 80018fe:	4659      	mov	r1, fp
 8001900:	f000 fc50 	bl	80021a4 <__swsetup_r>
 8001904:	2800      	cmp	r0, #0
 8001906:	f43f af60 	beq.w	80017ca <_vfiprintf_r+0x3a>
 800190a:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 800190e:	07dd      	lsls	r5, r3, #31
 8001910:	d407      	bmi.n	8001922 <_vfiprintf_r+0x192>
 8001912:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8001916:	059c      	lsls	r4, r3, #22
 8001918:	d403      	bmi.n	8001922 <_vfiprintf_r+0x192>
 800191a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 800191e:	f7ff fce9 	bl	80012f4 <__retarget_lock_release_recursive>
 8001922:	f04f 30ff 	mov.w	r0, #4294967295
 8001926:	e7e6      	b.n	80018f6 <_vfiprintf_r+0x166>
 8001928:	ebb9 080a 	subs.w	r8, r9, sl
 800192c:	d0d6      	beq.n	80018dc <_vfiprintf_r+0x14c>
 800192e:	f10a 35ff 	add.w	r5, sl, #4294967295
 8001932:	f8cd 9014 	str.w	r9, [sp, #20]
 8001936:	46a9      	mov	r9, r5
 8001938:	9d04      	ldr	r5, [sp, #16]
 800193a:	e001      	b.n	8001940 <_vfiprintf_r+0x1b0>
 800193c:	45a0      	cmp	r8, r4
 800193e:	d93f      	bls.n	80019c0 <_vfiprintf_r+0x230>
 8001940:	464c      	mov	r4, r9
 8001942:	465a      	mov	r2, fp
 8001944:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8001948:	4628      	mov	r0, r5
 800194a:	f7ff fee5 	bl	8001718 <__sfputc_r>
 800194e:	3402      	adds	r4, #2
 8001950:	3001      	adds	r0, #1
 8001952:	eba4 040a 	sub.w	r4, r4, sl
 8001956:	d1f1      	bne.n	800193c <_vfiprintf_r+0x1ac>
 8001958:	e7c0      	b.n	80018dc <_vfiprintf_r+0x14c>
 800195a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800195e:	2a09      	cmp	r2, #9
 8001960:	bf88      	it	hi
 8001962:	46ca      	movhi	sl, r9
 8001964:	d887      	bhi.n	8001876 <_vfiprintf_r+0xe6>
 8001966:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8001968:	e000      	b.n	800196c <_vfiprintf_r+0x1dc>
 800196a:	3401      	adds	r4, #1
 800196c:	7821      	ldrb	r1, [r4, #0]
 800196e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001972:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001976:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800197a:	2a09      	cmp	r2, #9
 800197c:	d9f5      	bls.n	800196a <_vfiprintf_r+0x1da>
 800197e:	292e      	cmp	r1, #46	@ 0x2e
 8001980:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001982:	46a2      	mov	sl, r4
 8001984:	f47f af7a 	bne.w	800187c <_vfiprintf_r+0xec>
 8001988:	f89a 1001 	ldrb.w	r1, [sl, #1]
 800198c:	292a      	cmp	r1, #42	@ 0x2a
 800198e:	d12f      	bne.n	80019f0 <_vfiprintf_r+0x260>
 8001990:	9b07      	ldr	r3, [sp, #28]
 8001992:	f89a 1002 	ldrb.w	r1, [sl, #2]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	9209      	str	r2, [sp, #36]	@ 0x24
 800199a:	3304      	adds	r3, #4
 800199c:	2a00      	cmp	r2, #0
 800199e:	f10a 0002 	add.w	r0, sl, #2
 80019a2:	9307      	str	r3, [sp, #28]
 80019a4:	bfb8      	it	lt
 80019a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80019aa:	4682      	mov	sl, r0
 80019ac:	bfb8      	it	lt
 80019ae:	9309      	strlt	r3, [sp, #36]	@ 0x24
 80019b0:	e764      	b.n	800187c <_vfiprintf_r+0xec>
 80019b2:	9b07      	ldr	r3, [sp, #28]
 80019b4:	3307      	adds	r3, #7
 80019b6:	f023 0307 	bic.w	r3, r3, #7
 80019ba:	3308      	adds	r3, #8
 80019bc:	9307      	str	r3, [sp, #28]
 80019be:	e785      	b.n	80018cc <_vfiprintf_r+0x13c>
 80019c0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80019c2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80019c6:	4441      	add	r1, r8
 80019c8:	f899 3000 	ldrb.w	r3, [r9]
 80019cc:	910d      	str	r1, [sp, #52]	@ 0x34
 80019ce:	e719      	b.n	8001804 <_vfiprintf_r+0x74>
 80019d0:	4249      	negs	r1, r1
 80019d2:	f043 0302 	orr.w	r3, r3, #2
 80019d6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80019d8:	9308      	str	r3, [sp, #32]
 80019da:	e74a      	b.n	8001872 <_vfiprintf_r+0xe2>
 80019dc:	aa07      	add	r2, sp, #28
 80019de:	9200      	str	r2, [sp, #0]
 80019e0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a4c <_vfiprintf_r+0x2bc>)
 80019e2:	9804      	ldr	r0, [sp, #16]
 80019e4:	465a      	mov	r2, fp
 80019e6:	a908      	add	r1, sp, #32
 80019e8:	f000 f8d0 	bl	8001b8c <_printf_i>
 80019ec:	9003      	str	r0, [sp, #12]
 80019ee:	e76a      	b.n	80018c6 <_vfiprintf_r+0x136>
 80019f0:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80019f4:	2300      	movs	r3, #0
 80019f6:	2a09      	cmp	r2, #9
 80019f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80019fa:	f10a 0a01 	add.w	sl, sl, #1
 80019fe:	f63f af3d 	bhi.w	800187c <_vfiprintf_r+0xec>
 8001a02:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8001a06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a0a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001a0e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8001a12:	2a09      	cmp	r2, #9
 8001a14:	d9f5      	bls.n	8001a02 <_vfiprintf_r+0x272>
 8001a16:	9309      	str	r3, [sp, #36]	@ 0x24
 8001a18:	e730      	b.n	800187c <_vfiprintf_r+0xec>
 8001a1a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8001a1e:	f7ff fc69 	bl	80012f4 <__retarget_lock_release_recursive>
 8001a22:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8001a26:	e763      	b.n	80018f0 <_vfiprintf_r+0x160>
 8001a28:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8001a2c:	f7ff fc5a 	bl	80012e4 <__retarget_lock_acquire_recursive>
 8001a30:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8001a34:	e6c1      	b.n	80017ba <_vfiprintf_r+0x2a>
 8001a36:	f7ff faa7 	bl	8000f88 <__sinit>
 8001a3a:	e6b5      	b.n	80017a8 <_vfiprintf_r+0x18>
 8001a3c:	08003cf4 	.word	0x08003cf4
 8001a40:	08003cfc 	.word	0x08003cfc
 8001a44:	08003d00 	.word	0x08003d00
 8001a48:	00000000 	.word	0x00000000
 8001a4c:	08001741 	.word	0x08001741

08001a50 <vfiprintf>:
 8001a50:	b410      	push	{r4}
 8001a52:	4c04      	ldr	r4, [pc, #16]	@ (8001a64 <vfiprintf+0x14>)
 8001a54:	4684      	mov	ip, r0
 8001a56:	4613      	mov	r3, r2
 8001a58:	6820      	ldr	r0, [r4, #0]
 8001a5a:	bc10      	pop	{r4}
 8001a5c:	460a      	mov	r2, r1
 8001a5e:	4661      	mov	r1, ip
 8001a60:	f7ff be96 	b.w	8001790 <_vfiprintf_r>
 8001a64:	2000001c 	.word	0x2000001c

08001a68 <_printf_common>:
 8001a68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a6c:	4692      	mov	sl, r2
 8001a6e:	461f      	mov	r7, r3
 8001a70:	690a      	ldr	r2, [r1, #16]
 8001a72:	688b      	ldr	r3, [r1, #8]
 8001a74:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	bfb8      	it	lt
 8001a7c:	461a      	movlt	r2, r3
 8001a7e:	f8ca 2000 	str.w	r2, [sl]
 8001a82:	f891 3043 	ldrb.w	r3, [r1, #67]	@ 0x43
 8001a86:	460c      	mov	r4, r1
 8001a88:	4606      	mov	r6, r0
 8001a8a:	b113      	cbz	r3, 8001a92 <_printf_common+0x2a>
 8001a8c:	3201      	adds	r2, #1
 8001a8e:	f8ca 2000 	str.w	r2, [sl]
 8001a92:	6822      	ldr	r2, [r4, #0]
 8001a94:	0691      	lsls	r1, r2, #26
 8001a96:	d55f      	bpl.n	8001b58 <_printf_common+0xf0>
 8001a98:	f8da 3000 	ldr.w	r3, [sl]
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	f8ca 3000 	str.w	r3, [sl]
 8001aa2:	6822      	ldr	r2, [r4, #0]
 8001aa4:	f012 0f06 	tst.w	r2, #6
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	d11d      	bne.n	8001ae8 <_printf_common+0x80>
 8001aac:	68e1      	ldr	r1, [r4, #12]
 8001aae:	4299      	cmp	r1, r3
 8001ab0:	bfd8      	it	le
 8001ab2:	4611      	movle	r1, r2
 8001ab4:	dd18      	ble.n	8001ae8 <_printf_common+0x80>
 8001ab6:	f104 0b19 	add.w	fp, r4, #25
 8001aba:	f04f 0800 	mov.w	r8, #0
 8001abe:	e005      	b.n	8001acc <_printf_common+0x64>
 8001ac0:	68e5      	ldr	r5, [r4, #12]
 8001ac2:	f8da 3000 	ldr.w	r3, [sl]
 8001ac6:	1aed      	subs	r5, r5, r3
 8001ac8:	4545      	cmp	r5, r8
 8001aca:	dd0c      	ble.n	8001ae6 <_printf_common+0x7e>
 8001acc:	2301      	movs	r3, #1
 8001ace:	465a      	mov	r2, fp
 8001ad0:	4639      	mov	r1, r7
 8001ad2:	4630      	mov	r0, r6
 8001ad4:	47c8      	blx	r9
 8001ad6:	3001      	adds	r0, #1
 8001ad8:	f108 0801 	add.w	r8, r8, #1
 8001adc:	d1f0      	bne.n	8001ac0 <_printf_common+0x58>
 8001ade:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ae6:	6821      	ldr	r1, [r4, #0]
 8001ae8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001aec:	3b00      	subs	r3, #0
 8001aee:	bf18      	it	ne
 8001af0:	2301      	movne	r3, #1
 8001af2:	068a      	lsls	r2, r1, #26
 8001af4:	d50a      	bpl.n	8001b0c <_printf_common+0xa4>
 8001af6:	18e1      	adds	r1, r4, r3
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	2030      	movs	r0, #48	@ 0x30
 8001afc:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001b00:	4422      	add	r2, r4
 8001b02:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001b06:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001b10:	4639      	mov	r1, r7
 8001b12:	4630      	mov	r0, r6
 8001b14:	47c8      	blx	r9
 8001b16:	3001      	adds	r0, #1
 8001b18:	d0e1      	beq.n	8001ade <_printf_common+0x76>
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	f8da 5000 	ldr.w	r5, [sl]
 8001b20:	6921      	ldr	r1, [r4, #16]
 8001b22:	f003 0306 	and.w	r3, r3, #6
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8001b2c:	d01b      	beq.n	8001b66 <_printf_common+0xfe>
 8001b2e:	428a      	cmp	r2, r1
 8001b30:	dd20      	ble.n	8001b74 <_printf_common+0x10c>
 8001b32:	f04f 0800 	mov.w	r8, #0
 8001b36:	1a52      	subs	r2, r2, r1
 8001b38:	4490      	add	r8, r2
 8001b3a:	341a      	adds	r4, #26
 8001b3c:	2500      	movs	r5, #0
 8001b3e:	e001      	b.n	8001b44 <_printf_common+0xdc>
 8001b40:	4545      	cmp	r5, r8
 8001b42:	da17      	bge.n	8001b74 <_printf_common+0x10c>
 8001b44:	2301      	movs	r3, #1
 8001b46:	4622      	mov	r2, r4
 8001b48:	4639      	mov	r1, r7
 8001b4a:	4630      	mov	r0, r6
 8001b4c:	47c8      	blx	r9
 8001b4e:	3001      	adds	r0, #1
 8001b50:	f105 0501 	add.w	r5, r5, #1
 8001b54:	d1f4      	bne.n	8001b40 <_printf_common+0xd8>
 8001b56:	e7c2      	b.n	8001ade <_printf_common+0x76>
 8001b58:	f012 0f06 	tst.w	r2, #6
 8001b5c:	d00d      	beq.n	8001b7a <_printf_common+0x112>
 8001b5e:	3b00      	subs	r3, #0
 8001b60:	bf18      	it	ne
 8001b62:	2301      	movne	r3, #1
 8001b64:	e7d2      	b.n	8001b0c <_printf_common+0xa4>
 8001b66:	1b40      	subs	r0, r0, r5
 8001b68:	428a      	cmp	r2, r1
 8001b6a:	ea20 78e0 	bic.w	r8, r0, r0, asr #31
 8001b6e:	dce2      	bgt.n	8001b36 <_printf_common+0xce>
 8001b70:	2800      	cmp	r0, #0
 8001b72:	dce2      	bgt.n	8001b3a <_printf_common+0xd2>
 8001b74:	2000      	movs	r0, #0
 8001b76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b7a:	68e1      	ldr	r1, [r4, #12]
 8001b7c:	f8da 3000 	ldr.w	r3, [sl]
 8001b80:	4299      	cmp	r1, r3
 8001b82:	bfd8      	it	le
 8001b84:	4611      	movle	r1, r2
 8001b86:	dc96      	bgt.n	8001ab6 <_printf_common+0x4e>
 8001b88:	e7ae      	b.n	8001ae8 <_printf_common+0x80>
 8001b8a:	bf00      	nop

08001b8c <_printf_i>:
 8001b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b90:	460c      	mov	r4, r1
 8001b92:	b084      	sub	sp, #16
 8001b94:	4617      	mov	r7, r2
 8001b96:	7e22      	ldrb	r2, [r4, #24]
 8001b98:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001b9a:	4606      	mov	r6, r0
 8001b9c:	4698      	mov	r8, r3
 8001b9e:	f104 0c43 	add.w	ip, r4, #67	@ 0x43
 8001ba2:	2a00      	cmp	r2, #0
 8001ba4:	d035      	beq.n	8001c12 <_printf_i+0x86>
 8001ba6:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
 8001baa:	b2d8      	uxtb	r0, r3
 8001bac:	2820      	cmp	r0, #32
 8001bae:	d869      	bhi.n	8001c84 <_printf_i+0xf8>
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d867      	bhi.n	8001c84 <_printf_i+0xf8>
 8001bb4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001bb8:	006600e0 	.word	0x006600e0
 8001bbc:	00660066 	.word	0x00660066
 8001bc0:	00660066 	.word	0x00660066
 8001bc4:	00660066 	.word	0x00660066
 8001bc8:	00660066 	.word	0x00660066
 8001bcc:	00940066 	.word	0x00940066
 8001bd0:	00660070 	.word	0x00660070
 8001bd4:	00660066 	.word	0x00660066
 8001bd8:	00700066 	.word	0x00700066
 8001bdc:	00660066 	.word	0x00660066
 8001be0:	00660066 	.word	0x00660066
 8001be4:	00830021 	.word	0x00830021
 8001be8:	006600ae 	.word	0x006600ae
 8001bec:	009e0066 	.word	0x009e0066
 8001bf0:	00830066 	.word	0x00830066
 8001bf4:	00660066 	.word	0x00660066
 8001bf8:	00e6      	.short	0x00e6
 8001bfa:	680b      	ldr	r3, [r1, #0]
 8001bfc:	6822      	ldr	r2, [r4, #0]
 8001bfe:	6960      	ldr	r0, [r4, #20]
 8001c00:	1d1d      	adds	r5, r3, #4
 8001c02:	600d      	str	r5, [r1, #0]
 8001c04:	0611      	lsls	r1, r2, #24
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	d402      	bmi.n	8001c10 <_printf_i+0x84>
 8001c0a:	0652      	lsls	r2, r2, #25
 8001c0c:	f100 80dc 	bmi.w	8001dc8 <_printf_i+0x23c>
 8001c10:	6018      	str	r0, [r3, #0]
 8001c12:	2300      	movs	r3, #0
 8001c14:	46e1      	mov	r9, ip
 8001c16:	6123      	str	r3, [r4, #16]
 8001c18:	f8cd 8000 	str.w	r8, [sp]
 8001c1c:	463b      	mov	r3, r7
 8001c1e:	aa03      	add	r2, sp, #12
 8001c20:	4621      	mov	r1, r4
 8001c22:	4630      	mov	r0, r6
 8001c24:	f7ff ff20 	bl	8001a68 <_printf_common>
 8001c28:	3001      	adds	r0, #1
 8001c2a:	d020      	beq.n	8001c6e <_printf_i+0xe2>
 8001c2c:	6923      	ldr	r3, [r4, #16]
 8001c2e:	464a      	mov	r2, r9
 8001c30:	4639      	mov	r1, r7
 8001c32:	4630      	mov	r0, r6
 8001c34:	47c0      	blx	r8
 8001c36:	3001      	adds	r0, #1
 8001c38:	d019      	beq.n	8001c6e <_printf_i+0xe2>
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	68e0      	ldr	r0, [r4, #12]
 8001c3e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8001c42:	079b      	lsls	r3, r3, #30
 8001c44:	d518      	bpl.n	8001c78 <_printf_i+0xec>
 8001c46:	4548      	cmp	r0, r9
 8001c48:	dd16      	ble.n	8001c78 <_printf_i+0xec>
 8001c4a:	f104 0a19 	add.w	sl, r4, #25
 8001c4e:	2500      	movs	r5, #0
 8001c50:	e004      	b.n	8001c5c <_printf_i+0xd0>
 8001c52:	68e0      	ldr	r0, [r4, #12]
 8001c54:	eba0 0309 	sub.w	r3, r0, r9
 8001c58:	42ab      	cmp	r3, r5
 8001c5a:	dd0d      	ble.n	8001c78 <_printf_i+0xec>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	4652      	mov	r2, sl
 8001c60:	4639      	mov	r1, r7
 8001c62:	4630      	mov	r0, r6
 8001c64:	47c0      	blx	r8
 8001c66:	3001      	adds	r0, #1
 8001c68:	f105 0501 	add.w	r5, r5, #1
 8001c6c:	d1f1      	bne.n	8001c52 <_printf_i+0xc6>
 8001c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c72:	b004      	add	sp, #16
 8001c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c78:	4548      	cmp	r0, r9
 8001c7a:	bfb8      	it	lt
 8001c7c:	4648      	movlt	r0, r9
 8001c7e:	b004      	add	sp, #16
 8001c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c84:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 8001c88:	2001      	movs	r0, #1
 8001c8a:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 8001c8e:	2300      	movs	r3, #0
 8001c90:	6120      	str	r0, [r4, #16]
 8001c92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001c96:	e7bf      	b.n	8001c18 <_printf_i+0x8c>
 8001c98:	680a      	ldr	r2, [r1, #0]
 8001c9a:	6823      	ldr	r3, [r4, #0]
 8001c9c:	1d10      	adds	r0, r2, #4
 8001c9e:	6008      	str	r0, [r1, #0]
 8001ca0:	0618      	lsls	r0, r3, #24
 8001ca2:	d402      	bmi.n	8001caa <_printf_i+0x11e>
 8001ca4:	0659      	lsls	r1, r3, #25
 8001ca6:	f100 8093 	bmi.w	8001dd0 <_printf_i+0x244>
 8001caa:	6810      	ldr	r0, [r2, #0]
 8001cac:	4601      	mov	r1, r0
 8001cae:	2800      	cmp	r0, #0
 8001cb0:	6862      	ldr	r2, [r4, #4]
 8001cb2:	f2c0 8091 	blt.w	8001dd8 <_printf_i+0x24c>
 8001cb6:	4853      	ldr	r0, [pc, #332]	@ (8001e04 <_printf_i+0x278>)
 8001cb8:	f04f 0e0a 	mov.w	lr, #10
 8001cbc:	e04a      	b.n	8001d54 <_printf_i+0x1c8>
 8001cbe:	680b      	ldr	r3, [r1, #0]
 8001cc0:	6820      	ldr	r0, [r4, #0]
 8001cc2:	1d1d      	adds	r5, r3, #4
 8001cc4:	600d      	str	r5, [r1, #0]
 8001cc6:	0605      	lsls	r5, r0, #24
 8001cc8:	d401      	bmi.n	8001cce <_printf_i+0x142>
 8001cca:	0641      	lsls	r1, r0, #25
 8001ccc:	d47e      	bmi.n	8001dcc <_printf_i+0x240>
 8001cce:	6819      	ldr	r1, [r3, #0]
 8001cd0:	484c      	ldr	r0, [pc, #304]	@ (8001e04 <_printf_i+0x278>)
 8001cd2:	2a6f      	cmp	r2, #111	@ 0x6f
 8001cd4:	bf14      	ite	ne
 8001cd6:	f04f 0e0a 	movne.w	lr, #10
 8001cda:	f04f 0e08 	moveq.w	lr, #8
 8001cde:	e035      	b.n	8001d4c <_printf_i+0x1c0>
 8001ce0:	680b      	ldr	r3, [r1, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	600b      	str	r3, [r1, #0]
 8001ce8:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 8001cec:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	e7cc      	b.n	8001c8e <_printf_i+0x102>
 8001cf4:	680b      	ldr	r3, [r1, #0]
 8001cf6:	6862      	ldr	r2, [r4, #4]
 8001cf8:	1d18      	adds	r0, r3, #4
 8001cfa:	6008      	str	r0, [r1, #0]
 8001cfc:	f8d3 9000 	ldr.w	r9, [r3]
 8001d00:	2100      	movs	r1, #0
 8001d02:	4648      	mov	r0, r9
 8001d04:	f000 fc7c 	bl	8002600 <memchr>
 8001d08:	2800      	cmp	r0, #0
 8001d0a:	d079      	beq.n	8001e00 <_printf_i+0x274>
 8001d0c:	eba0 0009 	sub.w	r0, r0, r9
 8001d10:	6060      	str	r0, [r4, #4]
 8001d12:	e7bc      	b.n	8001c8e <_printf_i+0x102>
 8001d14:	6823      	ldr	r3, [r4, #0]
 8001d16:	f043 0320 	orr.w	r3, r3, #32
 8001d1a:	6023      	str	r3, [r4, #0]
 8001d1c:	2278      	movs	r2, #120	@ 0x78
 8001d1e:	483a      	ldr	r0, [pc, #232]	@ (8001e08 <_printf_i+0x27c>)
 8001d20:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 8001d24:	680a      	ldr	r2, [r1, #0]
 8001d26:	1d15      	adds	r5, r2, #4
 8001d28:	600d      	str	r5, [r1, #0]
 8001d2a:	061d      	lsls	r5, r3, #24
 8001d2c:	d44a      	bmi.n	8001dc4 <_printf_i+0x238>
 8001d2e:	0659      	lsls	r1, r3, #25
 8001d30:	d548      	bpl.n	8001dc4 <_printf_i+0x238>
 8001d32:	8811      	ldrh	r1, [r2, #0]
 8001d34:	07dd      	lsls	r5, r3, #31
 8001d36:	bf44      	itt	mi
 8001d38:	f043 0320 	orrmi.w	r3, r3, #32
 8001d3c:	6023      	strmi	r3, [r4, #0]
 8001d3e:	b919      	cbnz	r1, 8001d48 <_printf_i+0x1bc>
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	f023 0320 	bic.w	r3, r3, #32
 8001d46:	6023      	str	r3, [r4, #0]
 8001d48:	f04f 0e10 	mov.w	lr, #16
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	6862      	ldr	r2, [r4, #4]
 8001d50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d54:	2a00      	cmp	r2, #0
 8001d56:	60a2      	str	r2, [r4, #8]
 8001d58:	db16      	blt.n	8001d88 <_printf_i+0x1fc>
 8001d5a:	6823      	ldr	r3, [r4, #0]
 8001d5c:	f023 0304 	bic.w	r3, r3, #4
 8001d60:	6023      	str	r3, [r4, #0]
 8001d62:	b989      	cbnz	r1, 8001d88 <_printf_i+0x1fc>
 8001d64:	2a00      	cmp	r2, #0
 8001d66:	d145      	bne.n	8001df4 <_printf_i+0x268>
 8001d68:	46e1      	mov	r9, ip
 8001d6a:	f1be 0f08 	cmp.w	lr, #8
 8001d6e:	d01c      	beq.n	8001daa <_printf_i+0x21e>
 8001d70:	ebac 0309 	sub.w	r3, ip, r9
 8001d74:	6123      	str	r3, [r4, #16]
 8001d76:	e74f      	b.n	8001c18 <_printf_i+0x8c>
 8001d78:	2358      	movs	r3, #88	@ 0x58
 8001d7a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8001d7e:	4821      	ldr	r0, [pc, #132]	@ (8001e04 <_printf_i+0x278>)
 8001d80:	6823      	ldr	r3, [r4, #0]
 8001d82:	e7cf      	b.n	8001d24 <_printf_i+0x198>
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	e7c9      	b.n	8001d1c <_printf_i+0x190>
 8001d88:	4675      	mov	r5, lr
 8001d8a:	46e1      	mov	r9, ip
 8001d8c:	fbb1 f3f5 	udiv	r3, r1, r5
 8001d90:	fb05 1a13 	mls	sl, r5, r3, r1
 8001d94:	460a      	mov	r2, r1
 8001d96:	42aa      	cmp	r2, r5
 8001d98:	f810 100a 	ldrb.w	r1, [r0, sl]
 8001d9c:	f809 1d01 	strb.w	r1, [r9, #-1]!
 8001da0:	4619      	mov	r1, r3
 8001da2:	d2f3      	bcs.n	8001d8c <_printf_i+0x200>
 8001da4:	f1be 0f08 	cmp.w	lr, #8
 8001da8:	d1e2      	bne.n	8001d70 <_printf_i+0x1e4>
 8001daa:	6823      	ldr	r3, [r4, #0]
 8001dac:	07d8      	lsls	r0, r3, #31
 8001dae:	d5df      	bpl.n	8001d70 <_printf_i+0x1e4>
 8001db0:	6862      	ldr	r2, [r4, #4]
 8001db2:	6923      	ldr	r3, [r4, #16]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	dcdb      	bgt.n	8001d70 <_printf_i+0x1e4>
 8001db8:	2330      	movs	r3, #48	@ 0x30
 8001dba:	f809 3c01 	strb.w	r3, [r9, #-1]
 8001dbe:	f109 39ff 	add.w	r9, r9, #4294967295
 8001dc2:	e7d5      	b.n	8001d70 <_printf_i+0x1e4>
 8001dc4:	6811      	ldr	r1, [r2, #0]
 8001dc6:	e7b5      	b.n	8001d34 <_printf_i+0x1a8>
 8001dc8:	8018      	strh	r0, [r3, #0]
 8001dca:	e722      	b.n	8001c12 <_printf_i+0x86>
 8001dcc:	8819      	ldrh	r1, [r3, #0]
 8001dce:	e77f      	b.n	8001cd0 <_printf_i+0x144>
 8001dd0:	f9b2 1000 	ldrsh.w	r1, [r2]
 8001dd4:	4608      	mov	r0, r1
 8001dd6:	e76a      	b.n	8001cae <_printf_i+0x122>
 8001dd8:	202d      	movs	r0, #45	@ 0x2d
 8001dda:	2a00      	cmp	r2, #0
 8001ddc:	60a2      	str	r2, [r4, #8]
 8001dde:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
 8001de2:	db02      	blt.n	8001dea <_printf_i+0x25e>
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	6023      	str	r3, [r4, #0]
 8001dea:	250a      	movs	r5, #10
 8001dec:	4805      	ldr	r0, [pc, #20]	@ (8001e04 <_printf_i+0x278>)
 8001dee:	4249      	negs	r1, r1
 8001df0:	46ae      	mov	lr, r5
 8001df2:	e7ca      	b.n	8001d8a <_printf_i+0x1fe>
 8001df4:	7803      	ldrb	r3, [r0, #0]
 8001df6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001dfa:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 8001dfe:	e7b4      	b.n	8001d6a <_printf_i+0x1de>
 8001e00:	6860      	ldr	r0, [r4, #4]
 8001e02:	e744      	b.n	8001c8e <_printf_i+0x102>
 8001e04:	08003d08 	.word	0x08003d08
 8001e08:	08003d1c 	.word	0x08003d1c

08001e0c <__sfvwrite_r>:
 8001e0c:	6893      	ldr	r3, [r2, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 80f6 	beq.w	8002000 <__sfvwrite_r+0x1f4>
 8001e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e18:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
 8001e1c:	f01c 0f08 	tst.w	ip, #8
 8001e20:	b083      	sub	sp, #12
 8001e22:	4690      	mov	r8, r2
 8001e24:	4681      	mov	r9, r0
 8001e26:	460c      	mov	r4, r1
 8001e28:	d031      	beq.n	8001e8e <__sfvwrite_r+0x82>
 8001e2a:	690b      	ldr	r3, [r1, #16]
 8001e2c:	b37b      	cbz	r3, 8001e8e <__sfvwrite_r+0x82>
 8001e2e:	f01c 0702 	ands.w	r7, ip, #2
 8001e32:	f8d8 6000 	ldr.w	r6, [r8]
 8001e36:	d038      	beq.n	8001eaa <__sfvwrite_r+0x9e>
 8001e38:	2700      	movs	r7, #0
 8001e3a:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 8001e3e:	6a21      	ldr	r1, [r4, #32]
 8001e40:	f8df a2bc 	ldr.w	sl, [pc, #700]	@ 8002100 <__sfvwrite_r+0x2f4>
 8001e44:	463d      	mov	r5, r7
 8001e46:	4555      	cmp	r5, sl
 8001e48:	462b      	mov	r3, r5
 8001e4a:	463a      	mov	r2, r7
 8001e4c:	bf28      	it	cs
 8001e4e:	4653      	movcs	r3, sl
 8001e50:	4648      	mov	r0, r9
 8001e52:	b1c5      	cbz	r5, 8001e86 <__sfvwrite_r+0x7a>
 8001e54:	47d8      	blx	fp
 8001e56:	2800      	cmp	r0, #0
 8001e58:	f340 80c8 	ble.w	8001fec <__sfvwrite_r+0x1e0>
 8001e5c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001e60:	1a1b      	subs	r3, r3, r0
 8001e62:	4407      	add	r7, r0
 8001e64:	1a2d      	subs	r5, r5, r0
 8001e66:	f8c8 3008 	str.w	r3, [r8, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 80b4 	beq.w	8001fd8 <__sfvwrite_r+0x1cc>
 8001e70:	4555      	cmp	r5, sl
 8001e72:	462b      	mov	r3, r5
 8001e74:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 8001e78:	6a21      	ldr	r1, [r4, #32]
 8001e7a:	bf28      	it	cs
 8001e7c:	4653      	movcs	r3, sl
 8001e7e:	463a      	mov	r2, r7
 8001e80:	4648      	mov	r0, r9
 8001e82:	2d00      	cmp	r5, #0
 8001e84:	d1e6      	bne.n	8001e54 <__sfvwrite_r+0x48>
 8001e86:	e9d6 7500 	ldrd	r7, r5, [r6]
 8001e8a:	3608      	adds	r6, #8
 8001e8c:	e7db      	b.n	8001e46 <__sfvwrite_r+0x3a>
 8001e8e:	4621      	mov	r1, r4
 8001e90:	4648      	mov	r0, r9
 8001e92:	f000 f987 	bl	80021a4 <__swsetup_r>
 8001e96:	2800      	cmp	r0, #0
 8001e98:	f040 80ad 	bne.w	8001ff6 <__sfvwrite_r+0x1ea>
 8001e9c:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8001ea0:	f8d8 6000 	ldr.w	r6, [r8]
 8001ea4:	f01c 0702 	ands.w	r7, ip, #2
 8001ea8:	d1c6      	bne.n	8001e38 <__sfvwrite_r+0x2c>
 8001eaa:	f01c 0a01 	ands.w	sl, ip, #1
 8001eae:	d163      	bne.n	8001f78 <__sfvwrite_r+0x16c>
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	68a1      	ldr	r1, [r4, #8]
 8001eb4:	4657      	mov	r7, sl
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	468b      	mov	fp, r1
 8001eba:	2f00      	cmp	r7, #0
 8001ebc:	d058      	beq.n	8001f70 <__sfvwrite_r+0x164>
 8001ebe:	f41c 7f00 	tst.w	ip, #512	@ 0x200
 8001ec2:	f000 80b1 	beq.w	8002028 <__sfvwrite_r+0x21c>
 8001ec6:	42b9      	cmp	r1, r7
 8001ec8:	460a      	mov	r2, r1
 8001eca:	f200 80dd 	bhi.w	8002088 <__sfvwrite_r+0x27c>
 8001ece:	f41c 6f90 	tst.w	ip, #1152	@ 0x480
 8001ed2:	d02f      	beq.n	8001f34 <__sfvwrite_r+0x128>
 8001ed4:	6921      	ldr	r1, [r4, #16]
 8001ed6:	6962      	ldr	r2, [r4, #20]
 8001ed8:	1a5d      	subs	r5, r3, r1
 8001eda:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001ede:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8001ee2:	1c6b      	adds	r3, r5, #1
 8001ee4:	1052      	asrs	r2, r2, #1
 8001ee6:	443b      	add	r3, r7
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	bf92      	itee	ls
 8001eec:	4693      	movls	fp, r2
 8001eee:	469b      	movhi	fp, r3
 8001ef0:	461a      	movhi	r2, r3
 8001ef2:	f41c 6f80 	tst.w	ip, #1024	@ 0x400
 8001ef6:	f000 80e6 	beq.w	80020c6 <__sfvwrite_r+0x2ba>
 8001efa:	4611      	mov	r1, r2
 8001efc:	4648      	mov	r0, r9
 8001efe:	f7fe fe25 	bl	8000b4c <_malloc_r>
 8001f02:	2800      	cmp	r0, #0
 8001f04:	f000 80f5 	beq.w	80020f2 <__sfvwrite_r+0x2e6>
 8001f08:	462a      	mov	r2, r5
 8001f0a:	6921      	ldr	r1, [r4, #16]
 8001f0c:	9001      	str	r0, [sp, #4]
 8001f0e:	f7ff f9f3 	bl	80012f8 <memcpy>
 8001f12:	89a2      	ldrh	r2, [r4, #12]
 8001f14:	9b01      	ldr	r3, [sp, #4]
 8001f16:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8001f1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f1e:	81a2      	strh	r2, [r4, #12]
 8001f20:	1958      	adds	r0, r3, r5
 8001f22:	ebab 0505 	sub.w	r5, fp, r5
 8001f26:	f8c4 b014 	str.w	fp, [r4, #20]
 8001f2a:	6123      	str	r3, [r4, #16]
 8001f2c:	60a5      	str	r5, [r4, #8]
 8001f2e:	6020      	str	r0, [r4, #0]
 8001f30:	46bb      	mov	fp, r7
 8001f32:	463a      	mov	r2, r7
 8001f34:	4651      	mov	r1, sl
 8001f36:	9201      	str	r2, [sp, #4]
 8001f38:	f000 f994 	bl	8002264 <memmove>
 8001f3c:	68a1      	ldr	r1, [r4, #8]
 8001f3e:	6823      	ldr	r3, [r4, #0]
 8001f40:	9a01      	ldr	r2, [sp, #4]
 8001f42:	eba1 010b 	sub.w	r1, r1, fp
 8001f46:	441a      	add	r2, r3
 8001f48:	463d      	mov	r5, r7
 8001f4a:	60a1      	str	r1, [r4, #8]
 8001f4c:	6022      	str	r2, [r4, #0]
 8001f4e:	2700      	movs	r7, #0
 8001f50:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001f54:	1b5b      	subs	r3, r3, r5
 8001f56:	44aa      	add	sl, r5
 8001f58:	f8c8 3008 	str.w	r3, [r8, #8]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d03b      	beq.n	8001fd8 <__sfvwrite_r+0x1cc>
 8001f60:	6823      	ldr	r3, [r4, #0]
 8001f62:	68a1      	ldr	r1, [r4, #8]
 8001f64:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	468b      	mov	fp, r1
 8001f6c:	2f00      	cmp	r7, #0
 8001f6e:	d1a6      	bne.n	8001ebe <__sfvwrite_r+0xb2>
 8001f70:	e9d6 a700 	ldrd	sl, r7, [r6]
 8001f74:	3608      	adds	r6, #8
 8001f76:	e79e      	b.n	8001eb6 <__sfvwrite_r+0xaa>
 8001f78:	4638      	mov	r0, r7
 8001f7a:	46bb      	mov	fp, r7
 8001f7c:	463d      	mov	r5, r7
 8001f7e:	2d00      	cmp	r5, #0
 8001f80:	d040      	beq.n	8002004 <__sfvwrite_r+0x1f8>
 8001f82:	2800      	cmp	r0, #0
 8001f84:	d045      	beq.n	8002012 <__sfvwrite_r+0x206>
 8001f86:	463a      	mov	r2, r7
 8001f88:	e9d4 c304 	ldrd	ip, r3, [r4, #16]
 8001f8c:	6820      	ldr	r0, [r4, #0]
 8001f8e:	68a1      	ldr	r1, [r4, #8]
 8001f90:	42aa      	cmp	r2, r5
 8001f92:	bf28      	it	cs
 8001f94:	462a      	movcs	r2, r5
 8001f96:	4560      	cmp	r0, ip
 8001f98:	d904      	bls.n	8001fa4 <__sfvwrite_r+0x198>
 8001f9a:	eb01 0a03 	add.w	sl, r1, r3
 8001f9e:	4552      	cmp	r2, sl
 8001fa0:	f300 8082 	bgt.w	80020a8 <__sfvwrite_r+0x29c>
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	dc72      	bgt.n	800208e <__sfvwrite_r+0x282>
 8001fa8:	6a21      	ldr	r1, [r4, #32]
 8001faa:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001fae:	465a      	mov	r2, fp
 8001fb0:	4648      	mov	r0, r9
 8001fb2:	47e0      	blx	ip
 8001fb4:	f1b0 0a00 	subs.w	sl, r0, #0
 8001fb8:	dd18      	ble.n	8001fec <__sfvwrite_r+0x1e0>
 8001fba:	ebb7 070a 	subs.w	r7, r7, sl
 8001fbe:	d00f      	beq.n	8001fe0 <__sfvwrite_r+0x1d4>
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001fc6:	eba3 030a 	sub.w	r3, r3, sl
 8001fca:	44d3      	add	fp, sl
 8001fcc:	eba5 050a 	sub.w	r5, r5, sl
 8001fd0:	f8c8 3008 	str.w	r3, [r8, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1d2      	bne.n	8001f7e <__sfvwrite_r+0x172>
 8001fd8:	2000      	movs	r0, #0
 8001fda:	b003      	add	sp, #12
 8001fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fe0:	4621      	mov	r1, r4
 8001fe2:	4648      	mov	r0, r9
 8001fe4:	f7ff fb2e 	bl	8001644 <_fflush_r>
 8001fe8:	2800      	cmp	r0, #0
 8001fea:	d0ea      	beq.n	8001fc2 <__sfvwrite_r+0x1b6>
 8001fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ff0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ff4:	81a3      	strh	r3, [r4, #12]
 8001ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffa:	b003      	add	sp, #12
 8001ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002000:	2000      	movs	r0, #0
 8002002:	4770      	bx	lr
 8002004:	6875      	ldr	r5, [r6, #4]
 8002006:	4633      	mov	r3, r6
 8002008:	3608      	adds	r6, #8
 800200a:	2d00      	cmp	r5, #0
 800200c:	d0fa      	beq.n	8002004 <__sfvwrite_r+0x1f8>
 800200e:	f8d3 b000 	ldr.w	fp, [r3]
 8002012:	462a      	mov	r2, r5
 8002014:	210a      	movs	r1, #10
 8002016:	4658      	mov	r0, fp
 8002018:	f000 faf2 	bl	8002600 <memchr>
 800201c:	2800      	cmp	r0, #0
 800201e:	d065      	beq.n	80020ec <__sfvwrite_r+0x2e0>
 8002020:	3001      	adds	r0, #1
 8002022:	eba0 070b 	sub.w	r7, r0, fp
 8002026:	e7ae      	b.n	8001f86 <__sfvwrite_r+0x17a>
 8002028:	6922      	ldr	r2, [r4, #16]
 800202a:	429a      	cmp	r2, r3
 800202c:	d314      	bcc.n	8002058 <__sfvwrite_r+0x24c>
 800202e:	6962      	ldr	r2, [r4, #20]
 8002030:	42ba      	cmp	r2, r7
 8002032:	d811      	bhi.n	8002058 <__sfvwrite_r+0x24c>
 8002034:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8002038:	42bb      	cmp	r3, r7
 800203a:	bf28      	it	cs
 800203c:	463b      	movcs	r3, r7
 800203e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8002040:	fb93 f3f2 	sdiv	r3, r3, r2
 8002044:	6a21      	ldr	r1, [r4, #32]
 8002046:	fb02 f303 	mul.w	r3, r2, r3
 800204a:	4648      	mov	r0, r9
 800204c:	4652      	mov	r2, sl
 800204e:	47a8      	blx	r5
 8002050:	1e05      	subs	r5, r0, #0
 8002052:	ddcb      	ble.n	8001fec <__sfvwrite_r+0x1e0>
 8002054:	1b7f      	subs	r7, r7, r5
 8002056:	e77b      	b.n	8001f50 <__sfvwrite_r+0x144>
 8002058:	42b9      	cmp	r1, r7
 800205a:	bf28      	it	cs
 800205c:	4639      	movcs	r1, r7
 800205e:	460d      	mov	r5, r1
 8002060:	4618      	mov	r0, r3
 8002062:	460a      	mov	r2, r1
 8002064:	4651      	mov	r1, sl
 8002066:	f000 f8fd 	bl	8002264 <memmove>
 800206a:	68a1      	ldr	r1, [r4, #8]
 800206c:	6823      	ldr	r3, [r4, #0]
 800206e:	1b49      	subs	r1, r1, r5
 8002070:	442b      	add	r3, r5
 8002072:	60a1      	str	r1, [r4, #8]
 8002074:	6023      	str	r3, [r4, #0]
 8002076:	2900      	cmp	r1, #0
 8002078:	d1ec      	bne.n	8002054 <__sfvwrite_r+0x248>
 800207a:	4621      	mov	r1, r4
 800207c:	4648      	mov	r0, r9
 800207e:	f7ff fae1 	bl	8001644 <_fflush_r>
 8002082:	2800      	cmp	r0, #0
 8002084:	d0e6      	beq.n	8002054 <__sfvwrite_r+0x248>
 8002086:	e7b1      	b.n	8001fec <__sfvwrite_r+0x1e0>
 8002088:	46bb      	mov	fp, r7
 800208a:	463a      	mov	r2, r7
 800208c:	e752      	b.n	8001f34 <__sfvwrite_r+0x128>
 800208e:	4659      	mov	r1, fp
 8002090:	9201      	str	r2, [sp, #4]
 8002092:	f000 f8e7 	bl	8002264 <memmove>
 8002096:	9a01      	ldr	r2, [sp, #4]
 8002098:	68a3      	ldr	r3, [r4, #8]
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	60a3      	str	r3, [r4, #8]
 800209e:	6823      	ldr	r3, [r4, #0]
 80020a0:	4413      	add	r3, r2
 80020a2:	6023      	str	r3, [r4, #0]
 80020a4:	4692      	mov	sl, r2
 80020a6:	e788      	b.n	8001fba <__sfvwrite_r+0x1ae>
 80020a8:	4659      	mov	r1, fp
 80020aa:	4652      	mov	r2, sl
 80020ac:	f000 f8da 	bl	8002264 <memmove>
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	4453      	add	r3, sl
 80020b4:	6023      	str	r3, [r4, #0]
 80020b6:	4621      	mov	r1, r4
 80020b8:	4648      	mov	r0, r9
 80020ba:	f7ff fac3 	bl	8001644 <_fflush_r>
 80020be:	2800      	cmp	r0, #0
 80020c0:	f43f af7b 	beq.w	8001fba <__sfvwrite_r+0x1ae>
 80020c4:	e792      	b.n	8001fec <__sfvwrite_r+0x1e0>
 80020c6:	4648      	mov	r0, r9
 80020c8:	f000 faea 	bl	80026a0 <_realloc_r>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2800      	cmp	r0, #0
 80020d0:	f47f af26 	bne.w	8001f20 <__sfvwrite_r+0x114>
 80020d4:	6921      	ldr	r1, [r4, #16]
 80020d6:	4648      	mov	r0, r9
 80020d8:	f7ff f9ce 	bl	8001478 <_free_r>
 80020dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020e0:	220c      	movs	r2, #12
 80020e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020e6:	f8c9 2000 	str.w	r2, [r9]
 80020ea:	e781      	b.n	8001ff0 <__sfvwrite_r+0x1e4>
 80020ec:	1c6a      	adds	r2, r5, #1
 80020ee:	4617      	mov	r7, r2
 80020f0:	e74a      	b.n	8001f88 <__sfvwrite_r+0x17c>
 80020f2:	220c      	movs	r2, #12
 80020f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020f8:	f8c9 2000 	str.w	r2, [r9]
 80020fc:	e778      	b.n	8001ff0 <__sfvwrite_r+0x1e4>
 80020fe:	bf00      	nop
 8002100:	7ffffc00 	.word	0x7ffffc00

08002104 <__swbuf_r>:
 8002104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002106:	460d      	mov	r5, r1
 8002108:	4614      	mov	r4, r2
 800210a:	4606      	mov	r6, r0
 800210c:	b110      	cbz	r0, 8002114 <__swbuf_r+0x10>
 800210e:	6a03      	ldr	r3, [r0, #32]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d037      	beq.n	8002184 <__swbuf_r+0x80>
 8002114:	89a3      	ldrh	r3, [r4, #12]
 8002116:	69a2      	ldr	r2, [r4, #24]
 8002118:	60a2      	str	r2, [r4, #8]
 800211a:	071a      	lsls	r2, r3, #28
 800211c:	d519      	bpl.n	8002152 <__swbuf_r+0x4e>
 800211e:	6923      	ldr	r3, [r4, #16]
 8002120:	b1bb      	cbz	r3, 8002152 <__swbuf_r+0x4e>
 8002122:	6822      	ldr	r2, [r4, #0]
 8002124:	6961      	ldr	r1, [r4, #20]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	b2ed      	uxtb	r5, r5
 800212a:	4299      	cmp	r1, r3
 800212c:	462f      	mov	r7, r5
 800212e:	dd20      	ble.n	8002172 <__swbuf_r+0x6e>
 8002130:	3301      	adds	r3, #1
 8002132:	68a1      	ldr	r1, [r4, #8]
 8002134:	3901      	subs	r1, #1
 8002136:	60a1      	str	r1, [r4, #8]
 8002138:	1c51      	adds	r1, r2, #1
 800213a:	6021      	str	r1, [r4, #0]
 800213c:	7015      	strb	r5, [r2, #0]
 800213e:	6962      	ldr	r2, [r4, #20]
 8002140:	429a      	cmp	r2, r3
 8002142:	d00d      	beq.n	8002160 <__swbuf_r+0x5c>
 8002144:	89a3      	ldrh	r3, [r4, #12]
 8002146:	07db      	lsls	r3, r3, #31
 8002148:	d501      	bpl.n	800214e <__swbuf_r+0x4a>
 800214a:	2d0a      	cmp	r5, #10
 800214c:	d008      	beq.n	8002160 <__swbuf_r+0x5c>
 800214e:	4638      	mov	r0, r7
 8002150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002152:	4621      	mov	r1, r4
 8002154:	4630      	mov	r0, r6
 8002156:	f000 f825 	bl	80021a4 <__swsetup_r>
 800215a:	b938      	cbnz	r0, 800216c <__swbuf_r+0x68>
 800215c:	6923      	ldr	r3, [r4, #16]
 800215e:	e7e0      	b.n	8002122 <__swbuf_r+0x1e>
 8002160:	4621      	mov	r1, r4
 8002162:	4630      	mov	r0, r6
 8002164:	f7ff fa6e 	bl	8001644 <_fflush_r>
 8002168:	2800      	cmp	r0, #0
 800216a:	d0f0      	beq.n	800214e <__swbuf_r+0x4a>
 800216c:	f04f 37ff 	mov.w	r7, #4294967295
 8002170:	e7ed      	b.n	800214e <__swbuf_r+0x4a>
 8002172:	4621      	mov	r1, r4
 8002174:	4630      	mov	r0, r6
 8002176:	f7ff fa65 	bl	8001644 <_fflush_r>
 800217a:	2800      	cmp	r0, #0
 800217c:	d1f6      	bne.n	800216c <__swbuf_r+0x68>
 800217e:	6822      	ldr	r2, [r4, #0]
 8002180:	2301      	movs	r3, #1
 8002182:	e7d6      	b.n	8002132 <__swbuf_r+0x2e>
 8002184:	f7fe ff00 	bl	8000f88 <__sinit>
 8002188:	e7c4      	b.n	8002114 <__swbuf_r+0x10>
 800218a:	bf00      	nop

0800218c <__swbuf>:
 800218c:	b410      	push	{r4}
 800218e:	4c04      	ldr	r4, [pc, #16]	@ (80021a0 <__swbuf+0x14>)
 8002190:	4603      	mov	r3, r0
 8002192:	460a      	mov	r2, r1
 8002194:	6820      	ldr	r0, [r4, #0]
 8002196:	bc10      	pop	{r4}
 8002198:	4619      	mov	r1, r3
 800219a:	f7ff bfb3 	b.w	8002104 <__swbuf_r>
 800219e:	bf00      	nop
 80021a0:	2000001c 	.word	0x2000001c

080021a4 <__swsetup_r>:
 80021a4:	b538      	push	{r3, r4, r5, lr}
 80021a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002260 <__swsetup_r+0xbc>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4605      	mov	r5, r0
 80021ac:	460c      	mov	r4, r1
 80021ae:	b113      	cbz	r3, 80021b6 <__swsetup_r+0x12>
 80021b0:	6a1a      	ldr	r2, [r3, #32]
 80021b2:	2a00      	cmp	r2, #0
 80021b4:	d04b      	beq.n	800224e <__swsetup_r+0xaa>
 80021b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021ba:	0718      	lsls	r0, r3, #28
 80021bc:	d51c      	bpl.n	80021f8 <__swsetup_r+0x54>
 80021be:	6922      	ldr	r2, [r4, #16]
 80021c0:	b322      	cbz	r2, 800220c <__swsetup_r+0x68>
 80021c2:	f013 0101 	ands.w	r1, r3, #1
 80021c6:	d007      	beq.n	80021d8 <__swsetup_r+0x34>
 80021c8:	6961      	ldr	r1, [r4, #20]
 80021ca:	2000      	movs	r0, #0
 80021cc:	4249      	negs	r1, r1
 80021ce:	60a0      	str	r0, [r4, #8]
 80021d0:	61a1      	str	r1, [r4, #24]
 80021d2:	b13a      	cbz	r2, 80021e4 <__swsetup_r+0x40>
 80021d4:	2000      	movs	r0, #0
 80021d6:	bd38      	pop	{r3, r4, r5, pc}
 80021d8:	0798      	lsls	r0, r3, #30
 80021da:	bf58      	it	pl
 80021dc:	6961      	ldrpl	r1, [r4, #20]
 80021de:	60a1      	str	r1, [r4, #8]
 80021e0:	2a00      	cmp	r2, #0
 80021e2:	d1f7      	bne.n	80021d4 <__swsetup_r+0x30>
 80021e4:	0619      	lsls	r1, r3, #24
 80021e6:	bf58      	it	pl
 80021e8:	4610      	movpl	r0, r2
 80021ea:	d5f4      	bpl.n	80021d6 <__swsetup_r+0x32>
 80021ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021f0:	81a3      	strh	r3, [r4, #12]
 80021f2:	f04f 30ff 	mov.w	r0, #4294967295
 80021f6:	bd38      	pop	{r3, r4, r5, pc}
 80021f8:	06d9      	lsls	r1, r3, #27
 80021fa:	d52c      	bpl.n	8002256 <__swsetup_r+0xb2>
 80021fc:	075a      	lsls	r2, r3, #29
 80021fe:	d412      	bmi.n	8002226 <__swsetup_r+0x82>
 8002200:	6922      	ldr	r2, [r4, #16]
 8002202:	f043 0308 	orr.w	r3, r3, #8
 8002206:	81a3      	strh	r3, [r4, #12]
 8002208:	2a00      	cmp	r2, #0
 800220a:	d1da      	bne.n	80021c2 <__swsetup_r+0x1e>
 800220c:	f403 7120 	and.w	r1, r3, #640	@ 0x280
 8002210:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8002214:	d0d5      	beq.n	80021c2 <__swsetup_r+0x1e>
 8002216:	4621      	mov	r1, r4
 8002218:	4628      	mov	r0, r5
 800221a:	f000 fa75 	bl	8002708 <__smakebuf_r>
 800221e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002222:	6922      	ldr	r2, [r4, #16]
 8002224:	e7cd      	b.n	80021c2 <__swsetup_r+0x1e>
 8002226:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002228:	b151      	cbz	r1, 8002240 <__swsetup_r+0x9c>
 800222a:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800222e:	4291      	cmp	r1, r2
 8002230:	d004      	beq.n	800223c <__swsetup_r+0x98>
 8002232:	4628      	mov	r0, r5
 8002234:	f7ff f920 	bl	8001478 <_free_r>
 8002238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	6362      	str	r2, [r4, #52]	@ 0x34
 8002240:	6922      	ldr	r2, [r4, #16]
 8002242:	2100      	movs	r1, #0
 8002244:	e9c4 2100 	strd	r2, r1, [r4]
 8002248:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800224c:	e7d9      	b.n	8002202 <__swsetup_r+0x5e>
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe fe9a 	bl	8000f88 <__sinit>
 8002254:	e7af      	b.n	80021b6 <__swsetup_r+0x12>
 8002256:	2209      	movs	r2, #9
 8002258:	602a      	str	r2, [r5, #0]
 800225a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800225e:	e7c7      	b.n	80021f0 <__swsetup_r+0x4c>
 8002260:	2000001c 	.word	0x2000001c

08002264 <memmove>:
 8002264:	4288      	cmp	r0, r1
 8002266:	d90e      	bls.n	8002286 <memmove+0x22>
 8002268:	188b      	adds	r3, r1, r2
 800226a:	4283      	cmp	r3, r0
 800226c:	d90b      	bls.n	8002286 <memmove+0x22>
 800226e:	eb00 0c02 	add.w	ip, r0, r2
 8002272:	2a00      	cmp	r2, #0
 8002274:	d06e      	beq.n	8002354 <memmove+0xf0>
 8002276:	4662      	mov	r2, ip
 8002278:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 800227c:	f802 cd01 	strb.w	ip, [r2, #-1]!
 8002280:	4299      	cmp	r1, r3
 8002282:	d1f9      	bne.n	8002278 <memmove+0x14>
 8002284:	4770      	bx	lr
 8002286:	2a0f      	cmp	r2, #15
 8002288:	d80f      	bhi.n	80022aa <memmove+0x46>
 800228a:	4603      	mov	r3, r0
 800228c:	f102 3cff 	add.w	ip, r2, #4294967295
 8002290:	2a00      	cmp	r2, #0
 8002292:	d05f      	beq.n	8002354 <memmove+0xf0>
 8002294:	f10c 0c01 	add.w	ip, ip, #1
 8002298:	3b01      	subs	r3, #1
 800229a:	448c      	add	ip, r1
 800229c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80022a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80022a4:	4561      	cmp	r1, ip
 80022a6:	d1f9      	bne.n	800229c <memmove+0x38>
 80022a8:	4770      	bx	lr
 80022aa:	ea40 0301 	orr.w	r3, r0, r1
 80022ae:	079b      	lsls	r3, r3, #30
 80022b0:	d151      	bne.n	8002356 <memmove+0xf2>
 80022b2:	f1a2 0310 	sub.w	r3, r2, #16
 80022b6:	b570      	push	{r4, r5, r6, lr}
 80022b8:	f101 0c20 	add.w	ip, r1, #32
 80022bc:	f023 050f 	bic.w	r5, r3, #15
 80022c0:	f101 0e10 	add.w	lr, r1, #16
 80022c4:	f100 0410 	add.w	r4, r0, #16
 80022c8:	44ac      	add	ip, r5
 80022ca:	091b      	lsrs	r3, r3, #4
 80022cc:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 80022d0:	f844 5c10 	str.w	r5, [r4, #-16]
 80022d4:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 80022d8:	f844 5c0c 	str.w	r5, [r4, #-12]
 80022dc:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 80022e0:	f844 5c08 	str.w	r5, [r4, #-8]
 80022e4:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 80022e8:	f844 5c04 	str.w	r5, [r4, #-4]
 80022ec:	f10e 0e10 	add.w	lr, lr, #16
 80022f0:	45e6      	cmp	lr, ip
 80022f2:	f104 0410 	add.w	r4, r4, #16
 80022f6:	d1e9      	bne.n	80022cc <memmove+0x68>
 80022f8:	3301      	adds	r3, #1
 80022fa:	f012 0f0c 	tst.w	r2, #12
 80022fe:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8002302:	f002 040f 	and.w	r4, r2, #15
 8002306:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 800230a:	d028      	beq.n	800235e <memmove+0xfa>
 800230c:	3c04      	subs	r4, #4
 800230e:	f024 0603 	bic.w	r6, r4, #3
 8002312:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 8002316:	441e      	add	r6, r3
 8002318:	1f1c      	subs	r4, r3, #4
 800231a:	468e      	mov	lr, r1
 800231c:	f85e 5b04 	ldr.w	r5, [lr], #4
 8002320:	f844 5f04 	str.w	r5, [r4, #4]!
 8002324:	42b4      	cmp	r4, r6
 8002326:	d1f9      	bne.n	800231c <memmove+0xb8>
 8002328:	f10c 0401 	add.w	r4, ip, #1
 800232c:	f002 0203 	and.w	r2, r2, #3
 8002330:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002334:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8002338:	f102 3cff 	add.w	ip, r2, #4294967295
 800233c:	b14a      	cbz	r2, 8002352 <memmove+0xee>
 800233e:	f10c 0c01 	add.w	ip, ip, #1
 8002342:	3b01      	subs	r3, #1
 8002344:	448c      	add	ip, r1
 8002346:	f811 2b01 	ldrb.w	r2, [r1], #1
 800234a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800234e:	4561      	cmp	r1, ip
 8002350:	d1f9      	bne.n	8002346 <memmove+0xe2>
 8002352:	bd70      	pop	{r4, r5, r6, pc}
 8002354:	4770      	bx	lr
 8002356:	f102 3cff 	add.w	ip, r2, #4294967295
 800235a:	4603      	mov	r3, r0
 800235c:	e79a      	b.n	8002294 <memmove+0x30>
 800235e:	4622      	mov	r2, r4
 8002360:	e7ea      	b.n	8002338 <memmove+0xd4>
 8002362:	bf00      	nop

08002364 <_init_signal_r>:
 8002364:	b538      	push	{r3, r4, r5, lr}
 8002366:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8002368:	b10c      	cbz	r4, 800236e <_init_signal_r+0xa>
 800236a:	2000      	movs	r0, #0
 800236c:	bd38      	pop	{r3, r4, r5, pc}
 800236e:	2180      	movs	r1, #128	@ 0x80
 8002370:	4605      	mov	r5, r0
 8002372:	f7fe fbeb 	bl	8000b4c <_malloc_r>
 8002376:	4602      	mov	r2, r0
 8002378:	63e8      	str	r0, [r5, #60]	@ 0x3c
 800237a:	b130      	cbz	r0, 800238a <_init_signal_r+0x26>
 800237c:	1f03      	subs	r3, r0, #4
 800237e:	327c      	adds	r2, #124	@ 0x7c
 8002380:	f843 4f04 	str.w	r4, [r3, #4]!
 8002384:	4293      	cmp	r3, r2
 8002386:	d1fb      	bne.n	8002380 <_init_signal_r+0x1c>
 8002388:	e7ef      	b.n	800236a <_init_signal_r+0x6>
 800238a:	f04f 30ff 	mov.w	r0, #4294967295
 800238e:	bd38      	pop	{r3, r4, r5, pc}

08002390 <_signal_r>:
 8002390:	b530      	push	{r4, r5, lr}
 8002392:	291f      	cmp	r1, #31
 8002394:	b083      	sub	sp, #12
 8002396:	4605      	mov	r5, r0
 8002398:	d808      	bhi.n	80023ac <_signal_r+0x1c>
 800239a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800239c:	460c      	mov	r4, r1
 800239e:	b153      	cbz	r3, 80023b6 <_signal_r+0x26>
 80023a0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80023a4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80023a8:	b003      	add	sp, #12
 80023aa:	bd30      	pop	{r4, r5, pc}
 80023ac:	2316      	movs	r3, #22
 80023ae:	6003      	str	r3, [r0, #0]
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295
 80023b4:	e7f8      	b.n	80023a8 <_signal_r+0x18>
 80023b6:	2180      	movs	r1, #128	@ 0x80
 80023b8:	9201      	str	r2, [sp, #4]
 80023ba:	f7fe fbc7 	bl	8000b4c <_malloc_r>
 80023be:	9a01      	ldr	r2, [sp, #4]
 80023c0:	63e8      	str	r0, [r5, #60]	@ 0x3c
 80023c2:	4603      	mov	r3, r0
 80023c4:	2800      	cmp	r0, #0
 80023c6:	d0f3      	beq.n	80023b0 <_signal_r+0x20>
 80023c8:	1f01      	subs	r1, r0, #4
 80023ca:	f100 057c 	add.w	r5, r0, #124	@ 0x7c
 80023ce:	2000      	movs	r0, #0
 80023d0:	f841 0f04 	str.w	r0, [r1, #4]!
 80023d4:	42a9      	cmp	r1, r5
 80023d6:	d1fb      	bne.n	80023d0 <_signal_r+0x40>
 80023d8:	e7e2      	b.n	80023a0 <_signal_r+0x10>
 80023da:	bf00      	nop

080023dc <_raise_r>:
 80023dc:	291f      	cmp	r1, #31
 80023de:	b538      	push	{r3, r4, r5, lr}
 80023e0:	4605      	mov	r5, r0
 80023e2:	d81e      	bhi.n	8002422 <_raise_r+0x46>
 80023e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80023e6:	460c      	mov	r4, r1
 80023e8:	b16a      	cbz	r2, 8002406 <_raise_r+0x2a>
 80023ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80023ee:	b153      	cbz	r3, 8002406 <_raise_r+0x2a>
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d006      	beq.n	8002402 <_raise_r+0x26>
 80023f4:	1c59      	adds	r1, r3, #1
 80023f6:	d010      	beq.n	800241a <_raise_r+0x3e>
 80023f8:	2100      	movs	r1, #0
 80023fa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80023fe:	4620      	mov	r0, r4
 8002400:	4798      	blx	r3
 8002402:	2000      	movs	r0, #0
 8002404:	bd38      	pop	{r3, r4, r5, pc}
 8002406:	4628      	mov	r0, r5
 8002408:	f000 f8f2 	bl	80025f0 <_getpid_r>
 800240c:	4622      	mov	r2, r4
 800240e:	4601      	mov	r1, r0
 8002410:	4628      	mov	r0, r5
 8002412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002416:	f000 b8d5 	b.w	80025c4 <_kill_r>
 800241a:	2316      	movs	r3, #22
 800241c:	6003      	str	r3, [r0, #0]
 800241e:	2001      	movs	r0, #1
 8002420:	bd38      	pop	{r3, r4, r5, pc}
 8002422:	2316      	movs	r3, #22
 8002424:	6003      	str	r3, [r0, #0]
 8002426:	f04f 30ff 	mov.w	r0, #4294967295
 800242a:	bd38      	pop	{r3, r4, r5, pc}

0800242c <__sigtramp_r>:
 800242c:	291f      	cmp	r1, #31
 800242e:	d82a      	bhi.n	8002486 <__sigtramp_r+0x5a>
 8002430:	b538      	push	{r3, r4, r5, lr}
 8002432:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002434:	460c      	mov	r4, r1
 8002436:	4605      	mov	r5, r0
 8002438:	b1a3      	cbz	r3, 8002464 <__sigtramp_r+0x38>
 800243a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 800243e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002442:	b14a      	cbz	r2, 8002458 <__sigtramp_r+0x2c>
 8002444:	1c51      	adds	r1, r2, #1
 8002446:	d00b      	beq.n	8002460 <__sigtramp_r+0x34>
 8002448:	2a01      	cmp	r2, #1
 800244a:	d007      	beq.n	800245c <__sigtramp_r+0x30>
 800244c:	2500      	movs	r5, #0
 800244e:	4620      	mov	r0, r4
 8002450:	601d      	str	r5, [r3, #0]
 8002452:	4790      	blx	r2
 8002454:	4628      	mov	r0, r5
 8002456:	bd38      	pop	{r3, r4, r5, pc}
 8002458:	2001      	movs	r0, #1
 800245a:	bd38      	pop	{r3, r4, r5, pc}
 800245c:	2003      	movs	r0, #3
 800245e:	bd38      	pop	{r3, r4, r5, pc}
 8002460:	2002      	movs	r0, #2
 8002462:	bd38      	pop	{r3, r4, r5, pc}
 8002464:	2180      	movs	r1, #128	@ 0x80
 8002466:	f7fe fb71 	bl	8000b4c <_malloc_r>
 800246a:	4603      	mov	r3, r0
 800246c:	63e8      	str	r0, [r5, #60]	@ 0x3c
 800246e:	b138      	cbz	r0, 8002480 <__sigtramp_r+0x54>
 8002470:	1f02      	subs	r2, r0, #4
 8002472:	2100      	movs	r1, #0
 8002474:	307c      	adds	r0, #124	@ 0x7c
 8002476:	f842 1f04 	str.w	r1, [r2, #4]!
 800247a:	4290      	cmp	r0, r2
 800247c:	d1fb      	bne.n	8002476 <__sigtramp_r+0x4a>
 800247e:	e7dc      	b.n	800243a <__sigtramp_r+0xe>
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	bd38      	pop	{r3, r4, r5, pc}
 8002486:	f04f 30ff 	mov.w	r0, #4294967295
 800248a:	4770      	bx	lr

0800248c <raise>:
 800248c:	b538      	push	{r3, r4, r5, lr}
 800248e:	4b13      	ldr	r3, [pc, #76]	@ (80024dc <raise+0x50>)
 8002490:	281f      	cmp	r0, #31
 8002492:	681d      	ldr	r5, [r3, #0]
 8002494:	d81d      	bhi.n	80024d2 <raise+0x46>
 8002496:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8002498:	4604      	mov	r4, r0
 800249a:	b162      	cbz	r2, 80024b6 <raise+0x2a>
 800249c:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 80024a0:	b14b      	cbz	r3, 80024b6 <raise+0x2a>
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d005      	beq.n	80024b2 <raise+0x26>
 80024a6:	1c59      	adds	r1, r3, #1
 80024a8:	d00f      	beq.n	80024ca <raise+0x3e>
 80024aa:	2100      	movs	r1, #0
 80024ac:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 80024b0:	4798      	blx	r3
 80024b2:	2000      	movs	r0, #0
 80024b4:	bd38      	pop	{r3, r4, r5, pc}
 80024b6:	4628      	mov	r0, r5
 80024b8:	f000 f89a 	bl	80025f0 <_getpid_r>
 80024bc:	4622      	mov	r2, r4
 80024be:	4601      	mov	r1, r0
 80024c0:	4628      	mov	r0, r5
 80024c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024c6:	f000 b87d 	b.w	80025c4 <_kill_r>
 80024ca:	2316      	movs	r3, #22
 80024cc:	602b      	str	r3, [r5, #0]
 80024ce:	2001      	movs	r0, #1
 80024d0:	bd38      	pop	{r3, r4, r5, pc}
 80024d2:	2316      	movs	r3, #22
 80024d4:	602b      	str	r3, [r5, #0]
 80024d6:	f04f 30ff 	mov.w	r0, #4294967295
 80024da:	bd38      	pop	{r3, r4, r5, pc}
 80024dc:	2000001c 	.word	0x2000001c

080024e0 <signal>:
 80024e0:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <signal+0x48>)
 80024e2:	281f      	cmp	r0, #31
 80024e4:	b570      	push	{r4, r5, r6, lr}
 80024e6:	681e      	ldr	r6, [r3, #0]
 80024e8:	d808      	bhi.n	80024fc <signal+0x1c>
 80024ea:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 80024ec:	4604      	mov	r4, r0
 80024ee:	460d      	mov	r5, r1
 80024f0:	b14b      	cbz	r3, 8002506 <signal+0x26>
 80024f2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80024f6:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
 80024fa:	bd70      	pop	{r4, r5, r6, pc}
 80024fc:	2316      	movs	r3, #22
 80024fe:	6033      	str	r3, [r6, #0]
 8002500:	f04f 30ff 	mov.w	r0, #4294967295
 8002504:	bd70      	pop	{r4, r5, r6, pc}
 8002506:	2180      	movs	r1, #128	@ 0x80
 8002508:	4630      	mov	r0, r6
 800250a:	f7fe fb1f 	bl	8000b4c <_malloc_r>
 800250e:	4603      	mov	r3, r0
 8002510:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8002512:	2800      	cmp	r0, #0
 8002514:	d0f4      	beq.n	8002500 <signal+0x20>
 8002516:	1f02      	subs	r2, r0, #4
 8002518:	2100      	movs	r1, #0
 800251a:	307c      	adds	r0, #124	@ 0x7c
 800251c:	f842 1f04 	str.w	r1, [r2, #4]!
 8002520:	4290      	cmp	r0, r2
 8002522:	d1fb      	bne.n	800251c <signal+0x3c>
 8002524:	e7e5      	b.n	80024f2 <signal+0x12>
 8002526:	bf00      	nop
 8002528:	2000001c 	.word	0x2000001c

0800252c <_init_signal>:
 800252c:	b538      	push	{r3, r4, r5, lr}
 800252e:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <_init_signal+0x30>)
 8002530:	681d      	ldr	r5, [r3, #0]
 8002532:	6bec      	ldr	r4, [r5, #60]	@ 0x3c
 8002534:	b10c      	cbz	r4, 800253a <_init_signal+0xe>
 8002536:	2000      	movs	r0, #0
 8002538:	bd38      	pop	{r3, r4, r5, pc}
 800253a:	2180      	movs	r1, #128	@ 0x80
 800253c:	4628      	mov	r0, r5
 800253e:	f7fe fb05 	bl	8000b4c <_malloc_r>
 8002542:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8002544:	b138      	cbz	r0, 8002556 <_init_signal+0x2a>
 8002546:	1f03      	subs	r3, r0, #4
 8002548:	f100 027c 	add.w	r2, r0, #124	@ 0x7c
 800254c:	f843 4f04 	str.w	r4, [r3, #4]!
 8002550:	4293      	cmp	r3, r2
 8002552:	d1fb      	bne.n	800254c <_init_signal+0x20>
 8002554:	e7ef      	b.n	8002536 <_init_signal+0xa>
 8002556:	f04f 30ff 	mov.w	r0, #4294967295
 800255a:	bd38      	pop	{r3, r4, r5, pc}
 800255c:	2000001c 	.word	0x2000001c

08002560 <__sigtramp>:
 8002560:	b538      	push	{r3, r4, r5, lr}
 8002562:	4b17      	ldr	r3, [pc, #92]	@ (80025c0 <__sigtramp+0x60>)
 8002564:	281f      	cmp	r0, #31
 8002566:	681d      	ldr	r5, [r3, #0]
 8002568:	d826      	bhi.n	80025b8 <__sigtramp+0x58>
 800256a:	4604      	mov	r4, r0
 800256c:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 800256e:	b1a0      	cbz	r0, 800259a <__sigtramp+0x3a>
 8002570:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8002574:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8002578:	b14b      	cbz	r3, 800258e <__sigtramp+0x2e>
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	d00b      	beq.n	8002596 <__sigtramp+0x36>
 800257e:	2b01      	cmp	r3, #1
 8002580:	d007      	beq.n	8002592 <__sigtramp+0x32>
 8002582:	2500      	movs	r5, #0
 8002584:	6005      	str	r5, [r0, #0]
 8002586:	4620      	mov	r0, r4
 8002588:	4798      	blx	r3
 800258a:	4628      	mov	r0, r5
 800258c:	bd38      	pop	{r3, r4, r5, pc}
 800258e:	2001      	movs	r0, #1
 8002590:	bd38      	pop	{r3, r4, r5, pc}
 8002592:	2003      	movs	r0, #3
 8002594:	bd38      	pop	{r3, r4, r5, pc}
 8002596:	2002      	movs	r0, #2
 8002598:	bd38      	pop	{r3, r4, r5, pc}
 800259a:	2180      	movs	r1, #128	@ 0x80
 800259c:	4628      	mov	r0, r5
 800259e:	f7fe fad5 	bl	8000b4c <_malloc_r>
 80025a2:	63e8      	str	r0, [r5, #60]	@ 0x3c
 80025a4:	b140      	cbz	r0, 80025b8 <__sigtramp+0x58>
 80025a6:	1f03      	subs	r3, r0, #4
 80025a8:	f100 017c 	add.w	r1, r0, #124	@ 0x7c
 80025ac:	2200      	movs	r2, #0
 80025ae:	f843 2f04 	str.w	r2, [r3, #4]!
 80025b2:	4299      	cmp	r1, r3
 80025b4:	d1fb      	bne.n	80025ae <__sigtramp+0x4e>
 80025b6:	e7db      	b.n	8002570 <__sigtramp+0x10>
 80025b8:	f04f 30ff 	mov.w	r0, #4294967295
 80025bc:	bd38      	pop	{r3, r4, r5, pc}
 80025be:	bf00      	nop
 80025c0:	2000001c 	.word	0x2000001c

080025c4 <_kill_r>:
 80025c4:	b570      	push	{r4, r5, r6, lr}
 80025c6:	460c      	mov	r4, r1
 80025c8:	4d08      	ldr	r5, [pc, #32]	@ (80025ec <_kill_r+0x28>)
 80025ca:	4603      	mov	r3, r0
 80025cc:	2600      	movs	r6, #0
 80025ce:	4620      	mov	r0, r4
 80025d0:	4611      	mov	r1, r2
 80025d2:	461c      	mov	r4, r3
 80025d4:	602e      	str	r6, [r5, #0]
 80025d6:	f000 f971 	bl	80028bc <_kill>
 80025da:	1c43      	adds	r3, r0, #1
 80025dc:	d000      	beq.n	80025e0 <_kill_r+0x1c>
 80025de:	bd70      	pop	{r4, r5, r6, pc}
 80025e0:	682b      	ldr	r3, [r5, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0fb      	beq.n	80025de <_kill_r+0x1a>
 80025e6:	6023      	str	r3, [r4, #0]
 80025e8:	bd70      	pop	{r4, r5, r6, pc}
 80025ea:	bf00      	nop
 80025ec:	200002f4 	.word	0x200002f4

080025f0 <_getpid_r>:
 80025f0:	f000 b954 	b.w	800289c <_getpid>
 80025f4:	0000      	movs	r0, r0
 80025f6:	0000      	movs	r0, r0
 80025f8:	0000      	movs	r0, r0
 80025fa:	0000      	movs	r0, r0
 80025fc:	0000      	movs	r0, r0
 80025fe:	0000      	movs	r0, r0

08002600 <memchr>:
 8002600:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8002604:	2a10      	cmp	r2, #16
 8002606:	db2b      	blt.n	8002660 <memchr+0x60>
 8002608:	f010 0f07 	tst.w	r0, #7
 800260c:	d008      	beq.n	8002620 <memchr+0x20>
 800260e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002612:	3a01      	subs	r2, #1
 8002614:	428b      	cmp	r3, r1
 8002616:	d02d      	beq.n	8002674 <memchr+0x74>
 8002618:	f010 0f07 	tst.w	r0, #7
 800261c:	b342      	cbz	r2, 8002670 <memchr+0x70>
 800261e:	d1f6      	bne.n	800260e <memchr+0xe>
 8002620:	b4f0      	push	{r4, r5, r6, r7}
 8002622:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002626:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800262a:	f022 0407 	bic.w	r4, r2, #7
 800262e:	f07f 0700 	mvns.w	r7, #0
 8002632:	2300      	movs	r3, #0
 8002634:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002638:	3c08      	subs	r4, #8
 800263a:	ea85 0501 	eor.w	r5, r5, r1
 800263e:	ea86 0601 	eor.w	r6, r6, r1
 8002642:	fa85 f547 	uadd8	r5, r5, r7
 8002646:	faa3 f587 	sel	r5, r3, r7
 800264a:	fa86 f647 	uadd8	r6, r6, r7
 800264e:	faa5 f687 	sel	r6, r5, r7
 8002652:	b98e      	cbnz	r6, 8002678 <memchr+0x78>
 8002654:	d1ee      	bne.n	8002634 <memchr+0x34>
 8002656:	bcf0      	pop	{r4, r5, r6, r7}
 8002658:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800265c:	f002 0207 	and.w	r2, r2, #7
 8002660:	b132      	cbz	r2, 8002670 <memchr+0x70>
 8002662:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002666:	3a01      	subs	r2, #1
 8002668:	ea83 0301 	eor.w	r3, r3, r1
 800266c:	b113      	cbz	r3, 8002674 <memchr+0x74>
 800266e:	d1f8      	bne.n	8002662 <memchr+0x62>
 8002670:	2000      	movs	r0, #0
 8002672:	4770      	bx	lr
 8002674:	3801      	subs	r0, #1
 8002676:	4770      	bx	lr
 8002678:	2d00      	cmp	r5, #0
 800267a:	bf06      	itte	eq
 800267c:	4635      	moveq	r5, r6
 800267e:	3803      	subeq	r0, #3
 8002680:	3807      	subne	r0, #7
 8002682:	f015 0f01 	tst.w	r5, #1
 8002686:	d107      	bne.n	8002698 <memchr+0x98>
 8002688:	3001      	adds	r0, #1
 800268a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800268e:	bf02      	ittt	eq
 8002690:	3001      	addeq	r0, #1
 8002692:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8002696:	3001      	addeq	r0, #1
 8002698:	bcf0      	pop	{r4, r5, r6, r7}
 800269a:	3801      	subs	r0, #1
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop

080026a0 <_realloc_r>:
 80026a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026a4:	4614      	mov	r4, r2
 80026a6:	b349      	cbz	r1, 80026fc <_realloc_r+0x5c>
 80026a8:	b1ea      	cbz	r2, 80026e6 <_realloc_r+0x46>
 80026aa:	4606      	mov	r6, r0
 80026ac:	460d      	mov	r5, r1
 80026ae:	f000 f8dd 	bl	800286c <_malloc_usable_size_r>
 80026b2:	4284      	cmp	r4, r0
 80026b4:	4607      	mov	r7, r0
 80026b6:	d802      	bhi.n	80026be <_realloc_r+0x1e>
 80026b8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80026bc:	d81a      	bhi.n	80026f4 <_realloc_r+0x54>
 80026be:	4621      	mov	r1, r4
 80026c0:	4630      	mov	r0, r6
 80026c2:	f7fe fa43 	bl	8000b4c <_malloc_r>
 80026c6:	4680      	mov	r8, r0
 80026c8:	b178      	cbz	r0, 80026ea <_realloc_r+0x4a>
 80026ca:	42bc      	cmp	r4, r7
 80026cc:	4622      	mov	r2, r4
 80026ce:	4629      	mov	r1, r5
 80026d0:	bf28      	it	cs
 80026d2:	463a      	movcs	r2, r7
 80026d4:	f7fe fe10 	bl	80012f8 <memcpy>
 80026d8:	4630      	mov	r0, r6
 80026da:	4629      	mov	r1, r5
 80026dc:	f7fe fecc 	bl	8001478 <_free_r>
 80026e0:	4640      	mov	r0, r8
 80026e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026e6:	f7fe fec7 	bl	8001478 <_free_r>
 80026ea:	f04f 0800 	mov.w	r8, #0
 80026ee:	4640      	mov	r0, r8
 80026f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026f4:	46a8      	mov	r8, r5
 80026f6:	4640      	mov	r0, r8
 80026f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002700:	4611      	mov	r1, r2
 8002702:	f7fe ba23 	b.w	8000b4c <_malloc_r>
 8002706:	bf00      	nop

08002708 <__smakebuf_r>:
 8002708:	b570      	push	{r4, r5, r6, lr}
 800270a:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800270e:	460c      	mov	r4, r1
 8002710:	0799      	lsls	r1, r3, #30
 8002712:	b096      	sub	sp, #88	@ 0x58
 8002714:	d507      	bpl.n	8002726 <__smakebuf_r+0x1e>
 8002716:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800271a:	2201      	movs	r2, #1
 800271c:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8002720:	6023      	str	r3, [r4, #0]
 8002722:	b016      	add	sp, #88	@ 0x58
 8002724:	bd70      	pop	{r4, r5, r6, pc}
 8002726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800272a:	2900      	cmp	r1, #0
 800272c:	4605      	mov	r5, r0
 800272e:	db29      	blt.n	8002784 <__smakebuf_r+0x7c>
 8002730:	466a      	mov	r2, sp
 8002732:	f000 f873 	bl	800281c <_fstat_r>
 8002736:	2800      	cmp	r0, #0
 8002738:	db22      	blt.n	8002780 <__smakebuf_r+0x78>
 800273a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800273e:	4628      	mov	r0, r5
 8002740:	9e01      	ldr	r6, [sp, #4]
 8002742:	f7fe fa03 	bl	8000b4c <_malloc_r>
 8002746:	b388      	cbz	r0, 80027ac <__smakebuf_r+0xa4>
 8002748:	89a3      	ldrh	r3, [r4, #12]
 800274a:	6020      	str	r0, [r4, #0]
 800274c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002750:	f406 4670 	and.w	r6, r6, #61440	@ 0xf000
 8002754:	81a3      	strh	r3, [r4, #12]
 8002756:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
 800275a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800275e:	e9c4 0304 	strd	r0, r3, [r4, #16]
 8002762:	d1de      	bne.n	8002722 <__smakebuf_r+0x1a>
 8002764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002768:	4628      	mov	r0, r5
 800276a:	f000 f86d 	bl	8002848 <_isatty_r>
 800276e:	2800      	cmp	r0, #0
 8002770:	d0d7      	beq.n	8002722 <__smakebuf_r+0x1a>
 8002772:	89a3      	ldrh	r3, [r4, #12]
 8002774:	f023 0303 	bic.w	r3, r3, #3
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	81a3      	strh	r3, [r4, #12]
 800277e:	e7d0      	b.n	8002722 <__smakebuf_r+0x1a>
 8002780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002784:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002788:	bf14      	ite	ne
 800278a:	2640      	movne	r6, #64	@ 0x40
 800278c:	f44f 6680 	moveq.w	r6, #1024	@ 0x400
 8002790:	4631      	mov	r1, r6
 8002792:	4628      	mov	r0, r5
 8002794:	f7fe f9da 	bl	8000b4c <_malloc_r>
 8002798:	b140      	cbz	r0, 80027ac <__smakebuf_r+0xa4>
 800279a:	89a3      	ldrh	r3, [r4, #12]
 800279c:	6020      	str	r0, [r4, #0]
 800279e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027a2:	e9c4 0604 	strd	r0, r6, [r4, #16]
 80027a6:	81a3      	strh	r3, [r4, #12]
 80027a8:	b016      	add	sp, #88	@ 0x58
 80027aa:	bd70      	pop	{r4, r5, r6, pc}
 80027ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027b0:	059a      	lsls	r2, r3, #22
 80027b2:	d4b6      	bmi.n	8002722 <__smakebuf_r+0x1a>
 80027b4:	f023 0303 	bic.w	r3, r3, #3
 80027b8:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	2101      	movs	r1, #1
 80027c2:	e9c4 2104 	strd	r2, r1, [r4, #16]
 80027c6:	81a3      	strh	r3, [r4, #12]
 80027c8:	6022      	str	r2, [r4, #0]
 80027ca:	e7aa      	b.n	8002722 <__smakebuf_r+0x1a>

080027cc <__swhatbuf_r>:
 80027cc:	b570      	push	{r4, r5, r6, lr}
 80027ce:	460c      	mov	r4, r1
 80027d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027d4:	2900      	cmp	r1, #0
 80027d6:	b096      	sub	sp, #88	@ 0x58
 80027d8:	4615      	mov	r5, r2
 80027da:	461e      	mov	r6, r3
 80027dc:	db0f      	blt.n	80027fe <__swhatbuf_r+0x32>
 80027de:	466a      	mov	r2, sp
 80027e0:	f000 f81c 	bl	800281c <_fstat_r>
 80027e4:	2800      	cmp	r0, #0
 80027e6:	db0a      	blt.n	80027fe <__swhatbuf_r+0x32>
 80027e8:	9b01      	ldr	r3, [sp, #4]
 80027ea:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80027ee:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	e008      	b.n	8002810 <__swhatbuf_r+0x44>
 80027fe:	89a2      	ldrh	r2, [r4, #12]
 8002800:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	bf14      	ite	ne
 800280a:	2240      	movne	r2, #64	@ 0x40
 800280c:	f44f 6280 	moveq.w	r2, #1024	@ 0x400
 8002810:	2000      	movs	r0, #0
 8002812:	6033      	str	r3, [r6, #0]
 8002814:	602a      	str	r2, [r5, #0]
 8002816:	b016      	add	sp, #88	@ 0x58
 8002818:	bd70      	pop	{r4, r5, r6, pc}
 800281a:	bf00      	nop

0800281c <_fstat_r>:
 800281c:	b570      	push	{r4, r5, r6, lr}
 800281e:	460c      	mov	r4, r1
 8002820:	4d08      	ldr	r5, [pc, #32]	@ (8002844 <_fstat_r+0x28>)
 8002822:	4603      	mov	r3, r0
 8002824:	2600      	movs	r6, #0
 8002826:	4620      	mov	r0, r4
 8002828:	4611      	mov	r1, r2
 800282a:	461c      	mov	r4, r3
 800282c:	602e      	str	r6, [r5, #0]
 800282e:	f000 f82d 	bl	800288c <_fstat>
 8002832:	1c43      	adds	r3, r0, #1
 8002834:	d000      	beq.n	8002838 <_fstat_r+0x1c>
 8002836:	bd70      	pop	{r4, r5, r6, pc}
 8002838:	682b      	ldr	r3, [r5, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0fb      	beq.n	8002836 <_fstat_r+0x1a>
 800283e:	6023      	str	r3, [r4, #0]
 8002840:	bd70      	pop	{r4, r5, r6, pc}
 8002842:	bf00      	nop
 8002844:	200002f4 	.word	0x200002f4

08002848 <_isatty_r>:
 8002848:	b538      	push	{r3, r4, r5, lr}
 800284a:	4d07      	ldr	r5, [pc, #28]	@ (8002868 <_isatty_r+0x20>)
 800284c:	2200      	movs	r2, #0
 800284e:	4604      	mov	r4, r0
 8002850:	4608      	mov	r0, r1
 8002852:	602a      	str	r2, [r5, #0]
 8002854:	f000 f82a 	bl	80028ac <_isatty>
 8002858:	1c43      	adds	r3, r0, #1
 800285a:	d000      	beq.n	800285e <_isatty_r+0x16>
 800285c:	bd38      	pop	{r3, r4, r5, pc}
 800285e:	682b      	ldr	r3, [r5, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0fb      	beq.n	800285c <_isatty_r+0x14>
 8002864:	6023      	str	r3, [r4, #0]
 8002866:	bd38      	pop	{r3, r4, r5, pc}
 8002868:	200002f4 	.word	0x200002f4

0800286c <_malloc_usable_size_r>:
 800286c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002870:	1f18      	subs	r0, r3, #4
 8002872:	2b00      	cmp	r3, #0
 8002874:	bfbc      	itt	lt
 8002876:	580b      	ldrlt	r3, [r1, r0]
 8002878:	18c0      	addlt	r0, r0, r3
 800287a:	4770      	bx	lr

0800287c <_close>:
 800287c:	4b02      	ldr	r3, [pc, #8]	@ (8002888 <_close+0xc>)
 800287e:	2258      	movs	r2, #88	@ 0x58
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	f04f 30ff 	mov.w	r0, #4294967295
 8002886:	4770      	bx	lr
 8002888:	200002f4 	.word	0x200002f4

0800288c <_fstat>:
 800288c:	4b02      	ldr	r3, [pc, #8]	@ (8002898 <_fstat+0xc>)
 800288e:	2258      	movs	r2, #88	@ 0x58
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	f04f 30ff 	mov.w	r0, #4294967295
 8002896:	4770      	bx	lr
 8002898:	200002f4 	.word	0x200002f4

0800289c <_getpid>:
 800289c:	4b02      	ldr	r3, [pc, #8]	@ (80028a8 <_getpid+0xc>)
 800289e:	2258      	movs	r2, #88	@ 0x58
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	f04f 30ff 	mov.w	r0, #4294967295
 80028a6:	4770      	bx	lr
 80028a8:	200002f4 	.word	0x200002f4

080028ac <_isatty>:
 80028ac:	4b02      	ldr	r3, [pc, #8]	@ (80028b8 <_isatty+0xc>)
 80028ae:	2258      	movs	r2, #88	@ 0x58
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	2000      	movs	r0, #0
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	200002f4 	.word	0x200002f4

080028bc <_kill>:
 80028bc:	4b02      	ldr	r3, [pc, #8]	@ (80028c8 <_kill+0xc>)
 80028be:	2258      	movs	r2, #88	@ 0x58
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	f04f 30ff 	mov.w	r0, #4294967295
 80028c6:	4770      	bx	lr
 80028c8:	200002f4 	.word	0x200002f4

080028cc <_lseek>:
 80028cc:	4b02      	ldr	r3, [pc, #8]	@ (80028d8 <_lseek+0xc>)
 80028ce:	2258      	movs	r2, #88	@ 0x58
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	f04f 30ff 	mov.w	r0, #4294967295
 80028d6:	4770      	bx	lr
 80028d8:	200002f4 	.word	0x200002f4

080028dc <_read>:
 80028dc:	4b02      	ldr	r3, [pc, #8]	@ (80028e8 <_read+0xc>)
 80028de:	2258      	movs	r2, #88	@ 0x58
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	f04f 30ff 	mov.w	r0, #4294967295
 80028e6:	4770      	bx	lr
 80028e8:	200002f4 	.word	0x200002f4

080028ec <_write>:
 80028ec:	4b02      	ldr	r3, [pc, #8]	@ (80028f8 <_write+0xc>)
 80028ee:	2258      	movs	r2, #88	@ 0x58
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	f04f 30ff 	mov.w	r0, #4294967295
 80028f6:	4770      	bx	lr
 80028f8:	200002f4 	.word	0x200002f4

080028fc <_exit>:
 80028fc:	e7fe      	b.n	80028fc <_exit>
 80028fe:	bf00      	nop

08002900 <__do_global_dtors_aux>:
 8002900:	b510      	push	{r4, lr}
 8002902:	4c05      	ldr	r4, [pc, #20]	@ (8002918 <__do_global_dtors_aux+0x18>)
 8002904:	7823      	ldrb	r3, [r4, #0]
 8002906:	b933      	cbnz	r3, 8002916 <__do_global_dtors_aux+0x16>
 8002908:	4b04      	ldr	r3, [pc, #16]	@ (800291c <__do_global_dtors_aux+0x1c>)
 800290a:	b113      	cbz	r3, 8002912 <__do_global_dtors_aux+0x12>
 800290c:	4804      	ldr	r0, [pc, #16]	@ (8002920 <__do_global_dtors_aux+0x20>)
 800290e:	f3af 8000 	nop.w
 8002912:	2301      	movs	r3, #1
 8002914:	7023      	strb	r3, [r4, #0]
 8002916:	bd10      	pop	{r4, pc}
 8002918:	20000315 	.word	0x20000315
 800291c:	00000000 	.word	0x00000000
 8002920:	08003c30 	.word	0x08003c30

08002924 <frame_dummy>:
 8002924:	b508      	push	{r3, lr}
 8002926:	4b03      	ldr	r3, [pc, #12]	@ (8002934 <frame_dummy+0x10>)
 8002928:	b11b      	cbz	r3, 8002932 <frame_dummy+0xe>
 800292a:	4903      	ldr	r1, [pc, #12]	@ (8002938 <frame_dummy+0x14>)
 800292c:	4803      	ldr	r0, [pc, #12]	@ (800293c <frame_dummy+0x18>)
 800292e:	f3af 8000 	nop.w
 8002932:	bd08      	pop	{r3, pc}
 8002934:	00000000 	.word	0x00000000
 8002938:	20000318 	.word	0x20000318
 800293c:	08003c30 	.word	0x08003c30

08002940 <handle>:
/// This function will handle the 'p' command send from the capture board.
/// It returns the squared version of the scmd given.
/// It does this in approximately equal time, which allows us to see clear
/// differences between different scmd values.
uint8_t handle(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 8002940:	b5f0      	push	{r4, r5, r6, r7, lr}
  int return_string_len =  ((arr[1] + 1) * arr[0]) + 1;
  char string[return_string_len];

  // expects an input of byte lenght, of number neurons in first layer#
  for(int x = 0; x < arr[0]; x++){
      net->layers[0].neurons[x].a = (signed char)(buf[x]);
 8002942:	4f2b      	ldr	r7, [pc, #172]	@ (80029f0 <handle+0xb0>)
{
 8002944:	b089      	sub	sp, #36	@ 0x24
  volatile uint8_t result = 0;
 8002946:	2200      	movs	r2, #0
 8002948:	f88d 2007 	strb.w	r2, [sp, #7]
      net->layers[0].neurons[x].a = (signed char)(buf[x]);
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	6850      	ldr	r0, [r2, #4]
 8002950:	6840      	ldr	r0, [r0, #4]
{
 8002952:	460c      	mov	r4, r1
  for(int x = 0; x < arr[0]; x++){
 8002954:	1e59      	subs	r1, r3, #1
 8002956:	3306      	adds	r3, #6
      net->layers[0].neurons[x].a = (signed char)(buf[x]);
 8002958:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800295c:	7245      	strb	r5, [r0, #9]
  for(int x = 0; x < arr[0]; x++){
 800295e:	428b      	cmp	r3, r1
 8002960:	f100 0010 	add.w	r0, r0, #16
 8002964:	d1f8      	bne.n	8002958 <handle+0x18>
 8002966:	a902      	add	r1, sp, #8
 8002968:	2300      	movs	r3, #0
 800296a:	460e      	mov	r6, r1
  for(int x = 0; x < arr[1]; x++){ // Crossing first layer (not input layer)
      for(int y = 0;y<arr[0];y++){ // Choose each neuron from input layer, and save it's weight, and set weight of first weight to (x+1) * 10, in essence this is only for basic testing, and essentialy it ssends back S1,S2,S3,S4,S5...0 where SX is weight of input X-th connection, of x-th neuron   
          //if(y == 0){
          //    net->layers[0].neurons[y].weights[x] = (unsigned char)((x+1) * 10);
          //}
          string[(x*(arr[0]+1)) + y] = net->layers[0].neurons[y].weights[x];
 800296c:	6850      	ldr	r0, [r2, #4]
 800296e:	6840      	ldr	r0, [r0, #4]
 8002970:	4418      	add	r0, r3
      for(int y = 0;y<arr[0];y++){ // Choose each neuron from input layer, and save it's weight, and set weight of first weight to (x+1) * 10, in essence this is only for basic testing, and essentialy it ssends back S1,S2,S3,S4,S5...0 where SX is weight of input X-th connection, of x-th neuron   
 8002972:	3310      	adds	r3, #16
          string[(x*(arr[0]+1)) + y] = net->layers[0].neurons[y].weights[x];
 8002974:	6840      	ldr	r0, [r0, #4]
      for(int y = 0;y<arr[0];y++){ // Choose each neuron from input layer, and save it's weight, and set weight of first weight to (x+1) * 10, in essence this is only for basic testing, and essentialy it ssends back S1,S2,S3,S4,S5...0 where SX is weight of input X-th connection, of x-th neuron   
 8002976:	2b70      	cmp	r3, #112	@ 0x70
          string[(x*(arr[0]+1)) + y] = net->layers[0].neurons[y].weights[x];
 8002978:	7800      	ldrb	r0, [r0, #0]
 800297a:	f801 0b01 	strb.w	r0, [r1], #1
      for(int y = 0;y<arr[0];y++){ // Choose each neuron from input layer, and save it's weight, and set weight of first weight to (x+1) * 10, in essence this is only for basic testing, and essentialy it ssends back S1,S2,S3,S4,S5...0 where SX is weight of input X-th connection, of x-th neuron   
 800297e:	d1f5      	bne.n	800296c <handle+0x2c>
      }
      string[(x*(arr[0]+1)) + arr[0]] = net->layers[0].neurons[x].bias;
 8002980:	6853      	ldr	r3, [r2, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	7a1b      	ldrb	r3, [r3, #8]
 8002986:	f88d 300f 	strb.w	r3, [sp, #15]
      for(int y = 0;y<arr[0];y++){ // Choose each neuron from input layer, and save it's weight, and set weight of first weight to (x+1) * 10, in essence this is only for basic testing, and essentialy it ssends back S1,S2,S3,S4,S5...0 where SX is weight of input X-th connection, of x-th neuron   
 800298a:	f10d 000f 	add.w	r0, sp, #15
      string[(x*(arr[0]+1)) + arr[0]] = net->layers[0].neurons[x].bias;
 800298e:	2300      	movs	r3, #0
          string[(x*(arr[0]+1)) + y] = net->layers[0].neurons[y].weights[x];
 8002990:	6851      	ldr	r1, [r2, #4]
 8002992:	6849      	ldr	r1, [r1, #4]
 8002994:	4419      	add	r1, r3
      for(int y = 0;y<arr[0];y++){ // Choose each neuron from input layer, and save it's weight, and set weight of first weight to (x+1) * 10, in essence this is only for basic testing, and essentialy it ssends back S1,S2,S3,S4,S5...0 where SX is weight of input X-th connection, of x-th neuron   
 8002996:	3310      	adds	r3, #16
          string[(x*(arr[0]+1)) + y] = net->layers[0].neurons[y].weights[x];
 8002998:	6849      	ldr	r1, [r1, #4]
      for(int y = 0;y<arr[0];y++){ // Choose each neuron from input layer, and save it's weight, and set weight of first weight to (x+1) * 10, in essence this is only for basic testing, and essentialy it ssends back S1,S2,S3,S4,S5...0 where SX is weight of input X-th connection, of x-th neuron   
 800299a:	2b70      	cmp	r3, #112	@ 0x70
          string[(x*(arr[0]+1)) + y] = net->layers[0].neurons[y].weights[x];
 800299c:	7849      	ldrb	r1, [r1, #1]
 800299e:	f800 1f01 	strb.w	r1, [r0, #1]!
      for(int y = 0;y<arr[0];y++){ // Choose each neuron from input layer, and save it's weight, and set weight of first weight to (x+1) * 10, in essence this is only for basic testing, and essentialy it ssends back S1,S2,S3,S4,S5...0 where SX is weight of input X-th connection, of x-th neuron   
 80029a2:	d1f5      	bne.n	8002990 <handle+0x50>
      string[(x*(arr[0]+1)) + arr[0]] = net->layers[0].neurons[x].bias;
 80029a4:	6853      	ldr	r3, [r2, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	7e1b      	ldrb	r3, [r3, #24]
 80029aa:	f88d 3017 	strb.w	r3, [sp, #23]
  }
  string[return_string_len - 1] = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f88d 301d 	strb.w	r3, [sp, #29]


  // Start measurement.
  trigger_high();
 80029b4:	f000 fae2 	bl	8002f7c <trigger_high>
 80029b8:	2564      	movs	r5, #100	@ 0x64
  for(int x = 0;x<100;x++){
      __asm__("nop");
 80029ba:	bf00      	nop
  for(int x = 0;x<100;x++){
 80029bc:	3d01      	subs	r5, #1
 80029be:	d1fc      	bne.n	80029ba <handle+0x7a>
  }

  forward(*net,0);
 80029c0:	683b      	ldr	r3, [r7, #0]
  //    __asm__("nop");
  //}
  trigger_low();

  // For now we can just return the result back to the user.
  result = scmd*scmd;
 80029c2:	fb14 f404 	smulbb	r4, r4, r4
  forward(*net,0);
 80029c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80029ca:	462a      	mov	r2, r5
  result = scmd*scmd;
 80029cc:	b2e4      	uxtb	r4, r4
  forward(*net,0);
 80029ce:	f000 f8b7 	bl	8002b40 <forward>
  trigger_low();
 80029d2:	f000 fada 	bl	8002f8a <trigger_low>
  result = scmd*scmd;
 80029d6:	f88d 4007 	strb.w	r4, [sp, #7]
  uint8_t buff[1] = { result };
  uint8_t return_len = return_string_len;
  simpleserial_put('r', return_len, string);
 80029da:	4632      	mov	r2, r6
 80029dc:	2116      	movs	r1, #22
 80029de:	2072      	movs	r0, #114	@ 0x72
  uint8_t buff[1] = { result };
 80029e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
  simpleserial_put('r', return_len, string);
 80029e4:	f000 f964 	bl	8002cb0 <simpleserial_put>

  return 0;
}
 80029e8:	4628      	mov	r0, r5
 80029ea:	b009      	add	sp, #36	@ 0x24
 80029ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029ee:	bf00      	nop
 80029f0:	2000006c 	.word	0x2000006c

080029f4 <main>:

int main(void) {
 80029f4:	b507      	push	{r0, r1, r2, lr}
    // Setup the specific chipset.
  platform_init();
 80029f6:	f000 fa1f 	bl	8002e38 <platform_init>
  // Setup serial communication line.
  init_uart();
 80029fa:	f000 fa5d 	bl	8002eb8 <init_uart>
  // Setup measurement trigger.
  trigger_setup();
 80029fe:	f000 fa99 	bl	8002f34 <trigger_setup>

  simpleserial_init();
 8002a02:	f000 f943 	bl	8002c8c <simpleserial_init>

  // Insert your handlers here.
  simpleserial_addcmd('p', 16, handle);
 8002a06:	4a0a      	ldr	r2, [pc, #40]	@ (8002a30 <main+0x3c>)
 8002a08:	2110      	movs	r1, #16
 8002a0a:	2070      	movs	r0, #112	@ 0x70
 8002a0c:	f000 f924 	bl	8002c58 <simpleserial_addcmd>

  arr[0] = 7;
 8002a10:	4a08      	ldr	r2, [pc, #32]	@ (8002a34 <main+0x40>)
  arr[1] = 2;
 8002a12:	2302      	movs	r3, #2
 8002a14:	2107      	movs	r1, #7
 8002a16:	e9c2 1300 	strd	r1, r3, [r2]
  arr[2] = 2;
  network ann = construct_quantized_network2(3,arr);
 8002a1a:	4668      	mov	r0, sp
 8002a1c:	2103      	movs	r1, #3
  arr[2] = 2;
 8002a1e:	6093      	str	r3, [r2, #8]
  network ann = construct_quantized_network2(3,arr);
 8002a20:	f000 f83b 	bl	8002a9a <construct_quantized_network2>
  net = &ann;
 8002a24:	4b04      	ldr	r3, [pc, #16]	@ (8002a38 <main+0x44>)
 8002a26:	f8c3 d000 	str.w	sp, [r3]
  // What for the capture board to send commands and handle them.
  while (1)
    simpleserial_get();
 8002a2a:	f000 f999 	bl	8002d60 <simpleserial_get>
  while (1)
 8002a2e:	e7fc      	b.n	8002a2a <main+0x36>
 8002a30:	08002941 	.word	0x08002941
 8002a34:	20000000 	.word	0x20000000
 8002a38:	2000006c 	.word	0x2000006c

08002a3c <quantized_create_neuron>:

//Generating ANN functions
/**
 * Create quantized neuron (weights, biases and activation functions), while also filling random values to it's weight for NEXT LAYER connections
 */
neuron quantized_create_neuron(int num_out_weights){
 8002a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3e:	4604      	mov	r4, r0
    neuron new_neuron;
    new_neuron.bias = 0;
    new_neuron.a = 0;
    new_neuron.z = 0;
    new_neuron.weights = (signed char*) malloc(num_out_weights * sizeof(signed char));
 8002a40:	4608      	mov	r0, r1
neuron quantized_create_neuron(int num_out_weights){
 8002a42:	460d      	mov	r5, r1
    new_neuron.weights = (signed char*) malloc(num_out_weights * sizeof(signed char));
 8002a44:	f7fe f84e 	bl	8000ae4 <malloc>
    new_neuron.num_weights = num_out_weights;

    for (int i=0; i<num_out_weights; i++){
 8002a48:	2700      	movs	r7, #0
    new_neuron.weights = (signed char*) malloc(num_out_weights * sizeof(signed char));
 8002a4a:	4606      	mov	r6, r0
    for (int i=0; i<num_out_weights; i++){
 8002a4c:	42af      	cmp	r7, r5
 8002a4e:	db06      	blt.n	8002a5e <quantized_create_neuron+0x22>
        //new_neuron.weights[i] = (signed char)(rand() / (RAND_MAX / ( QUANTIZED_MAX - QUANTIZED_MIN + 2)));
        new_neuron.weights[i] = (signed char)(rand() % 256);
        //new_neuron.weights[i] = 0;
    }
    return new_neuron;
 8002a50:	2300      	movs	r3, #0
 8002a52:	8123      	strh	r3, [r4, #8]
 8002a54:	e9c4 5600 	strd	r5, r6, [r4]
 8002a58:	60e3      	str	r3, [r4, #12]
}
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_neuron.weights[i] = (signed char)(rand() % 256);
 8002a5e:	f7fe f92f 	bl	8000cc0 <rand>
 8002a62:	4242      	negs	r2, r0
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	b2c3      	uxtb	r3, r0
 8002a68:	bf58      	it	pl
 8002a6a:	4253      	negpl	r3, r2
 8002a6c:	55f3      	strb	r3, [r6, r7]
    for (int i=0; i<num_out_weights; i++){
 8002a6e:	3701      	adds	r7, #1
 8002a70:	e7ec      	b.n	8002a4c <quantized_create_neuron+0x10>

08002a72 <create_layer>:
/**
 * Create layer, containing all neccesary nerons
 */
layer create_layer(int num_neurons){
 8002a72:	b538      	push	{r3, r4, r5, lr}
 8002a74:	4604      	mov	r4, r0
    layer lay;
    lay.num_neurons = num_neurons;
    lay.neurons = (neuron*) malloc(num_neurons * sizeof(neuron));
 8002a76:	0108      	lsls	r0, r1, #4
layer create_layer(int num_neurons){
 8002a78:	460d      	mov	r5, r1
    lay.neurons = (neuron*) malloc(num_neurons * sizeof(neuron));
 8002a7a:	f7fe f833 	bl	8000ae4 <malloc>
    return lay;
 8002a7e:	e9c4 5000 	strd	r5, r0, [r4]
}
 8002a82:	4620      	mov	r0, r4
 8002a84:	bd38      	pop	{r3, r4, r5, pc}

08002a86 <create_network>:
/**
 * Create whole network, containing all neccesary layers
 */
network create_network(int num_layers){
 8002a86:	b538      	push	{r3, r4, r5, lr}
 8002a88:	4604      	mov	r4, r0
    network net;
    net.num_layers = num_layers;
    net.layers = (layer*) malloc(num_layers * sizeof(layer));
 8002a8a:	00c8      	lsls	r0, r1, #3
network create_network(int num_layers){
 8002a8c:	460d      	mov	r5, r1
    net.layers = (layer*) malloc(num_layers * sizeof(layer));
 8002a8e:	f7fe f829 	bl	8000ae4 <malloc>
    return net;
 8002a92:	e9c4 5000 	strd	r5, r0, [r4]
}
 8002a96:	4620      	mov	r0, r4
 8002a98:	bd38      	pop	{r3, r4, r5, pc}

08002a9a <construct_quantized_network2>:
/**
 * Initialize/allocate whole network
 */
network construct_quantized_network2(int num_layers, int *num_neurons) {
 8002a9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a9e:	4680      	mov	r8, r0
 8002aa0:	b087      	sub	sp, #28
 8002aa2:	460c      	mov	r4, r1
 8002aa4:	4617      	mov	r7, r2
    //srand(time(NULL)); 
    network net = create_network(num_layers);
 8002aa6:	f7ff ffee 	bl	8002a86 <create_network>
 8002aaa:	f8d8 5004 	ldr.w	r5, [r8, #4]
    int i, j;
    for (i=0; i<num_layers; i++){
 8002aae:	2600      	movs	r6, #0
 8002ab0:	42a6      	cmp	r6, r4
 8002ab2:	db14      	blt.n	8002ade <construct_quantized_network2+0x44>
        net.layers[i] = create_layer(num_neurons[i]);
    }
    // For each layer create neurons with number of weights eqaual to the number of neurons in the following layer,
    // wherein the last layer is the output layer
    for (i=1; i<num_layers; i++){
 8002ab4:	2601      	movs	r6, #1
        for (j=0; j<net.layers[i - 1].num_neurons; j++){
 8002ab6:	f1a5 0a08 	sub.w	sl, r5, #8
            net.layers[i - 1].neurons[j] = quantized_create_neuron(net.layers[i].num_neurons);
 8002aba:	f1a5 0b04 	sub.w	fp, r5, #4
    for (i=1; i<num_layers; i++){
 8002abe:	42a6      	cmp	r6, r4
 8002ac0:	db2d      	blt.n	8002b1e <construct_quantized_network2+0x84>
        }
    }
    for (j=0; j<net.layers[num_layers - 1].num_neurons; j++){// Create neurons for output layer, it's weight should be 0, as they connect to nothing
 8002ac2:	f104 5400 	add.w	r4, r4, #536870912	@ 0x20000000
 8002ac6:	3c01      	subs	r4, #1
 8002ac8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8002acc:	2700      	movs	r7, #0
            net.layers[num_layers - 1].neurons[j] = quantized_create_neuron(0);
 8002ace:	ae02      	add	r6, sp, #8
    for (j=0; j<net.layers[num_layers - 1].num_neurons; j++){// Create neurons for output layer, it's weight should be 0, as they connect to nothing
 8002ad0:	682b      	ldr	r3, [r5, #0]
 8002ad2:	42bb      	cmp	r3, r7
 8002ad4:	dc27      	bgt.n	8002b26 <construct_quantized_network2+0x8c>
    }
    return net;
}
 8002ad6:	4640      	mov	r0, r8
 8002ad8:	b007      	add	sp, #28
 8002ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        net.layers[i] = create_layer(num_neurons[i]);
 8002ade:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8002ae2:	eb05 00c6 	add.w	r0, r5, r6, lsl #3
 8002ae6:	f7ff ffc4 	bl	8002a72 <create_layer>
    for (i=0; i<num_layers; i++){
 8002aea:	3601      	adds	r6, #1
 8002aec:	e7e0      	b.n	8002ab0 <construct_quantized_network2+0x16>
            net.layers[i - 1].neurons[j] = quantized_create_neuron(net.layers[i].num_neurons);
 8002aee:	f85b 3036 	ldr.w	r3, [fp, r6, lsl #3]
 8002af2:	f855 1036 	ldr.w	r1, [r5, r6, lsl #3]
 8002af6:	eb03 1309 	add.w	r3, r3, r9, lsl #4
 8002afa:	4638      	mov	r0, r7
 8002afc:	9301      	str	r3, [sp, #4]
 8002afe:	f7ff ff9d 	bl	8002a3c <quantized_create_neuron>
 8002b02:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8002b06:	f8dd c004 	ldr.w	ip, [sp, #4]
 8002b0a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        for (j=0; j<net.layers[i - 1].num_neurons; j++){
 8002b0e:	f109 0901 	add.w	r9, r9, #1
 8002b12:	f85a 3036 	ldr.w	r3, [sl, r6, lsl #3]
 8002b16:	454b      	cmp	r3, r9
 8002b18:	dce9      	bgt.n	8002aee <construct_quantized_network2+0x54>
    for (i=1; i<num_layers; i++){
 8002b1a:	3601      	adds	r6, #1
 8002b1c:	e7cf      	b.n	8002abe <construct_quantized_network2+0x24>
        for (j=0; j<net.layers[i - 1].num_neurons; j++){
 8002b1e:	f04f 0900 	mov.w	r9, #0
            net.layers[i - 1].neurons[j] = quantized_create_neuron(net.layers[i].num_neurons);
 8002b22:	af02      	add	r7, sp, #8
 8002b24:	e7f5      	b.n	8002b12 <construct_quantized_network2+0x78>
            net.layers[num_layers - 1].neurons[j] = quantized_create_neuron(0);
 8002b26:	2100      	movs	r1, #0
 8002b28:	4630      	mov	r0, r6
 8002b2a:	686c      	ldr	r4, [r5, #4]
 8002b2c:	f7ff ff86 	bl	8002a3c <quantized_create_neuron>
 8002b30:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002b34:	eb04 1407 	add.w	r4, r4, r7, lsl #4
 8002b38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for (j=0; j<net.layers[num_layers - 1].num_neurons; j++){// Create neurons for output layer, it's weight should be 0, as they connect to nothing
 8002b3c:	3701      	adds	r7, #1
 8002b3e:	e7c7      	b.n	8002ad0 <construct_quantized_network2+0x36>

08002b40 <forward>:
        free(&(net.layers[i].neurons));
    }
    free(&(net.layers));
}

void forward(network net, int dummy_operations){
 8002b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b44:	b085      	sub	sp, #20
 8002b46:	466b      	mov	r3, sp
 8002b48:	e883 0003 	stmia.w	r3, {r0, r1}
 8002b4c:	4690      	mov	r8, r2
 8002b4e:	4682      	mov	sl, r0
    int i, j, k;
    uint8_t result, scmd = 16;
    // for each layer
    for (i=1; i<net.num_layers; i++){
 8002b50:	460d      	mov	r5, r1
 8002b52:	2701      	movs	r7, #1
                //net.layers[i].neurons[j].z = net.layers[i].neurons[j].z + (int)(net.layers[i-1].neurons[k].weights[j] * net.layers[i-1].neurons[k].a); // We are looking for THIS MULTIPLICATION
            }
            //get a values
            // REQUINTIZE net.layers[i].neurons[j].a = net.layers[i].neurons[j].z;
            //apply relu
            if(i < net.num_layers-1){ // if we are at last layer use relu AF (this should be to classification MLP)
 8002b54:	f100 3bff 	add.w	fp, r0, #4294967295
                }
            }
            //apply sigmoid to the last layer
            else{ // if we are at last layer, apply sigmoid AF to all it's neurons results
                // Sigmoid for the output layer
                float sigmoid = 1.0f / (1.0f + expf(-net.layers[i].neurons[j].z));
 8002b58:	f04f 597e 	mov.w	r9, #1065353216	@ 0x3f800000
    for (i=1; i<net.num_layers; i++){
 8002b5c:	4557      	cmp	r7, sl
 8002b5e:	db3a      	blt.n	8002bd6 <forward+0x96>
                result = scmd *scmd;
                result = scmd *scmd;
            }
        }
    }
}
 8002b60:	b005      	add	sp, #20
 8002b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            net.layers[i].neurons[j].z = net.layers[i].neurons[j].bias;
 8002b66:	68ec      	ldr	r4, [r5, #12]
 8002b68:	eb04 1406 	add.w	r4, r4, r6, lsl #4
            for (k=0; k<net.layers[i - 1].num_neurons; k++){
 8002b6c:	2100      	movs	r1, #0
            net.layers[i].neurons[j].z = net.layers[i].neurons[j].bias;
 8002b6e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8002b72:	60e3      	str	r3, [r4, #12]
            for (k=0; k<net.layers[i - 1].num_neurons; k++){
 8002b74:	f8d5 c000 	ldr.w	ip, [r5]
                net.layers[i].neurons[j].z = net.layers[i].neurons[j].z +
 8002b78:	68e0      	ldr	r0, [r4, #12]
            for (k=0; k<net.layers[i - 1].num_neurons; k++){
 8002b7a:	458c      	cmp	ip, r1
 8002b7c:	dc0f      	bgt.n	8002b9e <forward+0x5e>
            if(i < net.num_layers-1){ // if we are at last layer use relu AF (this should be to classification MLP)
 8002b7e:	45bb      	cmp	fp, r7
 8002b80:	dd19      	ble.n	8002bb6 <forward+0x76>
                if((signed char)net.layers[i].neurons[j].z < 0){// if the intermediate value is under the treshold (0), set final value of actiovation to 0
 8002b82:	b240      	sxtb	r0, r0
 8002b84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                    net.layers[i].neurons[j].a = (signed char)(net.layers[i].neurons[j].z);
 8002b88:	7260      	strb	r0, [r4, #9]
        for (j=0; j<net.layers[i].num_neurons; j++){
 8002b8a:	3601      	adds	r6, #1
 8002b8c:	68ab      	ldr	r3, [r5, #8]
 8002b8e:	42b3      	cmp	r3, r6
 8002b90:	dce9      	bgt.n	8002b66 <forward+0x26>
        if (dummy_operations > 0){ // Dummy opetaions to confuse attacker, it is aplied only, and only if expresly allowed
 8002b92:	f1b8 0f00 	cmp.w	r8, #0
 8002b96:	dc20      	bgt.n	8002bda <forward+0x9a>
    for (i=1; i<net.num_layers; i++){
 8002b98:	3701      	adds	r7, #1
 8002b9a:	3508      	adds	r5, #8
 8002b9c:	e7de      	b.n	8002b5c <forward+0x1c>
                ((net.layers[i-1].neurons[k].weights[j]) * (net.layers[i-1].neurons[k].a));
 8002b9e:	686b      	ldr	r3, [r5, #4]
 8002ba0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
            for (k=0; k<net.layers[i - 1].num_neurons; k++){
 8002ba4:	3101      	adds	r1, #1
                ((net.layers[i-1].neurons[k].weights[j]) * (net.layers[i-1].neurons[k].a));
 8002ba6:	685a      	ldr	r2, [r3, #4]
                net.layers[i].neurons[j].z = net.layers[i].neurons[j].z +
 8002ba8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002bac:	5792      	ldrsb	r2, [r2, r6]
 8002bae:	fb12 0203 	smlabb	r2, r2, r3, r0
 8002bb2:	60e2      	str	r2, [r4, #12]
            for (k=0; k<net.layers[i - 1].num_neurons; k++){
 8002bb4:	e7e0      	b.n	8002b78 <forward+0x38>
                float sigmoid = 1.0f / (1.0f + expf(-net.layers[i].neurons[j].z));
 8002bb6:	4240      	negs	r0, r0
 8002bb8:	f7fd fd3e 	bl	8000638 <__aeabi_i2f>
 8002bbc:	f7fd fae8 	bl	8000190 <expf>
 8002bc0:	4649      	mov	r1, r9
 8002bc2:	f7fd fc85 	bl	80004d0 <__addsf3>
 8002bc6:	4601      	mov	r1, r0
 8002bc8:	4648      	mov	r0, r9
 8002bca:	f7fd fe3d 	bl	8000848 <__aeabi_fdiv>
                net.layers[i].neurons[j].a = (signed char)(sigmoid); //
 8002bce:	f7fd ff63 	bl	8000a98 <__aeabi_f2iz>
 8002bd2:	b240      	sxtb	r0, r0
 8002bd4:	e7d8      	b.n	8002b88 <forward+0x48>
        for (j=0; j<net.layers[i].num_neurons; j++){
 8002bd6:	2600      	movs	r6, #0
 8002bd8:	e7d8      	b.n	8002b8c <forward+0x4c>
            for (volatile int dummy_i = 0; dummy_i<10; dummy_i++) {
 8002bda:	2300      	movs	r3, #0
 8002bdc:	9303      	str	r3, [sp, #12]
 8002bde:	9b03      	ldr	r3, [sp, #12]
 8002be0:	2b09      	cmp	r3, #9
 8002be2:	dcd9      	bgt.n	8002b98 <forward+0x58>
 8002be4:	9b03      	ldr	r3, [sp, #12]
 8002be6:	3301      	adds	r3, #1
 8002be8:	e7f8      	b.n	8002bdc <forward+0x9c>

08002bea <ss_crc>:


// 0xA6 formerly 
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 8002bea:	b510      	push	{r4, lr}
 8002bec:	4602      	mov	r2, r0
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 8002bee:	4401      	add	r1, r0
	uint8_t crc = 0x00;
 8002bf0:	2000      	movs	r0, #0
	while (len--) {
 8002bf2:	428a      	cmp	r2, r1
 8002bf4:	d100      	bne.n	8002bf8 <ss_crc+0xe>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
		}
	}
	return crc;

}
 8002bf6:	bd10      	pop	{r4, pc}
		crc ^= *buf++;
 8002bf8:	f812 3b01 	ldrb.w	r3, [r2], #1
 8002bfc:	2408      	movs	r4, #8
 8002bfe:	4058      	eors	r0, r3
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8002c00:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8002c04:	ea4f 0340 	mov.w	r3, r0, lsl #1
 8002c08:	bf18      	it	ne
 8002c0a:	f083 034d 	eorne.w	r3, r3, #77	@ 0x4d
		for (k = 0; k < 8; k++) {
 8002c0e:	3c01      	subs	r4, #1
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8002c10:	b2d8      	uxtb	r0, r3
		for (k = 0; k < 8; k++) {
 8002c12:	d1f5      	bne.n	8002c00 <ss_crc+0x16>
 8002c14:	e7ed      	b.n	8002bf2 <ss_crc+0x8>

08002c16 <stuff_data>:
    return 0x00;

}

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
 8002c16:	b530      	push	{r4, r5, lr}
	uint8_t i = 1;
	uint8_t last = 0;
 8002c18:	2200      	movs	r2, #0
 8002c1a:	4604      	mov	r4, r0
	uint8_t i = 1;
 8002c1c:	2301      	movs	r3, #1
	for (; i < len; i++) {
 8002c1e:	428b      	cmp	r3, r1
 8002c20:	d301      	bcc.n	8002c26 <stuff_data+0x10>
			buf[last] = i - last;
			last = i;
		}
	}
	return 0x00;
}
 8002c22:	2000      	movs	r0, #0
 8002c24:	bd30      	pop	{r4, r5, pc}
		if (buf[i] == FRAME_BYTE) {
 8002c26:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8002c2a:	b915      	cbnz	r5, 8002c32 <stuff_data+0x1c>
			buf[last] = i - last;
 8002c2c:	1a9d      	subs	r5, r3, r2
 8002c2e:	5485      	strb	r5, [r0, r2]
 8002c30:	461a      	mov	r2, r3
	for (; i < len; i++) {
 8002c32:	3301      	adds	r3, #1
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	e7f2      	b.n	8002c1e <stuff_data+0x8>

08002c38 <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 8002c38:	b530      	push	{r4, r5, lr}
	uint8_t next = buf[0];
 8002c3a:	7804      	ldrb	r4, [r0, #0]
	buf[0] = 0x00;
 8002c3c:	2500      	movs	r5, #0
{
 8002c3e:	4602      	mov	r2, r0
	buf[0] = 0x00;
 8002c40:	7005      	strb	r5, [r0, #0]
	uint8_t next = buf[0];
 8002c42:	4620      	mov	r0, r4
	//len -= 1;
	uint8_t tmp = next;
	while ((next < len) && tmp != 0) {
 8002c44:	4288      	cmp	r0, r1
 8002c46:	d200      	bcs.n	8002c4a <unstuff_data+0x12>
 8002c48:	b904      	cbnz	r4, 8002c4c <unstuff_data+0x14>
		tmp = buf[next];
		buf[next] = FRAME_BYTE;
		next += tmp;
	}
	return next;
}
 8002c4a:	bd30      	pop	{r4, r5, pc}
		tmp = buf[next];
 8002c4c:	5c14      	ldrb	r4, [r2, r0]
		buf[next] = FRAME_BYTE;
 8002c4e:	5415      	strb	r5, [r2, r0]
		next += tmp;
 8002c50:	1903      	adds	r3, r0, r4
 8002c52:	b2d8      	uxtb	r0, r3
 8002c54:	e7f6      	b.n	8002c44 <unstuff_data+0xc>
 8002c56:	0000      	movs	r0, r0

08002c58 <simpleserial_addcmd>:
	simpleserial_addcmd('v', 0, check_version);
    simpleserial_addcmd('w', 0, ss_get_commands);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 8002c58:	b538      	push	{r3, r4, r5, lr}
	if(num_commands >= MAX_SS_CMDS) {
 8002c5a:	4d0b      	ldr	r5, [pc, #44]	@ (8002c88 <simpleserial_addcmd+0x30>)
 8002c5c:	682b      	ldr	r3, [r5, #0]
 8002c5e:	2b0f      	cmp	r3, #15
 8002c60:	dd04      	ble.n	8002c6c <simpleserial_addcmd+0x14>
		putch('a');
 8002c62:	2061      	movs	r0, #97	@ 0x61
		return 1;
	}

	if(len >= MAX_SS_LEN) {
		putch('b');
 8002c64:	f000 f9b2 	bl	8002fcc <putch>
		return 1;
 8002c68:	2001      	movs	r0, #1
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 8002c6a:	bd38      	pop	{r3, r4, r5, pc}
	if(len >= MAX_SS_LEN) {
 8002c6c:	29ff      	cmp	r1, #255	@ 0xff
 8002c6e:	d901      	bls.n	8002c74 <simpleserial_addcmd+0x1c>
		putch('b');
 8002c70:	2062      	movs	r0, #98	@ 0x62
 8002c72:	e7f7      	b.n	8002c64 <simpleserial_addcmd+0xc>
	commands[num_commands].c   = c;
 8002c74:	240c      	movs	r4, #12
 8002c76:	fb04 5403 	mla	r4, r4, r3, r5
	num_commands++;
 8002c7a:	3301      	adds	r3, #1
	commands[num_commands].c   = c;
 8002c7c:	7120      	strb	r0, [r4, #4]
	commands[num_commands].fp  = fp;
 8002c7e:	e9c4 1202 	strd	r1, r2, [r4, #8]
	num_commands++;
 8002c82:	602b      	str	r3, [r5, #0]
	return 0;
 8002c84:	2000      	movs	r0, #0
 8002c86:	e7f0      	b.n	8002c6a <simpleserial_addcmd+0x12>
 8002c88:	20000070 	.word	0x20000070

08002c8c <simpleserial_init>:
{
 8002c8c:	b508      	push	{r3, lr}
	simpleserial_addcmd('v', 0, check_version);
 8002c8e:	4a06      	ldr	r2, [pc, #24]	@ (8002ca8 <simpleserial_init+0x1c>)
 8002c90:	2100      	movs	r1, #0
 8002c92:	2076      	movs	r0, #118	@ 0x76
 8002c94:	f7ff ffe0 	bl	8002c58 <simpleserial_addcmd>
}
 8002c98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    simpleserial_addcmd('w', 0, ss_get_commands);
 8002c9c:	4a03      	ldr	r2, [pc, #12]	@ (8002cac <simpleserial_init+0x20>)
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	2077      	movs	r0, #119	@ 0x77
 8002ca2:	f7ff bfd9 	b.w	8002c58 <simpleserial_addcmd>
 8002ca6:	bf00      	nop
 8002ca8:	08002d07 	.word	0x08002d07
 8002cac:	08002d25 	.word	0x08002d25

08002cb0 <simpleserial_put>:
	simpleserial_put('e', 0x01, &err);
	return;
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8002cb0:	b570      	push	{r4, r5, r6, lr}
 8002cb2:	b0c0      	sub	sp, #256	@ 0x100
 8002cb4:	460c      	mov	r4, r1
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 8002cb6:	2500      	movs	r5, #0
{
 8002cb8:	4611      	mov	r1, r2
	data_buf[1] = c;
 8002cba:	f88d 0001 	strb.w	r0, [sp, #1]
	data_buf[2] = size;
	int i = 0;
	for (; i < size; i++) {
		data_buf[i + 3] = output[i];
 8002cbe:	4622      	mov	r2, r4
 8002cc0:	f10d 0003 	add.w	r0, sp, #3
	data_buf[2] = size;
 8002cc4:	f88d 4002 	strb.w	r4, [sp, #2]
	data_buf[0] = 0x00;
 8002cc8:	f88d 5000 	strb.w	r5, [sp]
		data_buf[i + 3] = output[i];
 8002ccc:	f7fe fb14 	bl	80012f8 <memcpy>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8002cd0:	1ca1      	adds	r1, r4, #2
 8002cd2:	b2c9      	uxtb	r1, r1
 8002cd4:	f10d 0001 	add.w	r0, sp, #1
 8002cd8:	f7ff ff87 	bl	8002bea <ss_crc>
 8002cdc:	eb0d 0304 	add.w	r3, sp, r4
	data_buf[i + 4] = 0x00;
 8002ce0:	1d26      	adds	r6, r4, #4
	stuff_data(data_buf, i + 5);
 8002ce2:	1d61      	adds	r1, r4, #5
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8002ce4:	70d8      	strb	r0, [r3, #3]
	stuff_data(data_buf, i + 5);
 8002ce6:	b2c9      	uxtb	r1, r1
 8002ce8:	4668      	mov	r0, sp
	data_buf[i + 4] = 0x00;
 8002cea:	f80d 5006 	strb.w	r5, [sp, r6]
	stuff_data(data_buf, i + 5);
 8002cee:	f7ff ff92 	bl	8002c16 <stuff_data>
	for (int i = 0; i < size + 5; i++) {
 8002cf2:	466c      	mov	r4, sp
		putch(data_buf[i]);
 8002cf4:	f814 0b01 	ldrb.w	r0, [r4], #1
	for (int i = 0; i < size + 5; i++) {
 8002cf8:	3501      	adds	r5, #1
		putch(data_buf[i]);
 8002cfa:	f000 f967 	bl	8002fcc <putch>
	for (int i = 0; i < size + 5; i++) {
 8002cfe:	42ae      	cmp	r6, r5
 8002d00:	daf8      	bge.n	8002cf4 <simpleserial_put+0x44>
	}
}
 8002d02:	b040      	add	sp, #256	@ 0x100
 8002d04:	bd70      	pop	{r4, r5, r6, pc}

08002d06 <check_version>:
{
 8002d06:	b507      	push	{r0, r1, r2, lr}
	uint8_t ver = SS_VER;
 8002d08:	2303      	movs	r3, #3
	simpleserial_put('r', 1, &ver);
 8002d0a:	f10d 0207 	add.w	r2, sp, #7
 8002d0e:	2101      	movs	r1, #1
 8002d10:	2072      	movs	r0, #114	@ 0x72
	uint8_t ver = SS_VER;
 8002d12:	f88d 3007 	strb.w	r3, [sp, #7]
	simpleserial_put('r', 1, &ver);
 8002d16:	f7ff ffcb 	bl	8002cb0 <simpleserial_put>
}
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	b003      	add	sp, #12
 8002d1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d22:	0000      	movs	r0, r0

08002d24 <ss_get_commands>:
{
 8002d24:	b530      	push	{r4, r5, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8002d26:	480d      	ldr	r0, [pc, #52]	@ (8002d5c <ss_get_commands+0x38>)
 8002d28:	7801      	ldrb	r1, [r0, #0]
{
 8002d2a:	b085      	sub	sp, #20
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8002d2c:	2200      	movs	r2, #0
        cmd_chars[i] = commands[i].c;
 8002d2e:	240c      	movs	r4, #12
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8002d30:	b2d3      	uxtb	r3, r2
 8002d32:	428b      	cmp	r3, r1
 8002d34:	f102 0201 	add.w	r2, r2, #1
 8002d38:	db06      	blt.n	8002d48 <ss_get_commands+0x24>
    simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 8002d3a:	466a      	mov	r2, sp
 8002d3c:	2072      	movs	r0, #114	@ 0x72
 8002d3e:	f7ff ffb7 	bl	8002cb0 <simpleserial_put>
}
 8002d42:	2000      	movs	r0, #0
 8002d44:	b005      	add	sp, #20
 8002d46:	bd30      	pop	{r4, r5, pc}
        cmd_chars[i] = commands[i].c;
 8002d48:	f103 0510 	add.w	r5, r3, #16
 8002d4c:	fb04 0303 	mla	r3, r4, r3, r0
 8002d50:	446d      	add	r5, sp
 8002d52:	791b      	ldrb	r3, [r3, #4]
 8002d54:	f805 3c10 	strb.w	r3, [r5, #-16]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8002d58:	e7ea      	b.n	8002d30 <ss_get_commands+0xc>
 8002d5a:	bf00      	nop
 8002d5c:	20000070 	.word	0x20000070

08002d60 <simpleserial_get>:
{
 8002d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d64:	b0c2      	sub	sp, #264	@ 0x108
	uint8_t err = 0;
 8002d66:	2500      	movs	r5, #0
 8002d68:	ae02      	add	r6, sp, #8
 8002d6a:	f88d 5007 	strb.w	r5, [sp, #7]
	for (int i = 0; i < 4; i++) {
 8002d6e:	4634      	mov	r4, r6
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 8002d70:	f000 f912 	bl	8002f98 <getch>
 8002d74:	f806 0b01 	strb.w	r0, [r6], #1
		if (data_buf[i] == FRAME_BYTE) {
 8002d78:	b958      	cbnz	r0, 8002d92 <simpleserial_get+0x32>
			goto ERROR;
 8002d7a:	2005      	movs	r0, #5
			err = SS_ERR_FRAME_BYTE;
 8002d7c:	f88d 0007 	strb.w	r0, [sp, #7]
	simpleserial_put('e', 0x01, &err);
 8002d80:	f10d 0207 	add.w	r2, sp, #7
 8002d84:	2101      	movs	r1, #1
 8002d86:	2065      	movs	r0, #101	@ 0x65
 8002d88:	f7ff ff92 	bl	8002cb0 <simpleserial_put>
}
 8002d8c:	b042      	add	sp, #264	@ 0x108
 8002d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < 4; i++) {
 8002d92:	3501      	adds	r5, #1
 8002d94:	2d04      	cmp	r5, #4
 8002d96:	d1eb      	bne.n	8002d70 <simpleserial_get+0x10>
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8002d98:	4629      	mov	r1, r5
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	f7ff ff4c 	bl	8002c38 <unstuff_data>
	for(c = 0; c < num_commands; c++)
 8002da0:	4f24      	ldr	r7, [pc, #144]	@ (8002e34 <simpleserial_get+0xd4>)
		if(commands[c].c == data_buf[1])
 8002da2:	7861      	ldrb	r1, [r4, #1]
	for(c = 0; c < num_commands; c++)
 8002da4:	683a      	ldr	r2, [r7, #0]
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8002da6:	4680      	mov	r8, r0
	for(c = 0; c < num_commands; c++)
 8002da8:	2300      	movs	r3, #0
		if(commands[c].c == data_buf[1])
 8002daa:	200c      	movs	r0, #12
	for(c = 0; c < num_commands; c++)
 8002dac:	fa5f f983 	uxtb.w	r9, r3
 8002db0:	4591      	cmp	r9, r2
 8002db2:	db02      	blt.n	8002dba <simpleserial_get+0x5a>
	if (c == num_commands) {
 8002db4:	d107      	bne.n	8002dc6 <simpleserial_get+0x66>
 8002db6:	2001      	movs	r0, #1
 8002db8:	e7e0      	b.n	8002d7c <simpleserial_get+0x1c>
		if(commands[c].c == data_buf[1])
 8002dba:	fb00 7609 	mla	r6, r0, r9, r7
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	7936      	ldrb	r6, [r6, #4]
 8002dc2:	428e      	cmp	r6, r1
 8002dc4:	d1f2      	bne.n	8002dac <simpleserial_get+0x4c>
	if ((data_buf[3] + 5) < next_frame) {
 8002dc6:	78e3      	ldrb	r3, [r4, #3]
 8002dc8:	3305      	adds	r3, #5
 8002dca:	4543      	cmp	r3, r8
 8002dcc:	da02      	bge.n	8002dd4 <simpleserial_get+0x74>
		goto ERROR;
 8002dce:	2004      	movs	r0, #4
 8002dd0:	e7d4      	b.n	8002d7c <simpleserial_get+0x1c>
	for (; i < data_buf[3] + 5; i++) {
 8002dd2:	4635      	mov	r5, r6
		data_buf[i] = getch();
 8002dd4:	f000 f8e0 	bl	8002f98 <getch>
 8002dd8:	5560      	strb	r0, [r4, r5]
		if (data_buf[i] == FRAME_BYTE) {
 8002dda:	2800      	cmp	r0, #0
 8002ddc:	d0cd      	beq.n	8002d7a <simpleserial_get+0x1a>
	for (; i < data_buf[3] + 5; i++) {
 8002dde:	78e3      	ldrb	r3, [r4, #3]
 8002de0:	1c6e      	adds	r6, r5, #1
 8002de2:	3304      	adds	r3, #4
 8002de4:	42b3      	cmp	r3, r6
 8002de6:	daf4      	bge.n	8002dd2 <simpleserial_get+0x72>
	data_buf[i] = getch();
 8002de8:	f000 f8d6 	bl	8002f98 <getch>
 8002dec:	55a0      	strb	r0, [r4, r6]
	if (data_buf[i] != FRAME_BYTE) {
 8002dee:	2800      	cmp	r0, #0
 8002df0:	d1ed      	bne.n	8002dce <simpleserial_get+0x6e>
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 8002df2:	f1c8 0301 	rsb	r3, r8, #1
 8002df6:	fa53 f186 	uxtab	r1, r3, r6
 8002dfa:	b2c9      	uxtb	r1, r1
 8002dfc:	fa5f fa86 	uxtb.w	sl, r6
 8002e00:	eb04 0008 	add.w	r0, r4, r8
 8002e04:	f7ff ff18 	bl	8002c38 <unstuff_data>
	uint8_t crc = ss_crc(data_buf+1, i-2);
 8002e08:	f1aa 0102 	sub.w	r1, sl, #2
 8002e0c:	b2c9      	uxtb	r1, r1
 8002e0e:	f10d 0009 	add.w	r0, sp, #9
 8002e12:	f7ff feea 	bl	8002bea <ss_crc>
	if (crc != data_buf[i-1]) {
 8002e16:	5d63      	ldrb	r3, [r4, r5]
 8002e18:	4283      	cmp	r3, r0
 8002e1a:	d109      	bne.n	8002e30 <simpleserial_get+0xd0>
	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 8002e1c:	230c      	movs	r3, #12
 8002e1e:	fb03 7709 	mla	r7, r3, r9, r7
 8002e22:	78e2      	ldrb	r2, [r4, #3]
 8002e24:	68fd      	ldr	r5, [r7, #12]
 8002e26:	78a1      	ldrb	r1, [r4, #2]
 8002e28:	7860      	ldrb	r0, [r4, #1]
 8002e2a:	446b      	add	r3, sp
 8002e2c:	47a8      	blx	r5
 8002e2e:	e7a5      	b.n	8002d7c <simpleserial_get+0x1c>
 8002e30:	2002      	movs	r0, #2
 8002e32:	e7a3      	b.n	8002d7c <simpleserial_get+0x1c>
 8002e34:	20000070 	.word	0x20000070

08002e38 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8002e38:	b570      	push	{r4, r5, r6, lr}
 8002e3a:	b096      	sub	sp, #88	@ 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8002e3c:	2400      	movs	r4, #0
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8002e3e:	2603      	movs	r6, #3
 8002e40:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002e44:	a80c      	add	r0, sp, #48	@ 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8002e46:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8002e48:	e9cd 630c 	strd	r6, r3, [sp, #48]	@ 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8002e4c:	9410      	str	r4, [sp, #64]	@ 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8002e4e:	9414      	str	r4, [sp, #80]	@ 0x50
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002e50:	f000 f8d4 	bl	8002ffc <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8002e54:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8002e56:	4621      	mov	r1, r4
 8002e58:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8002e5a:	e9cd 3502 	strd	r3, r5, [sp, #8]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e5e:	e9cd 4404 	strd	r4, r4, [sp, #16]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e62:	9406      	str	r4, [sp, #24]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8002e64:	f000 fb1c 	bl	80034a0 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e68:	4b11      	ldr	r3, [pc, #68]	@ (8002eb0 <platform_init+0x78>)
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8002e70:	615a      	str	r2, [r3, #20]
 8002e72:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002e74:	e9cd 4609 	strd	r4, r6, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8002e7c:	4c0d      	ldr	r4, [pc, #52]	@ (8002eb4 <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e7e:	9301      	str	r3, [sp, #4]
 8002e80:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8002e82:	a907      	add	r1, sp, #28
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8002e84:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8002e88:	4620      	mov	r0, r4
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8002e8a:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8002e8e:	f000 fba7 	bl	80035e0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8002e92:	462a      	mov	r2, r5
 8002e94:	4620      	mov	r0, r4
 8002e96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002e9a:	f000 fc61 	bl	8003760 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8002e9e:	462a      	mov	r2, r5
 8002ea0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	f000 fc5b 	bl	8003760 <HAL_GPIO_WritePin>
#endif
}
 8002eaa:	b016      	add	sp, #88	@ 0x58
 8002eac:	bd70      	pop	{r4, r5, r6, pc}
 8002eae:	bf00      	nop
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	48000800 	.word	0x48000800

08002eb8 <init_uart>:

void init_uart(void)
{
 8002eb8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8002eba:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
{
 8002ebe:	b088      	sub	sp, #32
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GpioInit.Pull      = GPIO_PULLUP;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 8002ece:	4c16      	ldr	r4, [pc, #88]	@ (8002f28 <init_uart+0x70>)
  GpioInit.Alternate = GPIO_AF7_USART1;
 8002ed0:	2307      	movs	r3, #7
 8002ed2:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8002ed4:	6963      	ldr	r3, [r4, #20]
 8002ed6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eda:	6163      	str	r3, [r4, #20]
 8002edc:	6963      	ldr	r3, [r4, #20]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee2:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8002ee4:	a903      	add	r1, sp, #12
 8002ee6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  __GPIOA_CLK_ENABLE();
 8002eea:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8002eec:	f000 fb78 	bl	80035e0 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8002ef0:	480e      	ldr	r0, [pc, #56]	@ (8002f2c <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 8002ef2:	f8df c03c 	ldr.w	ip, [pc, #60]	@ 8002f30 <init_uart+0x78>
 8002ef6:	f44f 3361 	mov.w	r3, #230400	@ 0x38400
 8002efa:	e9c0 c300 	strd	ip, r3, [r0]
  #else
  UartHandle.Init.BaudRate   = 38400;
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8002efe:	2300      	movs	r3, #0
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8002f00:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8002f04:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8002f06:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8002f08:	230c      	movs	r3, #12
 8002f0a:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 8002f0c:	69a3      	ldr	r3, [r4, #24]
 8002f0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f12:	61a3      	str	r3, [r4, #24]
 8002f14:	69a3      	ldr	r3, [r4, #24]
 8002f16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f1a:	9302      	str	r3, [sp, #8]
 8002f1c:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 8002f1e:	f000 fd5b 	bl	80039d8 <HAL_UART_Init>
}
 8002f22:	b008      	add	sp, #32
 8002f24:	bd10      	pop	{r4, pc}
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	20000134 	.word	0x20000134
 8002f30:	40013800 	.word	0x40013800

08002f34 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f34:	4b10      	ldr	r3, [pc, #64]	@ (8002f78 <trigger_setup+0x44>)
{
 8002f36:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002f3e:	615a      	str	r2, [r3, #20]
 8002f40:	695b      	ldr	r3, [r3, #20]
{
 8002f42:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8002f4c:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8002f50:	2301      	movs	r3, #1
 8002f52:	e9cd 4301 	strd	r4, r3, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002f56:	2500      	movs	r5, #0
 8002f58:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8002f5a:	a901      	add	r1, sp, #4
 8002f5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002f60:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8002f64:	f000 fb3c 	bl	80035e0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8002f68:	462a      	mov	r2, r5
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f70:	f000 fbf6 	bl	8003760 <HAL_GPIO_WritePin>
}
 8002f74:	b007      	add	sp, #28
 8002f76:	bd30      	pop	{r4, r5, pc}
 8002f78:	40021000 	.word	0x40021000

08002f7c <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002f82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f86:	f000 bbeb 	b.w	8003760 <HAL_GPIO_WritePin>

08002f8a <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002f90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f94:	f000 bbe4 	b.w	8003760 <HAL_GPIO_WritePin>

08002f98 <getch>:
}

char getch(void)
{
 8002f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8002f9a:	4d0a      	ldr	r5, [pc, #40]	@ (8002fc4 <getch+0x2c>)
    USART1->ICR |= (1 << 3);
 8002f9c:	4c0a      	ldr	r4, [pc, #40]	@ (8002fc8 <getch+0x30>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8002f9e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f10d 0107 	add.w	r1, sp, #7
 8002fa8:	4628      	mov	r0, r5
 8002faa:	f000 fd95 	bl	8003ad8 <HAL_UART_Receive>
 8002fae:	b918      	cbnz	r0, 8002fb8 <getch+0x20>
  //putch(d);
  return d;
}
 8002fb0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002fb4:	b003      	add	sp, #12
 8002fb6:	bd30      	pop	{r4, r5, pc}
    USART1->ICR |= (1 << 3);
 8002fb8:	6a23      	ldr	r3, [r4, #32]
 8002fba:	f043 0308 	orr.w	r3, r3, #8
 8002fbe:	6223      	str	r3, [r4, #32]
 8002fc0:	e7ed      	b.n	8002f9e <getch+0x6>
 8002fc2:	bf00      	nop
 8002fc4:	20000134 	.word	0x20000134
 8002fc8:	40013800 	.word	0x40013800

08002fcc <putch>:

void putch(char c)
{
 8002fcc:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8002fce:	f241 3388 	movw	r3, #5000	@ 0x1388
  uint8_t d  = c;
 8002fd2:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f10d 0107 	add.w	r1, sp, #7
 8002fdc:	4802      	ldr	r0, [pc, #8]	@ (8002fe8 <putch+0x1c>)
 8002fde:	f000 fd25 	bl	8003a2c <HAL_UART_Transmit>
}
 8002fe2:	b003      	add	sp, #12
 8002fe4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fe8:	20000134 	.word	0x20000134

08002fec <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 8002fec:	4b02      	ldr	r3, [pc, #8]	@ (8002ff8 <HAL_GetTick+0xc>)
 8002fee:	6818      	ldr	r0, [r3, #0]
 8002ff0:	1c42      	adds	r2, r0, #1
 8002ff2:	601a      	str	r2, [r3, #0]
}
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	200001a4 	.word	0x200001a4

08002ffc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ffc:	6803      	ldr	r3, [r0, #0]
{
 8002ffe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003002:	07d9      	lsls	r1, r3, #31
{
 8003004:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003006:	d411      	bmi.n	800302c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003008:	6823      	ldr	r3, [r4, #0]
 800300a:	079a      	lsls	r2, r3, #30
 800300c:	f100 808b 	bmi.w	8003126 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003010:	6823      	ldr	r3, [r4, #0]
 8003012:	071e      	lsls	r6, r3, #28
 8003014:	f100 80f3 	bmi.w	80031fe <HAL_RCC_OscConfig+0x202>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	075d      	lsls	r5, r3, #29
 800301c:	f100 8136 	bmi.w	800328c <HAL_RCC_OscConfig+0x290>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003020:	69e2      	ldr	r2, [r4, #28]
 8003022:	2a00      	cmp	r2, #0
 8003024:	f040 81b8 	bne.w	8003398 <HAL_RCC_OscConfig+0x39c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8003028:	2000      	movs	r0, #0
 800302a:	e01f      	b.n	800306c <HAL_RCC_OscConfig+0x70>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800302c:	49b3      	ldr	r1, [pc, #716]	@ (80032fc <HAL_RCC_OscConfig+0x300>)
 800302e:	684b      	ldr	r3, [r1, #4]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	2b04      	cmp	r3, #4
 8003036:	d007      	beq.n	8003048 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003038:	684b      	ldr	r3, [r1, #4]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b08      	cmp	r3, #8
 8003040:	d117      	bne.n	8003072 <HAL_RCC_OscConfig+0x76>
 8003042:	684b      	ldr	r3, [r1, #4]
 8003044:	03db      	lsls	r3, r3, #15
 8003046:	d514      	bpl.n	8003072 <HAL_RCC_OscConfig+0x76>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003048:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800304c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	6809      	ldr	r1, [r1, #0]
 8003052:	fa93 f3a3 	rbit	r3, r3
 8003056:	2201      	movs	r2, #1
 8003058:	fab3 f383 	clz	r3, r3
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	420b      	tst	r3, r1
 8003062:	d0d1      	beq.n	8003008 <HAL_RCC_OscConfig+0xc>
 8003064:	6863      	ldr	r3, [r4, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1ce      	bne.n	8003008 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800306a:	2001      	movs	r0, #1
}
 800306c:	b003      	add	sp, #12
 800306e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003072:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800307a:	d120      	bne.n	80030be <HAL_RCC_OscConfig+0xc2>
 800307c:	680b      	ldr	r3, [r1, #0]
 800307e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003082:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003084:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8003086:	f023 030f 	bic.w	r3, r3, #15
 800308a:	4313      	orrs	r3, r2
 800308c:	62cb      	str	r3, [r1, #44]	@ 0x2c
        tickstart = HAL_GetTick();
 800308e:	f7ff ffad 	bl	8002fec <HAL_GetTick>
 8003092:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
 8003096:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003098:	2701      	movs	r7, #1
 800309a:	fa96 f3a6 	rbit	r3, r6
 800309e:	680a      	ldr	r2, [r1, #0]
 80030a0:	fa96 f3a6 	rbit	r3, r6
 80030a4:	fab3 f383 	clz	r3, r3
 80030a8:	fa07 f303 	lsl.w	r3, r7, r3
 80030ac:	4213      	tst	r3, r2
 80030ae:	d1ab      	bne.n	8003008 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b0:	f7ff ff9c 	bl	8002fec <HAL_GetTick>
 80030b4:	1b40      	subs	r0, r0, r5
 80030b6:	2864      	cmp	r0, #100	@ 0x64
 80030b8:	d9ef      	bls.n	800309a <HAL_RCC_OscConfig+0x9e>
            return HAL_TIMEOUT;
 80030ba:	2003      	movs	r0, #3
 80030bc:	e7d6      	b.n	800306c <HAL_RCC_OscConfig+0x70>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030be:	bb1b      	cbnz	r3, 8003108 <HAL_RCC_OscConfig+0x10c>
 80030c0:	680b      	ldr	r3, [r1, #0]
 80030c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030c6:	600b      	str	r3, [r1, #0]
 80030c8:	680b      	ldr	r3, [r1, #0]
 80030ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030ce:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030d0:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80030d2:	f023 030f 	bic.w	r3, r3, #15
 80030d6:	4313      	orrs	r3, r2
 80030d8:	62cb      	str	r3, [r1, #44]	@ 0x2c
        tickstart = HAL_GetTick();
 80030da:	f7ff ff87 	bl	8002fec <HAL_GetTick>
 80030de:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
 80030e2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030e4:	2701      	movs	r7, #1
 80030e6:	fa96 f3a6 	rbit	r3, r6
 80030ea:	680a      	ldr	r2, [r1, #0]
 80030ec:	fa96 f3a6 	rbit	r3, r6
 80030f0:	fab3 f383 	clz	r3, r3
 80030f4:	fa07 f303 	lsl.w	r3, r7, r3
 80030f8:	4213      	tst	r3, r2
 80030fa:	d085      	beq.n	8003008 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030fc:	f7ff ff76 	bl	8002fec <HAL_GetTick>
 8003100:	1b40      	subs	r0, r0, r5
 8003102:	2864      	cmp	r0, #100	@ 0x64
 8003104:	d9ef      	bls.n	80030e6 <HAL_RCC_OscConfig+0xea>
 8003106:	e7d8      	b.n	80030ba <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003108:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800310c:	680b      	ldr	r3, [r1, #0]
 800310e:	d103      	bne.n	8003118 <HAL_RCC_OscConfig+0x11c>
 8003110:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003114:	600b      	str	r3, [r1, #0]
 8003116:	e7b1      	b.n	800307c <HAL_RCC_OscConfig+0x80>
 8003118:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800311c:	600b      	str	r3, [r1, #0]
 800311e:	680b      	ldr	r3, [r1, #0]
 8003120:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003124:	e7ad      	b.n	8003082 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003126:	4975      	ldr	r1, [pc, #468]	@ (80032fc <HAL_RCC_OscConfig+0x300>)
 8003128:	684b      	ldr	r3, [r1, #4]
 800312a:	f013 0f0c 	tst.w	r3, #12
 800312e:	d007      	beq.n	8003140 <HAL_RCC_OscConfig+0x144>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003130:	684b      	ldr	r3, [r1, #4]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	2b08      	cmp	r3, #8
 8003138:	d11f      	bne.n	800317a <HAL_RCC_OscConfig+0x17e>
 800313a:	684b      	ldr	r3, [r1, #4]
 800313c:	03df      	lsls	r7, r3, #15
 800313e:	d41c      	bmi.n	800317a <HAL_RCC_OscConfig+0x17e>
 8003140:	2302      	movs	r3, #2
 8003142:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003146:	6808      	ldr	r0, [r1, #0]
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	2201      	movs	r2, #1
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	4203      	tst	r3, r0
 8003158:	d002      	beq.n	8003160 <HAL_RCC_OscConfig+0x164>
 800315a:	6923      	ldr	r3, [r4, #16]
 800315c:	4293      	cmp	r3, r2
 800315e:	d184      	bne.n	800306a <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003160:	6808      	ldr	r0, [r1, #0]
 8003162:	22f8      	movs	r2, #248	@ 0xf8
 8003164:	fa92 f2a2 	rbit	r2, r2
 8003168:	6963      	ldr	r3, [r4, #20]
 800316a:	fab2 f282 	clz	r2, r2
 800316e:	4093      	lsls	r3, r2
 8003170:	f020 02f8 	bic.w	r2, r0, #248	@ 0xf8
 8003174:	4313      	orrs	r3, r2
 8003176:	600b      	str	r3, [r1, #0]
 8003178:	e74a      	b.n	8003010 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800317a:	6922      	ldr	r2, [r4, #16]
 800317c:	2501      	movs	r5, #1
 800317e:	b1f2      	cbz	r2, 80031be <HAL_RCC_OscConfig+0x1c2>
 8003180:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8003184:	fab3 f383 	clz	r3, r3
 8003188:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800318c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	2702      	movs	r7, #2
 8003194:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8003196:	f7ff ff29 	bl	8002fec <HAL_GetTick>
 800319a:	4606      	mov	r6, r0
 800319c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a0:	680a      	ldr	r2, [r1, #0]
 80031a2:	fa97 f3a7 	rbit	r3, r7
 80031a6:	fab3 f383 	clz	r3, r3
 80031aa:	fa05 f303 	lsl.w	r3, r5, r3
 80031ae:	4213      	tst	r3, r2
 80031b0:	d1d6      	bne.n	8003160 <HAL_RCC_OscConfig+0x164>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b2:	f7ff ff1b 	bl	8002fec <HAL_GetTick>
 80031b6:	1b80      	subs	r0, r0, r6
 80031b8:	2802      	cmp	r0, #2
 80031ba:	d9ef      	bls.n	800319c <HAL_RCC_OscConfig+0x1a0>
 80031bc:	e77d      	b.n	80030ba <HAL_RCC_OscConfig+0xbe>
 80031be:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 80031c2:	fab3 f383 	clz	r3, r3
 80031c6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80031ca:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	2702      	movs	r7, #2
 80031d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80031d4:	f7ff ff0a 	bl	8002fec <HAL_GetTick>
 80031d8:	4606      	mov	r6, r0
 80031da:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031de:	680a      	ldr	r2, [r1, #0]
 80031e0:	fa97 f3a7 	rbit	r3, r7
 80031e4:	fab3 f383 	clz	r3, r3
 80031e8:	fa05 f303 	lsl.w	r3, r5, r3
 80031ec:	4213      	tst	r3, r2
 80031ee:	f43f af0f 	beq.w	8003010 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031f2:	f7ff fefb 	bl	8002fec <HAL_GetTick>
 80031f6:	1b80      	subs	r0, r0, r6
 80031f8:	2802      	cmp	r0, #2
 80031fa:	d9ee      	bls.n	80031da <HAL_RCC_OscConfig+0x1de>
 80031fc:	e75d      	b.n	80030ba <HAL_RCC_OscConfig+0xbe>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031fe:	69a2      	ldr	r2, [r4, #24]
 8003200:	4d3e      	ldr	r5, [pc, #248]	@ (80032fc <HAL_RCC_OscConfig+0x300>)
 8003202:	483f      	ldr	r0, [pc, #252]	@ (8003300 <HAL_RCC_OscConfig+0x304>)
 8003204:	2101      	movs	r1, #1
 8003206:	b302      	cbz	r2, 800324a <HAL_RCC_OscConfig+0x24e>
 8003208:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 800320c:	fab3 f383 	clz	r3, r3
 8003210:	4403      	add	r3, r0
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	2602      	movs	r6, #2
 8003216:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 8003218:	f7ff fee8 	bl	8002fec <HAL_GetTick>
 800321c:	4607      	mov	r7, r0
 800321e:	fa96 f3a6 	rbit	r3, r6
 8003222:	fa96 f3a6 	rbit	r3, r6
 8003226:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322a:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 800322c:	fa96 f3a6 	rbit	r3, r6
 8003230:	fab3 f383 	clz	r3, r3
 8003234:	fa01 f303 	lsl.w	r3, r1, r3
 8003238:	4213      	tst	r3, r2
 800323a:	f47f aeed 	bne.w	8003018 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800323e:	f7ff fed5 	bl	8002fec <HAL_GetTick>
 8003242:	1bc0      	subs	r0, r0, r7
 8003244:	2802      	cmp	r0, #2
 8003246:	d9ea      	bls.n	800321e <HAL_RCC_OscConfig+0x222>
 8003248:	e737      	b.n	80030ba <HAL_RCC_OscConfig+0xbe>
 800324a:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 800324e:	fab3 f383 	clz	r3, r3
 8003252:	4403      	add	r3, r0
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	2602      	movs	r6, #2
 8003258:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800325a:	f7ff fec7 	bl	8002fec <HAL_GetTick>
 800325e:	4607      	mov	r7, r0
 8003260:	fa96 f3a6 	rbit	r3, r6
 8003264:	fa96 f3a6 	rbit	r3, r6
 8003268:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326c:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 800326e:	fa96 f3a6 	rbit	r3, r6
 8003272:	fab3 f383 	clz	r3, r3
 8003276:	fa01 f303 	lsl.w	r3, r1, r3
 800327a:	4213      	tst	r3, r2
 800327c:	f43f aecc 	beq.w	8003018 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003280:	f7ff feb4 	bl	8002fec <HAL_GetTick>
 8003284:	1bc0      	subs	r0, r0, r7
 8003286:	2802      	cmp	r0, #2
 8003288:	d9ea      	bls.n	8003260 <HAL_RCC_OscConfig+0x264>
 800328a:	e716      	b.n	80030ba <HAL_RCC_OscConfig+0xbe>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800328c:	491b      	ldr	r1, [pc, #108]	@ (80032fc <HAL_RCC_OscConfig+0x300>)
 800328e:	69cb      	ldr	r3, [r1, #28]
 8003290:	00d8      	lsls	r0, r3, #3
 8003292:	d431      	bmi.n	80032f8 <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003294:	69cb      	ldr	r3, [r1, #28]
 8003296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800329a:	61cb      	str	r3, [r1, #28]
 800329c:	69cb      	ldr	r3, [r1, #28]
 800329e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a2:	9301      	str	r3, [sp, #4]
 80032a4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80032a6:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	4e16      	ldr	r6, [pc, #88]	@ (8003304 <HAL_RCC_OscConfig+0x308>)
 80032aa:	6833      	ldr	r3, [r6, #0]
 80032ac:	05da      	lsls	r2, r3, #23
 80032ae:	d52b      	bpl.n	8003308 <HAL_RCC_OscConfig+0x30c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032b0:	68e3      	ldr	r3, [r4, #12]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d138      	bne.n	8003328 <HAL_RCC_OscConfig+0x32c>
 80032b6:	6a0b      	ldr	r3, [r1, #32]
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 80032be:	f7ff fe95 	bl	8002fec <HAL_GetTick>
 80032c2:	2602      	movs	r6, #2
 80032c4:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c6:	f04f 0801 	mov.w	r8, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ca:	f241 3988 	movw	r9, #5000	@ 0x1388
 80032ce:	fa96 f3a6 	rbit	r3, r6
 80032d2:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d6:	6a0a      	ldr	r2, [r1, #32]
 80032d8:	fa96 f3a6 	rbit	r3, r6
 80032dc:	fab3 f383 	clz	r3, r3
 80032e0:	fa08 f303 	lsl.w	r3, r8, r3
 80032e4:	4213      	tst	r3, r2
 80032e6:	d051      	beq.n	800338c <HAL_RCC_OscConfig+0x390>
    if(pwrclkchanged == SET)
 80032e8:	2d00      	cmp	r5, #0
 80032ea:	f43f ae99 	beq.w	8003020 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ee:	69cb      	ldr	r3, [r1, #28]
 80032f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032f4:	61cb      	str	r3, [r1, #28]
 80032f6:	e693      	b.n	8003020 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80032f8:	2500      	movs	r5, #0
 80032fa:	e7d5      	b.n	80032a8 <HAL_RCC_OscConfig+0x2ac>
 80032fc:	40021000 	.word	0x40021000
 8003300:	10908120 	.word	0x10908120
 8003304:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003308:	6833      	ldr	r3, [r6, #0]
 800330a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800330e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003310:	f7ff fe6c 	bl	8002fec <HAL_GetTick>
 8003314:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003316:	6833      	ldr	r3, [r6, #0]
 8003318:	05db      	lsls	r3, r3, #23
 800331a:	d4c9      	bmi.n	80032b0 <HAL_RCC_OscConfig+0x2b4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331c:	f7ff fe66 	bl	8002fec <HAL_GetTick>
 8003320:	1bc0      	subs	r0, r0, r7
 8003322:	2864      	cmp	r0, #100	@ 0x64
 8003324:	d9f7      	bls.n	8003316 <HAL_RCC_OscConfig+0x31a>
 8003326:	e6c8      	b.n	80030ba <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003328:	bb13      	cbnz	r3, 8003370 <HAL_RCC_OscConfig+0x374>
 800332a:	6a0b      	ldr	r3, [r1, #32]
 800332c:	f023 0301 	bic.w	r3, r3, #1
 8003330:	620b      	str	r3, [r1, #32]
 8003332:	6a0b      	ldr	r3, [r1, #32]
 8003334:	f023 0304 	bic.w	r3, r3, #4
 8003338:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 800333a:	f7ff fe57 	bl	8002fec <HAL_GetTick>
 800333e:	2602      	movs	r6, #2
 8003340:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003342:	f04f 0801 	mov.w	r8, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003346:	f241 3988 	movw	r9, #5000	@ 0x1388
 800334a:	fa96 f3a6 	rbit	r3, r6
 800334e:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003352:	6a0a      	ldr	r2, [r1, #32]
 8003354:	fa96 f3a6 	rbit	r3, r6
 8003358:	fab3 f383 	clz	r3, r3
 800335c:	fa08 f303 	lsl.w	r3, r8, r3
 8003360:	4213      	tst	r3, r2
 8003362:	d0c1      	beq.n	80032e8 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003364:	f7ff fe42 	bl	8002fec <HAL_GetTick>
 8003368:	1bc0      	subs	r0, r0, r7
 800336a:	4548      	cmp	r0, r9
 800336c:	d9ed      	bls.n	800334a <HAL_RCC_OscConfig+0x34e>
 800336e:	e6a4      	b.n	80030ba <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003370:	2b05      	cmp	r3, #5
 8003372:	6a0b      	ldr	r3, [r1, #32]
 8003374:	d103      	bne.n	800337e <HAL_RCC_OscConfig+0x382>
 8003376:	f043 0304 	orr.w	r3, r3, #4
 800337a:	620b      	str	r3, [r1, #32]
 800337c:	e79b      	b.n	80032b6 <HAL_RCC_OscConfig+0x2ba>
 800337e:	f023 0301 	bic.w	r3, r3, #1
 8003382:	620b      	str	r3, [r1, #32]
 8003384:	6a0b      	ldr	r3, [r1, #32]
 8003386:	f023 0304 	bic.w	r3, r3, #4
 800338a:	e797      	b.n	80032bc <HAL_RCC_OscConfig+0x2c0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800338c:	f7ff fe2e 	bl	8002fec <HAL_GetTick>
 8003390:	1bc0      	subs	r0, r0, r7
 8003392:	4548      	cmp	r0, r9
 8003394:	d99b      	bls.n	80032ce <HAL_RCC_OscConfig+0x2d2>
 8003396:	e690      	b.n	80030ba <HAL_RCC_OscConfig+0xbe>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003398:	493f      	ldr	r1, [pc, #252]	@ (8003498 <HAL_RCC_OscConfig+0x49c>)
 800339a:	684b      	ldr	r3, [r1, #4]
 800339c:	f003 030c 	and.w	r3, r3, #12
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	f43f ae62 	beq.w	800306a <HAL_RCC_OscConfig+0x6e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033a6:	2a02      	cmp	r2, #2
 80033a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033ac:	d150      	bne.n	8003450 <HAL_RCC_OscConfig+0x454>
 80033ae:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80033b2:	fab3 f383 	clz	r3, r3
 80033b6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80033ba:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80033c4:	f7ff fe12 	bl	8002fec <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 800349c <HAL_RCC_OscConfig+0x4a0>
        tickstart = HAL_GetTick();
 80033cc:	4606      	mov	r6, r0
 80033ce:	f04f 7700 	mov.w	r7, #33554432	@ 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033d2:	2501      	movs	r5, #1
 80033d4:	fa97 f3a7 	rbit	r3, r7
 80033d8:	680a      	ldr	r2, [r1, #0]
 80033da:	fa97 f3a7 	rbit	r3, r7
 80033de:	fab3 f383 	clz	r3, r3
 80033e2:	fa05 f303 	lsl.w	r3, r5, r3
 80033e6:	4213      	tst	r3, r2
 80033e8:	d12c      	bne.n	8003444 <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ea:	e9d4 0308 	ldrd	r0, r3, [r4, #32]
 80033ee:	684a      	ldr	r2, [r1, #4]
 80033f0:	4303      	orrs	r3, r0
 80033f2:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 80033f6:	4313      	orrs	r3, r2
 80033f8:	604b      	str	r3, [r1, #4]
 80033fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033fe:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8003402:	fab3 f383 	clz	r3, r3
 8003406:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800340a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800340e:	009b      	lsls	r3, r3, #2
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003410:	4f22      	ldr	r7, [pc, #136]	@ (800349c <HAL_RCC_OscConfig+0x4a0>)
        __HAL_RCC_PLL_ENABLE();
 8003412:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8003414:	f7ff fdea 	bl	8002fec <HAL_GetTick>
 8003418:	f04f 7500 	mov.w	r5, #33554432	@ 0x2000000
 800341c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800341e:	2601      	movs	r6, #1
 8003420:	fa95 f3a5 	rbit	r3, r5
 8003424:	680a      	ldr	r2, [r1, #0]
 8003426:	fa95 f3a5 	rbit	r3, r5
 800342a:	fab3 f383 	clz	r3, r3
 800342e:	fa06 f303 	lsl.w	r3, r6, r3
 8003432:	4213      	tst	r3, r2
 8003434:	f47f adf8 	bne.w	8003028 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003438:	f7ff fdd8 	bl	8002fec <HAL_GetTick>
 800343c:	1b00      	subs	r0, r0, r4
 800343e:	42b8      	cmp	r0, r7
 8003440:	d9ee      	bls.n	8003420 <HAL_RCC_OscConfig+0x424>
 8003442:	e63a      	b.n	80030ba <HAL_RCC_OscConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003444:	f7ff fdd2 	bl	8002fec <HAL_GetTick>
 8003448:	1b83      	subs	r3, r0, r6
 800344a:	4543      	cmp	r3, r8
 800344c:	d9c2      	bls.n	80033d4 <HAL_RCC_OscConfig+0x3d8>
 800344e:	e634      	b.n	80030ba <HAL_RCC_OscConfig+0xbe>
 8003450:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8003454:	fab3 f383 	clz	r3, r3
 8003458:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800345c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003466:	f7ff fdc1 	bl	8002fec <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800346a:	4f0c      	ldr	r7, [pc, #48]	@ (800349c <HAL_RCC_OscConfig+0x4a0>)
        tickstart = HAL_GetTick();
 800346c:	4604      	mov	r4, r0
 800346e:	f04f 7500 	mov.w	r5, #33554432	@ 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003472:	2601      	movs	r6, #1
 8003474:	fa95 f3a5 	rbit	r3, r5
 8003478:	680a      	ldr	r2, [r1, #0]
 800347a:	fa95 f3a5 	rbit	r3, r5
 800347e:	fab3 f383 	clz	r3, r3
 8003482:	fa06 f303 	lsl.w	r3, r6, r3
 8003486:	4213      	tst	r3, r2
 8003488:	f43f adce 	beq.w	8003028 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800348c:	f7ff fdae 	bl	8002fec <HAL_GetTick>
 8003490:	1b00      	subs	r0, r0, r4
 8003492:	42b8      	cmp	r0, r7
 8003494:	d9ee      	bls.n	8003474 <HAL_RCC_OscConfig+0x478>
 8003496:	e610      	b.n	80030ba <HAL_RCC_OscConfig+0xbe>
 8003498:	40021000 	.word	0x40021000
 800349c:	00030d40 	.word	0x00030d40

080034a0 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80034a0:	4a4d      	ldr	r2, [pc, #308]	@ (80035d8 <HAL_RCC_ClockConfig+0x138>)
{
 80034a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80034a4:	6813      	ldr	r3, [r2, #0]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	428b      	cmp	r3, r1
{
 80034ac:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80034ae:	d311      	bcc.n	80034d4 <HAL_RCC_ClockConfig+0x34>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b0:	6822      	ldr	r2, [r4, #0]
 80034b2:	0795      	lsls	r5, r2, #30
 80034b4:	d41a      	bmi.n	80034ec <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b6:	07d0      	lsls	r0, r2, #31
 80034b8:	d420      	bmi.n	80034fc <HAL_RCC_ClockConfig+0x5c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80034ba:	4a47      	ldr	r2, [pc, #284]	@ (80035d8 <HAL_RCC_ClockConfig+0x138>)
 80034bc:	6813      	ldr	r3, [r2, #0]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	428b      	cmp	r3, r1
 80034c4:	d86c      	bhi.n	80035a0 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c6:	6822      	ldr	r2, [r4, #0]
 80034c8:	0751      	lsls	r1, r2, #29
 80034ca:	d474      	bmi.n	80035b6 <HAL_RCC_ClockConfig+0x116>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034cc:	0713      	lsls	r3, r2, #28
 80034ce:	d47a      	bmi.n	80035c6 <HAL_RCC_ClockConfig+0x126>
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 80034d0:	2000      	movs	r0, #0
 80034d2:	e00a      	b.n	80034ea <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d4:	6813      	ldr	r3, [r2, #0]
 80034d6:	f023 0307 	bic.w	r3, r3, #7
 80034da:	430b      	orrs	r3, r1
 80034dc:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034de:	6813      	ldr	r3, [r2, #0]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	428b      	cmp	r3, r1
 80034e6:	d0e3      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 80034e8:	2001      	movs	r0, #1
}
 80034ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ec:	483b      	ldr	r0, [pc, #236]	@ (80035dc <HAL_RCC_ClockConfig+0x13c>)
 80034ee:	68a5      	ldr	r5, [r4, #8]
 80034f0:	6843      	ldr	r3, [r0, #4]
 80034f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034f6:	432b      	orrs	r3, r5
 80034f8:	6043      	str	r3, [r0, #4]
 80034fa:	e7dc      	b.n	80034b6 <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034fc:	6862      	ldr	r2, [r4, #4]
 80034fe:	4d37      	ldr	r5, [pc, #220]	@ (80035dc <HAL_RCC_ClockConfig+0x13c>)
 8003500:	2a01      	cmp	r2, #1
 8003502:	d125      	bne.n	8003550 <HAL_RCC_ClockConfig+0xb0>
 8003504:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003508:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350c:	6828      	ldr	r0, [r5, #0]
 800350e:	fa93 f3a3 	rbit	r3, r3
 8003512:	fab3 f383 	clz	r3, r3
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351c:	d0e4      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x48>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800351e:	686b      	ldr	r3, [r5, #4]
 8003520:	f023 0303 	bic.w	r3, r3, #3
 8003524:	4313      	orrs	r3, r2
 8003526:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8003528:	f7ff fd60 	bl	8002fec <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800352c:	6863      	ldr	r3, [r4, #4]
 800352e:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8003530:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003532:	f241 3788 	movw	r7, #5000	@ 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003536:	d11c      	bne.n	8003572 <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003538:	686b      	ldr	r3, [r5, #4]
 800353a:	f003 030c 	and.w	r3, r3, #12
 800353e:	2b04      	cmp	r3, #4
 8003540:	d0bb      	beq.n	80034ba <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003542:	f7ff fd53 	bl	8002fec <HAL_GetTick>
 8003546:	1b80      	subs	r0, r0, r6
 8003548:	42b8      	cmp	r0, r7
 800354a:	d9f5      	bls.n	8003538 <HAL_RCC_ClockConfig+0x98>
          return HAL_TIMEOUT;
 800354c:	2003      	movs	r0, #3
 800354e:	e7cc      	b.n	80034ea <HAL_RCC_ClockConfig+0x4a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003550:	2a02      	cmp	r2, #2
 8003552:	bf0c      	ite	eq
 8003554:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 8003558:	2302      	movne	r3, #2
 800355a:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355e:	682e      	ldr	r6, [r5, #0]
 8003560:	fa93 f3a3 	rbit	r3, r3
 8003564:	2001      	movs	r0, #1
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	fa00 f303 	lsl.w	r3, r0, r3
 800356e:	4233      	tst	r3, r6
 8003570:	e7d4      	b.n	800351c <HAL_RCC_ClockConfig+0x7c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003572:	2b02      	cmp	r3, #2
 8003574:	d10f      	bne.n	8003596 <HAL_RCC_ClockConfig+0xf6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003576:	686b      	ldr	r3, [r5, #4]
 8003578:	f003 030c 	and.w	r3, r3, #12
 800357c:	2b08      	cmp	r3, #8
 800357e:	d09c      	beq.n	80034ba <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003580:	f7ff fd34 	bl	8002fec <HAL_GetTick>
 8003584:	1b80      	subs	r0, r0, r6
 8003586:	42b8      	cmp	r0, r7
 8003588:	d9f5      	bls.n	8003576 <HAL_RCC_ClockConfig+0xd6>
 800358a:	e7df      	b.n	800354c <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800358c:	f7ff fd2e 	bl	8002fec <HAL_GetTick>
 8003590:	1b80      	subs	r0, r0, r6
 8003592:	42b8      	cmp	r0, r7
 8003594:	d8da      	bhi.n	800354c <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003596:	686b      	ldr	r3, [r5, #4]
 8003598:	f013 0f0c 	tst.w	r3, #12
 800359c:	d1f6      	bne.n	800358c <HAL_RCC_ClockConfig+0xec>
 800359e:	e78c      	b.n	80034ba <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a0:	6813      	ldr	r3, [r2, #0]
 80035a2:	f023 0307 	bic.w	r3, r3, #7
 80035a6:	430b      	orrs	r3, r1
 80035a8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035aa:	6813      	ldr	r3, [r2, #0]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	428b      	cmp	r3, r1
 80035b2:	d199      	bne.n	80034e8 <HAL_RCC_ClockConfig+0x48>
 80035b4:	e787      	b.n	80034c6 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b6:	4909      	ldr	r1, [pc, #36]	@ (80035dc <HAL_RCC_ClockConfig+0x13c>)
 80035b8:	68e0      	ldr	r0, [r4, #12]
 80035ba:	684b      	ldr	r3, [r1, #4]
 80035bc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80035c0:	4303      	orrs	r3, r0
 80035c2:	604b      	str	r3, [r1, #4]
 80035c4:	e782      	b.n	80034cc <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035c6:	4a05      	ldr	r2, [pc, #20]	@ (80035dc <HAL_RCC_ClockConfig+0x13c>)
 80035c8:	6921      	ldr	r1, [r4, #16]
 80035ca:	6853      	ldr	r3, [r2, #4]
 80035cc:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80035d0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80035d4:	6053      	str	r3, [r2, #4]
 80035d6:	e77b      	b.n	80034d0 <HAL_RCC_ClockConfig+0x30>
 80035d8:	40022000 	.word	0x40022000
 80035dc:	40021000 	.word	0x40021000

080035e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e4:	f8df 816c 	ldr.w	r8, [pc, #364]	@ 8003754 <HAL_GPIO_Init+0x174>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035e8:	4c5b      	ldr	r4, [pc, #364]	@ (8003758 <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00U;
 80035ea:	2300      	movs	r3, #0
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80035ec:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != RESET)
 80035f0:	680a      	ldr	r2, [r1, #0]
 80035f2:	fa32 f503 	lsrs.w	r5, r2, r3
 80035f6:	d102      	bne.n	80035fe <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 80035f8:	b003      	add	sp, #12
 80035fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80035fe:	2501      	movs	r5, #1
 8003600:	fa05 fa03 	lsl.w	sl, r5, r3
    if(iocurrent)
 8003604:	ea1a 0202 	ands.w	r2, sl, r2
 8003608:	f000 8099 	beq.w	800373e <HAL_GPIO_Init+0x15e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800360c:	684d      	ldr	r5, [r1, #4]
 800360e:	f025 0e10 	bic.w	lr, r5, #16
 8003612:	f1be 0f02 	cmp.w	lr, #2
 8003616:	d111      	bne.n	800363c <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3];
 8003618:	08df      	lsrs	r7, r3, #3
 800361a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800361e:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8003622:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003624:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003628:	fa09 fb0c 	lsl.w	fp, r9, ip
 800362c:	ea26 0b0b 	bic.w	fp, r6, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003630:	690e      	ldr	r6, [r1, #16]
 8003632:	fa06 f60c 	lsl.w	r6, r6, ip
 8003636:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->AFR[position >> 3] = temp;
 800363a:	623e      	str	r6, [r7, #32]
      temp = GPIOx->MODER;
 800363c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003640:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003644:	2603      	movs	r6, #3
 8003646:	fa06 f70c 	lsl.w	r7, r6, ip
 800364a:	ea2b 0b07 	bic.w	fp, fp, r7
 800364e:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003650:	f005 0703 	and.w	r7, r5, #3
 8003654:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003658:	f10e 3eff 	add.w	lr, lr, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800365c:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003660:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 8003664:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003666:	d811      	bhi.n	800368c <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8003668:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800366a:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 800366e:	68cf      	ldr	r7, [r1, #12]
 8003670:	fa07 f70c 	lsl.w	r7, r7, ip
 8003674:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8003678:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800367a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800367c:	ea27 0e0a 	bic.w	lr, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003680:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8003684:	409f      	lsls	r7, r3
 8003686:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800368a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800368c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800368e:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003690:	688e      	ldr	r6, [r1, #8]
 8003692:	fa06 f60c 	lsl.w	r6, r6, ip
 8003696:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8003698:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800369a:	00ee      	lsls	r6, r5, #3
 800369c:	d54f      	bpl.n	800373e <HAL_GPIO_Init+0x15e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369e:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80036a2:	f046 0601 	orr.w	r6, r6, #1
 80036a6:	f8c8 6018 	str.w	r6, [r8, #24]
 80036aa:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80036ae:	f023 0703 	bic.w	r7, r3, #3
 80036b2:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80036b6:	f006 0601 	and.w	r6, r6, #1
 80036ba:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 80036be:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80036c0:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036c4:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80036c6:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80036c8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80036cc:	fa09 fe0c 	lsl.w	lr, r9, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036d0:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80036d4:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036d8:	d033      	beq.n	8003742 <HAL_GPIO_Init+0x162>
 80036da:	4e20      	ldr	r6, [pc, #128]	@ (800375c <HAL_GPIO_Init+0x17c>)
 80036dc:	42b0      	cmp	r0, r6
 80036de:	d032      	beq.n	8003746 <HAL_GPIO_Init+0x166>
 80036e0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80036e4:	42b0      	cmp	r0, r6
 80036e6:	d030      	beq.n	800374a <HAL_GPIO_Init+0x16a>
 80036e8:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80036ec:	42b0      	cmp	r0, r6
 80036ee:	d02e      	beq.n	800374e <HAL_GPIO_Init+0x16e>
 80036f0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80036f4:	42b0      	cmp	r0, r6
 80036f6:	bf14      	ite	ne
 80036f8:	2605      	movne	r6, #5
 80036fa:	2604      	moveq	r6, #4
 80036fc:	fa06 f60c 	lsl.w	r6, r6, ip
 8003700:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8003704:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8003706:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8003708:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800370a:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
        temp &= ~((uint32_t)iocurrent);
 800370e:	bf0c      	ite	eq
 8003710:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8003712:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 8003714:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8003716:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003718:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 800371c:	bf0c      	ite	eq
 800371e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8003720:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 8003722:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8003724:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003726:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 800372a:	bf0c      	ite	eq
 800372c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800372e:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 8003730:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8003732:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003734:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8003736:	bf54      	ite	pl
 8003738:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800373a:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 800373c:	60e6      	str	r6, [r4, #12]
    position++;
 800373e:	3301      	adds	r3, #1
 8003740:	e756      	b.n	80035f0 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003742:	2600      	movs	r6, #0
 8003744:	e7da      	b.n	80036fc <HAL_GPIO_Init+0x11c>
 8003746:	2601      	movs	r6, #1
 8003748:	e7d8      	b.n	80036fc <HAL_GPIO_Init+0x11c>
 800374a:	2602      	movs	r6, #2
 800374c:	e7d6      	b.n	80036fc <HAL_GPIO_Init+0x11c>
 800374e:	2603      	movs	r6, #3
 8003750:	e7d4      	b.n	80036fc <HAL_GPIO_Init+0x11c>
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000
 8003758:	40010400 	.word	0x40010400
 800375c:	48000400 	.word	0x48000400

08003760 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003760:	b10a      	cbz	r2, 8003766 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003762:	6181      	str	r1, [r0, #24]
 8003764:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003766:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8003768:	4770      	bx	lr
 800376a:	0000      	movs	r0, r0

0800376c <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800376c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800376e:	6883      	ldr	r3, [r0, #8]
 8003770:	69c1      	ldr	r1, [r0, #28]
{
 8003772:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003774:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003776:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003778:	432b      	orrs	r3, r5
 800377a:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800377c:	f424 4416 	bic.w	r4, r4, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003780:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003782:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003786:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003788:	4323      	orrs	r3, r4
 800378a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800378c:	6853      	ldr	r3, [r2, #4]
 800378e:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003790:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003792:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003796:	4323      	orrs	r3, r4
 8003798:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800379a:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800379c:	6983      	ldr	r3, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800379e:	f424 6430 	bic.w	r4, r4, #2816	@ 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80037a2:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80037a4:	4323      	orrs	r3, r4
 80037a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037a8:	4b54      	ldr	r3, [pc, #336]	@ (80038fc <UART_SetConfig+0x190>)
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d112      	bne.n	80037d4 <UART_SetConfig+0x68>
 80037ae:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 80037b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b4:	f003 0303 	and.w	r3, r3, #3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d06b      	beq.n	8003894 <UART_SetConfig+0x128>
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d01e      	beq.n	80037fe <UART_SetConfig+0x92>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80037c0:	6840      	ldr	r0, [r0, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037c2:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80037c6:	ea4f 0350 	mov.w	r3, r0, lsr #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ca:	f040 8089 	bne.w	80038e0 <UART_SetConfig+0x174>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80037ce:	f503 0361 	add.w	r3, r3, #14745600	@ 0xe10000
 80037d2:	e01e      	b.n	8003812 <UART_SetConfig+0xa6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037d4:	4b4a      	ldr	r3, [pc, #296]	@ (8003900 <UART_SetConfig+0x194>)
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d11e      	bne.n	8003818 <UART_SetConfig+0xac>
 80037da:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 80037de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037e8:	d054      	beq.n	8003894 <UART_SetConfig+0x128>
 80037ea:	d805      	bhi.n	80037f8 <UART_SetConfig+0x8c>
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d05a      	beq.n	80038a6 <UART_SetConfig+0x13a>
 80037f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037f4:	d0e4      	beq.n	80037c0 <UART_SetConfig+0x54>
 80037f6:	e038      	b.n	800386a <UART_SetConfig+0xfe>
 80037f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80037fc:	d135      	bne.n	800386a <UART_SetConfig+0xfe>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80037fe:	6840      	ldr	r0, [r0, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003800:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003804:	ea4f 0350 	mov.w	r3, r0, lsr #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003808:	d16f      	bne.n	80038ea <UART_SetConfig+0x17e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800380a:	f103 73f4 	add.w	r3, r3, #31981568	@ 0x1e80000
 800380e:	f503 4390 	add.w	r3, r3, #18432	@ 0x4800
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003812:	fbb3 f3f0 	udiv	r3, r3, r0
 8003816:	e050      	b.n	80038ba <UART_SetConfig+0x14e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003818:	4b3a      	ldr	r3, [pc, #232]	@ (8003904 <UART_SetConfig+0x198>)
 800381a:	429a      	cmp	r2, r3
 800381c:	d10f      	bne.n	800383e <UART_SetConfig+0xd2>
 800381e:	f503 33e4 	add.w	r3, r3, #116736	@ 0x1c800
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003828:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800382c:	d032      	beq.n	8003894 <UART_SetConfig+0x128>
 800382e:	d803      	bhi.n	8003838 <UART_SetConfig+0xcc>
 8003830:	b3cb      	cbz	r3, 80038a6 <UART_SetConfig+0x13a>
 8003832:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003836:	e7dd      	b.n	80037f4 <UART_SetConfig+0x88>
 8003838:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800383c:	e7de      	b.n	80037fc <UART_SetConfig+0x90>
 800383e:	4b32      	ldr	r3, [pc, #200]	@ (8003908 <UART_SetConfig+0x19c>)
 8003840:	429a      	cmp	r2, r3
 8003842:	d10f      	bne.n	8003864 <UART_SetConfig+0xf8>
 8003844:	f503 33e2 	add.w	r3, r3, #115712	@ 0x1c400
 8003848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800384e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003852:	d01f      	beq.n	8003894 <UART_SetConfig+0x128>
 8003854:	d803      	bhi.n	800385e <UART_SetConfig+0xf2>
 8003856:	b333      	cbz	r3, 80038a6 <UART_SetConfig+0x13a>
 8003858:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800385c:	e7ca      	b.n	80037f4 <UART_SetConfig+0x88>
 800385e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003862:	e7cb      	b.n	80037fc <UART_SetConfig+0x90>
 8003864:	4b29      	ldr	r3, [pc, #164]	@ (800390c <UART_SetConfig+0x1a0>)
 8003866:	429a      	cmp	r2, r3
 8003868:	d005      	beq.n	8003876 <UART_SetConfig+0x10a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800386a:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800386e:	f04f 0001 	mov.w	r0, #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003872:	d02b      	beq.n	80038cc <UART_SetConfig+0x160>
    }
  }

  return ret;

}
 8003874:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003876:	4b26      	ldr	r3, [pc, #152]	@ (8003910 <UART_SetConfig+0x1a4>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800387e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003882:	d007      	beq.n	8003894 <UART_SetConfig+0x128>
 8003884:	d803      	bhi.n	800388e <UART_SetConfig+0x122>
 8003886:	b173      	cbz	r3, 80038a6 <UART_SetConfig+0x13a>
 8003888:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800388c:	e7b2      	b.n	80037f4 <UART_SetConfig+0x88>
 800388e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003892:	e7b3      	b.n	80037fc <UART_SetConfig+0x90>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003894:	6840      	ldr	r0, [r0, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003896:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800389a:	ea4f 0350 	mov.w	r3, r0, lsr #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800389e:	d129      	bne.n	80038f4 <UART_SetConfig+0x188>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80038a0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80038a4:	e7b5      	b.n	8003812 <UART_SetConfig+0xa6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038a6:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80038aa:	6841      	ldr	r1, [r0, #4]
 80038ac:	ea4f 0351 	mov.w	r3, r1, lsr #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038b0:	d10e      	bne.n	80038d0 <UART_SetConfig+0x164>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80038b2:	f503 0361 	add.w	r3, r3, #14745600	@ 0xe10000
 80038b6:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80038ba:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80038bc:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80038be:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038c2:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80038c6:	430b      	orrs	r3, r1
 80038c8:	60d3      	str	r3, [r2, #12]
 80038ca:	e7d3      	b.n	8003874 <UART_SetConfig+0x108>
  uint16_t usartdiv                   = 0x0000U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	e7f6      	b.n	80038be <UART_SetConfig+0x152>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80038d0:	f503 03e1 	add.w	r3, r3, #7372800	@ 0x708000
 80038d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80038d8:	b29b      	uxth	r3, r3
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80038da:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80038dc:	2000      	movs	r0, #0
 80038de:	e7c9      	b.n	8003874 <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80038e0:	f503 03e1 	add.w	r3, r3, #7372800	@ 0x708000
 80038e4:	fbb3 f3f0 	udiv	r3, r3, r0
 80038e8:	e7f6      	b.n	80038d8 <UART_SetConfig+0x16c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80038ea:	f503 0374 	add.w	r3, r3, #15990784	@ 0xf40000
 80038ee:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80038f2:	e7f7      	b.n	80038e4 <UART_SetConfig+0x178>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80038f4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80038f8:	e7f4      	b.n	80038e4 <UART_SetConfig+0x178>
 80038fa:	bf00      	nop
 80038fc:	40013800 	.word	0x40013800
 8003900:	40004400 	.word	0x40004400
 8003904:	40004800 	.word	0x40004800
 8003908:	40004c00 	.word	0x40004c00
 800390c:	40005000 	.word	0x40005000
 8003910:	40021000 	.word	0x40021000

08003914 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003918:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800391c:	4604      	mov	r4, r0
 800391e:	4616      	mov	r6, r2
 8003920:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003922:	6825      	ldr	r5, [r4, #0]
 8003924:	69eb      	ldr	r3, [r5, #28]
 8003926:	ea31 0303 	bics.w	r3, r1, r3
 800392a:	bf0c      	ite	eq
 800392c:	2301      	moveq	r3, #1
 800392e:	2300      	movne	r3, #0
 8003930:	42b3      	cmp	r3, r6
 8003932:	d001      	beq.n	8003938 <UART_WaitOnFlagUntilTimeout+0x24>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003934:	2000      	movs	r0, #0
 8003936:	e016      	b.n	8003966 <UART_WaitOnFlagUntilTimeout+0x52>
    if(Timeout != HAL_MAX_DELAY)
 8003938:	f1b8 3fff 	cmp.w	r8, #4294967295
 800393c:	d0f2      	beq.n	8003924 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800393e:	f1b8 0f00 	cmp.w	r8, #0
 8003942:	d112      	bne.n	800396a <UART_WaitOnFlagUntilTimeout+0x56>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003944:	682b      	ldr	r3, [r5, #0]
 8003946:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800394a:	602b      	str	r3, [r5, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394c:	68ab      	ldr	r3, [r5, #8]
 800394e:	f023 0301 	bic.w	r3, r3, #1
 8003952:	60ab      	str	r3, [r5, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8003954:	2320      	movs	r3, #32
 8003956:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800395a:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
        __HAL_UNLOCK(huart);
 800395e:	2300      	movs	r3, #0
 8003960:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
        return HAL_TIMEOUT;
 8003964:	2003      	movs	r0, #3
}
 8003966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800396a:	f7ff fb3f 	bl	8002fec <HAL_GetTick>
 800396e:	1bc0      	subs	r0, r0, r7
 8003970:	4540      	cmp	r0, r8
 8003972:	d9d6      	bls.n	8003922 <UART_WaitOnFlagUntilTimeout+0xe>
 8003974:	e7e6      	b.n	8003944 <UART_WaitOnFlagUntilTimeout+0x30>

08003976 <UART_CheckIdleState>:
{
 8003976:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003978:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397a:	2100      	movs	r1, #0
 800397c:	66c1      	str	r1, [r0, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 800397e:	f7ff fb35 	bl	8002fec <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003982:	6826      	ldr	r6, [r4, #0]
 8003984:	6833      	ldr	r3, [r6, #0]
 8003986:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8003988:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800398a:	d416      	bmi.n	80039ba <UART_CheckIdleState+0x44>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800398c:	6833      	ldr	r3, [r6, #0]
 800398e:	075b      	lsls	r3, r3, #29
 8003990:	d50a      	bpl.n	80039a8 <UART_CheckIdleState+0x32>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003992:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	2200      	movs	r2, #0
 800399a:	462b      	mov	r3, r5
 800399c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80039a0:	4620      	mov	r0, r4
 80039a2:	f7ff ffb7 	bl	8003914 <UART_WaitOnFlagUntilTimeout>
 80039a6:	b9a0      	cbnz	r0, 80039d2 <UART_CheckIdleState+0x5c>
  huart->gState  = HAL_UART_STATE_READY;
 80039a8:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80039aa:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80039ac:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
  __HAL_UNLOCK(huart);
 80039b0:	f884 0068 	strb.w	r0, [r4, #104]	@ 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80039b4:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
  return HAL_OK;
 80039b8:	e00c      	b.n	80039d4 <UART_CheckIdleState+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	460a      	mov	r2, r1
 80039c2:	4603      	mov	r3, r0
 80039c4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80039c8:	4620      	mov	r0, r4
 80039ca:	f7ff ffa3 	bl	8003914 <UART_WaitOnFlagUntilTimeout>
 80039ce:	2800      	cmp	r0, #0
 80039d0:	d0dc      	beq.n	800398c <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80039d2:	2003      	movs	r0, #3
}
 80039d4:	b002      	add	sp, #8
 80039d6:	bd70      	pop	{r4, r5, r6, pc}

080039d8 <HAL_UART_Init>:
{
 80039d8:	b538      	push	{r3, r4, r5, lr}
  if(huart == NULL)
 80039da:	4604      	mov	r4, r0
 80039dc:	b320      	cbz	r0, 8003a28 <HAL_UART_Init+0x50>
  if(huart->gState == HAL_UART_STATE_RESET)
 80039de:	f890 3069 	ldrb.w	r3, [r0, #105]	@ 0x69
 80039e2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80039e6:	b90b      	cbnz	r3, 80039ec <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80039e8:	f880 2068 	strb.w	r2, [r0, #104]	@ 0x68
  __HAL_UART_DISABLE(huart);
 80039ec:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80039ee:	2324      	movs	r3, #36	@ 0x24
 80039f0:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
  __HAL_UART_DISABLE(huart);
 80039f4:	682b      	ldr	r3, [r5, #0]
 80039f6:	f023 0301 	bic.w	r3, r3, #1
 80039fa:	602b      	str	r3, [r5, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039fc:	4620      	mov	r0, r4
 80039fe:	f7ff feb5 	bl	800376c <UART_SetConfig>
 8003a02:	2801      	cmp	r0, #1
 8003a04:	d010      	beq.n	8003a28 <HAL_UART_Init+0x50>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a06:	686b      	ldr	r3, [r5, #4]
 8003a08:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8003a0c:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a0e:	68ab      	ldr	r3, [r5, #8]
 8003a10:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8003a14:	60ab      	str	r3, [r5, #8]
  __HAL_UART_ENABLE(huart);
 8003a16:	682b      	ldr	r3, [r5, #0]
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	602b      	str	r3, [r5, #0]
  return UART_CheckIdleState(huart);
 8003a1e:	4620      	mov	r0, r4
}
 8003a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return UART_CheckIdleState(huart);
 8003a24:	f7ff bfa7 	b.w	8003976 <UART_CheckIdleState>
}
 8003a28:	2001      	movs	r0, #1
 8003a2a:	bd38      	pop	{r3, r4, r5, pc}

08003a2c <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a2e:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003a30:	f890 3069 	ldrb.w	r3, [r0, #105]	@ 0x69
 8003a34:	2b20      	cmp	r3, #32
{
 8003a36:	460d      	mov	r5, r1
 8003a38:	4604      	mov	r4, r0
 8003a3a:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8003a3c:	d14a      	bne.n	8003ad4 <HAL_UART_Transmit+0xa8>
  {
    if((pData == NULL ) || (Size == 0U))
 8003a3e:	2d00      	cmp	r5, #0
 8003a40:	d046      	beq.n	8003ad0 <HAL_UART_Transmit+0xa4>
 8003a42:	2a00      	cmp	r2, #0
 8003a44:	d044      	beq.n	8003ad0 <HAL_UART_Transmit+0xa4>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a46:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d042      	beq.n	8003ad4 <HAL_UART_Transmit+0xa8>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f880 3068 	strb.w	r3, [r0, #104]	@ 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a54:	2300      	movs	r3, #0
 8003a56:	66c3      	str	r3, [r0, #108]	@ 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a58:	2321      	movs	r3, #33	@ 0x21
 8003a5a:	f880 3069 	strb.w	r3, [r0, #105]	@ 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003a5e:	f7ff fac5 	bl	8002fec <HAL_GetTick>

    huart->TxXferSize = Size;
 8003a62:	f8a4 1050 	strh.w	r1, [r4, #80]	@ 0x50
    tickstart = HAL_GetTick();
 8003a66:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8003a68:	f8a4 1052 	strh.w	r1, [r4, #82]	@ 0x52
    while(huart->TxXferCount > 0U)
 8003a6c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8003a70:	b292      	uxth	r2, r2
 8003a72:	b962      	cbnz	r2, 8003a8e <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a74:	9600      	str	r6, [sp, #0]
 8003a76:	463b      	mov	r3, r7
 8003a78:	2140      	movs	r1, #64	@ 0x40
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	f7ff ff4a 	bl	8003914 <UART_WaitOnFlagUntilTimeout>
 8003a80:	b998      	cbnz	r0, 8003aaa <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a82:	2320      	movs	r3, #32
 8003a84:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a88:	f884 0068 	strb.w	r0, [r4, #104]	@ 0x68

    return HAL_OK;
 8003a8c:	e00e      	b.n	8003aac <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 8003a8e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8003a92:	3a01      	subs	r2, #1
 8003a94:	b292      	uxth	r2, r2
 8003a96:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a9a:	463b      	mov	r3, r7
 8003a9c:	9600      	str	r6, [sp, #0]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2180      	movs	r1, #128	@ 0x80
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	f7ff ff36 	bl	8003914 <UART_WaitOnFlagUntilTimeout>
 8003aa8:	b110      	cbz	r0, 8003ab0 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8003aaa:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003aac:	b003      	add	sp, #12
 8003aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ab0:	68a3      	ldr	r3, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003ab2:	6822      	ldr	r2, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ab8:	d107      	bne.n	8003aca <HAL_UART_Transmit+0x9e>
 8003aba:	6923      	ldr	r3, [r4, #16]
 8003abc:	b92b      	cbnz	r3, 8003aca <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003abe:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003ac6:	8513      	strh	r3, [r2, #40]	@ 0x28
 8003ac8:	e7d0      	b.n	8003a6c <HAL_UART_Transmit+0x40>
 8003aca:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003ace:	e7fa      	b.n	8003ac6 <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	e7eb      	b.n	8003aac <HAL_UART_Transmit+0x80>
    __HAL_LOCK(huart);
 8003ad4:	2002      	movs	r0, #2
 8003ad6:	e7e9      	b.n	8003aac <HAL_UART_Transmit+0x80>

08003ad8 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003adc:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8003ade:	f890 306a 	ldrb.w	r3, [r0, #106]	@ 0x6a
 8003ae2:	2b20      	cmp	r3, #32
{
 8003ae4:	460d      	mov	r5, r1
 8003ae6:	4604      	mov	r4, r0
 8003ae8:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8003aea:	d15c      	bne.n	8003ba6 <HAL_UART_Receive+0xce>
  {
    if((pData == NULL ) || (Size == 0U))
 8003aec:	2d00      	cmp	r5, #0
 8003aee:	d058      	beq.n	8003ba2 <HAL_UART_Receive+0xca>
 8003af0:	2a00      	cmp	r2, #0
 8003af2:	d056      	beq.n	8003ba2 <HAL_UART_Receive+0xca>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003af4:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d054      	beq.n	8003ba6 <HAL_UART_Receive+0xce>
 8003afc:	2301      	movs	r3, #1
 8003afe:	f880 3068 	strb.w	r3, [r0, #104]	@ 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 8003b02:	6803      	ldr	r3, [r0, #0]
 8003b04:	f04f 32ff 	mov.w	r2, #4294967295
 8003b08:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	66c3      	str	r3, [r0, #108]	@ 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b0e:	2322      	movs	r3, #34	@ 0x22
 8003b10:	f880 306a 	strb.w	r3, [r0, #106]	@ 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003b14:	f7ff fa6a 	bl	8002fec <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003b18:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8003b1a:	f8a4 1058 	strh.w	r1, [r4, #88]	@ 0x58
    UART_MASK_COMPUTATION(huart);
 8003b1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8003b22:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 8003b24:	f8a4 105a 	strh.w	r1, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 8003b28:	d115      	bne.n	8003b56 <HAL_UART_Receive+0x7e>
 8003b2a:	6923      	ldr	r3, [r4, #16]
 8003b2c:	b98b      	cbnz	r3, 8003b52 <HAL_UART_Receive+0x7a>
 8003b2e:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8003b32:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003b36:	f8b4 705c 	ldrh.w	r7, [r4, #92]	@ 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8003b3a:	f8b4 005a 	ldrh.w	r0, [r4, #90]	@ 0x5a
 8003b3e:	b280      	uxth	r0, r0
 8003b40:	b980      	cbnz	r0, 8003b64 <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b42:	2320      	movs	r3, #32
 8003b44:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b48:	f884 0068 	strb.w	r0, [r4, #104]	@ 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003b4c:	b002      	add	sp, #8
 8003b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8003b52:	23ff      	movs	r3, #255	@ 0xff
 8003b54:	e7ed      	b.n	8003b32 <HAL_UART_Receive+0x5a>
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1ed      	bne.n	8003b36 <HAL_UART_Receive+0x5e>
 8003b5a:	6923      	ldr	r3, [r4, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0f8      	beq.n	8003b52 <HAL_UART_Receive+0x7a>
 8003b60:	237f      	movs	r3, #127	@ 0x7f
 8003b62:	e7e6      	b.n	8003b32 <HAL_UART_Receive+0x5a>
      huart->RxXferCount--;
 8003b64:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 8003b68:	3a01      	subs	r2, #1
 8003b6a:	b292      	uxth	r2, r2
 8003b6c:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b70:	4643      	mov	r3, r8
 8003b72:	9600      	str	r6, [sp, #0]
 8003b74:	2200      	movs	r2, #0
 8003b76:	2120      	movs	r1, #32
 8003b78:	4620      	mov	r0, r4
 8003b7a:	f7ff fecb 	bl	8003914 <UART_WaitOnFlagUntilTimeout>
 8003b7e:	b9a0      	cbnz	r0, 8003baa <HAL_UART_Receive+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b80:	68a2      	ldr	r2, [r4, #8]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8003b82:	6823      	ldr	r3, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b84:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8003b88:	d106      	bne.n	8003b98 <HAL_UART_Receive+0xc0>
 8003b8a:	6922      	ldr	r2, [r4, #16]
 8003b8c:	b922      	cbnz	r2, 8003b98 <HAL_UART_Receive+0xc0>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8003b8e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003b90:	403b      	ands	r3, r7
 8003b92:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8003b96:	e7d0      	b.n	8003b3a <HAL_UART_Receive+0x62>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003b98:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003b9a:	403b      	ands	r3, r7
 8003b9c:	f805 3b01 	strb.w	r3, [r5], #1
 8003ba0:	e7cb      	b.n	8003b3a <HAL_UART_Receive+0x62>
      return  HAL_ERROR;
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	e7d2      	b.n	8003b4c <HAL_UART_Receive+0x74>
    __HAL_LOCK(huart);
 8003ba6:	2002      	movs	r0, #2
 8003ba8:	e7d0      	b.n	8003b4c <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 8003baa:	2003      	movs	r0, #3
 8003bac:	e7ce      	b.n	8003b4c <HAL_UART_Receive+0x74>
 8003bae:	0000      	movs	r0, r0

08003bb0 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8003bdc <_sbrk+0x2c>)
 8003bb2:	6811      	ldr	r1, [r2, #0]
{
 8003bb4:	b508      	push	{r3, lr}
 8003bb6:	4603      	mov	r3, r0
	if (heap_end == 0)
 8003bb8:	b909      	cbnz	r1, 8003bbe <_sbrk+0xe>
		heap_end = &end;
 8003bba:	4909      	ldr	r1, [pc, #36]	@ (8003be0 <_sbrk+0x30>)
 8003bbc:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8003bbe:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8003bc0:	4669      	mov	r1, sp
 8003bc2:	4403      	add	r3, r0
 8003bc4:	428b      	cmp	r3, r1
 8003bc6:	d906      	bls.n	8003bd6 <_sbrk+0x26>
	{
		errno = ENOMEM;
 8003bc8:	f7fd fb54 	bl	8001274 <__errno>
 8003bcc:	230c      	movs	r3, #12
 8003bce:	6003      	str	r3, [r0, #0]
		return (char *) -1;
 8003bd0:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (char *) prev_heap_end;
}
 8003bd4:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8003bd6:	6013      	str	r3, [r2, #0]
	return (char *) prev_heap_end;
 8003bd8:	e7fc      	b.n	8003bd4 <_sbrk+0x24>
 8003bda:	bf00      	nop
 8003bdc:	200001ac 	.word	0x200001ac
 8003be0:	20000330 	.word	0x20000330

08003be4 <Reset_Handler>:
 8003be4:	2100      	movs	r1, #0
 8003be6:	e003      	b.n	8003bf0 <LoopCopyDataInit>

08003be8 <CopyDataInit>:
 8003be8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c18 <LoopForever+0x2>)
 8003bea:	585b      	ldr	r3, [r3, r1]
 8003bec:	5043      	str	r3, [r0, r1]
 8003bee:	3104      	adds	r1, #4

08003bf0 <LoopCopyDataInit>:
 8003bf0:	480a      	ldr	r0, [pc, #40]	@ (8003c1c <LoopForever+0x6>)
 8003bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8003c20 <LoopForever+0xa>)
 8003bf4:	1842      	adds	r2, r0, r1
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d3f6      	bcc.n	8003be8 <CopyDataInit>
 8003bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8003c24 <LoopForever+0xe>)
 8003bfc:	e002      	b.n	8003c04 <LoopFillZerobss>

08003bfe <FillZerobss>:
 8003bfe:	2300      	movs	r3, #0
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	3204      	adds	r2, #4

08003c04 <LoopFillZerobss>:
 8003c04:	4b08      	ldr	r3, [pc, #32]	@ (8003c28 <LoopForever+0x12>)
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d3f9      	bcc.n	8003bfe <FillZerobss>
 8003c0a:	f3af 8000 	nop.w
 8003c0e:	f7fd fb37 	bl	8001280 <__libc_init_array>
 8003c12:	f7fe feef 	bl	80029f4 <main>

08003c16 <LoopForever>:
 8003c16:	e7fe      	b.n	8003c16 <LoopForever>
 8003c18:	08003d40 	.word	0x08003d40
 8003c1c:	20000000 	.word	0x20000000
 8003c20:	2000006c 	.word	0x2000006c
 8003c24:	2000006c 	.word	0x2000006c
 8003c28:	20000330 	.word	0x20000330

08003c2c <BusFault_Handler>:
 8003c2c:	e7fe      	b.n	8003c2c <BusFault_Handler>
 8003c2e:	0000      	movs	r0, r0

08003c30 <_init>:
 8003c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c32:	bf00      	nop
 8003c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c36:	bc08      	pop	{r3}
 8003c38:	469e      	mov	lr, r3
 8003c3a:	4770      	bx	lr

08003c3c <_fini>:
 8003c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3e:	bf00      	nop
 8003c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c42:	bc08      	pop	{r3}
 8003c44:	469e      	mov	lr, r3
 8003c46:	4770      	bx	lr
