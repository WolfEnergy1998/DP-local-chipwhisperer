
simpleserial-target-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b68  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003cf8  08003cf8  00004cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003de0  08003de0  0000506c  2**0
                  CONTENTS
  4 .ARM          00000008  08003de0  08003de0  00004de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003de8  08003de8  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003de8  08003de8  00004de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dec  08003dec  00004dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003df0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  2000006c  08003e5c  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000330  08003e5c  00005330  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001899c  00000000  00000000  00005096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005900  00000000  00000000  0001da32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00003363  00000000  00000000  00023332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  00026698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000780  00000000  00000000  00026ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000099fc  00000000  00000000  00027620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000031d2  00000000  00000000  0003101c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000012  00000000  00000000  000341ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016d0  00000000  00000000  00034200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  000358d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000070  00000000  00000000  00035a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loclists 000031b2  00000000  00000000  00035a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_rnglists 000002c1  00000000  00000000  00038c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 00000140  00000000  00000000  00038ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <expf>:
 8000190:	b538      	push	{r3, r4, r5, lr}
 8000192:	4604      	mov	r4, r0
 8000194:	f000 f82c 	bl	80001f0 <__ieee754_expf>
 8000198:	4605      	mov	r5, r0
 800019a:	4620      	mov	r0, r4
 800019c:	f000 f820 	bl	80001e0 <finitef>
 80001a0:	b148      	cbz	r0, 80001b6 <expf+0x26>
 80001a2:	490d      	ldr	r1, [pc, #52]	@ (80001d8 <expf+0x48>)
 80001a4:	4620      	mov	r0, r4
 80001a6:	f000 fc57 	bl	8000a58 <__aeabi_fcmpgt>
 80001aa:	b930      	cbnz	r0, 80001ba <expf+0x2a>
 80001ac:	490b      	ldr	r1, [pc, #44]	@ (80001dc <expf+0x4c>)
 80001ae:	4620      	mov	r0, r4
 80001b0:	f000 fc34 	bl	8000a1c <__aeabi_fcmplt>
 80001b4:	b948      	cbnz	r0, 80001ca <expf+0x3a>
 80001b6:	4628      	mov	r0, r5
 80001b8:	bd38      	pop	{r3, r4, r5, pc}
 80001ba:	f001 f8ad 	bl	8001318 <__errno>
 80001be:	f04f 45ff 	mov.w	r5, #2139095040	@ 0x7f800000
 80001c2:	2322      	movs	r3, #34	@ 0x22
 80001c4:	6003      	str	r3, [r0, #0]
 80001c6:	4628      	mov	r0, r5
 80001c8:	bd38      	pop	{r3, r4, r5, pc}
 80001ca:	f001 f8a5 	bl	8001318 <__errno>
 80001ce:	2322      	movs	r3, #34	@ 0x22
 80001d0:	2500      	movs	r5, #0
 80001d2:	6003      	str	r3, [r0, #0]
 80001d4:	e7ef      	b.n	80001b6 <expf+0x26>
 80001d6:	bf00      	nop
 80001d8:	42b17217 	.word	0x42b17217
 80001dc:	c2cff1b5 	.word	0xc2cff1b5

080001e0 <finitef>:
 80001e0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80001e4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80001e8:	bfac      	ite	ge
 80001ea:	2000      	movge	r0, #0
 80001ec:	2001      	movlt	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__ieee754_expf>:
 80001f0:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80001f4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	4604      	mov	r4, r0
 80001fe:	d86c      	bhi.n	80002da <__ieee754_expf+0xea>
 8000200:	ea4f 75d0 	mov.w	r5, r0, lsr #31
 8000204:	f000 80c6 	beq.w	8000394 <__ieee754_expf+0x1a4>
 8000208:	497b      	ldr	r1, [pc, #492]	@ (80003f8 <__ieee754_expf+0x208>)
 800020a:	4288      	cmp	r0, r1
 800020c:	f300 80b4 	bgt.w	8000378 <__ieee754_expf+0x188>
 8000210:	2800      	cmp	r0, #0
 8000212:	f2c0 80b6 	blt.w	8000382 <__ieee754_expf+0x192>
 8000216:	4b79      	ldr	r3, [pc, #484]	@ (80003fc <__ieee754_expf+0x20c>)
 8000218:	429a      	cmp	r2, r3
 800021a:	d963      	bls.n	80002e4 <__ieee754_expf+0xf4>
 800021c:	4b78      	ldr	r3, [pc, #480]	@ (8000400 <__ieee754_expf+0x210>)
 800021e:	429a      	cmp	r2, r3
 8000220:	f200 80c5 	bhi.w	80003ae <__ieee754_expf+0x1be>
 8000224:	4e77      	ldr	r6, [pc, #476]	@ (8000404 <__ieee754_expf+0x214>)
 8000226:	4620      	mov	r0, r4
 8000228:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 800022c:	f000 f94e 	bl	80004cc <__aeabi_fsub>
 8000230:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8000234:	f1c5 0601 	rsb	r6, r5, #1
 8000238:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800023c:	4607      	mov	r7, r0
 800023e:	1b76      	subs	r6, r6, r5
 8000240:	4641      	mov	r1, r8
 8000242:	4638      	mov	r0, r7
 8000244:	f000 f942 	bl	80004cc <__aeabi_fsub>
 8000248:	4601      	mov	r1, r0
 800024a:	4604      	mov	r4, r0
 800024c:	f000 fa48 	bl	80006e0 <__aeabi_fmul>
 8000250:	496d      	ldr	r1, [pc, #436]	@ (8000408 <__ieee754_expf+0x218>)
 8000252:	4605      	mov	r5, r0
 8000254:	f000 fa44 	bl	80006e0 <__aeabi_fmul>
 8000258:	496c      	ldr	r1, [pc, #432]	@ (800040c <__ieee754_expf+0x21c>)
 800025a:	f000 f937 	bl	80004cc <__aeabi_fsub>
 800025e:	4629      	mov	r1, r5
 8000260:	f000 fa3e 	bl	80006e0 <__aeabi_fmul>
 8000264:	496a      	ldr	r1, [pc, #424]	@ (8000410 <__ieee754_expf+0x220>)
 8000266:	f000 f933 	bl	80004d0 <__addsf3>
 800026a:	4629      	mov	r1, r5
 800026c:	f000 fa38 	bl	80006e0 <__aeabi_fmul>
 8000270:	4968      	ldr	r1, [pc, #416]	@ (8000414 <__ieee754_expf+0x224>)
 8000272:	f000 f92b 	bl	80004cc <__aeabi_fsub>
 8000276:	4629      	mov	r1, r5
 8000278:	f000 fa32 	bl	80006e0 <__aeabi_fmul>
 800027c:	4966      	ldr	r1, [pc, #408]	@ (8000418 <__ieee754_expf+0x228>)
 800027e:	f000 f927 	bl	80004d0 <__addsf3>
 8000282:	4629      	mov	r1, r5
 8000284:	f000 fa2c 	bl	80006e0 <__aeabi_fmul>
 8000288:	4601      	mov	r1, r0
 800028a:	4620      	mov	r0, r4
 800028c:	f000 f91e 	bl	80004cc <__aeabi_fsub>
 8000290:	4605      	mov	r5, r0
 8000292:	4601      	mov	r1, r0
 8000294:	4620      	mov	r0, r4
 8000296:	f000 fa23 	bl	80006e0 <__aeabi_fmul>
 800029a:	46aa      	mov	sl, r5
 800029c:	4681      	mov	r9, r0
 800029e:	2e00      	cmp	r6, #0
 80002a0:	d052      	beq.n	8000348 <__ieee754_expf+0x158>
 80002a2:	4629      	mov	r1, r5
 80002a4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80002a8:	f000 f910 	bl	80004cc <__aeabi_fsub>
 80002ac:	4601      	mov	r1, r0
 80002ae:	4648      	mov	r0, r9
 80002b0:	f000 faca 	bl	8000848 <__aeabi_fdiv>
 80002b4:	4601      	mov	r1, r0
 80002b6:	4640      	mov	r0, r8
 80002b8:	f000 f908 	bl	80004cc <__aeabi_fsub>
 80002bc:	4639      	mov	r1, r7
 80002be:	f000 f905 	bl	80004cc <__aeabi_fsub>
 80002c2:	4601      	mov	r1, r0
 80002c4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80002c8:	f000 f900 	bl	80004cc <__aeabi_fsub>
 80002cc:	f116 0f7d 	cmn.w	r6, #125	@ 0x7d
 80002d0:	db64      	blt.n	800039c <__ieee754_expf+0x1ac>
 80002d2:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	4601      	mov	r1, r0
 80002dc:	f000 f8f8 	bl	80004d0 <__addsf3>
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	f1b2 5f50 	cmp.w	r2, #872415232	@ 0x34000000
 80002e8:	d209      	bcs.n	80002fe <__ieee754_expf+0x10e>
 80002ea:	494c      	ldr	r1, [pc, #304]	@ (800041c <__ieee754_expf+0x22c>)
 80002ec:	4620      	mov	r0, r4
 80002ee:	f000 f8ef 	bl	80004d0 <__addsf3>
 80002f2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80002f6:	f000 fbaf 	bl	8000a58 <__aeabi_fcmpgt>
 80002fa:	2800      	cmp	r0, #0
 80002fc:	d175      	bne.n	80003ea <__ieee754_expf+0x1fa>
 80002fe:	4621      	mov	r1, r4
 8000300:	4620      	mov	r0, r4
 8000302:	f000 f9ed 	bl	80006e0 <__aeabi_fmul>
 8000306:	4940      	ldr	r1, [pc, #256]	@ (8000408 <__ieee754_expf+0x218>)
 8000308:	4605      	mov	r5, r0
 800030a:	f000 f9e9 	bl	80006e0 <__aeabi_fmul>
 800030e:	493f      	ldr	r1, [pc, #252]	@ (800040c <__ieee754_expf+0x21c>)
 8000310:	f000 f8dc 	bl	80004cc <__aeabi_fsub>
 8000314:	4629      	mov	r1, r5
 8000316:	f000 f9e3 	bl	80006e0 <__aeabi_fmul>
 800031a:	493d      	ldr	r1, [pc, #244]	@ (8000410 <__ieee754_expf+0x220>)
 800031c:	f000 f8d8 	bl	80004d0 <__addsf3>
 8000320:	4629      	mov	r1, r5
 8000322:	f000 f9dd 	bl	80006e0 <__aeabi_fmul>
 8000326:	493b      	ldr	r1, [pc, #236]	@ (8000414 <__ieee754_expf+0x224>)
 8000328:	f000 f8d0 	bl	80004cc <__aeabi_fsub>
 800032c:	4629      	mov	r1, r5
 800032e:	f000 f9d7 	bl	80006e0 <__aeabi_fmul>
 8000332:	4939      	ldr	r1, [pc, #228]	@ (8000418 <__ieee754_expf+0x228>)
 8000334:	f000 f8cc 	bl	80004d0 <__addsf3>
 8000338:	4629      	mov	r1, r5
 800033a:	f000 f9d1 	bl	80006e0 <__aeabi_fmul>
 800033e:	4601      	mov	r1, r0
 8000340:	4620      	mov	r0, r4
 8000342:	f000 f8c3 	bl	80004cc <__aeabi_fsub>
 8000346:	4682      	mov	sl, r0
 8000348:	4651      	mov	r1, sl
 800034a:	4620      	mov	r0, r4
 800034c:	f000 f9c8 	bl	80006e0 <__aeabi_fmul>
 8000350:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000354:	4605      	mov	r5, r0
 8000356:	4650      	mov	r0, sl
 8000358:	f000 f8b8 	bl	80004cc <__aeabi_fsub>
 800035c:	4601      	mov	r1, r0
 800035e:	4628      	mov	r0, r5
 8000360:	f000 fa72 	bl	8000848 <__aeabi_fdiv>
 8000364:	4621      	mov	r1, r4
 8000366:	f000 f8b1 	bl	80004cc <__aeabi_fsub>
 800036a:	4601      	mov	r1, r0
 800036c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8000370:	f000 f8ac 	bl	80004cc <__aeabi_fsub>
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800037c:	2000      	movs	r0, #0
 800037e:	f000 b877 	b.w	8000470 <__math_oflowf>
 8000382:	4b27      	ldr	r3, [pc, #156]	@ (8000420 <__ieee754_expf+0x230>)
 8000384:	429a      	cmp	r2, r3
 8000386:	f67f af46 	bls.w	8000216 <__ieee754_expf+0x26>
 800038a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800038e:	2000      	movs	r0, #0
 8000390:	f000 b86a 	b.w	8000468 <__math_uflowf>
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0a3      	beq.n	80002e0 <__ieee754_expf+0xf0>
 8000398:	2000      	movs	r0, #0
 800039a:	e7a1      	b.n	80002e0 <__ieee754_expf+0xf0>
 800039c:	3664      	adds	r6, #100	@ 0x64
 800039e:	f04f 6158 	mov.w	r1, #226492416	@ 0xd800000
 80003a2:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
 80003a6:	f000 f99b 	bl	80006e0 <__aeabi_fmul>
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	491d      	ldr	r1, [pc, #116]	@ (8000424 <__ieee754_expf+0x234>)
 80003b0:	4620      	mov	r0, r4
 80003b2:	f000 f995 	bl	80006e0 <__aeabi_fmul>
 80003b6:	4b13      	ldr	r3, [pc, #76]	@ (8000404 <__ieee754_expf+0x214>)
 80003b8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80003bc:	6919      	ldr	r1, [r3, #16]
 80003be:	f000 f887 	bl	80004d0 <__addsf3>
 80003c2:	f000 fb69 	bl	8000a98 <__aeabi_f2iz>
 80003c6:	4606      	mov	r6, r0
 80003c8:	f000 f936 	bl	8000638 <__aeabi_i2f>
 80003cc:	4916      	ldr	r1, [pc, #88]	@ (8000428 <__ieee754_expf+0x238>)
 80003ce:	4605      	mov	r5, r0
 80003d0:	f000 f986 	bl	80006e0 <__aeabi_fmul>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4620      	mov	r0, r4
 80003d8:	f000 f878 	bl	80004cc <__aeabi_fsub>
 80003dc:	4913      	ldr	r1, [pc, #76]	@ (800042c <__ieee754_expf+0x23c>)
 80003de:	4607      	mov	r7, r0
 80003e0:	4628      	mov	r0, r5
 80003e2:	f000 f97d 	bl	80006e0 <__aeabi_fmul>
 80003e6:	4680      	mov	r8, r0
 80003e8:	e72a      	b.n	8000240 <__ieee754_expf+0x50>
 80003ea:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80003ee:	4620      	mov	r0, r4
 80003f0:	f000 f86e 	bl	80004d0 <__addsf3>
 80003f4:	e774      	b.n	80002e0 <__ieee754_expf+0xf0>
 80003f6:	bf00      	nop
 80003f8:	42b17217 	.word	0x42b17217
 80003fc:	3eb17218 	.word	0x3eb17218
 8000400:	3f851591 	.word	0x3f851591
 8000404:	08003cf8 	.word	0x08003cf8
 8000408:	3331bb4c 	.word	0x3331bb4c
 800040c:	35ddea0e 	.word	0x35ddea0e
 8000410:	388ab355 	.word	0x388ab355
 8000414:	3b360b61 	.word	0x3b360b61
 8000418:	3e2aaaab 	.word	0x3e2aaaab
 800041c:	7149f2ca 	.word	0x7149f2ca
 8000420:	42cff1b5 	.word	0x42cff1b5
 8000424:	3fb8aa3b 	.word	0x3fb8aa3b
 8000428:	3f317180 	.word	0x3f317180
 800042c:	3717f7d1 	.word	0x3717f7d1

08000430 <with_errnof>:
 8000430:	b538      	push	{r3, r4, r5, lr}
 8000432:	4605      	mov	r5, r0
 8000434:	460c      	mov	r4, r1
 8000436:	f000 ff6f 	bl	8001318 <__errno>
 800043a:	4603      	mov	r3, r0
 800043c:	4628      	mov	r0, r5
 800043e:	601c      	str	r4, [r3, #0]
 8000440:	bd38      	pop	{r3, r4, r5, pc}
 8000442:	bf00      	nop

08000444 <xflowf>:
 8000444:	b508      	push	{r3, lr}
 8000446:	b138      	cbz	r0, 8000458 <xflowf+0x14>
 8000448:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800044c:	f000 f948 	bl	80006e0 <__aeabi_fmul>
 8000450:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000454:	2122      	movs	r1, #34	@ 0x22
 8000456:	e7eb      	b.n	8000430 <with_errnof>
 8000458:	4608      	mov	r0, r1
 800045a:	f000 f941 	bl	80006e0 <__aeabi_fmul>
 800045e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000462:	2122      	movs	r1, #34	@ 0x22
 8000464:	e7e4      	b.n	8000430 <with_errnof>
 8000466:	bf00      	nop

08000468 <__math_uflowf>:
 8000468:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800046c:	e7ea      	b.n	8000444 <xflowf>
 800046e:	bf00      	nop

08000470 <__math_oflowf>:
 8000470:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8000474:	e7e6      	b.n	8000444 <xflowf>
 8000476:	bf00      	nop

08000478 <__math_divzerof>:
 8000478:	b508      	push	{r3, lr}
 800047a:	b138      	cbz	r0, 800048c <__math_divzerof+0x14>
 800047c:	4805      	ldr	r0, [pc, #20]	@ (8000494 <__math_divzerof+0x1c>)
 800047e:	2100      	movs	r1, #0
 8000480:	f000 f9e2 	bl	8000848 <__aeabi_fdiv>
 8000484:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000488:	2122      	movs	r1, #34	@ 0x22
 800048a:	e7d1      	b.n	8000430 <with_errnof>
 800048c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8000490:	e7f5      	b.n	800047e <__math_divzerof+0x6>
 8000492:	bf00      	nop
 8000494:	bf800000 	.word	0xbf800000

08000498 <__math_invalidf>:
 8000498:	b510      	push	{r4, lr}
 800049a:	4601      	mov	r1, r0
 800049c:	4604      	mov	r4, r0
 800049e:	f000 f815 	bl	80004cc <__aeabi_fsub>
 80004a2:	4601      	mov	r1, r0
 80004a4:	f000 f9d0 	bl	8000848 <__aeabi_fdiv>
 80004a8:	4621      	mov	r1, r4
 80004aa:	4603      	mov	r3, r0
 80004ac:	4620      	mov	r0, r4
 80004ae:	461c      	mov	r4, r3
 80004b0:	f000 fadc 	bl	8000a6c <__aeabi_fcmpun>
 80004b4:	b920      	cbnz	r0, 80004c0 <__math_invalidf+0x28>
 80004b6:	4620      	mov	r0, r4
 80004b8:	2121      	movs	r1, #33	@ 0x21
 80004ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80004be:	e7b7      	b.n	8000430 <with_errnof>
 80004c0:	4620      	mov	r0, r4
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_frsub>:
 80004c4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__addsf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_fsub>:
 80004cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080004d0 <__addsf3>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	bf1f      	itttt	ne
 80004d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004d8:	ea92 0f03 	teqne	r2, r3
 80004dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004e4:	d06a      	beq.n	80005bc <__addsf3+0xec>
 80004e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80004ee:	bfc1      	itttt	gt
 80004f0:	18d2      	addgt	r2, r2, r3
 80004f2:	4041      	eorgt	r1, r0
 80004f4:	4048      	eorgt	r0, r1
 80004f6:	4041      	eorgt	r1, r0
 80004f8:	bfb8      	it	lt
 80004fa:	425b      	neglt	r3, r3
 80004fc:	2b19      	cmp	r3, #25
 80004fe:	bf88      	it	hi
 8000500:	4770      	bxhi	lr
 8000502:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000506:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800050a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800050e:	bf18      	it	ne
 8000510:	4240      	negne	r0, r0
 8000512:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000516:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800051a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800051e:	bf18      	it	ne
 8000520:	4249      	negne	r1, r1
 8000522:	ea92 0f03 	teq	r2, r3
 8000526:	d03f      	beq.n	80005a8 <__addsf3+0xd8>
 8000528:	f1a2 0201 	sub.w	r2, r2, #1
 800052c:	fa41 fc03 	asr.w	ip, r1, r3
 8000530:	eb10 000c 	adds.w	r0, r0, ip
 8000534:	f1c3 0320 	rsb	r3, r3, #32
 8000538:	fa01 f103 	lsl.w	r1, r1, r3
 800053c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000540:	d502      	bpl.n	8000548 <__addsf3+0x78>
 8000542:	4249      	negs	r1, r1
 8000544:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000548:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800054c:	d313      	bcc.n	8000576 <__addsf3+0xa6>
 800054e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000552:	d306      	bcc.n	8000562 <__addsf3+0x92>
 8000554:	0840      	lsrs	r0, r0, #1
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	f102 0201 	add.w	r2, r2, #1
 800055e:	2afe      	cmp	r2, #254	@ 0xfe
 8000560:	d251      	bcs.n	8000606 <__addsf3+0x136>
 8000562:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000566:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800056a:	bf08      	it	eq
 800056c:	f020 0001 	biceq.w	r0, r0, #1
 8000570:	ea40 0003 	orr.w	r0, r0, r3
 8000574:	4770      	bx	lr
 8000576:	0049      	lsls	r1, r1, #1
 8000578:	eb40 0000 	adc.w	r0, r0, r0
 800057c:	3a01      	subs	r2, #1
 800057e:	bf28      	it	cs
 8000580:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000584:	d2ed      	bcs.n	8000562 <__addsf3+0x92>
 8000586:	fab0 fc80 	clz	ip, r0
 800058a:	f1ac 0c08 	sub.w	ip, ip, #8
 800058e:	ebb2 020c 	subs.w	r2, r2, ip
 8000592:	fa00 f00c 	lsl.w	r0, r0, ip
 8000596:	bfaa      	itet	ge
 8000598:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800059c:	4252      	neglt	r2, r2
 800059e:	4318      	orrge	r0, r3
 80005a0:	bfbc      	itt	lt
 80005a2:	40d0      	lsrlt	r0, r2
 80005a4:	4318      	orrlt	r0, r3
 80005a6:	4770      	bx	lr
 80005a8:	f092 0f00 	teq	r2, #0
 80005ac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80005b0:	bf06      	itte	eq
 80005b2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80005b6:	3201      	addeq	r2, #1
 80005b8:	3b01      	subne	r3, #1
 80005ba:	e7b5      	b.n	8000528 <__addsf3+0x58>
 80005bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005c4:	bf18      	it	ne
 80005c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005ca:	d021      	beq.n	8000610 <__addsf3+0x140>
 80005cc:	ea92 0f03 	teq	r2, r3
 80005d0:	d004      	beq.n	80005dc <__addsf3+0x10c>
 80005d2:	f092 0f00 	teq	r2, #0
 80005d6:	bf08      	it	eq
 80005d8:	4608      	moveq	r0, r1
 80005da:	4770      	bx	lr
 80005dc:	ea90 0f01 	teq	r0, r1
 80005e0:	bf1c      	itt	ne
 80005e2:	2000      	movne	r0, #0
 80005e4:	4770      	bxne	lr
 80005e6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80005ea:	d104      	bne.n	80005f6 <__addsf3+0x126>
 80005ec:	0040      	lsls	r0, r0, #1
 80005ee:	bf28      	it	cs
 80005f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80005f4:	4770      	bx	lr
 80005f6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80005fa:	bf3c      	itt	cc
 80005fc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000600:	4770      	bxcc	lr
 8000602:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000606:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800060a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800060e:	4770      	bx	lr
 8000610:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000614:	bf16      	itet	ne
 8000616:	4608      	movne	r0, r1
 8000618:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800061c:	4601      	movne	r1, r0
 800061e:	0242      	lsls	r2, r0, #9
 8000620:	bf06      	itte	eq
 8000622:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000626:	ea90 0f01 	teqeq	r0, r1
 800062a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800062e:	4770      	bx	lr

08000630 <__aeabi_ui2f>:
 8000630:	f04f 0300 	mov.w	r3, #0
 8000634:	e004      	b.n	8000640 <__aeabi_i2f+0x8>
 8000636:	bf00      	nop

08000638 <__aeabi_i2f>:
 8000638:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	ea5f 0c00 	movs.w	ip, r0
 8000644:	bf08      	it	eq
 8000646:	4770      	bxeq	lr
 8000648:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800064c:	4601      	mov	r1, r0
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	e01c      	b.n	800068e <__aeabi_l2f+0x2a>

08000654 <__aeabi_ul2f>:
 8000654:	ea50 0201 	orrs.w	r2, r0, r1
 8000658:	bf08      	it	eq
 800065a:	4770      	bxeq	lr
 800065c:	f04f 0300 	mov.w	r3, #0
 8000660:	e00a      	b.n	8000678 <__aeabi_l2f+0x14>
 8000662:	bf00      	nop

08000664 <__aeabi_l2f>:
 8000664:	ea50 0201 	orrs.w	r2, r0, r1
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000670:	d502      	bpl.n	8000678 <__aeabi_l2f+0x14>
 8000672:	4240      	negs	r0, r0
 8000674:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000678:	ea5f 0c01 	movs.w	ip, r1
 800067c:	bf02      	ittt	eq
 800067e:	4684      	moveq	ip, r0
 8000680:	4601      	moveq	r1, r0
 8000682:	2000      	moveq	r0, #0
 8000684:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000688:	bf08      	it	eq
 800068a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800068e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000692:	fabc f28c 	clz	r2, ip
 8000696:	3a08      	subs	r2, #8
 8000698:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800069c:	db10      	blt.n	80006c0 <__aeabi_l2f+0x5c>
 800069e:	fa01 fc02 	lsl.w	ip, r1, r2
 80006a2:	4463      	add	r3, ip
 80006a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006a8:	f1c2 0220 	rsb	r2, r2, #32
 80006ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80006b0:	fa20 f202 	lsr.w	r2, r0, r2
 80006b4:	eb43 0002 	adc.w	r0, r3, r2
 80006b8:	bf08      	it	eq
 80006ba:	f020 0001 	biceq.w	r0, r0, #1
 80006be:	4770      	bx	lr
 80006c0:	f102 0220 	add.w	r2, r2, #32
 80006c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80006c8:	f1c2 0220 	rsb	r2, r2, #32
 80006cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006d0:	fa21 f202 	lsr.w	r2, r1, r2
 80006d4:	eb43 0002 	adc.w	r0, r3, r2
 80006d8:	bf08      	it	eq
 80006da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006de:	4770      	bx	lr

080006e0 <__aeabi_fmul>:
 80006e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80006e8:	bf1e      	ittt	ne
 80006ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80006ee:	ea92 0f0c 	teqne	r2, ip
 80006f2:	ea93 0f0c 	teqne	r3, ip
 80006f6:	d06f      	beq.n	80007d8 <__aeabi_fmul+0xf8>
 80006f8:	441a      	add	r2, r3
 80006fa:	ea80 0c01 	eor.w	ip, r0, r1
 80006fe:	0240      	lsls	r0, r0, #9
 8000700:	bf18      	it	ne
 8000702:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000706:	d01e      	beq.n	8000746 <__aeabi_fmul+0x66>
 8000708:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800070c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000710:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000714:	fba0 3101 	umull	r3, r1, r0, r1
 8000718:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800071c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000720:	bf3e      	ittt	cc
 8000722:	0049      	lslcc	r1, r1, #1
 8000724:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000728:	005b      	lslcc	r3, r3, #1
 800072a:	ea40 0001 	orr.w	r0, r0, r1
 800072e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000732:	2afd      	cmp	r2, #253	@ 0xfd
 8000734:	d81d      	bhi.n	8000772 <__aeabi_fmul+0x92>
 8000736:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800073a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800073e:	bf08      	it	eq
 8000740:	f020 0001 	biceq.w	r0, r0, #1
 8000744:	4770      	bx	lr
 8000746:	f090 0f00 	teq	r0, #0
 800074a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800074e:	bf08      	it	eq
 8000750:	0249      	lsleq	r1, r1, #9
 8000752:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000756:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800075a:	3a7f      	subs	r2, #127	@ 0x7f
 800075c:	bfc2      	ittt	gt
 800075e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000762:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000766:	4770      	bxgt	lr
 8000768:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	3a01      	subs	r2, #1
 8000772:	dc5d      	bgt.n	8000830 <__aeabi_fmul+0x150>
 8000774:	f112 0f19 	cmn.w	r2, #25
 8000778:	bfdc      	itt	le
 800077a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800077e:	4770      	bxle	lr
 8000780:	f1c2 0200 	rsb	r2, r2, #0
 8000784:	0041      	lsls	r1, r0, #1
 8000786:	fa21 f102 	lsr.w	r1, r1, r2
 800078a:	f1c2 0220 	rsb	r2, r2, #32
 800078e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000792:	ea5f 0031 	movs.w	r0, r1, rrx
 8000796:	f140 0000 	adc.w	r0, r0, #0
 800079a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800079e:	bf08      	it	eq
 80007a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007a4:	4770      	bx	lr
 80007a6:	f092 0f00 	teq	r2, #0
 80007aa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80007ae:	bf02      	ittt	eq
 80007b0:	0040      	lsleq	r0, r0, #1
 80007b2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80007b6:	3a01      	subeq	r2, #1
 80007b8:	d0f9      	beq.n	80007ae <__aeabi_fmul+0xce>
 80007ba:	ea40 000c 	orr.w	r0, r0, ip
 80007be:	f093 0f00 	teq	r3, #0
 80007c2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007c6:	bf02      	ittt	eq
 80007c8:	0049      	lsleq	r1, r1, #1
 80007ca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80007ce:	3b01      	subeq	r3, #1
 80007d0:	d0f9      	beq.n	80007c6 <__aeabi_fmul+0xe6>
 80007d2:	ea41 010c 	orr.w	r1, r1, ip
 80007d6:	e78f      	b.n	80006f8 <__aeabi_fmul+0x18>
 80007d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80007dc:	ea92 0f0c 	teq	r2, ip
 80007e0:	bf18      	it	ne
 80007e2:	ea93 0f0c 	teqne	r3, ip
 80007e6:	d00a      	beq.n	80007fe <__aeabi_fmul+0x11e>
 80007e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80007ec:	bf18      	it	ne
 80007ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80007f2:	d1d8      	bne.n	80007a6 <__aeabi_fmul+0xc6>
 80007f4:	ea80 0001 	eor.w	r0, r0, r1
 80007f8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80007fc:	4770      	bx	lr
 80007fe:	f090 0f00 	teq	r0, #0
 8000802:	bf17      	itett	ne
 8000804:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000808:	4608      	moveq	r0, r1
 800080a:	f091 0f00 	teqne	r1, #0
 800080e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000812:	d014      	beq.n	800083e <__aeabi_fmul+0x15e>
 8000814:	ea92 0f0c 	teq	r2, ip
 8000818:	d101      	bne.n	800081e <__aeabi_fmul+0x13e>
 800081a:	0242      	lsls	r2, r0, #9
 800081c:	d10f      	bne.n	800083e <__aeabi_fmul+0x15e>
 800081e:	ea93 0f0c 	teq	r3, ip
 8000822:	d103      	bne.n	800082c <__aeabi_fmul+0x14c>
 8000824:	024b      	lsls	r3, r1, #9
 8000826:	bf18      	it	ne
 8000828:	4608      	movne	r0, r1
 800082a:	d108      	bne.n	800083e <__aeabi_fmul+0x15e>
 800082c:	ea80 0001 	eor.w	r0, r0, r1
 8000830:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000834:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000838:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800083c:	4770      	bx	lr
 800083e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000842:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000846:	4770      	bx	lr

08000848 <__aeabi_fdiv>:
 8000848:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800084c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000850:	bf1e      	ittt	ne
 8000852:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000856:	ea92 0f0c 	teqne	r2, ip
 800085a:	ea93 0f0c 	teqne	r3, ip
 800085e:	d069      	beq.n	8000934 <__aeabi_fdiv+0xec>
 8000860:	eba2 0203 	sub.w	r2, r2, r3
 8000864:	ea80 0c01 	eor.w	ip, r0, r1
 8000868:	0249      	lsls	r1, r1, #9
 800086a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800086e:	d037      	beq.n	80008e0 <__aeabi_fdiv+0x98>
 8000870:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000874:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000878:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000880:	428b      	cmp	r3, r1
 8000882:	bf38      	it	cc
 8000884:	005b      	lslcc	r3, r3, #1
 8000886:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800088a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800088e:	428b      	cmp	r3, r1
 8000890:	bf24      	itt	cs
 8000892:	1a5b      	subcs	r3, r3, r1
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800089c:	bf24      	itt	cs
 800089e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008aa:	bf24      	itt	cs
 80008ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008b8:	bf24      	itt	cs
 80008ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	bf18      	it	ne
 80008c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008ca:	d1e0      	bne.n	800088e <__aeabi_fdiv+0x46>
 80008cc:	2afd      	cmp	r2, #253	@ 0xfd
 80008ce:	f63f af50 	bhi.w	8000772 <__aeabi_fmul+0x92>
 80008d2:	428b      	cmp	r3, r1
 80008d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008d8:	bf08      	it	eq
 80008da:	f020 0001 	biceq.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80008e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008e8:	327f      	adds	r2, #127	@ 0x7f
 80008ea:	bfc2      	ittt	gt
 80008ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80008f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008f4:	4770      	bxgt	lr
 80008f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008fa:	f04f 0300 	mov.w	r3, #0
 80008fe:	3a01      	subs	r2, #1
 8000900:	e737      	b.n	8000772 <__aeabi_fmul+0x92>
 8000902:	f092 0f00 	teq	r2, #0
 8000906:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800090a:	bf02      	ittt	eq
 800090c:	0040      	lsleq	r0, r0, #1
 800090e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000912:	3a01      	subeq	r2, #1
 8000914:	d0f9      	beq.n	800090a <__aeabi_fdiv+0xc2>
 8000916:	ea40 000c 	orr.w	r0, r0, ip
 800091a:	f093 0f00 	teq	r3, #0
 800091e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000922:	bf02      	ittt	eq
 8000924:	0049      	lsleq	r1, r1, #1
 8000926:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800092a:	3b01      	subeq	r3, #1
 800092c:	d0f9      	beq.n	8000922 <__aeabi_fdiv+0xda>
 800092e:	ea41 010c 	orr.w	r1, r1, ip
 8000932:	e795      	b.n	8000860 <__aeabi_fdiv+0x18>
 8000934:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000938:	ea92 0f0c 	teq	r2, ip
 800093c:	d108      	bne.n	8000950 <__aeabi_fdiv+0x108>
 800093e:	0242      	lsls	r2, r0, #9
 8000940:	f47f af7d 	bne.w	800083e <__aeabi_fmul+0x15e>
 8000944:	ea93 0f0c 	teq	r3, ip
 8000948:	f47f af70 	bne.w	800082c <__aeabi_fmul+0x14c>
 800094c:	4608      	mov	r0, r1
 800094e:	e776      	b.n	800083e <__aeabi_fmul+0x15e>
 8000950:	ea93 0f0c 	teq	r3, ip
 8000954:	d104      	bne.n	8000960 <__aeabi_fdiv+0x118>
 8000956:	024b      	lsls	r3, r1, #9
 8000958:	f43f af4c 	beq.w	80007f4 <__aeabi_fmul+0x114>
 800095c:	4608      	mov	r0, r1
 800095e:	e76e      	b.n	800083e <__aeabi_fmul+0x15e>
 8000960:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000964:	bf18      	it	ne
 8000966:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800096a:	d1ca      	bne.n	8000902 <__aeabi_fdiv+0xba>
 800096c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000970:	f47f af5c 	bne.w	800082c <__aeabi_fmul+0x14c>
 8000974:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000978:	f47f af3c 	bne.w	80007f4 <__aeabi_fmul+0x114>
 800097c:	e75f      	b.n	800083e <__aeabi_fmul+0x15e>
 800097e:	bf00      	nop

08000980 <__gesf2>:
 8000980:	f04f 3cff 	mov.w	ip, #4294967295
 8000984:	e006      	b.n	8000994 <__cmpsf2+0x4>
 8000986:	bf00      	nop

08000988 <__lesf2>:
 8000988:	f04f 0c01 	mov.w	ip, #1
 800098c:	e002      	b.n	8000994 <__cmpsf2+0x4>
 800098e:	bf00      	nop

08000990 <__cmpsf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000998:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800099c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009a4:	bf18      	it	ne
 80009a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009aa:	d011      	beq.n	80009d0 <__cmpsf2+0x40>
 80009ac:	b001      	add	sp, #4
 80009ae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80009b2:	bf18      	it	ne
 80009b4:	ea90 0f01 	teqne	r0, r1
 80009b8:	bf58      	it	pl
 80009ba:	ebb2 0003 	subspl.w	r0, r2, r3
 80009be:	bf88      	it	hi
 80009c0:	17c8      	asrhi	r0, r1, #31
 80009c2:	bf38      	it	cc
 80009c4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80009c8:	bf18      	it	ne
 80009ca:	f040 0001 	orrne.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009d4:	d102      	bne.n	80009dc <__cmpsf2+0x4c>
 80009d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80009da:	d105      	bne.n	80009e8 <__cmpsf2+0x58>
 80009dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80009e0:	d1e4      	bne.n	80009ac <__cmpsf2+0x1c>
 80009e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80009e6:	d0e1      	beq.n	80009ac <__cmpsf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cfrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4608      	mov	r0, r1
 80009f4:	4661      	mov	r1, ip
 80009f6:	e7ff      	b.n	80009f8 <__aeabi_cfcmpeq>

080009f8 <__aeabi_cfcmpeq>:
 80009f8:	b50f      	push	{r0, r1, r2, r3, lr}
 80009fa:	f7ff ffc9 	bl	8000990 <__cmpsf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a08 <__aeabi_fcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cfcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_fcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cfcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_fcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cfcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_fcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffd2 	bl	80009f0 <__aeabi_cfrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_fcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc8 	bl	80009f0 <__aeabi_cfrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_fcmpun>:
 8000a6c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a78:	d102      	bne.n	8000a80 <__aeabi_fcmpun+0x14>
 8000a7a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a7e:	d108      	bne.n	8000a92 <__aeabi_fcmpun+0x26>
 8000a80:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a84:	d102      	bne.n	8000a8c <__aeabi_fcmpun+0x20>
 8000a86:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_fcmpun+0x26>
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	f04f 0001 	mov.w	r0, #1
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_f2iz>:
 8000a98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000aa0:	d30f      	bcc.n	8000ac2 <__aeabi_f2iz+0x2a>
 8000aa2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000aa6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000aaa:	d90d      	bls.n	8000ac8 <__aeabi_f2iz+0x30>
 8000aac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ab0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ab4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ab8:	fa23 f002 	lsr.w	r0, r3, r2
 8000abc:	bf18      	it	ne
 8000abe:	4240      	negne	r0, r0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr
 8000ac8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000acc:	d101      	bne.n	8000ad2 <__aeabi_f2iz+0x3a>
 8000ace:	0242      	lsls	r2, r0, #9
 8000ad0:	d105      	bne.n	8000ade <__aeabi_f2iz+0x46>
 8000ad2:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000ad6:	bf08      	it	eq
 8000ad8:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000adc:	4770      	bx	lr
 8000ade:	f04f 0000 	mov.w	r0, #0
 8000ae2:	4770      	bx	lr

08000ae4 <__aeabi_f2uiz>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	d20e      	bcs.n	8000b06 <__aeabi_f2uiz+0x22>
 8000ae8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000aec:	d30b      	bcc.n	8000b06 <__aeabi_f2uiz+0x22>
 8000aee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000af2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000af6:	d409      	bmi.n	8000b0c <__aeabi_f2uiz+0x28>
 8000af8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000afc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b00:	fa23 f002 	lsr.w	r0, r3, r2
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr
 8000b0c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b10:	d101      	bne.n	8000b16 <__aeabi_f2uiz+0x32>
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	d102      	bne.n	8000b1c <__aeabi_f2uiz+0x38>
 8000b16:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <malloc>:
 8000b24:	4b02      	ldr	r3, [pc, #8]	@ (8000b30 <malloc+0xc>)
 8000b26:	4601      	mov	r1, r0
 8000b28:	6818      	ldr	r0, [r3, #0]
 8000b2a:	f000 b82f 	b.w	8000b8c <_malloc_r>
 8000b2e:	bf00      	nop
 8000b30:	2000001c 	.word	0x2000001c

08000b34 <free>:
 8000b34:	4b02      	ldr	r3, [pc, #8]	@ (8000b40 <free+0xc>)
 8000b36:	4601      	mov	r1, r0
 8000b38:	6818      	ldr	r0, [r3, #0]
 8000b3a:	f000 bcef 	b.w	800151c <_free_r>
 8000b3e:	bf00      	nop
 8000b40:	2000001c 	.word	0x2000001c

08000b44 <sbrk_aligned>:
 8000b44:	b570      	push	{r4, r5, r6, lr}
 8000b46:	4e10      	ldr	r6, [pc, #64]	@ (8000b88 <sbrk_aligned+0x44>)
 8000b48:	6833      	ldr	r3, [r6, #0]
 8000b4a:	4605      	mov	r5, r0
 8000b4c:	460c      	mov	r4, r1
 8000b4e:	b1b3      	cbz	r3, 8000b7e <sbrk_aligned+0x3a>
 8000b50:	4621      	mov	r1, r4
 8000b52:	4628      	mov	r0, r5
 8000b54:	f000 fbb8 	bl	80012c8 <_sbrk_r>
 8000b58:	1c43      	adds	r3, r0, #1
 8000b5a:	d00c      	beq.n	8000b76 <sbrk_aligned+0x32>
 8000b5c:	1cc4      	adds	r4, r0, #3
 8000b5e:	f024 0403 	bic.w	r4, r4, #3
 8000b62:	42a0      	cmp	r0, r4
 8000b64:	d005      	beq.n	8000b72 <sbrk_aligned+0x2e>
 8000b66:	1a21      	subs	r1, r4, r0
 8000b68:	4628      	mov	r0, r5
 8000b6a:	f000 fbad 	bl	80012c8 <_sbrk_r>
 8000b6e:	3001      	adds	r0, #1
 8000b70:	d001      	beq.n	8000b76 <sbrk_aligned+0x32>
 8000b72:	4620      	mov	r0, r4
 8000b74:	bd70      	pop	{r4, r5, r6, pc}
 8000b76:	f04f 34ff 	mov.w	r4, #4294967295
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	bd70      	pop	{r4, r5, r6, pc}
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f000 fba2 	bl	80012c8 <_sbrk_r>
 8000b84:	6030      	str	r0, [r6, #0]
 8000b86:	e7e3      	b.n	8000b50 <sbrk_aligned+0xc>
 8000b88:	200001b0 	.word	0x200001b0

08000b8c <_malloc_r>:
 8000b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b90:	1ccd      	adds	r5, r1, #3
 8000b92:	f025 0503 	bic.w	r5, r5, #3
 8000b96:	3508      	adds	r5, #8
 8000b98:	2d0c      	cmp	r5, #12
 8000b9a:	bf38      	it	cc
 8000b9c:	250c      	movcc	r5, #12
 8000b9e:	2d00      	cmp	r5, #0
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	db16      	blt.n	8000bd4 <_malloc_r+0x48>
 8000ba6:	42a9      	cmp	r1, r5
 8000ba8:	d814      	bhi.n	8000bd4 <_malloc_r+0x48>
 8000baa:	4f35      	ldr	r7, [pc, #212]	@ (8000c80 <_malloc_r+0xf4>)
 8000bac:	f000 f86a 	bl	8000c84 <__malloc_lock>
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	b1aa      	cbz	r2, 8000be0 <_malloc_r+0x54>
 8000bb4:	4614      	mov	r4, r2
 8000bb6:	e003      	b.n	8000bc0 <_malloc_r+0x34>
 8000bb8:	6863      	ldr	r3, [r4, #4]
 8000bba:	4622      	mov	r2, r4
 8000bbc:	b183      	cbz	r3, 8000be0 <_malloc_r+0x54>
 8000bbe:	461c      	mov	r4, r3
 8000bc0:	6823      	ldr	r3, [r4, #0]
 8000bc2:	1b5b      	subs	r3, r3, r5
 8000bc4:	d4f8      	bmi.n	8000bb8 <_malloc_r+0x2c>
 8000bc6:	2b0b      	cmp	r3, #11
 8000bc8:	d821      	bhi.n	8000c0e <_malloc_r+0x82>
 8000bca:	42a2      	cmp	r2, r4
 8000bcc:	6863      	ldr	r3, [r4, #4]
 8000bce:	d055      	beq.n	8000c7c <_malloc_r+0xf0>
 8000bd0:	6053      	str	r3, [r2, #4]
 8000bd2:	e00d      	b.n	8000bf0 <_malloc_r+0x64>
 8000bd4:	230c      	movs	r3, #12
 8000bd6:	6033      	str	r3, [r6, #0]
 8000bd8:	2000      	movs	r0, #0
 8000bda:	b002      	add	sp, #8
 8000bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000be0:	4629      	mov	r1, r5
 8000be2:	4630      	mov	r0, r6
 8000be4:	f7ff ffae 	bl	8000b44 <sbrk_aligned>
 8000be8:	1c43      	adds	r3, r0, #1
 8000bea:	4604      	mov	r4, r0
 8000bec:	d019      	beq.n	8000c22 <_malloc_r+0x96>
 8000bee:	6005      	str	r5, [r0, #0]
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	f000 f84d 	bl	8000c90 <__malloc_unlock>
 8000bf6:	f104 000b 	add.w	r0, r4, #11
 8000bfa:	1d23      	adds	r3, r4, #4
 8000bfc:	f020 0007 	bic.w	r0, r0, #7
 8000c00:	1ac2      	subs	r2, r0, r3
 8000c02:	bf1c      	itt	ne
 8000c04:	1a1b      	subne	r3, r3, r0
 8000c06:	50a3      	strne	r3, [r4, r2]
 8000c08:	b002      	add	sp, #8
 8000c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c0e:	1961      	adds	r1, r4, r5
 8000c10:	42a2      	cmp	r2, r4
 8000c12:	6025      	str	r5, [r4, #0]
 8000c14:	bf14      	ite	ne
 8000c16:	6051      	strne	r1, [r2, #4]
 8000c18:	6079      	streq	r1, [r7, #4]
 8000c1a:	5163      	str	r3, [r4, r5]
 8000c1c:	6863      	ldr	r3, [r4, #4]
 8000c1e:	604b      	str	r3, [r1, #4]
 8000c20:	e7e6      	b.n	8000bf0 <_malloc_r+0x64>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	b323      	cbz	r3, 8000c70 <_malloc_r+0xe4>
 8000c26:	461c      	mov	r4, r3
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1fb      	bne.n	8000c26 <_malloc_r+0x9a>
 8000c2e:	6822      	ldr	r2, [r4, #0]
 8000c30:	9301      	str	r3, [sp, #4]
 8000c32:	4619      	mov	r1, r3
 8000c34:	4630      	mov	r0, r6
 8000c36:	eb04 0802 	add.w	r8, r4, r2
 8000c3a:	f000 fb45 	bl	80012c8 <_sbrk_r>
 8000c3e:	4580      	cmp	r8, r0
 8000c40:	d116      	bne.n	8000c70 <_malloc_r+0xe4>
 8000c42:	6822      	ldr	r2, [r4, #0]
 8000c44:	1aad      	subs	r5, r5, r2
 8000c46:	4629      	mov	r1, r5
 8000c48:	4630      	mov	r0, r6
 8000c4a:	f7ff ff7b 	bl	8000b44 <sbrk_aligned>
 8000c4e:	3001      	adds	r0, #1
 8000c50:	d00e      	beq.n	8000c70 <_malloc_r+0xe4>
 8000c52:	6822      	ldr	r2, [r4, #0]
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	9b01      	ldr	r3, [sp, #4]
 8000c58:	442a      	add	r2, r5
 8000c5a:	6022      	str	r2, [r4, #0]
 8000c5c:	6842      	ldr	r2, [r0, #4]
 8000c5e:	b912      	cbnz	r2, 8000c66 <_malloc_r+0xda>
 8000c60:	e00c      	b.n	8000c7c <_malloc_r+0xf0>
 8000c62:	4610      	mov	r0, r2
 8000c64:	6852      	ldr	r2, [r2, #4]
 8000c66:	42a2      	cmp	r2, r4
 8000c68:	d1fb      	bne.n	8000c62 <_malloc_r+0xd6>
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	6043      	str	r3, [r0, #4]
 8000c6e:	e7bf      	b.n	8000bf0 <_malloc_r+0x64>
 8000c70:	230c      	movs	r3, #12
 8000c72:	6033      	str	r3, [r6, #0]
 8000c74:	4630      	mov	r0, r6
 8000c76:	f000 f80b 	bl	8000c90 <__malloc_unlock>
 8000c7a:	e7ad      	b.n	8000bd8 <_malloc_r+0x4c>
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	e7b7      	b.n	8000bf0 <_malloc_r+0x64>
 8000c80:	200001b0 	.word	0x200001b0

08000c84 <__malloc_lock>:
 8000c84:	4801      	ldr	r0, [pc, #4]	@ (8000c8c <__malloc_lock+0x8>)
 8000c86:	f000 bb7f 	b.w	8001388 <__retarget_lock_acquire_recursive>
 8000c8a:	bf00      	nop
 8000c8c:	20000308 	.word	0x20000308

08000c90 <__malloc_unlock>:
 8000c90:	4801      	ldr	r0, [pc, #4]	@ (8000c98 <__malloc_unlock+0x8>)
 8000c92:	f000 bb81 	b.w	8001398 <__retarget_lock_release_recursive>
 8000c96:	bf00      	nop
 8000c98:	20000308 	.word	0x20000308

08000c9c <srand>:
 8000c9c:	b538      	push	{r3, r4, r5, lr}
 8000c9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <srand+0x4c>)
 8000ca0:	681d      	ldr	r5, [r3, #0]
 8000ca2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8000ca4:	4604      	mov	r4, r0
 8000ca6:	b11a      	cbz	r2, 8000cb0 <srand+0x14>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e9c2 4304 	strd	r4, r3, [r2, #16]
 8000cae:	bd38      	pop	{r3, r4, r5, pc}
 8000cb0:	2018      	movs	r0, #24
 8000cb2:	f7ff ff37 	bl	8000b24 <malloc>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	6328      	str	r0, [r5, #48]	@ 0x30
 8000cba:	b178      	cbz	r0, 8000cdc <srand+0x40>
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000cc4:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <srand+0x50>)
 8000cc6:	480a      	ldr	r0, [pc, #40]	@ (8000cf0 <srand+0x54>)
 8000cc8:	490a      	ldr	r1, [pc, #40]	@ (8000cf4 <srand+0x58>)
 8000cca:	6091      	str	r1, [r2, #8]
 8000ccc:	e9c2 0300 	strd	r0, r3, [r2]
 8000cd0:	230b      	movs	r3, #11
 8000cd2:	8193      	strh	r3, [r2, #12]
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e9c2 4304 	strd	r4, r3, [r2, #16]
 8000cda:	bd38      	pop	{r3, r4, r5, pc}
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <srand+0x5c>)
 8000cde:	4807      	ldr	r0, [pc, #28]	@ (8000cfc <srand+0x60>)
 8000ce0:	2146      	movs	r1, #70	@ 0x46
 8000ce2:	f000 fbf5 	bl	80014d0 <__assert_func>
 8000ce6:	bf00      	nop
 8000ce8:	2000001c 	.word	0x2000001c
 8000cec:	e66d1234 	.word	0xe66d1234
 8000cf0:	abcd330e 	.word	0xabcd330e
 8000cf4:	0005deec 	.word	0x0005deec
 8000cf8:	08003d10 	.word	0x08003d10
 8000cfc:	08003d28 	.word	0x08003d28

08000d00 <rand>:
 8000d00:	b538      	push	{r3, r4, r5, lr}
 8000d02:	4b19      	ldr	r3, [pc, #100]	@ (8000d68 <rand+0x68>)
 8000d04:	681c      	ldr	r4, [r3, #0]
 8000d06:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8000d08:	b18a      	cbz	r2, 8000d2e <rand+0x2e>
 8000d0a:	6913      	ldr	r3, [r2, #16]
 8000d0c:	4917      	ldr	r1, [pc, #92]	@ (8000d6c <rand+0x6c>)
 8000d0e:	6954      	ldr	r4, [r2, #20]
 8000d10:	4817      	ldr	r0, [pc, #92]	@ (8000d70 <rand+0x70>)
 8000d12:	fb03 f101 	mul.w	r1, r3, r1
 8000d16:	fb00 1104 	mla	r1, r0, r4, r1
 8000d1a:	fba3 3000 	umull	r3, r0, r3, r0
 8000d1e:	3301      	adds	r3, #1
 8000d20:	eb41 0100 	adc.w	r1, r1, r0
 8000d24:	e9c2 3104 	strd	r3, r1, [r2, #16]
 8000d28:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 8000d2c:	bd38      	pop	{r3, r4, r5, pc}
 8000d2e:	2018      	movs	r0, #24
 8000d30:	f7ff fef8 	bl	8000b24 <malloc>
 8000d34:	4602      	mov	r2, r0
 8000d36:	6320      	str	r0, [r4, #48]	@ 0x30
 8000d38:	b188      	cbz	r0, 8000d5e <rand+0x5e>
 8000d3a:	2401      	movs	r4, #1
 8000d3c:	2500      	movs	r5, #0
 8000d3e:	e9c2 4504 	strd	r4, r5, [r2, #16]
 8000d42:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <rand+0x74>)
 8000d44:	4c0c      	ldr	r4, [pc, #48]	@ (8000d78 <rand+0x78>)
 8000d46:	4809      	ldr	r0, [pc, #36]	@ (8000d6c <rand+0x6c>)
 8000d48:	490c      	ldr	r1, [pc, #48]	@ (8000d7c <rand+0x7c>)
 8000d4a:	6091      	str	r1, [r2, #8]
 8000d4c:	e9c2 4300 	strd	r4, r3, [r2]
 8000d50:	230b      	movs	r3, #11
 8000d52:	8193      	strh	r3, [r2, #12]
 8000d54:	4b0a      	ldr	r3, [pc, #40]	@ (8000d80 <rand+0x80>)
 8000d56:	4601      	mov	r1, r0
 8000d58:	e9c2 3104 	strd	r3, r1, [r2, #16]
 8000d5c:	bd38      	pop	{r3, r4, r5, pc}
 8000d5e:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <rand+0x84>)
 8000d60:	4809      	ldr	r0, [pc, #36]	@ (8000d88 <rand+0x88>)
 8000d62:	2152      	movs	r1, #82	@ 0x52
 8000d64:	f000 fbb4 	bl	80014d0 <__assert_func>
 8000d68:	2000001c 	.word	0x2000001c
 8000d6c:	5851f42d 	.word	0x5851f42d
 8000d70:	4c957f2d 	.word	0x4c957f2d
 8000d74:	e66d1234 	.word	0xe66d1234
 8000d78:	abcd330e 	.word	0xabcd330e
 8000d7c:	0005deec 	.word	0x0005deec
 8000d80:	4c957f2e 	.word	0x4c957f2e
 8000d84:	08003d10 	.word	0x08003d10
 8000d88:	08003d28 	.word	0x08003d28

08000d8c <stdio_exit_handler>:
 8000d8c:	4a02      	ldr	r2, [pc, #8]	@ (8000d98 <stdio_exit_handler+0xc>)
 8000d8e:	4903      	ldr	r1, [pc, #12]	@ (8000d9c <stdio_exit_handler+0x10>)
 8000d90:	4803      	ldr	r0, [pc, #12]	@ (8000da0 <stdio_exit_handler+0x14>)
 8000d92:	f000 b969 	b.w	8001068 <_fwalk_sglue>
 8000d96:	bf00      	nop
 8000d98:	20000010 	.word	0x20000010
 8000d9c:	080016e9 	.word	0x080016e9
 8000da0:	20000020 	.word	0x20000020

08000da4 <cleanup_stdio>:
 8000da4:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <cleanup_stdio+0x34>)
 8000da6:	6841      	ldr	r1, [r0, #4]
 8000da8:	4299      	cmp	r1, r3
 8000daa:	b510      	push	{r4, lr}
 8000dac:	4604      	mov	r4, r0
 8000dae:	d001      	beq.n	8000db4 <cleanup_stdio+0x10>
 8000db0:	f000 fc9a 	bl	80016e8 <_fflush_r>
 8000db4:	68a1      	ldr	r1, [r4, #8]
 8000db6:	4b09      	ldr	r3, [pc, #36]	@ (8000ddc <cleanup_stdio+0x38>)
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d002      	beq.n	8000dc2 <cleanup_stdio+0x1e>
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f000 fc93 	bl	80016e8 <_fflush_r>
 8000dc2:	68e1      	ldr	r1, [r4, #12]
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <cleanup_stdio+0x3c>)
 8000dc6:	4299      	cmp	r1, r3
 8000dc8:	d004      	beq.n	8000dd4 <cleanup_stdio+0x30>
 8000dca:	4620      	mov	r0, r4
 8000dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dd0:	f000 bc8a 	b.w	80016e8 <_fflush_r>
 8000dd4:	bd10      	pop	{r4, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200001b8 	.word	0x200001b8
 8000ddc:	20000220 	.word	0x20000220
 8000de0:	20000288 	.word	0x20000288

08000de4 <__fp_lock>:
 8000de4:	b508      	push	{r3, lr}
 8000de6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8000de8:	07da      	lsls	r2, r3, #31
 8000dea:	d402      	bmi.n	8000df2 <__fp_lock+0xe>
 8000dec:	898b      	ldrh	r3, [r1, #12]
 8000dee:	059b      	lsls	r3, r3, #22
 8000df0:	d501      	bpl.n	8000df6 <__fp_lock+0x12>
 8000df2:	2000      	movs	r0, #0
 8000df4:	bd08      	pop	{r3, pc}
 8000df6:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 8000df8:	f000 fac6 	bl	8001388 <__retarget_lock_acquire_recursive>
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	bd08      	pop	{r3, pc}

08000e00 <__fp_unlock>:
 8000e00:	b508      	push	{r3, lr}
 8000e02:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8000e04:	07da      	lsls	r2, r3, #31
 8000e06:	d402      	bmi.n	8000e0e <__fp_unlock+0xe>
 8000e08:	898b      	ldrh	r3, [r1, #12]
 8000e0a:	059b      	lsls	r3, r3, #22
 8000e0c:	d501      	bpl.n	8000e12 <__fp_unlock+0x12>
 8000e0e:	2000      	movs	r0, #0
 8000e10:	bd08      	pop	{r3, pc}
 8000e12:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 8000e14:	f000 fac0 	bl	8001398 <__retarget_lock_release_recursive>
 8000e18:	2000      	movs	r0, #0
 8000e1a:	bd08      	pop	{r3, pc}

08000e1c <global_stdio_init.part.0>:
 8000e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e20:	4c31      	ldr	r4, [pc, #196]	@ (8000ee8 <global_stdio_init.part.0+0xcc>)
 8000e22:	4b32      	ldr	r3, [pc, #200]	@ (8000eec <global_stdio_init.part.0+0xd0>)
 8000e24:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 8000ef0 <global_stdio_init.part.0+0xd4>
 8000e28:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 8000ef4 <global_stdio_init.part.0+0xd8>
 8000e2c:	4f32      	ldr	r7, [pc, #200]	@ (8000ef8 <global_stdio_init.part.0+0xdc>)
 8000e2e:	f8c4 3138 	str.w	r3, [r4, #312]	@ 0x138
 8000e32:	2500      	movs	r5, #0
 8000e34:	4629      	mov	r1, r5
 8000e36:	2304      	movs	r3, #4
 8000e38:	2208      	movs	r2, #8
 8000e3a:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8000e3e:	4e2f      	ldr	r6, [pc, #188]	@ (8000efc <global_stdio_init.part.0+0xe0>)
 8000e40:	60e3      	str	r3, [r4, #12]
 8000e42:	e9c4 5500 	strd	r5, r5, [r4]
 8000e46:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000e4a:	60a5      	str	r5, [r4, #8]
 8000e4c:	6665      	str	r5, [r4, #100]	@ 0x64
 8000e4e:	61a5      	str	r5, [r4, #24]
 8000e50:	f000 f978 	bl	8001144 <memset>
 8000e54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000e58:	e9c4 4908 	strd	r4, r9, [r4, #32]
 8000e5c:	e9c4 870a 	strd	r8, r7, [r4, #40]	@ 0x28
 8000e60:	6326      	str	r6, [r4, #48]	@ 0x30
 8000e62:	f000 fa89 	bl	8001378 <__retarget_lock_init_recursive>
 8000e66:	4629      	mov	r1, r5
 8000e68:	4b25      	ldr	r3, [pc, #148]	@ (8000f00 <global_stdio_init.part.0+0xe4>)
 8000e6a:	6763      	str	r3, [r4, #116]	@ 0x74
 8000e6c:	2208      	movs	r2, #8
 8000e6e:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4
 8000e72:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 8000e76:	e9c4 551e 	strd	r5, r5, [r4, #120]	@ 0x78
 8000e7a:	6725      	str	r5, [r4, #112]	@ 0x70
 8000e7c:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
 8000e80:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
 8000e84:	f000 f95e 	bl	8001144 <memset>
 8000e88:	f104 0368 	add.w	r3, r4, #104	@ 0x68
 8000e8c:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 8000e90:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 8000e94:	e9c4 9823 	strd	r9, r8, [r4, #140]	@ 0x8c
 8000e98:	e9c4 7625 	strd	r7, r6, [r4, #148]	@ 0x94
 8000e9c:	f000 fa6c 	bl	8001378 <__retarget_lock_init_recursive>
 8000ea0:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <global_stdio_init.part.0+0xe8>)
 8000ea2:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
 8000ea6:	4629      	mov	r1, r5
 8000ea8:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
 8000eac:	2208      	movs	r2, #8
 8000eae:	e9c4 5534 	strd	r5, r5, [r4, #208]	@ 0xd0
 8000eb2:	e9c4 5538 	strd	r5, r5, [r4, #224]	@ 0xe0
 8000eb6:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
 8000eba:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8000ebe:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
 8000ec2:	f000 f93f 	bl	8001144 <memset>
 8000ec6:	f104 03d0 	add.w	r3, r4, #208	@ 0xd0
 8000eca:	e9c4 873e 	strd	r8, r7, [r4, #248]	@ 0xf8
 8000ece:	f8c4 90f4 	str.w	r9, [r4, #244]	@ 0xf4
 8000ed2:	f504 7094 	add.w	r0, r4, #296	@ 0x128
 8000ed6:	f8c4 6100 	str.w	r6, [r4, #256]	@ 0x100
 8000eda:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
 8000ede:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ee2:	f000 ba49 	b.w	8001378 <__retarget_lock_init_recursive>
 8000ee6:	bf00      	nop
 8000ee8:	200001b8 	.word	0x200001b8
 8000eec:	08000d8d 	.word	0x08000d8d
 8000ef0:	080010b1 	.word	0x080010b1
 8000ef4:	080010d9 	.word	0x080010d9
 8000ef8:	08001119 	.word	0x08001119
 8000efc:	0800113d 	.word	0x0800113d
 8000f00:	00010009 	.word	0x00010009
 8000f04:	00020012 	.word	0x00020012

08000f08 <__sfp>:
 8000f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f0a:	4606      	mov	r6, r0
 8000f0c:	482a      	ldr	r0, [pc, #168]	@ (8000fb8 <__sfp+0xb0>)
 8000f0e:	f000 fa3b 	bl	8001388 <__retarget_lock_acquire_recursive>
 8000f12:	4b2a      	ldr	r3, [pc, #168]	@ (8000fbc <__sfp+0xb4>)
 8000f14:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d043      	beq.n	8000fa4 <__sfp+0x9c>
 8000f1c:	4f28      	ldr	r7, [pc, #160]	@ (8000fc0 <__sfp+0xb8>)
 8000f1e:	e9d7 3401 	ldrd	r3, r4, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	d504      	bpl.n	8000f30 <__sfp+0x28>
 8000f26:	e024      	b.n	8000f72 <__sfp+0x6a>
 8000f28:	1c5a      	adds	r2, r3, #1
 8000f2a:	f104 0468 	add.w	r4, r4, #104	@ 0x68
 8000f2e:	d020      	beq.n	8000f72 <__sfp+0x6a>
 8000f30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	2d00      	cmp	r5, #0
 8000f38:	d1f6      	bne.n	8000f28 <__sfp+0x20>
 8000f3a:	4b22      	ldr	r3, [pc, #136]	@ (8000fc4 <__sfp+0xbc>)
 8000f3c:	60e3      	str	r3, [r4, #12]
 8000f3e:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000f42:	6665      	str	r5, [r4, #100]	@ 0x64
 8000f44:	f000 fa18 	bl	8001378 <__retarget_lock_init_recursive>
 8000f48:	481b      	ldr	r0, [pc, #108]	@ (8000fb8 <__sfp+0xb0>)
 8000f4a:	f000 fa25 	bl	8001398 <__retarget_lock_release_recursive>
 8000f4e:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000f52:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000f56:	6025      	str	r5, [r4, #0]
 8000f58:	61a5      	str	r5, [r4, #24]
 8000f5a:	2208      	movs	r2, #8
 8000f5c:	4629      	mov	r1, r5
 8000f5e:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8000f62:	f000 f8ef 	bl	8001144 <memset>
 8000f66:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8000f6a:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 8000f6e:	4620      	mov	r0, r4
 8000f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f72:	683d      	ldr	r5, [r7, #0]
 8000f74:	b10d      	cbz	r5, 8000f7a <__sfp+0x72>
 8000f76:	462f      	mov	r7, r5
 8000f78:	e7d1      	b.n	8000f1e <__sfp+0x16>
 8000f7a:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8000f7e:	4630      	mov	r0, r6
 8000f80:	f7ff fe04 	bl	8000b8c <_malloc_r>
 8000f84:	4604      	mov	r4, r0
 8000f86:	b180      	cbz	r0, 8000faa <__sfp+0xa2>
 8000f88:	2304      	movs	r3, #4
 8000f8a:	6005      	str	r5, [r0, #0]
 8000f8c:	6043      	str	r3, [r0, #4]
 8000f8e:	300c      	adds	r0, #12
 8000f90:	4629      	mov	r1, r5
 8000f92:	60a0      	str	r0, [r4, #8]
 8000f94:	4625      	mov	r5, r4
 8000f96:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8000f9a:	f000 f8d3 	bl	8001144 <memset>
 8000f9e:	603c      	str	r4, [r7, #0]
 8000fa0:	462f      	mov	r7, r5
 8000fa2:	e7bc      	b.n	8000f1e <__sfp+0x16>
 8000fa4:	f7ff ff3a 	bl	8000e1c <global_stdio_init.part.0>
 8000fa8:	e7b8      	b.n	8000f1c <__sfp+0x14>
 8000faa:	4803      	ldr	r0, [pc, #12]	@ (8000fb8 <__sfp+0xb0>)
 8000fac:	603c      	str	r4, [r7, #0]
 8000fae:	f000 f9f3 	bl	8001398 <__retarget_lock_release_recursive>
 8000fb2:	230c      	movs	r3, #12
 8000fb4:	6033      	str	r3, [r6, #0]
 8000fb6:	e7da      	b.n	8000f6e <__sfp+0x66>
 8000fb8:	20000314 	.word	0x20000314
 8000fbc:	200001b8 	.word	0x200001b8
 8000fc0:	20000010 	.word	0x20000010
 8000fc4:	ffff0001 	.word	0xffff0001

08000fc8 <__sinit>:
 8000fc8:	b510      	push	{r4, lr}
 8000fca:	4604      	mov	r4, r0
 8000fcc:	480b      	ldr	r0, [pc, #44]	@ (8000ffc <__sinit+0x34>)
 8000fce:	f000 f9db 	bl	8001388 <__retarget_lock_acquire_recursive>
 8000fd2:	6a23      	ldr	r3, [r4, #32]
 8000fd4:	b92b      	cbnz	r3, 8000fe2 <__sinit+0x1a>
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <__sinit+0x38>)
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <__sinit+0x3c>)
 8000fda:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000fde:	6222      	str	r2, [r4, #32]
 8000fe0:	b123      	cbz	r3, 8000fec <__sinit+0x24>
 8000fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fe6:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <__sinit+0x34>)
 8000fe8:	f000 b9d6 	b.w	8001398 <__retarget_lock_release_recursive>
 8000fec:	f7ff ff16 	bl	8000e1c <global_stdio_init.part.0>
 8000ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ff4:	4801      	ldr	r0, [pc, #4]	@ (8000ffc <__sinit+0x34>)
 8000ff6:	f000 b9cf 	b.w	8001398 <__retarget_lock_release_recursive>
 8000ffa:	bf00      	nop
 8000ffc:	20000314 	.word	0x20000314
 8001000:	200001b8 	.word	0x200001b8
 8001004:	08000da5 	.word	0x08000da5

08001008 <__sfp_lock_acquire>:
 8001008:	4801      	ldr	r0, [pc, #4]	@ (8001010 <__sfp_lock_acquire+0x8>)
 800100a:	f000 b9bd 	b.w	8001388 <__retarget_lock_acquire_recursive>
 800100e:	bf00      	nop
 8001010:	20000314 	.word	0x20000314

08001014 <__sfp_lock_release>:
 8001014:	4801      	ldr	r0, [pc, #4]	@ (800101c <__sfp_lock_release+0x8>)
 8001016:	f000 b9bf 	b.w	8001398 <__retarget_lock_release_recursive>
 800101a:	bf00      	nop
 800101c:	20000314 	.word	0x20000314

08001020 <__fp_lock_all>:
 8001020:	b508      	push	{r3, lr}
 8001022:	4805      	ldr	r0, [pc, #20]	@ (8001038 <__fp_lock_all+0x18>)
 8001024:	f000 f9b0 	bl	8001388 <__retarget_lock_acquire_recursive>
 8001028:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800102c:	4a03      	ldr	r2, [pc, #12]	@ (800103c <__fp_lock_all+0x1c>)
 800102e:	4904      	ldr	r1, [pc, #16]	@ (8001040 <__fp_lock_all+0x20>)
 8001030:	2000      	movs	r0, #0
 8001032:	f000 b819 	b.w	8001068 <_fwalk_sglue>
 8001036:	bf00      	nop
 8001038:	20000314 	.word	0x20000314
 800103c:	20000010 	.word	0x20000010
 8001040:	08000de5 	.word	0x08000de5

08001044 <__fp_unlock_all>:
 8001044:	b508      	push	{r3, lr}
 8001046:	4a05      	ldr	r2, [pc, #20]	@ (800105c <__fp_unlock_all+0x18>)
 8001048:	4905      	ldr	r1, [pc, #20]	@ (8001060 <__fp_unlock_all+0x1c>)
 800104a:	2000      	movs	r0, #0
 800104c:	f000 f80c 	bl	8001068 <_fwalk_sglue>
 8001050:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001054:	4803      	ldr	r0, [pc, #12]	@ (8001064 <__fp_unlock_all+0x20>)
 8001056:	f000 b99f 	b.w	8001398 <__retarget_lock_release_recursive>
 800105a:	bf00      	nop
 800105c:	20000010 	.word	0x20000010
 8001060:	08000e01 	.word	0x08000e01
 8001064:	20000314 	.word	0x20000314

08001068 <_fwalk_sglue>:
 8001068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800106c:	4680      	mov	r8, r0
 800106e:	460f      	mov	r7, r1
 8001070:	4616      	mov	r6, r2
 8001072:	f04f 0900 	mov.w	r9, #0
 8001076:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 800107a:	3d01      	subs	r5, #1
 800107c:	d411      	bmi.n	80010a2 <_fwalk_sglue+0x3a>
 800107e:	89a3      	ldrh	r3, [r4, #12]
 8001080:	2b01      	cmp	r3, #1
 8001082:	f105 35ff 	add.w	r5, r5, #4294967295
 8001086:	d908      	bls.n	800109a <_fwalk_sglue+0x32>
 8001088:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800108c:	3301      	adds	r3, #1
 800108e:	4621      	mov	r1, r4
 8001090:	d003      	beq.n	800109a <_fwalk_sglue+0x32>
 8001092:	4640      	mov	r0, r8
 8001094:	47b8      	blx	r7
 8001096:	ea49 0900 	orr.w	r9, r9, r0
 800109a:	1c6b      	adds	r3, r5, #1
 800109c:	f104 0468 	add.w	r4, r4, #104	@ 0x68
 80010a0:	d1ed      	bne.n	800107e <_fwalk_sglue+0x16>
 80010a2:	6836      	ldr	r6, [r6, #0]
 80010a4:	2e00      	cmp	r6, #0
 80010a6:	d1e6      	bne.n	8001076 <_fwalk_sglue+0xe>
 80010a8:	4648      	mov	r0, r9
 80010aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010ae:	bf00      	nop

080010b0 <__sread>:
 80010b0:	b510      	push	{r4, lr}
 80010b2:	460c      	mov	r4, r1
 80010b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010b8:	f000 f8f0 	bl	800129c <_read_r>
 80010bc:	2800      	cmp	r0, #0
 80010be:	db03      	blt.n	80010c8 <__sread+0x18>
 80010c0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80010c2:	4403      	add	r3, r0
 80010c4:	6563      	str	r3, [r4, #84]	@ 0x54
 80010c6:	bd10      	pop	{r4, pc}
 80010c8:	89a3      	ldrh	r3, [r4, #12]
 80010ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80010ce:	81a3      	strh	r3, [r4, #12]
 80010d0:	bd10      	pop	{r4, pc}
 80010d2:	bf00      	nop

080010d4 <__seofread>:
 80010d4:	2000      	movs	r0, #0
 80010d6:	4770      	bx	lr

080010d8 <__swrite>:
 80010d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010dc:	460c      	mov	r4, r1
 80010de:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 80010e2:	461f      	mov	r7, r3
 80010e4:	05cb      	lsls	r3, r1, #23
 80010e6:	4605      	mov	r5, r0
 80010e8:	4616      	mov	r6, r2
 80010ea:	d40b      	bmi.n	8001104 <__swrite+0x2c>
 80010ec:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 80010f0:	81a1      	strh	r1, [r4, #12]
 80010f2:	463b      	mov	r3, r7
 80010f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010f8:	4632      	mov	r2, r6
 80010fa:	4628      	mov	r0, r5
 80010fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001100:	f000 b8f4 	b.w	80012ec <_write_r>
 8001104:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001108:	2302      	movs	r3, #2
 800110a:	2200      	movs	r2, #0
 800110c:	f000 f8b0 	bl	8001270 <_lseek_r>
 8001110:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8001114:	e7ea      	b.n	80010ec <__swrite+0x14>
 8001116:	bf00      	nop

08001118 <__sseek>:
 8001118:	b510      	push	{r4, lr}
 800111a:	460c      	mov	r4, r1
 800111c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001120:	f000 f8a6 	bl	8001270 <_lseek_r>
 8001124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001128:	1c42      	adds	r2, r0, #1
 800112a:	bf0e      	itee	eq
 800112c:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001130:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001134:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001136:	81a3      	strh	r3, [r4, #12]
 8001138:	bd10      	pop	{r4, pc}
 800113a:	bf00      	nop

0800113c <__sclose>:
 800113c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001140:	f000 b86e 	b.w	8001220 <_close_r>

08001144 <memset>:
 8001144:	0783      	lsls	r3, r0, #30
 8001146:	b530      	push	{r4, r5, lr}
 8001148:	d047      	beq.n	80011da <memset+0x96>
 800114a:	1e54      	subs	r4, r2, #1
 800114c:	2a00      	cmp	r2, #0
 800114e:	d03e      	beq.n	80011ce <memset+0x8a>
 8001150:	b2ca      	uxtb	r2, r1
 8001152:	4603      	mov	r3, r0
 8001154:	e001      	b.n	800115a <memset+0x16>
 8001156:	3c01      	subs	r4, #1
 8001158:	d339      	bcc.n	80011ce <memset+0x8a>
 800115a:	f803 2b01 	strb.w	r2, [r3], #1
 800115e:	079d      	lsls	r5, r3, #30
 8001160:	d1f9      	bne.n	8001156 <memset+0x12>
 8001162:	2c03      	cmp	r4, #3
 8001164:	d92c      	bls.n	80011c0 <memset+0x7c>
 8001166:	b2cd      	uxtb	r5, r1
 8001168:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 800116c:	2c0f      	cmp	r4, #15
 800116e:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 8001172:	d935      	bls.n	80011e0 <memset+0x9c>
 8001174:	f1a4 0210 	sub.w	r2, r4, #16
 8001178:	f022 0c0f 	bic.w	ip, r2, #15
 800117c:	f103 0e10 	add.w	lr, r3, #16
 8001180:	44e6      	add	lr, ip
 8001182:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 8001186:	461a      	mov	r2, r3
 8001188:	6015      	str	r5, [r2, #0]
 800118a:	6055      	str	r5, [r2, #4]
 800118c:	6095      	str	r5, [r2, #8]
 800118e:	60d5      	str	r5, [r2, #12]
 8001190:	3210      	adds	r2, #16
 8001192:	4572      	cmp	r2, lr
 8001194:	d1f8      	bne.n	8001188 <memset+0x44>
 8001196:	f10c 0201 	add.w	r2, ip, #1
 800119a:	f014 0f0c 	tst.w	r4, #12
 800119e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80011a2:	f004 0c0f 	and.w	ip, r4, #15
 80011a6:	d013      	beq.n	80011d0 <memset+0x8c>
 80011a8:	f1ac 0304 	sub.w	r3, ip, #4
 80011ac:	f023 0303 	bic.w	r3, r3, #3
 80011b0:	3304      	adds	r3, #4
 80011b2:	4413      	add	r3, r2
 80011b4:	f842 5b04 	str.w	r5, [r2], #4
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d1fb      	bne.n	80011b4 <memset+0x70>
 80011bc:	f00c 0403 	and.w	r4, ip, #3
 80011c0:	b12c      	cbz	r4, 80011ce <memset+0x8a>
 80011c2:	b2c9      	uxtb	r1, r1
 80011c4:	441c      	add	r4, r3
 80011c6:	f803 1b01 	strb.w	r1, [r3], #1
 80011ca:	429c      	cmp	r4, r3
 80011cc:	d1fb      	bne.n	80011c6 <memset+0x82>
 80011ce:	bd30      	pop	{r4, r5, pc}
 80011d0:	4664      	mov	r4, ip
 80011d2:	4613      	mov	r3, r2
 80011d4:	2c00      	cmp	r4, #0
 80011d6:	d1f4      	bne.n	80011c2 <memset+0x7e>
 80011d8:	e7f9      	b.n	80011ce <memset+0x8a>
 80011da:	4603      	mov	r3, r0
 80011dc:	4614      	mov	r4, r2
 80011de:	e7c0      	b.n	8001162 <memset+0x1e>
 80011e0:	461a      	mov	r2, r3
 80011e2:	46a4      	mov	ip, r4
 80011e4:	e7e0      	b.n	80011a8 <memset+0x64>
 80011e6:	bf00      	nop

080011e8 <time>:
 80011e8:	b570      	push	{r4, r5, r6, lr}
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <time+0x34>)
 80011ec:	b084      	sub	sp, #16
 80011ee:	f04f 36ff 	mov.w	r6, #4294967295
 80011f2:	4669      	mov	r1, sp
 80011f4:	4604      	mov	r4, r0
 80011f6:	2200      	movs	r2, #0
 80011f8:	6818      	ldr	r0, [r3, #0]
 80011fa:	e9cd 6600 	strd	r6, r6, [sp]
 80011fe:	f000 f821 	bl	8001244 <_gettimeofday_r>
 8001202:	2800      	cmp	r0, #0
 8001204:	bfb7      	itett	lt
 8001206:	4635      	movlt	r5, r6
 8001208:	e9dd 0100 	ldrdge	r0, r1, [sp]
 800120c:	4630      	movlt	r0, r6
 800120e:	4629      	movlt	r1, r5
 8001210:	b10c      	cbz	r4, 8001216 <time+0x2e>
 8001212:	e9c4 0100 	strd	r0, r1, [r4]
 8001216:	b004      	add	sp, #16
 8001218:	bd70      	pop	{r4, r5, r6, pc}
 800121a:	bf00      	nop
 800121c:	2000001c 	.word	0x2000001c

08001220 <_close_r>:
 8001220:	b538      	push	{r3, r4, r5, lr}
 8001222:	4d07      	ldr	r5, [pc, #28]	@ (8001240 <_close_r+0x20>)
 8001224:	2200      	movs	r2, #0
 8001226:	4604      	mov	r4, r0
 8001228:	4608      	mov	r0, r1
 800122a:	602a      	str	r2, [r5, #0]
 800122c:	f001 fb76 	bl	800291c <_close>
 8001230:	1c43      	adds	r3, r0, #1
 8001232:	d000      	beq.n	8001236 <_close_r+0x16>
 8001234:	bd38      	pop	{r3, r4, r5, pc}
 8001236:	682b      	ldr	r3, [r5, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0fb      	beq.n	8001234 <_close_r+0x14>
 800123c:	6023      	str	r3, [r4, #0]
 800123e:	bd38      	pop	{r3, r4, r5, pc}
 8001240:	200002f4 	.word	0x200002f4

08001244 <_gettimeofday_r>:
 8001244:	b570      	push	{r4, r5, r6, lr}
 8001246:	460c      	mov	r4, r1
 8001248:	4d08      	ldr	r5, [pc, #32]	@ (800126c <_gettimeofday_r+0x28>)
 800124a:	4603      	mov	r3, r0
 800124c:	2600      	movs	r6, #0
 800124e:	4620      	mov	r0, r4
 8001250:	4611      	mov	r1, r2
 8001252:	461c      	mov	r4, r3
 8001254:	602e      	str	r6, [r5, #0]
 8001256:	f001 fb79 	bl	800294c <_gettimeofday>
 800125a:	1c43      	adds	r3, r0, #1
 800125c:	d000      	beq.n	8001260 <_gettimeofday_r+0x1c>
 800125e:	bd70      	pop	{r4, r5, r6, pc}
 8001260:	682b      	ldr	r3, [r5, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0fb      	beq.n	800125e <_gettimeofday_r+0x1a>
 8001266:	6023      	str	r3, [r4, #0]
 8001268:	bd70      	pop	{r4, r5, r6, pc}
 800126a:	bf00      	nop
 800126c:	200002f4 	.word	0x200002f4

08001270 <_lseek_r>:
 8001270:	b538      	push	{r3, r4, r5, lr}
 8001272:	460c      	mov	r4, r1
 8001274:	4d08      	ldr	r5, [pc, #32]	@ (8001298 <_lseek_r+0x28>)
 8001276:	4684      	mov	ip, r0
 8001278:	4611      	mov	r1, r2
 800127a:	4620      	mov	r0, r4
 800127c:	461a      	mov	r2, r3
 800127e:	2300      	movs	r3, #0
 8001280:	602b      	str	r3, [r5, #0]
 8001282:	4664      	mov	r4, ip
 8001284:	f001 fb7a 	bl	800297c <_lseek>
 8001288:	1c43      	adds	r3, r0, #1
 800128a:	d000      	beq.n	800128e <_lseek_r+0x1e>
 800128c:	bd38      	pop	{r3, r4, r5, pc}
 800128e:	682b      	ldr	r3, [r5, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0fb      	beq.n	800128c <_lseek_r+0x1c>
 8001294:	6023      	str	r3, [r4, #0]
 8001296:	bd38      	pop	{r3, r4, r5, pc}
 8001298:	200002f4 	.word	0x200002f4

0800129c <_read_r>:
 800129c:	b538      	push	{r3, r4, r5, lr}
 800129e:	460c      	mov	r4, r1
 80012a0:	4d08      	ldr	r5, [pc, #32]	@ (80012c4 <_read_r+0x28>)
 80012a2:	4684      	mov	ip, r0
 80012a4:	4611      	mov	r1, r2
 80012a6:	4620      	mov	r0, r4
 80012a8:	461a      	mov	r2, r3
 80012aa:	2300      	movs	r3, #0
 80012ac:	602b      	str	r3, [r5, #0]
 80012ae:	4664      	mov	r4, ip
 80012b0:	f001 fb6c 	bl	800298c <_read>
 80012b4:	1c43      	adds	r3, r0, #1
 80012b6:	d000      	beq.n	80012ba <_read_r+0x1e>
 80012b8:	bd38      	pop	{r3, r4, r5, pc}
 80012ba:	682b      	ldr	r3, [r5, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0fb      	beq.n	80012b8 <_read_r+0x1c>
 80012c0:	6023      	str	r3, [r4, #0]
 80012c2:	bd38      	pop	{r3, r4, r5, pc}
 80012c4:	200002f4 	.word	0x200002f4

080012c8 <_sbrk_r>:
 80012c8:	b538      	push	{r3, r4, r5, lr}
 80012ca:	4d07      	ldr	r5, [pc, #28]	@ (80012e8 <_sbrk_r+0x20>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	4604      	mov	r4, r0
 80012d0:	4608      	mov	r0, r1
 80012d2:	602a      	str	r2, [r5, #0]
 80012d4:	f002 fcc4 	bl	8003c60 <_sbrk>
 80012d8:	1c43      	adds	r3, r0, #1
 80012da:	d000      	beq.n	80012de <_sbrk_r+0x16>
 80012dc:	bd38      	pop	{r3, r4, r5, pc}
 80012de:	682b      	ldr	r3, [r5, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0fb      	beq.n	80012dc <_sbrk_r+0x14>
 80012e4:	6023      	str	r3, [r4, #0]
 80012e6:	bd38      	pop	{r3, r4, r5, pc}
 80012e8:	200002f4 	.word	0x200002f4

080012ec <_write_r>:
 80012ec:	b538      	push	{r3, r4, r5, lr}
 80012ee:	460c      	mov	r4, r1
 80012f0:	4d08      	ldr	r5, [pc, #32]	@ (8001314 <_write_r+0x28>)
 80012f2:	4684      	mov	ip, r0
 80012f4:	4611      	mov	r1, r2
 80012f6:	4620      	mov	r0, r4
 80012f8:	461a      	mov	r2, r3
 80012fa:	2300      	movs	r3, #0
 80012fc:	602b      	str	r3, [r5, #0]
 80012fe:	4664      	mov	r4, ip
 8001300:	f001 fb4c 	bl	800299c <_write>
 8001304:	1c43      	adds	r3, r0, #1
 8001306:	d000      	beq.n	800130a <_write_r+0x1e>
 8001308:	bd38      	pop	{r3, r4, r5, pc}
 800130a:	682b      	ldr	r3, [r5, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0fb      	beq.n	8001308 <_write_r+0x1c>
 8001310:	6023      	str	r3, [r4, #0]
 8001312:	bd38      	pop	{r3, r4, r5, pc}
 8001314:	200002f4 	.word	0x200002f4

08001318 <__errno>:
 8001318:	4b01      	ldr	r3, [pc, #4]	@ (8001320 <__errno+0x8>)
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	2000001c 	.word	0x2000001c

08001324 <__libc_init_array>:
 8001324:	b570      	push	{r4, r5, r6, lr}
 8001326:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <__libc_init_array+0x40>)
 8001328:	4d0f      	ldr	r5, [pc, #60]	@ (8001368 <__libc_init_array+0x44>)
 800132a:	42ab      	cmp	r3, r5
 800132c:	eba3 0605 	sub.w	r6, r3, r5
 8001330:	d007      	beq.n	8001342 <__libc_init_array+0x1e>
 8001332:	10b6      	asrs	r6, r6, #2
 8001334:	2400      	movs	r4, #0
 8001336:	f855 3b04 	ldr.w	r3, [r5], #4
 800133a:	3401      	adds	r4, #1
 800133c:	4798      	blx	r3
 800133e:	42a6      	cmp	r6, r4
 8001340:	d8f9      	bhi.n	8001336 <__libc_init_array+0x12>
 8001342:	f002 fccd 	bl	8003ce0 <_init>
 8001346:	4d09      	ldr	r5, [pc, #36]	@ (800136c <__libc_init_array+0x48>)
 8001348:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <__libc_init_array+0x4c>)
 800134a:	1b5e      	subs	r6, r3, r5
 800134c:	42ab      	cmp	r3, r5
 800134e:	ea4f 06a6 	mov.w	r6, r6, asr #2
 8001352:	d006      	beq.n	8001362 <__libc_init_array+0x3e>
 8001354:	2400      	movs	r4, #0
 8001356:	f855 3b04 	ldr.w	r3, [r5], #4
 800135a:	3401      	adds	r4, #1
 800135c:	4798      	blx	r3
 800135e:	42a6      	cmp	r6, r4
 8001360:	d8f9      	bhi.n	8001356 <__libc_init_array+0x32>
 8001362:	bd70      	pop	{r4, r5, r6, pc}
 8001364:	08003de8 	.word	0x08003de8
 8001368:	08003de8 	.word	0x08003de8
 800136c:	08003de8 	.word	0x08003de8
 8001370:	08003dec 	.word	0x08003dec

08001374 <__retarget_lock_init>:
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop

08001378 <__retarget_lock_init_recursive>:
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop

0800137c <__retarget_lock_close>:
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop

08001380 <__retarget_lock_close_recursive>:
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop

08001384 <__retarget_lock_acquire>:
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop

08001388 <__retarget_lock_acquire_recursive>:
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop

0800138c <__retarget_lock_try_acquire>:
 800138c:	2001      	movs	r0, #1
 800138e:	4770      	bx	lr

08001390 <__retarget_lock_try_acquire_recursive>:
 8001390:	2001      	movs	r0, #1
 8001392:	4770      	bx	lr

08001394 <__retarget_lock_release>:
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop

08001398 <__retarget_lock_release_recursive>:
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop

0800139c <memcpy>:
 800139c:	4684      	mov	ip, r0
 800139e:	ea41 0300 	orr.w	r3, r1, r0
 80013a2:	f013 0303 	ands.w	r3, r3, #3
 80013a6:	d16d      	bne.n	8001484 <memcpy+0xe8>
 80013a8:	3a40      	subs	r2, #64	@ 0x40
 80013aa:	d341      	bcc.n	8001430 <memcpy+0x94>
 80013ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80013b0:	f840 3b04 	str.w	r3, [r0], #4
 80013b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80013b8:	f840 3b04 	str.w	r3, [r0], #4
 80013bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80013c0:	f840 3b04 	str.w	r3, [r0], #4
 80013c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80013c8:	f840 3b04 	str.w	r3, [r0], #4
 80013cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80013d0:	f840 3b04 	str.w	r3, [r0], #4
 80013d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80013d8:	f840 3b04 	str.w	r3, [r0], #4
 80013dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80013e0:	f840 3b04 	str.w	r3, [r0], #4
 80013e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80013e8:	f840 3b04 	str.w	r3, [r0], #4
 80013ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80013f0:	f840 3b04 	str.w	r3, [r0], #4
 80013f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80013f8:	f840 3b04 	str.w	r3, [r0], #4
 80013fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8001400:	f840 3b04 	str.w	r3, [r0], #4
 8001404:	f851 3b04 	ldr.w	r3, [r1], #4
 8001408:	f840 3b04 	str.w	r3, [r0], #4
 800140c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001410:	f840 3b04 	str.w	r3, [r0], #4
 8001414:	f851 3b04 	ldr.w	r3, [r1], #4
 8001418:	f840 3b04 	str.w	r3, [r0], #4
 800141c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001420:	f840 3b04 	str.w	r3, [r0], #4
 8001424:	f851 3b04 	ldr.w	r3, [r1], #4
 8001428:	f840 3b04 	str.w	r3, [r0], #4
 800142c:	3a40      	subs	r2, #64	@ 0x40
 800142e:	d2bd      	bcs.n	80013ac <memcpy+0x10>
 8001430:	3230      	adds	r2, #48	@ 0x30
 8001432:	d311      	bcc.n	8001458 <memcpy+0xbc>
 8001434:	f851 3b04 	ldr.w	r3, [r1], #4
 8001438:	f840 3b04 	str.w	r3, [r0], #4
 800143c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001440:	f840 3b04 	str.w	r3, [r0], #4
 8001444:	f851 3b04 	ldr.w	r3, [r1], #4
 8001448:	f840 3b04 	str.w	r3, [r0], #4
 800144c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001450:	f840 3b04 	str.w	r3, [r0], #4
 8001454:	3a10      	subs	r2, #16
 8001456:	d2ed      	bcs.n	8001434 <memcpy+0x98>
 8001458:	320c      	adds	r2, #12
 800145a:	d305      	bcc.n	8001468 <memcpy+0xcc>
 800145c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001460:	f840 3b04 	str.w	r3, [r0], #4
 8001464:	3a04      	subs	r2, #4
 8001466:	d2f9      	bcs.n	800145c <memcpy+0xc0>
 8001468:	3204      	adds	r2, #4
 800146a:	d008      	beq.n	800147e <memcpy+0xe2>
 800146c:	07d2      	lsls	r2, r2, #31
 800146e:	bf1c      	itt	ne
 8001470:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001474:	f800 3b01 	strbne.w	r3, [r0], #1
 8001478:	d301      	bcc.n	800147e <memcpy+0xe2>
 800147a:	880b      	ldrh	r3, [r1, #0]
 800147c:	8003      	strh	r3, [r0, #0]
 800147e:	4660      	mov	r0, ip
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	2a08      	cmp	r2, #8
 8001486:	d313      	bcc.n	80014b0 <memcpy+0x114>
 8001488:	078b      	lsls	r3, r1, #30
 800148a:	d08d      	beq.n	80013a8 <memcpy+0xc>
 800148c:	f010 0303 	ands.w	r3, r0, #3
 8001490:	d08a      	beq.n	80013a8 <memcpy+0xc>
 8001492:	f1c3 0304 	rsb	r3, r3, #4
 8001496:	1ad2      	subs	r2, r2, r3
 8001498:	07db      	lsls	r3, r3, #31
 800149a:	bf1c      	itt	ne
 800149c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80014a0:	f800 3b01 	strbne.w	r3, [r0], #1
 80014a4:	d380      	bcc.n	80013a8 <memcpy+0xc>
 80014a6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80014aa:	f820 3b02 	strh.w	r3, [r0], #2
 80014ae:	e77b      	b.n	80013a8 <memcpy+0xc>
 80014b0:	3a04      	subs	r2, #4
 80014b2:	d3d9      	bcc.n	8001468 <memcpy+0xcc>
 80014b4:	3a01      	subs	r2, #1
 80014b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80014ba:	f800 3b01 	strb.w	r3, [r0], #1
 80014be:	d2f9      	bcs.n	80014b4 <memcpy+0x118>
 80014c0:	780b      	ldrb	r3, [r1, #0]
 80014c2:	7003      	strb	r3, [r0, #0]
 80014c4:	784b      	ldrb	r3, [r1, #1]
 80014c6:	7043      	strb	r3, [r0, #1]
 80014c8:	788b      	ldrb	r3, [r1, #2]
 80014ca:	7083      	strb	r3, [r0, #2]
 80014cc:	4660      	mov	r0, ip
 80014ce:	4770      	bx	lr

080014d0 <__assert_func>:
 80014d0:	b500      	push	{lr}
 80014d2:	4c0b      	ldr	r4, [pc, #44]	@ (8001500 <__assert_func+0x30>)
 80014d4:	6825      	ldr	r5, [r4, #0]
 80014d6:	4614      	mov	r4, r2
 80014d8:	68ee      	ldr	r6, [r5, #12]
 80014da:	461a      	mov	r2, r3
 80014dc:	b085      	sub	sp, #20
 80014de:	4603      	mov	r3, r0
 80014e0:	460d      	mov	r5, r1
 80014e2:	b14c      	cbz	r4, 80014f8 <__assert_func+0x28>
 80014e4:	4907      	ldr	r1, [pc, #28]	@ (8001504 <__assert_func+0x34>)
 80014e6:	9500      	str	r5, [sp, #0]
 80014e8:	e9cd 1401 	strd	r1, r4, [sp, #4]
 80014ec:	4630      	mov	r0, r6
 80014ee:	4906      	ldr	r1, [pc, #24]	@ (8001508 <__assert_func+0x38>)
 80014f0:	f000 f948 	bl	8001784 <fiprintf>
 80014f4:	f000 f95a 	bl	80017ac <abort>
 80014f8:	4904      	ldr	r1, [pc, #16]	@ (800150c <__assert_func+0x3c>)
 80014fa:	460c      	mov	r4, r1
 80014fc:	e7f3      	b.n	80014e6 <__assert_func+0x16>
 80014fe:	bf00      	nop
 8001500:	2000001c 	.word	0x2000001c
 8001504:	08003d64 	.word	0x08003d64
 8001508:	08003d74 	.word	0x08003d74
 800150c:	08003d70 	.word	0x08003d70

08001510 <__assert>:
 8001510:	b508      	push	{r3, lr}
 8001512:	4613      	mov	r3, r2
 8001514:	2200      	movs	r2, #0
 8001516:	f7ff ffdb 	bl	80014d0 <__assert_func>
 800151a:	bf00      	nop

0800151c <_free_r>:
 800151c:	2900      	cmp	r1, #0
 800151e:	d050      	beq.n	80015c2 <_free_r+0xa6>
 8001520:	b538      	push	{r3, r4, r5, lr}
 8001522:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001526:	1f0c      	subs	r4, r1, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	bfb8      	it	lt
 800152c:	18e4      	addlt	r4, r4, r3
 800152e:	4605      	mov	r5, r0
 8001530:	f7ff fba8 	bl	8000c84 <__malloc_lock>
 8001534:	4a27      	ldr	r2, [pc, #156]	@ (80015d4 <_free_r+0xb8>)
 8001536:	6813      	ldr	r3, [r2, #0]
 8001538:	b12b      	cbz	r3, 8001546 <_free_r+0x2a>
 800153a:	42a3      	cmp	r3, r4
 800153c:	d90c      	bls.n	8001558 <_free_r+0x3c>
 800153e:	6821      	ldr	r1, [r4, #0]
 8001540:	1860      	adds	r0, r4, r1
 8001542:	4283      	cmp	r3, r0
 8001544:	d02c      	beq.n	80015a0 <_free_r+0x84>
 8001546:	6063      	str	r3, [r4, #4]
 8001548:	4628      	mov	r0, r5
 800154a:	6014      	str	r4, [r2, #0]
 800154c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001550:	f7ff bb9e 	b.w	8000c90 <__malloc_unlock>
 8001554:	42a3      	cmp	r3, r4
 8001556:	d80f      	bhi.n	8001578 <_free_r+0x5c>
 8001558:	461a      	mov	r2, r3
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f9      	bne.n	8001554 <_free_r+0x38>
 8001560:	6811      	ldr	r1, [r2, #0]
 8001562:	1850      	adds	r0, r2, r1
 8001564:	4284      	cmp	r4, r0
 8001566:	d017      	beq.n	8001598 <_free_r+0x7c>
 8001568:	d32c      	bcc.n	80015c4 <_free_r+0xa8>
 800156a:	6063      	str	r3, [r4, #4]
 800156c:	6054      	str	r4, [r2, #4]
 800156e:	4628      	mov	r0, r5
 8001570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001574:	f7ff bb8c 	b.w	8000c90 <__malloc_unlock>
 8001578:	6811      	ldr	r1, [r2, #0]
 800157a:	1850      	adds	r0, r2, r1
 800157c:	42a0      	cmp	r0, r4
 800157e:	d014      	beq.n	80015aa <_free_r+0x8e>
 8001580:	d820      	bhi.n	80015c4 <_free_r+0xa8>
 8001582:	6821      	ldr	r1, [r4, #0]
 8001584:	1860      	adds	r0, r4, r1
 8001586:	4283      	cmp	r3, r0
 8001588:	d1ef      	bne.n	800156a <_free_r+0x4e>
 800158a:	6818      	ldr	r0, [r3, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	4408      	add	r0, r1
 8001590:	e9c4 0300 	strd	r0, r3, [r4]
 8001594:	6054      	str	r4, [r2, #4]
 8001596:	e7ea      	b.n	800156e <_free_r+0x52>
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	440b      	add	r3, r1
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e7e6      	b.n	800156e <_free_r+0x52>
 80015a0:	6818      	ldr	r0, [r3, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	4408      	add	r0, r1
 80015a6:	6020      	str	r0, [r4, #0]
 80015a8:	e7cd      	b.n	8001546 <_free_r+0x2a>
 80015aa:	6820      	ldr	r0, [r4, #0]
 80015ac:	4401      	add	r1, r0
 80015ae:	1850      	adds	r0, r2, r1
 80015b0:	4283      	cmp	r3, r0
 80015b2:	6011      	str	r1, [r2, #0]
 80015b4:	d1db      	bne.n	800156e <_free_r+0x52>
 80015b6:	e9d3 0400 	ldrd	r0, r4, [r3]
 80015ba:	4401      	add	r1, r0
 80015bc:	e9c2 1400 	strd	r1, r4, [r2]
 80015c0:	e7d5      	b.n	800156e <_free_r+0x52>
 80015c2:	4770      	bx	lr
 80015c4:	230c      	movs	r3, #12
 80015c6:	602b      	str	r3, [r5, #0]
 80015c8:	4628      	mov	r0, r5
 80015ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80015ce:	f7ff bb5f 	b.w	8000c90 <__malloc_unlock>
 80015d2:	bf00      	nop
 80015d4:	200001b4 	.word	0x200001b4

080015d8 <__sflush_r>:
 80015d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015da:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80015de:	4607      	mov	r7, r0
 80015e0:	0718      	lsls	r0, r3, #28
 80015e2:	460c      	mov	r4, r1
 80015e4:	d439      	bmi.n	800165a <__sflush_r+0x82>
 80015e6:	684a      	ldr	r2, [r1, #4]
 80015e8:	2a00      	cmp	r2, #0
 80015ea:	dd53      	ble.n	8001694 <__sflush_r+0xbc>
 80015ec:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80015ee:	2d00      	cmp	r5, #0
 80015f0:	d031      	beq.n	8001656 <__sflush_r+0x7e>
 80015f2:	2200      	movs	r2, #0
 80015f4:	683e      	ldr	r6, [r7, #0]
 80015f6:	603a      	str	r2, [r7, #0]
 80015f8:	f413 5280 	ands.w	r2, r3, #4096	@ 0x1000
 80015fc:	6a21      	ldr	r1, [r4, #32]
 80015fe:	d155      	bne.n	80016ac <__sflush_r+0xd4>
 8001600:	2301      	movs	r3, #1
 8001602:	4638      	mov	r0, r7
 8001604:	47a8      	blx	r5
 8001606:	1c41      	adds	r1, r0, #1
 8001608:	4602      	mov	r2, r0
 800160a:	d05e      	beq.n	80016ca <__sflush_r+0xf2>
 800160c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001610:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8001612:	6a21      	ldr	r1, [r4, #32]
 8001614:	075b      	lsls	r3, r3, #29
 8001616:	d505      	bpl.n	8001624 <__sflush_r+0x4c>
 8001618:	6863      	ldr	r3, [r4, #4]
 800161a:	1ad2      	subs	r2, r2, r3
 800161c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800161e:	b10b      	cbz	r3, 8001624 <__sflush_r+0x4c>
 8001620:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001622:	1ad2      	subs	r2, r2, r3
 8001624:	2300      	movs	r3, #0
 8001626:	4638      	mov	r0, r7
 8001628:	47a8      	blx	r5
 800162a:	1c45      	adds	r5, r0, #1
 800162c:	d040      	beq.n	80016b0 <__sflush_r+0xd8>
 800162e:	2300      	movs	r3, #0
 8001630:	6063      	str	r3, [r4, #4]
 8001632:	6923      	ldr	r3, [r4, #16]
 8001634:	6023      	str	r3, [r4, #0]
 8001636:	89a3      	ldrh	r3, [r4, #12]
 8001638:	04d9      	lsls	r1, r3, #19
 800163a:	d500      	bpl.n	800163e <__sflush_r+0x66>
 800163c:	6560      	str	r0, [r4, #84]	@ 0x54
 800163e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001640:	603e      	str	r6, [r7, #0]
 8001642:	b141      	cbz	r1, 8001656 <__sflush_r+0x7e>
 8001644:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001648:	4299      	cmp	r1, r3
 800164a:	d002      	beq.n	8001652 <__sflush_r+0x7a>
 800164c:	4638      	mov	r0, r7
 800164e:	f7ff ff65 	bl	800151c <_free_r>
 8001652:	2300      	movs	r3, #0
 8001654:	6363      	str	r3, [r4, #52]	@ 0x34
 8001656:	2000      	movs	r0, #0
 8001658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800165a:	690e      	ldr	r6, [r1, #16]
 800165c:	2e00      	cmp	r6, #0
 800165e:	d0fa      	beq.n	8001656 <__sflush_r+0x7e>
 8001660:	079b      	lsls	r3, r3, #30
 8001662:	680d      	ldr	r5, [r1, #0]
 8001664:	bf08      	it	eq
 8001666:	694b      	ldreq	r3, [r1, #20]
 8001668:	600e      	str	r6, [r1, #0]
 800166a:	bf18      	it	ne
 800166c:	2300      	movne	r3, #0
 800166e:	1bad      	subs	r5, r5, r6
 8001670:	608b      	str	r3, [r1, #8]
 8001672:	e00c      	b.n	800168e <__sflush_r+0xb6>
 8001674:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001678:	6a21      	ldr	r1, [r4, #32]
 800167a:	462b      	mov	r3, r5
 800167c:	4632      	mov	r2, r6
 800167e:	4638      	mov	r0, r7
 8001680:	47e0      	blx	ip
 8001682:	f1b0 0c00 	subs.w	ip, r0, #0
 8001686:	eba5 050c 	sub.w	r5, r5, ip
 800168a:	4466      	add	r6, ip
 800168c:	dd06      	ble.n	800169c <__sflush_r+0xc4>
 800168e:	2d00      	cmp	r5, #0
 8001690:	dcf0      	bgt.n	8001674 <__sflush_r+0x9c>
 8001692:	e7e0      	b.n	8001656 <__sflush_r+0x7e>
 8001694:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8001696:	2a00      	cmp	r2, #0
 8001698:	dca8      	bgt.n	80015ec <__sflush_r+0x14>
 800169a:	e7dc      	b.n	8001656 <__sflush_r+0x7e>
 800169c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016a4:	81a3      	strh	r3, [r4, #12]
 80016a6:	f04f 30ff 	mov.w	r0, #4294967295
 80016aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80016ae:	e7b1      	b.n	8001614 <__sflush_r+0x3c>
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016b6:	b18a      	cbz	r2, 80016dc <__sflush_r+0x104>
 80016b8:	2a1d      	cmp	r2, #29
 80016ba:	d001      	beq.n	80016c0 <__sflush_r+0xe8>
 80016bc:	2a16      	cmp	r2, #22
 80016be:	d1ef      	bne.n	80016a0 <__sflush_r+0xc8>
 80016c0:	6923      	ldr	r3, [r4, #16]
 80016c2:	2200      	movs	r2, #0
 80016c4:	e9c4 3200 	strd	r3, r2, [r4]
 80016c8:	e7b9      	b.n	800163e <__sflush_r+0x66>
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d09d      	beq.n	800160c <__sflush_r+0x34>
 80016d0:	2b1d      	cmp	r3, #29
 80016d2:	d001      	beq.n	80016d8 <__sflush_r+0x100>
 80016d4:	2b16      	cmp	r3, #22
 80016d6:	d1e1      	bne.n	800169c <__sflush_r+0xc4>
 80016d8:	603e      	str	r6, [r7, #0]
 80016da:	e7bc      	b.n	8001656 <__sflush_r+0x7e>
 80016dc:	6062      	str	r2, [r4, #4]
 80016de:	6922      	ldr	r2, [r4, #16]
 80016e0:	6022      	str	r2, [r4, #0]
 80016e2:	04da      	lsls	r2, r3, #19
 80016e4:	d4aa      	bmi.n	800163c <__sflush_r+0x64>
 80016e6:	e7aa      	b.n	800163e <__sflush_r+0x66>

080016e8 <_fflush_r>:
 80016e8:	b538      	push	{r3, r4, r5, lr}
 80016ea:	690b      	ldr	r3, [r1, #16]
 80016ec:	b1cb      	cbz	r3, 8001722 <_fflush_r+0x3a>
 80016ee:	460c      	mov	r4, r1
 80016f0:	4605      	mov	r5, r0
 80016f2:	b108      	cbz	r0, 80016f8 <_fflush_r+0x10>
 80016f4:	6a03      	ldr	r3, [r0, #32]
 80016f6:	b1bb      	cbz	r3, 8001728 <_fflush_r+0x40>
 80016f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016fc:	b18b      	cbz	r3, 8001722 <_fflush_r+0x3a>
 80016fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001700:	07d0      	lsls	r0, r2, #31
 8001702:	d401      	bmi.n	8001708 <_fflush_r+0x20>
 8001704:	0599      	lsls	r1, r3, #22
 8001706:	d512      	bpl.n	800172e <_fflush_r+0x46>
 8001708:	4628      	mov	r0, r5
 800170a:	4621      	mov	r1, r4
 800170c:	f7ff ff64 	bl	80015d8 <__sflush_r>
 8001710:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001712:	07da      	lsls	r2, r3, #31
 8001714:	4605      	mov	r5, r0
 8001716:	d402      	bmi.n	800171e <_fflush_r+0x36>
 8001718:	89a3      	ldrh	r3, [r4, #12]
 800171a:	059b      	lsls	r3, r3, #22
 800171c:	d50b      	bpl.n	8001736 <_fflush_r+0x4e>
 800171e:	4628      	mov	r0, r5
 8001720:	bd38      	pop	{r3, r4, r5, pc}
 8001722:	2500      	movs	r5, #0
 8001724:	4628      	mov	r0, r5
 8001726:	bd38      	pop	{r3, r4, r5, pc}
 8001728:	f7ff fc4e 	bl	8000fc8 <__sinit>
 800172c:	e7e4      	b.n	80016f8 <_fflush_r+0x10>
 800172e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001730:	f7ff fe2a 	bl	8001388 <__retarget_lock_acquire_recursive>
 8001734:	e7e8      	b.n	8001708 <_fflush_r+0x20>
 8001736:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001738:	f7ff fe2e 	bl	8001398 <__retarget_lock_release_recursive>
 800173c:	e7ef      	b.n	800171e <_fflush_r+0x36>
 800173e:	bf00      	nop

08001740 <fflush>:
 8001740:	4601      	mov	r1, r0
 8001742:	b118      	cbz	r0, 800174c <fflush+0xc>
 8001744:	4b04      	ldr	r3, [pc, #16]	@ (8001758 <fflush+0x18>)
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	f7ff bfce 	b.w	80016e8 <_fflush_r>
 800174c:	4a03      	ldr	r2, [pc, #12]	@ (800175c <fflush+0x1c>)
 800174e:	4904      	ldr	r1, [pc, #16]	@ (8001760 <fflush+0x20>)
 8001750:	4804      	ldr	r0, [pc, #16]	@ (8001764 <fflush+0x24>)
 8001752:	f7ff bc89 	b.w	8001068 <_fwalk_sglue>
 8001756:	bf00      	nop
 8001758:	2000001c 	.word	0x2000001c
 800175c:	20000010 	.word	0x20000010
 8001760:	080016e9 	.word	0x080016e9
 8001764:	20000020 	.word	0x20000020

08001768 <_fiprintf_r>:
 8001768:	b40c      	push	{r2, r3}
 800176a:	b500      	push	{lr}
 800176c:	b083      	sub	sp, #12
 800176e:	ab04      	add	r3, sp, #16
 8001770:	f853 2b04 	ldr.w	r2, [r3], #4
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	f000 f85d 	bl	8001834 <_vfiprintf_r>
 800177a:	b003      	add	sp, #12
 800177c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001780:	b002      	add	sp, #8
 8001782:	4770      	bx	lr

08001784 <fiprintf>:
 8001784:	b40e      	push	{r1, r2, r3}
 8001786:	b510      	push	{r4, lr}
 8001788:	b083      	sub	sp, #12
 800178a:	ab05      	add	r3, sp, #20
 800178c:	4c06      	ldr	r4, [pc, #24]	@ (80017a8 <fiprintf+0x24>)
 800178e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001792:	9301      	str	r3, [sp, #4]
 8001794:	4601      	mov	r1, r0
 8001796:	6820      	ldr	r0, [r4, #0]
 8001798:	f000 f84c 	bl	8001834 <_vfiprintf_r>
 800179c:	b003      	add	sp, #12
 800179e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017a2:	b003      	add	sp, #12
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	2000001c 	.word	0x2000001c

080017ac <abort>:
 80017ac:	b508      	push	{r3, lr}
 80017ae:	2006      	movs	r0, #6
 80017b0:	f000 febe 	bl	8002530 <raise>
 80017b4:	2001      	movs	r0, #1
 80017b6:	f001 f8f9 	bl	80029ac <_exit>
 80017ba:	bf00      	nop

080017bc <__sfputc_r>:
 80017bc:	6893      	ldr	r3, [r2, #8]
 80017be:	3b01      	subs	r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	6093      	str	r3, [r2, #8]
 80017c4:	da05      	bge.n	80017d2 <__sfputc_r+0x16>
 80017c6:	f8d2 c018 	ldr.w	ip, [r2, #24]
 80017ca:	4563      	cmp	r3, ip
 80017cc:	db07      	blt.n	80017de <__sfputc_r+0x22>
 80017ce:	290a      	cmp	r1, #10
 80017d0:	d005      	beq.n	80017de <__sfputc_r+0x22>
 80017d2:	6813      	ldr	r3, [r2, #0]
 80017d4:	1c58      	adds	r0, r3, #1
 80017d6:	6010      	str	r0, [r2, #0]
 80017d8:	7019      	strb	r1, [r3, #0]
 80017da:	4608      	mov	r0, r1
 80017dc:	4770      	bx	lr
 80017de:	f000 bce3 	b.w	80021a8 <__swbuf_r>
 80017e2:	bf00      	nop

080017e4 <__sfputs_r>:
 80017e4:	b19b      	cbz	r3, 800180e <__sfputs_r+0x2a>
 80017e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e8:	4413      	add	r3, r2
 80017ea:	4606      	mov	r6, r0
 80017ec:	460f      	mov	r7, r1
 80017ee:	1e54      	subs	r4, r2, #1
 80017f0:	1e5d      	subs	r5, r3, #1
 80017f2:	e001      	b.n	80017f8 <__sfputs_r+0x14>
 80017f4:	42ac      	cmp	r4, r5
 80017f6:	d008      	beq.n	800180a <__sfputs_r+0x26>
 80017f8:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80017fc:	463a      	mov	r2, r7
 80017fe:	4630      	mov	r0, r6
 8001800:	f7ff ffdc 	bl	80017bc <__sfputc_r>
 8001804:	1c43      	adds	r3, r0, #1
 8001806:	d1f5      	bne.n	80017f4 <__sfputs_r+0x10>
 8001808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800180a:	2000      	movs	r0, #0
 800180c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800180e:	2000      	movs	r0, #0
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop

08001814 <__sprint_r>:
 8001814:	6893      	ldr	r3, [r2, #8]
 8001816:	b510      	push	{r4, lr}
 8001818:	4614      	mov	r4, r2
 800181a:	b91b      	cbnz	r3, 8001824 <__sprint_r+0x10>
 800181c:	4618      	mov	r0, r3
 800181e:	2300      	movs	r3, #0
 8001820:	6063      	str	r3, [r4, #4]
 8001822:	bd10      	pop	{r4, pc}
 8001824:	f000 fb44 	bl	8001eb0 <__sfvwrite_r>
 8001828:	2300      	movs	r3, #0
 800182a:	60a3      	str	r3, [r4, #8]
 800182c:	2300      	movs	r3, #0
 800182e:	6063      	str	r3, [r4, #4]
 8001830:	bd10      	pop	{r4, pc}
 8001832:	bf00      	nop

08001834 <_vfiprintf_r>:
 8001834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001838:	b0a1      	sub	sp, #132	@ 0x84
 800183a:	468b      	mov	fp, r1
 800183c:	4691      	mov	r9, r2
 800183e:	461c      	mov	r4, r3
 8001840:	9004      	str	r0, [sp, #16]
 8001842:	b118      	cbz	r0, 800184c <_vfiprintf_r+0x18>
 8001844:	6a03      	ldr	r3, [r0, #32]
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 8147 	beq.w	8001ada <_vfiprintf_r+0x2a6>
 800184c:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 8001850:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8001854:	07d2      	lsls	r2, r2, #31
 8001856:	d402      	bmi.n	800185e <_vfiprintf_r+0x2a>
 8001858:	059f      	lsls	r7, r3, #22
 800185a:	f140 8137 	bpl.w	8001acc <_vfiprintf_r+0x298>
 800185e:	071e      	lsls	r6, r3, #28
 8001860:	f140 809e 	bpl.w	80019a0 <_vfiprintf_r+0x16c>
 8001864:	f8db 3010 	ldr.w	r3, [fp, #16]
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 8099 	beq.w	80019a0 <_vfiprintf_r+0x16c>
 800186e:	2300      	movs	r3, #0
 8001870:	46ca      	mov	sl, r9
 8001872:	930d      	str	r3, [sp, #52]	@ 0x34
 8001874:	f243 0320 	movw	r3, #12320	@ 0x3020
 8001878:	f8ad 3039 	strh.w	r3, [sp, #57]	@ 0x39
 800187c:	f89a 3000 	ldrb.w	r3, [sl]
 8001880:	4e97      	ldr	r6, [pc, #604]	@ (8001ae0 <_vfiprintf_r+0x2ac>)
 8001882:	9407      	str	r4, [sp, #28]
 8001884:	2701      	movs	r7, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d07a      	beq.n	8001980 <_vfiprintf_r+0x14c>
 800188a:	46d1      	mov	r9, sl
 800188c:	e004      	b.n	8001898 <_vfiprintf_r+0x64>
 800188e:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 809a 	beq.w	80019cc <_vfiprintf_r+0x198>
 8001898:	2b25      	cmp	r3, #37	@ 0x25
 800189a:	d1f8      	bne.n	800188e <_vfiprintf_r+0x5a>
 800189c:	ebb9 080a 	subs.w	r8, r9, sl
 80018a0:	f040 8097 	bne.w	80019d2 <_vfiprintf_r+0x19e>
 80018a4:	f899 3000 	ldrb.w	r3, [r9]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d069      	beq.n	8001980 <_vfiprintf_r+0x14c>
 80018ac:	2300      	movs	r3, #0
 80018ae:	f04f 32ff 	mov.w	r2, #4294967295
 80018b2:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
 80018b6:	f109 0901 	add.w	r9, r9, #1
 80018ba:	9308      	str	r3, [sp, #32]
 80018bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80018be:	f88d 3063 	strb.w	r3, [sp, #99]	@ 0x63
 80018c2:	931e      	str	r3, [sp, #120]	@ 0x78
 80018c4:	e005      	b.n	80018d2 <_vfiprintf_r+0x9e>
 80018c6:	9a08      	ldr	r2, [sp, #32]
 80018c8:	fa07 f303 	lsl.w	r3, r7, r3
 80018cc:	431a      	orrs	r2, r3
 80018ce:	9208      	str	r2, [sp, #32]
 80018d0:	46a1      	mov	r9, r4
 80018d2:	464c      	mov	r4, r9
 80018d4:	2205      	movs	r2, #5
 80018d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018da:	4630      	mov	r0, r6
 80018dc:	f000 fee0 	bl	80026a0 <memchr>
 80018e0:	46a2      	mov	sl, r4
 80018e2:	1b83      	subs	r3, r0, r6
 80018e4:	2800      	cmp	r0, #0
 80018e6:	d1ee      	bne.n	80018c6 <_vfiprintf_r+0x92>
 80018e8:	9b08      	ldr	r3, [sp, #32]
 80018ea:	06d8      	lsls	r0, r3, #27
 80018ec:	bf44      	itt	mi
 80018ee:	2220      	movmi	r2, #32
 80018f0:	f88d 2063 	strbmi.w	r2, [sp, #99]	@ 0x63
 80018f4:	0719      	lsls	r1, r3, #28
 80018f6:	f899 1000 	ldrb.w	r1, [r9]
 80018fa:	bf44      	itt	mi
 80018fc:	222b      	movmi	r2, #43	@ 0x2b
 80018fe:	f88d 2063 	strbmi.w	r2, [sp, #99]	@ 0x63
 8001902:	292a      	cmp	r1, #42	@ 0x2a
 8001904:	d17b      	bne.n	80019fe <_vfiprintf_r+0x1ca>
 8001906:	9a07      	ldr	r2, [sp, #28]
 8001908:	6811      	ldr	r1, [r2, #0]
 800190a:	3204      	adds	r2, #4
 800190c:	2900      	cmp	r1, #0
 800190e:	9207      	str	r2, [sp, #28]
 8001910:	f2c0 80b0 	blt.w	8001a74 <_vfiprintf_r+0x240>
 8001914:	910b      	str	r1, [sp, #44]	@ 0x2c
 8001916:	f899 1001 	ldrb.w	r1, [r9, #1]
 800191a:	292e      	cmp	r1, #46	@ 0x2e
 800191c:	f000 8086 	beq.w	8001a2c <_vfiprintf_r+0x1f8>
 8001920:	4c70      	ldr	r4, [pc, #448]	@ (8001ae4 <_vfiprintf_r+0x2b0>)
 8001922:	2203      	movs	r2, #3
 8001924:	4620      	mov	r0, r4
 8001926:	f000 febb 	bl	80026a0 <memchr>
 800192a:	b138      	cbz	r0, 800193c <_vfiprintf_r+0x108>
 800192c:	9b08      	ldr	r3, [sp, #32]
 800192e:	1b00      	subs	r0, r0, r4
 8001930:	2240      	movs	r2, #64	@ 0x40
 8001932:	4082      	lsls	r2, r0
 8001934:	4313      	orrs	r3, r2
 8001936:	f10a 0a01 	add.w	sl, sl, #1
 800193a:	9308      	str	r3, [sp, #32]
 800193c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8001940:	4869      	ldr	r0, [pc, #420]	@ (8001ae8 <_vfiprintf_r+0x2b4>)
 8001942:	f88d 1038 	strb.w	r1, [sp, #56]	@ 0x38
 8001946:	2206      	movs	r2, #6
 8001948:	f000 feaa 	bl	80026a0 <memchr>
 800194c:	2800      	cmp	r0, #0
 800194e:	f000 8097 	beq.w	8001a80 <_vfiprintf_r+0x24c>
 8001952:	4b66      	ldr	r3, [pc, #408]	@ (8001aec <_vfiprintf_r+0x2b8>)
 8001954:	2b00      	cmp	r3, #0
 8001956:	d07e      	beq.n	8001a56 <_vfiprintf_r+0x222>
 8001958:	aa07      	add	r2, sp, #28
 800195a:	9200      	str	r2, [sp, #0]
 800195c:	4b64      	ldr	r3, [pc, #400]	@ (8001af0 <_vfiprintf_r+0x2bc>)
 800195e:	9804      	ldr	r0, [sp, #16]
 8001960:	465a      	mov	r2, fp
 8001962:	a908      	add	r1, sp, #32
 8001964:	f3af 8000 	nop.w
 8001968:	9003      	str	r0, [sp, #12]
 800196a:	9b03      	ldr	r3, [sp, #12]
 800196c:	3301      	adds	r3, #1
 800196e:	d007      	beq.n	8001980 <_vfiprintf_r+0x14c>
 8001970:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8001972:	9a03      	ldr	r2, [sp, #12]
 8001974:	4413      	add	r3, r2
 8001976:	930d      	str	r3, [sp, #52]	@ 0x34
 8001978:	f89a 3000 	ldrb.w	r3, [sl]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d184      	bne.n	800188a <_vfiprintf_r+0x56>
 8001980:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8001984:	f013 0f01 	tst.w	r3, #1
 8001988:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800198c:	d102      	bne.n	8001994 <_vfiprintf_r+0x160>
 800198e:	059a      	lsls	r2, r3, #22
 8001990:	f140 8095 	bpl.w	8001abe <_vfiprintf_r+0x28a>
 8001994:	065b      	lsls	r3, r3, #25
 8001996:	d416      	bmi.n	80019c6 <_vfiprintf_r+0x192>
 8001998:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800199a:	b021      	add	sp, #132	@ 0x84
 800199c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019a0:	9804      	ldr	r0, [sp, #16]
 80019a2:	4659      	mov	r1, fp
 80019a4:	f000 fc50 	bl	8002248 <__swsetup_r>
 80019a8:	2800      	cmp	r0, #0
 80019aa:	f43f af60 	beq.w	800186e <_vfiprintf_r+0x3a>
 80019ae:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80019b2:	07dd      	lsls	r5, r3, #31
 80019b4:	d407      	bmi.n	80019c6 <_vfiprintf_r+0x192>
 80019b6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80019ba:	059c      	lsls	r4, r3, #22
 80019bc:	d403      	bmi.n	80019c6 <_vfiprintf_r+0x192>
 80019be:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 80019c2:	f7ff fce9 	bl	8001398 <__retarget_lock_release_recursive>
 80019c6:	f04f 30ff 	mov.w	r0, #4294967295
 80019ca:	e7e6      	b.n	800199a <_vfiprintf_r+0x166>
 80019cc:	ebb9 080a 	subs.w	r8, r9, sl
 80019d0:	d0d6      	beq.n	8001980 <_vfiprintf_r+0x14c>
 80019d2:	f10a 35ff 	add.w	r5, sl, #4294967295
 80019d6:	f8cd 9014 	str.w	r9, [sp, #20]
 80019da:	46a9      	mov	r9, r5
 80019dc:	9d04      	ldr	r5, [sp, #16]
 80019de:	e001      	b.n	80019e4 <_vfiprintf_r+0x1b0>
 80019e0:	45a0      	cmp	r8, r4
 80019e2:	d93f      	bls.n	8001a64 <_vfiprintf_r+0x230>
 80019e4:	464c      	mov	r4, r9
 80019e6:	465a      	mov	r2, fp
 80019e8:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 80019ec:	4628      	mov	r0, r5
 80019ee:	f7ff fee5 	bl	80017bc <__sfputc_r>
 80019f2:	3402      	adds	r4, #2
 80019f4:	3001      	adds	r0, #1
 80019f6:	eba4 040a 	sub.w	r4, r4, sl
 80019fa:	d1f1      	bne.n	80019e0 <_vfiprintf_r+0x1ac>
 80019fc:	e7c0      	b.n	8001980 <_vfiprintf_r+0x14c>
 80019fe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8001a02:	2a09      	cmp	r2, #9
 8001a04:	bf88      	it	hi
 8001a06:	46ca      	movhi	sl, r9
 8001a08:	d887      	bhi.n	800191a <_vfiprintf_r+0xe6>
 8001a0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8001a0c:	e000      	b.n	8001a10 <_vfiprintf_r+0x1dc>
 8001a0e:	3401      	adds	r4, #1
 8001a10:	7821      	ldrb	r1, [r4, #0]
 8001a12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a16:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001a1a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8001a1e:	2a09      	cmp	r2, #9
 8001a20:	d9f5      	bls.n	8001a0e <_vfiprintf_r+0x1da>
 8001a22:	292e      	cmp	r1, #46	@ 0x2e
 8001a24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001a26:	46a2      	mov	sl, r4
 8001a28:	f47f af7a 	bne.w	8001920 <_vfiprintf_r+0xec>
 8001a2c:	f89a 1001 	ldrb.w	r1, [sl, #1]
 8001a30:	292a      	cmp	r1, #42	@ 0x2a
 8001a32:	d12f      	bne.n	8001a94 <_vfiprintf_r+0x260>
 8001a34:	9b07      	ldr	r3, [sp, #28]
 8001a36:	f89a 1002 	ldrb.w	r1, [sl, #2]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8001a3e:	3304      	adds	r3, #4
 8001a40:	2a00      	cmp	r2, #0
 8001a42:	f10a 0002 	add.w	r0, sl, #2
 8001a46:	9307      	str	r3, [sp, #28]
 8001a48:	bfb8      	it	lt
 8001a4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001a4e:	4682      	mov	sl, r0
 8001a50:	bfb8      	it	lt
 8001a52:	9309      	strlt	r3, [sp, #36]	@ 0x24
 8001a54:	e764      	b.n	8001920 <_vfiprintf_r+0xec>
 8001a56:	9b07      	ldr	r3, [sp, #28]
 8001a58:	3307      	adds	r3, #7
 8001a5a:	f023 0307 	bic.w	r3, r3, #7
 8001a5e:	3308      	adds	r3, #8
 8001a60:	9307      	str	r3, [sp, #28]
 8001a62:	e785      	b.n	8001970 <_vfiprintf_r+0x13c>
 8001a64:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8001a66:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8001a6a:	4441      	add	r1, r8
 8001a6c:	f899 3000 	ldrb.w	r3, [r9]
 8001a70:	910d      	str	r1, [sp, #52]	@ 0x34
 8001a72:	e719      	b.n	80018a8 <_vfiprintf_r+0x74>
 8001a74:	4249      	negs	r1, r1
 8001a76:	f043 0302 	orr.w	r3, r3, #2
 8001a7a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8001a7c:	9308      	str	r3, [sp, #32]
 8001a7e:	e74a      	b.n	8001916 <_vfiprintf_r+0xe2>
 8001a80:	aa07      	add	r2, sp, #28
 8001a82:	9200      	str	r2, [sp, #0]
 8001a84:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <_vfiprintf_r+0x2bc>)
 8001a86:	9804      	ldr	r0, [sp, #16]
 8001a88:	465a      	mov	r2, fp
 8001a8a:	a908      	add	r1, sp, #32
 8001a8c:	f000 f8d0 	bl	8001c30 <_printf_i>
 8001a90:	9003      	str	r0, [sp, #12]
 8001a92:	e76a      	b.n	800196a <_vfiprintf_r+0x136>
 8001a94:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8001a98:	2300      	movs	r3, #0
 8001a9a:	2a09      	cmp	r2, #9
 8001a9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8001a9e:	f10a 0a01 	add.w	sl, sl, #1
 8001aa2:	f63f af3d 	bhi.w	8001920 <_vfiprintf_r+0xec>
 8001aa6:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8001aaa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001aae:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001ab2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8001ab6:	2a09      	cmp	r2, #9
 8001ab8:	d9f5      	bls.n	8001aa6 <_vfiprintf_r+0x272>
 8001aba:	9309      	str	r3, [sp, #36]	@ 0x24
 8001abc:	e730      	b.n	8001920 <_vfiprintf_r+0xec>
 8001abe:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8001ac2:	f7ff fc69 	bl	8001398 <__retarget_lock_release_recursive>
 8001ac6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8001aca:	e763      	b.n	8001994 <_vfiprintf_r+0x160>
 8001acc:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8001ad0:	f7ff fc5a 	bl	8001388 <__retarget_lock_acquire_recursive>
 8001ad4:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8001ad8:	e6c1      	b.n	800185e <_vfiprintf_r+0x2a>
 8001ada:	f7ff fa75 	bl	8000fc8 <__sinit>
 8001ade:	e6b5      	b.n	800184c <_vfiprintf_r+0x18>
 8001ae0:	08003da4 	.word	0x08003da4
 8001ae4:	08003dac 	.word	0x08003dac
 8001ae8:	08003db0 	.word	0x08003db0
 8001aec:	00000000 	.word	0x00000000
 8001af0:	080017e5 	.word	0x080017e5

08001af4 <vfiprintf>:
 8001af4:	b410      	push	{r4}
 8001af6:	4c04      	ldr	r4, [pc, #16]	@ (8001b08 <vfiprintf+0x14>)
 8001af8:	4684      	mov	ip, r0
 8001afa:	4613      	mov	r3, r2
 8001afc:	6820      	ldr	r0, [r4, #0]
 8001afe:	bc10      	pop	{r4}
 8001b00:	460a      	mov	r2, r1
 8001b02:	4661      	mov	r1, ip
 8001b04:	f7ff be96 	b.w	8001834 <_vfiprintf_r>
 8001b08:	2000001c 	.word	0x2000001c

08001b0c <_printf_common>:
 8001b0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b10:	4692      	mov	sl, r2
 8001b12:	461f      	mov	r7, r3
 8001b14:	690a      	ldr	r2, [r1, #16]
 8001b16:	688b      	ldr	r3, [r1, #8]
 8001b18:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	bfb8      	it	lt
 8001b20:	461a      	movlt	r2, r3
 8001b22:	f8ca 2000 	str.w	r2, [sl]
 8001b26:	f891 3043 	ldrb.w	r3, [r1, #67]	@ 0x43
 8001b2a:	460c      	mov	r4, r1
 8001b2c:	4606      	mov	r6, r0
 8001b2e:	b113      	cbz	r3, 8001b36 <_printf_common+0x2a>
 8001b30:	3201      	adds	r2, #1
 8001b32:	f8ca 2000 	str.w	r2, [sl]
 8001b36:	6822      	ldr	r2, [r4, #0]
 8001b38:	0691      	lsls	r1, r2, #26
 8001b3a:	d55f      	bpl.n	8001bfc <_printf_common+0xf0>
 8001b3c:	f8da 3000 	ldr.w	r3, [sl]
 8001b40:	3302      	adds	r3, #2
 8001b42:	f8ca 3000 	str.w	r3, [sl]
 8001b46:	6822      	ldr	r2, [r4, #0]
 8001b48:	f012 0f06 	tst.w	r2, #6
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	d11d      	bne.n	8001b8c <_printf_common+0x80>
 8001b50:	68e1      	ldr	r1, [r4, #12]
 8001b52:	4299      	cmp	r1, r3
 8001b54:	bfd8      	it	le
 8001b56:	4611      	movle	r1, r2
 8001b58:	dd18      	ble.n	8001b8c <_printf_common+0x80>
 8001b5a:	f104 0b19 	add.w	fp, r4, #25
 8001b5e:	f04f 0800 	mov.w	r8, #0
 8001b62:	e005      	b.n	8001b70 <_printf_common+0x64>
 8001b64:	68e5      	ldr	r5, [r4, #12]
 8001b66:	f8da 3000 	ldr.w	r3, [sl]
 8001b6a:	1aed      	subs	r5, r5, r3
 8001b6c:	4545      	cmp	r5, r8
 8001b6e:	dd0c      	ble.n	8001b8a <_printf_common+0x7e>
 8001b70:	2301      	movs	r3, #1
 8001b72:	465a      	mov	r2, fp
 8001b74:	4639      	mov	r1, r7
 8001b76:	4630      	mov	r0, r6
 8001b78:	47c8      	blx	r9
 8001b7a:	3001      	adds	r0, #1
 8001b7c:	f108 0801 	add.w	r8, r8, #1
 8001b80:	d1f0      	bne.n	8001b64 <_printf_common+0x58>
 8001b82:	f04f 30ff 	mov.w	r0, #4294967295
 8001b86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b8a:	6821      	ldr	r1, [r4, #0]
 8001b8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001b90:	3b00      	subs	r3, #0
 8001b92:	bf18      	it	ne
 8001b94:	2301      	movne	r3, #1
 8001b96:	068a      	lsls	r2, r1, #26
 8001b98:	d50a      	bpl.n	8001bb0 <_printf_common+0xa4>
 8001b9a:	18e1      	adds	r1, r4, r3
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	2030      	movs	r0, #48	@ 0x30
 8001ba0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001ba4:	4422      	add	r2, r4
 8001ba6:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001baa:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001bae:	3302      	adds	r3, #2
 8001bb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001bb4:	4639      	mov	r1, r7
 8001bb6:	4630      	mov	r0, r6
 8001bb8:	47c8      	blx	r9
 8001bba:	3001      	adds	r0, #1
 8001bbc:	d0e1      	beq.n	8001b82 <_printf_common+0x76>
 8001bbe:	6823      	ldr	r3, [r4, #0]
 8001bc0:	f8da 5000 	ldr.w	r5, [sl]
 8001bc4:	6921      	ldr	r1, [r4, #16]
 8001bc6:	f003 0306 	and.w	r3, r3, #6
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8001bd0:	d01b      	beq.n	8001c0a <_printf_common+0xfe>
 8001bd2:	428a      	cmp	r2, r1
 8001bd4:	dd20      	ble.n	8001c18 <_printf_common+0x10c>
 8001bd6:	f04f 0800 	mov.w	r8, #0
 8001bda:	1a52      	subs	r2, r2, r1
 8001bdc:	4490      	add	r8, r2
 8001bde:	341a      	adds	r4, #26
 8001be0:	2500      	movs	r5, #0
 8001be2:	e001      	b.n	8001be8 <_printf_common+0xdc>
 8001be4:	4545      	cmp	r5, r8
 8001be6:	da17      	bge.n	8001c18 <_printf_common+0x10c>
 8001be8:	2301      	movs	r3, #1
 8001bea:	4622      	mov	r2, r4
 8001bec:	4639      	mov	r1, r7
 8001bee:	4630      	mov	r0, r6
 8001bf0:	47c8      	blx	r9
 8001bf2:	3001      	adds	r0, #1
 8001bf4:	f105 0501 	add.w	r5, r5, #1
 8001bf8:	d1f4      	bne.n	8001be4 <_printf_common+0xd8>
 8001bfa:	e7c2      	b.n	8001b82 <_printf_common+0x76>
 8001bfc:	f012 0f06 	tst.w	r2, #6
 8001c00:	d00d      	beq.n	8001c1e <_printf_common+0x112>
 8001c02:	3b00      	subs	r3, #0
 8001c04:	bf18      	it	ne
 8001c06:	2301      	movne	r3, #1
 8001c08:	e7d2      	b.n	8001bb0 <_printf_common+0xa4>
 8001c0a:	1b40      	subs	r0, r0, r5
 8001c0c:	428a      	cmp	r2, r1
 8001c0e:	ea20 78e0 	bic.w	r8, r0, r0, asr #31
 8001c12:	dce2      	bgt.n	8001bda <_printf_common+0xce>
 8001c14:	2800      	cmp	r0, #0
 8001c16:	dce2      	bgt.n	8001bde <_printf_common+0xd2>
 8001c18:	2000      	movs	r0, #0
 8001c1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c1e:	68e1      	ldr	r1, [r4, #12]
 8001c20:	f8da 3000 	ldr.w	r3, [sl]
 8001c24:	4299      	cmp	r1, r3
 8001c26:	bfd8      	it	le
 8001c28:	4611      	movle	r1, r2
 8001c2a:	dc96      	bgt.n	8001b5a <_printf_common+0x4e>
 8001c2c:	e7ae      	b.n	8001b8c <_printf_common+0x80>
 8001c2e:	bf00      	nop

08001c30 <_printf_i>:
 8001c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c34:	460c      	mov	r4, r1
 8001c36:	b084      	sub	sp, #16
 8001c38:	4617      	mov	r7, r2
 8001c3a:	7e22      	ldrb	r2, [r4, #24]
 8001c3c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001c3e:	4606      	mov	r6, r0
 8001c40:	4698      	mov	r8, r3
 8001c42:	f104 0c43 	add.w	ip, r4, #67	@ 0x43
 8001c46:	2a00      	cmp	r2, #0
 8001c48:	d035      	beq.n	8001cb6 <_printf_i+0x86>
 8001c4a:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
 8001c4e:	b2d8      	uxtb	r0, r3
 8001c50:	2820      	cmp	r0, #32
 8001c52:	d869      	bhi.n	8001d28 <_printf_i+0xf8>
 8001c54:	2b20      	cmp	r3, #32
 8001c56:	d867      	bhi.n	8001d28 <_printf_i+0xf8>
 8001c58:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001c5c:	006600e0 	.word	0x006600e0
 8001c60:	00660066 	.word	0x00660066
 8001c64:	00660066 	.word	0x00660066
 8001c68:	00660066 	.word	0x00660066
 8001c6c:	00660066 	.word	0x00660066
 8001c70:	00940066 	.word	0x00940066
 8001c74:	00660070 	.word	0x00660070
 8001c78:	00660066 	.word	0x00660066
 8001c7c:	00700066 	.word	0x00700066
 8001c80:	00660066 	.word	0x00660066
 8001c84:	00660066 	.word	0x00660066
 8001c88:	00830021 	.word	0x00830021
 8001c8c:	006600ae 	.word	0x006600ae
 8001c90:	009e0066 	.word	0x009e0066
 8001c94:	00830066 	.word	0x00830066
 8001c98:	00660066 	.word	0x00660066
 8001c9c:	00e6      	.short	0x00e6
 8001c9e:	680b      	ldr	r3, [r1, #0]
 8001ca0:	6822      	ldr	r2, [r4, #0]
 8001ca2:	6960      	ldr	r0, [r4, #20]
 8001ca4:	1d1d      	adds	r5, r3, #4
 8001ca6:	600d      	str	r5, [r1, #0]
 8001ca8:	0611      	lsls	r1, r2, #24
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	d402      	bmi.n	8001cb4 <_printf_i+0x84>
 8001cae:	0652      	lsls	r2, r2, #25
 8001cb0:	f100 80dc 	bmi.w	8001e6c <_printf_i+0x23c>
 8001cb4:	6018      	str	r0, [r3, #0]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	46e1      	mov	r9, ip
 8001cba:	6123      	str	r3, [r4, #16]
 8001cbc:	f8cd 8000 	str.w	r8, [sp]
 8001cc0:	463b      	mov	r3, r7
 8001cc2:	aa03      	add	r2, sp, #12
 8001cc4:	4621      	mov	r1, r4
 8001cc6:	4630      	mov	r0, r6
 8001cc8:	f7ff ff20 	bl	8001b0c <_printf_common>
 8001ccc:	3001      	adds	r0, #1
 8001cce:	d020      	beq.n	8001d12 <_printf_i+0xe2>
 8001cd0:	6923      	ldr	r3, [r4, #16]
 8001cd2:	464a      	mov	r2, r9
 8001cd4:	4639      	mov	r1, r7
 8001cd6:	4630      	mov	r0, r6
 8001cd8:	47c0      	blx	r8
 8001cda:	3001      	adds	r0, #1
 8001cdc:	d019      	beq.n	8001d12 <_printf_i+0xe2>
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	68e0      	ldr	r0, [r4, #12]
 8001ce2:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8001ce6:	079b      	lsls	r3, r3, #30
 8001ce8:	d518      	bpl.n	8001d1c <_printf_i+0xec>
 8001cea:	4548      	cmp	r0, r9
 8001cec:	dd16      	ble.n	8001d1c <_printf_i+0xec>
 8001cee:	f104 0a19 	add.w	sl, r4, #25
 8001cf2:	2500      	movs	r5, #0
 8001cf4:	e004      	b.n	8001d00 <_printf_i+0xd0>
 8001cf6:	68e0      	ldr	r0, [r4, #12]
 8001cf8:	eba0 0309 	sub.w	r3, r0, r9
 8001cfc:	42ab      	cmp	r3, r5
 8001cfe:	dd0d      	ble.n	8001d1c <_printf_i+0xec>
 8001d00:	2301      	movs	r3, #1
 8001d02:	4652      	mov	r2, sl
 8001d04:	4639      	mov	r1, r7
 8001d06:	4630      	mov	r0, r6
 8001d08:	47c0      	blx	r8
 8001d0a:	3001      	adds	r0, #1
 8001d0c:	f105 0501 	add.w	r5, r5, #1
 8001d10:	d1f1      	bne.n	8001cf6 <_printf_i+0xc6>
 8001d12:	f04f 30ff 	mov.w	r0, #4294967295
 8001d16:	b004      	add	sp, #16
 8001d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d1c:	4548      	cmp	r0, r9
 8001d1e:	bfb8      	it	lt
 8001d20:	4648      	movlt	r0, r9
 8001d22:	b004      	add	sp, #16
 8001d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d28:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 8001d32:	2300      	movs	r3, #0
 8001d34:	6120      	str	r0, [r4, #16]
 8001d36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d3a:	e7bf      	b.n	8001cbc <_printf_i+0x8c>
 8001d3c:	680a      	ldr	r2, [r1, #0]
 8001d3e:	6823      	ldr	r3, [r4, #0]
 8001d40:	1d10      	adds	r0, r2, #4
 8001d42:	6008      	str	r0, [r1, #0]
 8001d44:	0618      	lsls	r0, r3, #24
 8001d46:	d402      	bmi.n	8001d4e <_printf_i+0x11e>
 8001d48:	0659      	lsls	r1, r3, #25
 8001d4a:	f100 8093 	bmi.w	8001e74 <_printf_i+0x244>
 8001d4e:	6810      	ldr	r0, [r2, #0]
 8001d50:	4601      	mov	r1, r0
 8001d52:	2800      	cmp	r0, #0
 8001d54:	6862      	ldr	r2, [r4, #4]
 8001d56:	f2c0 8091 	blt.w	8001e7c <_printf_i+0x24c>
 8001d5a:	4853      	ldr	r0, [pc, #332]	@ (8001ea8 <_printf_i+0x278>)
 8001d5c:	f04f 0e0a 	mov.w	lr, #10
 8001d60:	e04a      	b.n	8001df8 <_printf_i+0x1c8>
 8001d62:	680b      	ldr	r3, [r1, #0]
 8001d64:	6820      	ldr	r0, [r4, #0]
 8001d66:	1d1d      	adds	r5, r3, #4
 8001d68:	600d      	str	r5, [r1, #0]
 8001d6a:	0605      	lsls	r5, r0, #24
 8001d6c:	d401      	bmi.n	8001d72 <_printf_i+0x142>
 8001d6e:	0641      	lsls	r1, r0, #25
 8001d70:	d47e      	bmi.n	8001e70 <_printf_i+0x240>
 8001d72:	6819      	ldr	r1, [r3, #0]
 8001d74:	484c      	ldr	r0, [pc, #304]	@ (8001ea8 <_printf_i+0x278>)
 8001d76:	2a6f      	cmp	r2, #111	@ 0x6f
 8001d78:	bf14      	ite	ne
 8001d7a:	f04f 0e0a 	movne.w	lr, #10
 8001d7e:	f04f 0e08 	moveq.w	lr, #8
 8001d82:	e035      	b.n	8001df0 <_printf_i+0x1c0>
 8001d84:	680b      	ldr	r3, [r1, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	600b      	str	r3, [r1, #0]
 8001d8c:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 8001d90:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 8001d94:	2001      	movs	r0, #1
 8001d96:	e7cc      	b.n	8001d32 <_printf_i+0x102>
 8001d98:	680b      	ldr	r3, [r1, #0]
 8001d9a:	6862      	ldr	r2, [r4, #4]
 8001d9c:	1d18      	adds	r0, r3, #4
 8001d9e:	6008      	str	r0, [r1, #0]
 8001da0:	f8d3 9000 	ldr.w	r9, [r3]
 8001da4:	2100      	movs	r1, #0
 8001da6:	4648      	mov	r0, r9
 8001da8:	f000 fc7a 	bl	80026a0 <memchr>
 8001dac:	2800      	cmp	r0, #0
 8001dae:	d079      	beq.n	8001ea4 <_printf_i+0x274>
 8001db0:	eba0 0009 	sub.w	r0, r0, r9
 8001db4:	6060      	str	r0, [r4, #4]
 8001db6:	e7bc      	b.n	8001d32 <_printf_i+0x102>
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	f043 0320 	orr.w	r3, r3, #32
 8001dbe:	6023      	str	r3, [r4, #0]
 8001dc0:	2278      	movs	r2, #120	@ 0x78
 8001dc2:	483a      	ldr	r0, [pc, #232]	@ (8001eac <_printf_i+0x27c>)
 8001dc4:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 8001dc8:	680a      	ldr	r2, [r1, #0]
 8001dca:	1d15      	adds	r5, r2, #4
 8001dcc:	600d      	str	r5, [r1, #0]
 8001dce:	061d      	lsls	r5, r3, #24
 8001dd0:	d44a      	bmi.n	8001e68 <_printf_i+0x238>
 8001dd2:	0659      	lsls	r1, r3, #25
 8001dd4:	d548      	bpl.n	8001e68 <_printf_i+0x238>
 8001dd6:	8811      	ldrh	r1, [r2, #0]
 8001dd8:	07dd      	lsls	r5, r3, #31
 8001dda:	bf44      	itt	mi
 8001ddc:	f043 0320 	orrmi.w	r3, r3, #32
 8001de0:	6023      	strmi	r3, [r4, #0]
 8001de2:	b919      	cbnz	r1, 8001dec <_printf_i+0x1bc>
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	f023 0320 	bic.w	r3, r3, #32
 8001dea:	6023      	str	r3, [r4, #0]
 8001dec:	f04f 0e10 	mov.w	lr, #16
 8001df0:	2300      	movs	r3, #0
 8001df2:	6862      	ldr	r2, [r4, #4]
 8001df4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001df8:	2a00      	cmp	r2, #0
 8001dfa:	60a2      	str	r2, [r4, #8]
 8001dfc:	db16      	blt.n	8001e2c <_printf_i+0x1fc>
 8001dfe:	6823      	ldr	r3, [r4, #0]
 8001e00:	f023 0304 	bic.w	r3, r3, #4
 8001e04:	6023      	str	r3, [r4, #0]
 8001e06:	b989      	cbnz	r1, 8001e2c <_printf_i+0x1fc>
 8001e08:	2a00      	cmp	r2, #0
 8001e0a:	d145      	bne.n	8001e98 <_printf_i+0x268>
 8001e0c:	46e1      	mov	r9, ip
 8001e0e:	f1be 0f08 	cmp.w	lr, #8
 8001e12:	d01c      	beq.n	8001e4e <_printf_i+0x21e>
 8001e14:	ebac 0309 	sub.w	r3, ip, r9
 8001e18:	6123      	str	r3, [r4, #16]
 8001e1a:	e74f      	b.n	8001cbc <_printf_i+0x8c>
 8001e1c:	2358      	movs	r3, #88	@ 0x58
 8001e1e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8001e22:	4821      	ldr	r0, [pc, #132]	@ (8001ea8 <_printf_i+0x278>)
 8001e24:	6823      	ldr	r3, [r4, #0]
 8001e26:	e7cf      	b.n	8001dc8 <_printf_i+0x198>
 8001e28:	6823      	ldr	r3, [r4, #0]
 8001e2a:	e7c9      	b.n	8001dc0 <_printf_i+0x190>
 8001e2c:	4675      	mov	r5, lr
 8001e2e:	46e1      	mov	r9, ip
 8001e30:	fbb1 f3f5 	udiv	r3, r1, r5
 8001e34:	fb05 1a13 	mls	sl, r5, r3, r1
 8001e38:	460a      	mov	r2, r1
 8001e3a:	42aa      	cmp	r2, r5
 8001e3c:	f810 100a 	ldrb.w	r1, [r0, sl]
 8001e40:	f809 1d01 	strb.w	r1, [r9, #-1]!
 8001e44:	4619      	mov	r1, r3
 8001e46:	d2f3      	bcs.n	8001e30 <_printf_i+0x200>
 8001e48:	f1be 0f08 	cmp.w	lr, #8
 8001e4c:	d1e2      	bne.n	8001e14 <_printf_i+0x1e4>
 8001e4e:	6823      	ldr	r3, [r4, #0]
 8001e50:	07d8      	lsls	r0, r3, #31
 8001e52:	d5df      	bpl.n	8001e14 <_printf_i+0x1e4>
 8001e54:	6862      	ldr	r2, [r4, #4]
 8001e56:	6923      	ldr	r3, [r4, #16]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	dcdb      	bgt.n	8001e14 <_printf_i+0x1e4>
 8001e5c:	2330      	movs	r3, #48	@ 0x30
 8001e5e:	f809 3c01 	strb.w	r3, [r9, #-1]
 8001e62:	f109 39ff 	add.w	r9, r9, #4294967295
 8001e66:	e7d5      	b.n	8001e14 <_printf_i+0x1e4>
 8001e68:	6811      	ldr	r1, [r2, #0]
 8001e6a:	e7b5      	b.n	8001dd8 <_printf_i+0x1a8>
 8001e6c:	8018      	strh	r0, [r3, #0]
 8001e6e:	e722      	b.n	8001cb6 <_printf_i+0x86>
 8001e70:	8819      	ldrh	r1, [r3, #0]
 8001e72:	e77f      	b.n	8001d74 <_printf_i+0x144>
 8001e74:	f9b2 1000 	ldrsh.w	r1, [r2]
 8001e78:	4608      	mov	r0, r1
 8001e7a:	e76a      	b.n	8001d52 <_printf_i+0x122>
 8001e7c:	202d      	movs	r0, #45	@ 0x2d
 8001e7e:	2a00      	cmp	r2, #0
 8001e80:	60a2      	str	r2, [r4, #8]
 8001e82:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
 8001e86:	db02      	blt.n	8001e8e <_printf_i+0x25e>
 8001e88:	f023 0304 	bic.w	r3, r3, #4
 8001e8c:	6023      	str	r3, [r4, #0]
 8001e8e:	250a      	movs	r5, #10
 8001e90:	4805      	ldr	r0, [pc, #20]	@ (8001ea8 <_printf_i+0x278>)
 8001e92:	4249      	negs	r1, r1
 8001e94:	46ae      	mov	lr, r5
 8001e96:	e7ca      	b.n	8001e2e <_printf_i+0x1fe>
 8001e98:	7803      	ldrb	r3, [r0, #0]
 8001e9a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001e9e:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 8001ea2:	e7b4      	b.n	8001e0e <_printf_i+0x1de>
 8001ea4:	6860      	ldr	r0, [r4, #4]
 8001ea6:	e744      	b.n	8001d32 <_printf_i+0x102>
 8001ea8:	08003db8 	.word	0x08003db8
 8001eac:	08003dcc 	.word	0x08003dcc

08001eb0 <__sfvwrite_r>:
 8001eb0:	6893      	ldr	r3, [r2, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 80f6 	beq.w	80020a4 <__sfvwrite_r+0x1f4>
 8001eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ebc:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
 8001ec0:	f01c 0f08 	tst.w	ip, #8
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	4690      	mov	r8, r2
 8001ec8:	4681      	mov	r9, r0
 8001eca:	460c      	mov	r4, r1
 8001ecc:	d031      	beq.n	8001f32 <__sfvwrite_r+0x82>
 8001ece:	690b      	ldr	r3, [r1, #16]
 8001ed0:	b37b      	cbz	r3, 8001f32 <__sfvwrite_r+0x82>
 8001ed2:	f01c 0702 	ands.w	r7, ip, #2
 8001ed6:	f8d8 6000 	ldr.w	r6, [r8]
 8001eda:	d038      	beq.n	8001f4e <__sfvwrite_r+0x9e>
 8001edc:	2700      	movs	r7, #0
 8001ede:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 8001ee2:	6a21      	ldr	r1, [r4, #32]
 8001ee4:	f8df a2bc 	ldr.w	sl, [pc, #700]	@ 80021a4 <__sfvwrite_r+0x2f4>
 8001ee8:	463d      	mov	r5, r7
 8001eea:	4555      	cmp	r5, sl
 8001eec:	462b      	mov	r3, r5
 8001eee:	463a      	mov	r2, r7
 8001ef0:	bf28      	it	cs
 8001ef2:	4653      	movcs	r3, sl
 8001ef4:	4648      	mov	r0, r9
 8001ef6:	b1c5      	cbz	r5, 8001f2a <__sfvwrite_r+0x7a>
 8001ef8:	47d8      	blx	fp
 8001efa:	2800      	cmp	r0, #0
 8001efc:	f340 80c8 	ble.w	8002090 <__sfvwrite_r+0x1e0>
 8001f00:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001f04:	1a1b      	subs	r3, r3, r0
 8001f06:	4407      	add	r7, r0
 8001f08:	1a2d      	subs	r5, r5, r0
 8001f0a:	f8c8 3008 	str.w	r3, [r8, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 80b4 	beq.w	800207c <__sfvwrite_r+0x1cc>
 8001f14:	4555      	cmp	r5, sl
 8001f16:	462b      	mov	r3, r5
 8001f18:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 8001f1c:	6a21      	ldr	r1, [r4, #32]
 8001f1e:	bf28      	it	cs
 8001f20:	4653      	movcs	r3, sl
 8001f22:	463a      	mov	r2, r7
 8001f24:	4648      	mov	r0, r9
 8001f26:	2d00      	cmp	r5, #0
 8001f28:	d1e6      	bne.n	8001ef8 <__sfvwrite_r+0x48>
 8001f2a:	e9d6 7500 	ldrd	r7, r5, [r6]
 8001f2e:	3608      	adds	r6, #8
 8001f30:	e7db      	b.n	8001eea <__sfvwrite_r+0x3a>
 8001f32:	4621      	mov	r1, r4
 8001f34:	4648      	mov	r0, r9
 8001f36:	f000 f987 	bl	8002248 <__swsetup_r>
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	f040 80ad 	bne.w	800209a <__sfvwrite_r+0x1ea>
 8001f40:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8001f44:	f8d8 6000 	ldr.w	r6, [r8]
 8001f48:	f01c 0702 	ands.w	r7, ip, #2
 8001f4c:	d1c6      	bne.n	8001edc <__sfvwrite_r+0x2c>
 8001f4e:	f01c 0a01 	ands.w	sl, ip, #1
 8001f52:	d163      	bne.n	800201c <__sfvwrite_r+0x16c>
 8001f54:	6823      	ldr	r3, [r4, #0]
 8001f56:	68a1      	ldr	r1, [r4, #8]
 8001f58:	4657      	mov	r7, sl
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	468b      	mov	fp, r1
 8001f5e:	2f00      	cmp	r7, #0
 8001f60:	d058      	beq.n	8002014 <__sfvwrite_r+0x164>
 8001f62:	f41c 7f00 	tst.w	ip, #512	@ 0x200
 8001f66:	f000 80b1 	beq.w	80020cc <__sfvwrite_r+0x21c>
 8001f6a:	42b9      	cmp	r1, r7
 8001f6c:	460a      	mov	r2, r1
 8001f6e:	f200 80dd 	bhi.w	800212c <__sfvwrite_r+0x27c>
 8001f72:	f41c 6f90 	tst.w	ip, #1152	@ 0x480
 8001f76:	d02f      	beq.n	8001fd8 <__sfvwrite_r+0x128>
 8001f78:	6921      	ldr	r1, [r4, #16]
 8001f7a:	6962      	ldr	r2, [r4, #20]
 8001f7c:	1a5d      	subs	r5, r3, r1
 8001f7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001f82:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8001f86:	1c6b      	adds	r3, r5, #1
 8001f88:	1052      	asrs	r2, r2, #1
 8001f8a:	443b      	add	r3, r7
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	bf92      	itee	ls
 8001f90:	4693      	movls	fp, r2
 8001f92:	469b      	movhi	fp, r3
 8001f94:	461a      	movhi	r2, r3
 8001f96:	f41c 6f80 	tst.w	ip, #1024	@ 0x400
 8001f9a:	f000 80e6 	beq.w	800216a <__sfvwrite_r+0x2ba>
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4648      	mov	r0, r9
 8001fa2:	f7fe fdf3 	bl	8000b8c <_malloc_r>
 8001fa6:	2800      	cmp	r0, #0
 8001fa8:	f000 80f5 	beq.w	8002196 <__sfvwrite_r+0x2e6>
 8001fac:	462a      	mov	r2, r5
 8001fae:	6921      	ldr	r1, [r4, #16]
 8001fb0:	9001      	str	r0, [sp, #4]
 8001fb2:	f7ff f9f3 	bl	800139c <memcpy>
 8001fb6:	89a2      	ldrh	r2, [r4, #12]
 8001fb8:	9b01      	ldr	r3, [sp, #4]
 8001fba:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8001fbe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001fc2:	81a2      	strh	r2, [r4, #12]
 8001fc4:	1958      	adds	r0, r3, r5
 8001fc6:	ebab 0505 	sub.w	r5, fp, r5
 8001fca:	f8c4 b014 	str.w	fp, [r4, #20]
 8001fce:	6123      	str	r3, [r4, #16]
 8001fd0:	60a5      	str	r5, [r4, #8]
 8001fd2:	6020      	str	r0, [r4, #0]
 8001fd4:	46bb      	mov	fp, r7
 8001fd6:	463a      	mov	r2, r7
 8001fd8:	4651      	mov	r1, sl
 8001fda:	9201      	str	r2, [sp, #4]
 8001fdc:	f000 f994 	bl	8002308 <memmove>
 8001fe0:	68a1      	ldr	r1, [r4, #8]
 8001fe2:	6823      	ldr	r3, [r4, #0]
 8001fe4:	9a01      	ldr	r2, [sp, #4]
 8001fe6:	eba1 010b 	sub.w	r1, r1, fp
 8001fea:	441a      	add	r2, r3
 8001fec:	463d      	mov	r5, r7
 8001fee:	60a1      	str	r1, [r4, #8]
 8001ff0:	6022      	str	r2, [r4, #0]
 8001ff2:	2700      	movs	r7, #0
 8001ff4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001ff8:	1b5b      	subs	r3, r3, r5
 8001ffa:	44aa      	add	sl, r5
 8001ffc:	f8c8 3008 	str.w	r3, [r8, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d03b      	beq.n	800207c <__sfvwrite_r+0x1cc>
 8002004:	6823      	ldr	r3, [r4, #0]
 8002006:	68a1      	ldr	r1, [r4, #8]
 8002008:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 800200c:	4618      	mov	r0, r3
 800200e:	468b      	mov	fp, r1
 8002010:	2f00      	cmp	r7, #0
 8002012:	d1a6      	bne.n	8001f62 <__sfvwrite_r+0xb2>
 8002014:	e9d6 a700 	ldrd	sl, r7, [r6]
 8002018:	3608      	adds	r6, #8
 800201a:	e79e      	b.n	8001f5a <__sfvwrite_r+0xaa>
 800201c:	4638      	mov	r0, r7
 800201e:	46bb      	mov	fp, r7
 8002020:	463d      	mov	r5, r7
 8002022:	2d00      	cmp	r5, #0
 8002024:	d040      	beq.n	80020a8 <__sfvwrite_r+0x1f8>
 8002026:	2800      	cmp	r0, #0
 8002028:	d045      	beq.n	80020b6 <__sfvwrite_r+0x206>
 800202a:	463a      	mov	r2, r7
 800202c:	e9d4 c304 	ldrd	ip, r3, [r4, #16]
 8002030:	6820      	ldr	r0, [r4, #0]
 8002032:	68a1      	ldr	r1, [r4, #8]
 8002034:	42aa      	cmp	r2, r5
 8002036:	bf28      	it	cs
 8002038:	462a      	movcs	r2, r5
 800203a:	4560      	cmp	r0, ip
 800203c:	d904      	bls.n	8002048 <__sfvwrite_r+0x198>
 800203e:	eb01 0a03 	add.w	sl, r1, r3
 8002042:	4552      	cmp	r2, sl
 8002044:	f300 8082 	bgt.w	800214c <__sfvwrite_r+0x29c>
 8002048:	4293      	cmp	r3, r2
 800204a:	dc72      	bgt.n	8002132 <__sfvwrite_r+0x282>
 800204c:	6a21      	ldr	r1, [r4, #32]
 800204e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002052:	465a      	mov	r2, fp
 8002054:	4648      	mov	r0, r9
 8002056:	47e0      	blx	ip
 8002058:	f1b0 0a00 	subs.w	sl, r0, #0
 800205c:	dd18      	ble.n	8002090 <__sfvwrite_r+0x1e0>
 800205e:	ebb7 070a 	subs.w	r7, r7, sl
 8002062:	d00f      	beq.n	8002084 <__sfvwrite_r+0x1d4>
 8002064:	2001      	movs	r0, #1
 8002066:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800206a:	eba3 030a 	sub.w	r3, r3, sl
 800206e:	44d3      	add	fp, sl
 8002070:	eba5 050a 	sub.w	r5, r5, sl
 8002074:	f8c8 3008 	str.w	r3, [r8, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1d2      	bne.n	8002022 <__sfvwrite_r+0x172>
 800207c:	2000      	movs	r0, #0
 800207e:	b003      	add	sp, #12
 8002080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002084:	4621      	mov	r1, r4
 8002086:	4648      	mov	r0, r9
 8002088:	f7ff fb2e 	bl	80016e8 <_fflush_r>
 800208c:	2800      	cmp	r0, #0
 800208e:	d0ea      	beq.n	8002066 <__sfvwrite_r+0x1b6>
 8002090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002094:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002098:	81a3      	strh	r3, [r4, #12]
 800209a:	f04f 30ff 	mov.w	r0, #4294967295
 800209e:	b003      	add	sp, #12
 80020a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020a4:	2000      	movs	r0, #0
 80020a6:	4770      	bx	lr
 80020a8:	6875      	ldr	r5, [r6, #4]
 80020aa:	4633      	mov	r3, r6
 80020ac:	3608      	adds	r6, #8
 80020ae:	2d00      	cmp	r5, #0
 80020b0:	d0fa      	beq.n	80020a8 <__sfvwrite_r+0x1f8>
 80020b2:	f8d3 b000 	ldr.w	fp, [r3]
 80020b6:	462a      	mov	r2, r5
 80020b8:	210a      	movs	r1, #10
 80020ba:	4658      	mov	r0, fp
 80020bc:	f000 faf0 	bl	80026a0 <memchr>
 80020c0:	2800      	cmp	r0, #0
 80020c2:	d065      	beq.n	8002190 <__sfvwrite_r+0x2e0>
 80020c4:	3001      	adds	r0, #1
 80020c6:	eba0 070b 	sub.w	r7, r0, fp
 80020ca:	e7ae      	b.n	800202a <__sfvwrite_r+0x17a>
 80020cc:	6922      	ldr	r2, [r4, #16]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d314      	bcc.n	80020fc <__sfvwrite_r+0x24c>
 80020d2:	6962      	ldr	r2, [r4, #20]
 80020d4:	42ba      	cmp	r2, r7
 80020d6:	d811      	bhi.n	80020fc <__sfvwrite_r+0x24c>
 80020d8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80020dc:	42bb      	cmp	r3, r7
 80020de:	bf28      	it	cs
 80020e0:	463b      	movcs	r3, r7
 80020e2:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80020e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80020e8:	6a21      	ldr	r1, [r4, #32]
 80020ea:	fb02 f303 	mul.w	r3, r2, r3
 80020ee:	4648      	mov	r0, r9
 80020f0:	4652      	mov	r2, sl
 80020f2:	47a8      	blx	r5
 80020f4:	1e05      	subs	r5, r0, #0
 80020f6:	ddcb      	ble.n	8002090 <__sfvwrite_r+0x1e0>
 80020f8:	1b7f      	subs	r7, r7, r5
 80020fa:	e77b      	b.n	8001ff4 <__sfvwrite_r+0x144>
 80020fc:	42b9      	cmp	r1, r7
 80020fe:	bf28      	it	cs
 8002100:	4639      	movcs	r1, r7
 8002102:	460d      	mov	r5, r1
 8002104:	4618      	mov	r0, r3
 8002106:	460a      	mov	r2, r1
 8002108:	4651      	mov	r1, sl
 800210a:	f000 f8fd 	bl	8002308 <memmove>
 800210e:	68a1      	ldr	r1, [r4, #8]
 8002110:	6823      	ldr	r3, [r4, #0]
 8002112:	1b49      	subs	r1, r1, r5
 8002114:	442b      	add	r3, r5
 8002116:	60a1      	str	r1, [r4, #8]
 8002118:	6023      	str	r3, [r4, #0]
 800211a:	2900      	cmp	r1, #0
 800211c:	d1ec      	bne.n	80020f8 <__sfvwrite_r+0x248>
 800211e:	4621      	mov	r1, r4
 8002120:	4648      	mov	r0, r9
 8002122:	f7ff fae1 	bl	80016e8 <_fflush_r>
 8002126:	2800      	cmp	r0, #0
 8002128:	d0e6      	beq.n	80020f8 <__sfvwrite_r+0x248>
 800212a:	e7b1      	b.n	8002090 <__sfvwrite_r+0x1e0>
 800212c:	46bb      	mov	fp, r7
 800212e:	463a      	mov	r2, r7
 8002130:	e752      	b.n	8001fd8 <__sfvwrite_r+0x128>
 8002132:	4659      	mov	r1, fp
 8002134:	9201      	str	r2, [sp, #4]
 8002136:	f000 f8e7 	bl	8002308 <memmove>
 800213a:	9a01      	ldr	r2, [sp, #4]
 800213c:	68a3      	ldr	r3, [r4, #8]
 800213e:	1a9b      	subs	r3, r3, r2
 8002140:	60a3      	str	r3, [r4, #8]
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	4413      	add	r3, r2
 8002146:	6023      	str	r3, [r4, #0]
 8002148:	4692      	mov	sl, r2
 800214a:	e788      	b.n	800205e <__sfvwrite_r+0x1ae>
 800214c:	4659      	mov	r1, fp
 800214e:	4652      	mov	r2, sl
 8002150:	f000 f8da 	bl	8002308 <memmove>
 8002154:	6823      	ldr	r3, [r4, #0]
 8002156:	4453      	add	r3, sl
 8002158:	6023      	str	r3, [r4, #0]
 800215a:	4621      	mov	r1, r4
 800215c:	4648      	mov	r0, r9
 800215e:	f7ff fac3 	bl	80016e8 <_fflush_r>
 8002162:	2800      	cmp	r0, #0
 8002164:	f43f af7b 	beq.w	800205e <__sfvwrite_r+0x1ae>
 8002168:	e792      	b.n	8002090 <__sfvwrite_r+0x1e0>
 800216a:	4648      	mov	r0, r9
 800216c:	f000 fae8 	bl	8002740 <_realloc_r>
 8002170:	4603      	mov	r3, r0
 8002172:	2800      	cmp	r0, #0
 8002174:	f47f af26 	bne.w	8001fc4 <__sfvwrite_r+0x114>
 8002178:	6921      	ldr	r1, [r4, #16]
 800217a:	4648      	mov	r0, r9
 800217c:	f7ff f9ce 	bl	800151c <_free_r>
 8002180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002184:	220c      	movs	r2, #12
 8002186:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800218a:	f8c9 2000 	str.w	r2, [r9]
 800218e:	e781      	b.n	8002094 <__sfvwrite_r+0x1e4>
 8002190:	1c6a      	adds	r2, r5, #1
 8002192:	4617      	mov	r7, r2
 8002194:	e74a      	b.n	800202c <__sfvwrite_r+0x17c>
 8002196:	220c      	movs	r2, #12
 8002198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800219c:	f8c9 2000 	str.w	r2, [r9]
 80021a0:	e778      	b.n	8002094 <__sfvwrite_r+0x1e4>
 80021a2:	bf00      	nop
 80021a4:	7ffffc00 	.word	0x7ffffc00

080021a8 <__swbuf_r>:
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021aa:	460d      	mov	r5, r1
 80021ac:	4614      	mov	r4, r2
 80021ae:	4606      	mov	r6, r0
 80021b0:	b110      	cbz	r0, 80021b8 <__swbuf_r+0x10>
 80021b2:	6a03      	ldr	r3, [r0, #32]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d037      	beq.n	8002228 <__swbuf_r+0x80>
 80021b8:	89a3      	ldrh	r3, [r4, #12]
 80021ba:	69a2      	ldr	r2, [r4, #24]
 80021bc:	60a2      	str	r2, [r4, #8]
 80021be:	071a      	lsls	r2, r3, #28
 80021c0:	d519      	bpl.n	80021f6 <__swbuf_r+0x4e>
 80021c2:	6923      	ldr	r3, [r4, #16]
 80021c4:	b1bb      	cbz	r3, 80021f6 <__swbuf_r+0x4e>
 80021c6:	6822      	ldr	r2, [r4, #0]
 80021c8:	6961      	ldr	r1, [r4, #20]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	b2ed      	uxtb	r5, r5
 80021ce:	4299      	cmp	r1, r3
 80021d0:	462f      	mov	r7, r5
 80021d2:	dd20      	ble.n	8002216 <__swbuf_r+0x6e>
 80021d4:	3301      	adds	r3, #1
 80021d6:	68a1      	ldr	r1, [r4, #8]
 80021d8:	3901      	subs	r1, #1
 80021da:	60a1      	str	r1, [r4, #8]
 80021dc:	1c51      	adds	r1, r2, #1
 80021de:	6021      	str	r1, [r4, #0]
 80021e0:	7015      	strb	r5, [r2, #0]
 80021e2:	6962      	ldr	r2, [r4, #20]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d00d      	beq.n	8002204 <__swbuf_r+0x5c>
 80021e8:	89a3      	ldrh	r3, [r4, #12]
 80021ea:	07db      	lsls	r3, r3, #31
 80021ec:	d501      	bpl.n	80021f2 <__swbuf_r+0x4a>
 80021ee:	2d0a      	cmp	r5, #10
 80021f0:	d008      	beq.n	8002204 <__swbuf_r+0x5c>
 80021f2:	4638      	mov	r0, r7
 80021f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021f6:	4621      	mov	r1, r4
 80021f8:	4630      	mov	r0, r6
 80021fa:	f000 f825 	bl	8002248 <__swsetup_r>
 80021fe:	b938      	cbnz	r0, 8002210 <__swbuf_r+0x68>
 8002200:	6923      	ldr	r3, [r4, #16]
 8002202:	e7e0      	b.n	80021c6 <__swbuf_r+0x1e>
 8002204:	4621      	mov	r1, r4
 8002206:	4630      	mov	r0, r6
 8002208:	f7ff fa6e 	bl	80016e8 <_fflush_r>
 800220c:	2800      	cmp	r0, #0
 800220e:	d0f0      	beq.n	80021f2 <__swbuf_r+0x4a>
 8002210:	f04f 37ff 	mov.w	r7, #4294967295
 8002214:	e7ed      	b.n	80021f2 <__swbuf_r+0x4a>
 8002216:	4621      	mov	r1, r4
 8002218:	4630      	mov	r0, r6
 800221a:	f7ff fa65 	bl	80016e8 <_fflush_r>
 800221e:	2800      	cmp	r0, #0
 8002220:	d1f6      	bne.n	8002210 <__swbuf_r+0x68>
 8002222:	6822      	ldr	r2, [r4, #0]
 8002224:	2301      	movs	r3, #1
 8002226:	e7d6      	b.n	80021d6 <__swbuf_r+0x2e>
 8002228:	f7fe fece 	bl	8000fc8 <__sinit>
 800222c:	e7c4      	b.n	80021b8 <__swbuf_r+0x10>
 800222e:	bf00      	nop

08002230 <__swbuf>:
 8002230:	b410      	push	{r4}
 8002232:	4c04      	ldr	r4, [pc, #16]	@ (8002244 <__swbuf+0x14>)
 8002234:	4603      	mov	r3, r0
 8002236:	460a      	mov	r2, r1
 8002238:	6820      	ldr	r0, [r4, #0]
 800223a:	bc10      	pop	{r4}
 800223c:	4619      	mov	r1, r3
 800223e:	f7ff bfb3 	b.w	80021a8 <__swbuf_r>
 8002242:	bf00      	nop
 8002244:	2000001c 	.word	0x2000001c

08002248 <__swsetup_r>:
 8002248:	b538      	push	{r3, r4, r5, lr}
 800224a:	4b2e      	ldr	r3, [pc, #184]	@ (8002304 <__swsetup_r+0xbc>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4605      	mov	r5, r0
 8002250:	460c      	mov	r4, r1
 8002252:	b113      	cbz	r3, 800225a <__swsetup_r+0x12>
 8002254:	6a1a      	ldr	r2, [r3, #32]
 8002256:	2a00      	cmp	r2, #0
 8002258:	d04b      	beq.n	80022f2 <__swsetup_r+0xaa>
 800225a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800225e:	0718      	lsls	r0, r3, #28
 8002260:	d51c      	bpl.n	800229c <__swsetup_r+0x54>
 8002262:	6922      	ldr	r2, [r4, #16]
 8002264:	b322      	cbz	r2, 80022b0 <__swsetup_r+0x68>
 8002266:	f013 0101 	ands.w	r1, r3, #1
 800226a:	d007      	beq.n	800227c <__swsetup_r+0x34>
 800226c:	6961      	ldr	r1, [r4, #20]
 800226e:	2000      	movs	r0, #0
 8002270:	4249      	negs	r1, r1
 8002272:	60a0      	str	r0, [r4, #8]
 8002274:	61a1      	str	r1, [r4, #24]
 8002276:	b13a      	cbz	r2, 8002288 <__swsetup_r+0x40>
 8002278:	2000      	movs	r0, #0
 800227a:	bd38      	pop	{r3, r4, r5, pc}
 800227c:	0798      	lsls	r0, r3, #30
 800227e:	bf58      	it	pl
 8002280:	6961      	ldrpl	r1, [r4, #20]
 8002282:	60a1      	str	r1, [r4, #8]
 8002284:	2a00      	cmp	r2, #0
 8002286:	d1f7      	bne.n	8002278 <__swsetup_r+0x30>
 8002288:	0619      	lsls	r1, r3, #24
 800228a:	bf58      	it	pl
 800228c:	4610      	movpl	r0, r2
 800228e:	d5f4      	bpl.n	800227a <__swsetup_r+0x32>
 8002290:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002294:	81a3      	strh	r3, [r4, #12]
 8002296:	f04f 30ff 	mov.w	r0, #4294967295
 800229a:	bd38      	pop	{r3, r4, r5, pc}
 800229c:	06d9      	lsls	r1, r3, #27
 800229e:	d52c      	bpl.n	80022fa <__swsetup_r+0xb2>
 80022a0:	075a      	lsls	r2, r3, #29
 80022a2:	d412      	bmi.n	80022ca <__swsetup_r+0x82>
 80022a4:	6922      	ldr	r2, [r4, #16]
 80022a6:	f043 0308 	orr.w	r3, r3, #8
 80022aa:	81a3      	strh	r3, [r4, #12]
 80022ac:	2a00      	cmp	r2, #0
 80022ae:	d1da      	bne.n	8002266 <__swsetup_r+0x1e>
 80022b0:	f403 7120 	and.w	r1, r3, #640	@ 0x280
 80022b4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80022b8:	d0d5      	beq.n	8002266 <__swsetup_r+0x1e>
 80022ba:	4621      	mov	r1, r4
 80022bc:	4628      	mov	r0, r5
 80022be:	f000 fa73 	bl	80027a8 <__smakebuf_r>
 80022c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022c6:	6922      	ldr	r2, [r4, #16]
 80022c8:	e7cd      	b.n	8002266 <__swsetup_r+0x1e>
 80022ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80022cc:	b151      	cbz	r1, 80022e4 <__swsetup_r+0x9c>
 80022ce:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 80022d2:	4291      	cmp	r1, r2
 80022d4:	d004      	beq.n	80022e0 <__swsetup_r+0x98>
 80022d6:	4628      	mov	r0, r5
 80022d8:	f7ff f920 	bl	800151c <_free_r>
 80022dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	6362      	str	r2, [r4, #52]	@ 0x34
 80022e4:	6922      	ldr	r2, [r4, #16]
 80022e6:	2100      	movs	r1, #0
 80022e8:	e9c4 2100 	strd	r2, r1, [r4]
 80022ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80022f0:	e7d9      	b.n	80022a6 <__swsetup_r+0x5e>
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe fe68 	bl	8000fc8 <__sinit>
 80022f8:	e7af      	b.n	800225a <__swsetup_r+0x12>
 80022fa:	2209      	movs	r2, #9
 80022fc:	602a      	str	r2, [r5, #0]
 80022fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002302:	e7c7      	b.n	8002294 <__swsetup_r+0x4c>
 8002304:	2000001c 	.word	0x2000001c

08002308 <memmove>:
 8002308:	4288      	cmp	r0, r1
 800230a:	d90e      	bls.n	800232a <memmove+0x22>
 800230c:	188b      	adds	r3, r1, r2
 800230e:	4283      	cmp	r3, r0
 8002310:	d90b      	bls.n	800232a <memmove+0x22>
 8002312:	eb00 0c02 	add.w	ip, r0, r2
 8002316:	2a00      	cmp	r2, #0
 8002318:	d06e      	beq.n	80023f8 <memmove+0xf0>
 800231a:	4662      	mov	r2, ip
 800231c:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 8002320:	f802 cd01 	strb.w	ip, [r2, #-1]!
 8002324:	4299      	cmp	r1, r3
 8002326:	d1f9      	bne.n	800231c <memmove+0x14>
 8002328:	4770      	bx	lr
 800232a:	2a0f      	cmp	r2, #15
 800232c:	d80f      	bhi.n	800234e <memmove+0x46>
 800232e:	4603      	mov	r3, r0
 8002330:	f102 3cff 	add.w	ip, r2, #4294967295
 8002334:	2a00      	cmp	r2, #0
 8002336:	d05f      	beq.n	80023f8 <memmove+0xf0>
 8002338:	f10c 0c01 	add.w	ip, ip, #1
 800233c:	3b01      	subs	r3, #1
 800233e:	448c      	add	ip, r1
 8002340:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002344:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002348:	4561      	cmp	r1, ip
 800234a:	d1f9      	bne.n	8002340 <memmove+0x38>
 800234c:	4770      	bx	lr
 800234e:	ea40 0301 	orr.w	r3, r0, r1
 8002352:	079b      	lsls	r3, r3, #30
 8002354:	d151      	bne.n	80023fa <memmove+0xf2>
 8002356:	f1a2 0310 	sub.w	r3, r2, #16
 800235a:	b570      	push	{r4, r5, r6, lr}
 800235c:	f101 0c20 	add.w	ip, r1, #32
 8002360:	f023 050f 	bic.w	r5, r3, #15
 8002364:	f101 0e10 	add.w	lr, r1, #16
 8002368:	f100 0410 	add.w	r4, r0, #16
 800236c:	44ac      	add	ip, r5
 800236e:	091b      	lsrs	r3, r3, #4
 8002370:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 8002374:	f844 5c10 	str.w	r5, [r4, #-16]
 8002378:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 800237c:	f844 5c0c 	str.w	r5, [r4, #-12]
 8002380:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 8002384:	f844 5c08 	str.w	r5, [r4, #-8]
 8002388:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 800238c:	f844 5c04 	str.w	r5, [r4, #-4]
 8002390:	f10e 0e10 	add.w	lr, lr, #16
 8002394:	45e6      	cmp	lr, ip
 8002396:	f104 0410 	add.w	r4, r4, #16
 800239a:	d1e9      	bne.n	8002370 <memmove+0x68>
 800239c:	3301      	adds	r3, #1
 800239e:	f012 0f0c 	tst.w	r2, #12
 80023a2:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80023a6:	f002 040f 	and.w	r4, r2, #15
 80023aa:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 80023ae:	d028      	beq.n	8002402 <memmove+0xfa>
 80023b0:	3c04      	subs	r4, #4
 80023b2:	f024 0603 	bic.w	r6, r4, #3
 80023b6:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 80023ba:	441e      	add	r6, r3
 80023bc:	1f1c      	subs	r4, r3, #4
 80023be:	468e      	mov	lr, r1
 80023c0:	f85e 5b04 	ldr.w	r5, [lr], #4
 80023c4:	f844 5f04 	str.w	r5, [r4, #4]!
 80023c8:	42b4      	cmp	r4, r6
 80023ca:	d1f9      	bne.n	80023c0 <memmove+0xb8>
 80023cc:	f10c 0401 	add.w	r4, ip, #1
 80023d0:	f002 0203 	and.w	r2, r2, #3
 80023d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80023d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80023dc:	f102 3cff 	add.w	ip, r2, #4294967295
 80023e0:	b14a      	cbz	r2, 80023f6 <memmove+0xee>
 80023e2:	f10c 0c01 	add.w	ip, ip, #1
 80023e6:	3b01      	subs	r3, #1
 80023e8:	448c      	add	ip, r1
 80023ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80023ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80023f2:	4561      	cmp	r1, ip
 80023f4:	d1f9      	bne.n	80023ea <memmove+0xe2>
 80023f6:	bd70      	pop	{r4, r5, r6, pc}
 80023f8:	4770      	bx	lr
 80023fa:	f102 3cff 	add.w	ip, r2, #4294967295
 80023fe:	4603      	mov	r3, r0
 8002400:	e79a      	b.n	8002338 <memmove+0x30>
 8002402:	4622      	mov	r2, r4
 8002404:	e7ea      	b.n	80023dc <memmove+0xd4>
 8002406:	bf00      	nop

08002408 <_init_signal_r>:
 8002408:	b538      	push	{r3, r4, r5, lr}
 800240a:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800240c:	b10c      	cbz	r4, 8002412 <_init_signal_r+0xa>
 800240e:	2000      	movs	r0, #0
 8002410:	bd38      	pop	{r3, r4, r5, pc}
 8002412:	2180      	movs	r1, #128	@ 0x80
 8002414:	4605      	mov	r5, r0
 8002416:	f7fe fbb9 	bl	8000b8c <_malloc_r>
 800241a:	4602      	mov	r2, r0
 800241c:	63e8      	str	r0, [r5, #60]	@ 0x3c
 800241e:	b130      	cbz	r0, 800242e <_init_signal_r+0x26>
 8002420:	1f03      	subs	r3, r0, #4
 8002422:	327c      	adds	r2, #124	@ 0x7c
 8002424:	f843 4f04 	str.w	r4, [r3, #4]!
 8002428:	4293      	cmp	r3, r2
 800242a:	d1fb      	bne.n	8002424 <_init_signal_r+0x1c>
 800242c:	e7ef      	b.n	800240e <_init_signal_r+0x6>
 800242e:	f04f 30ff 	mov.w	r0, #4294967295
 8002432:	bd38      	pop	{r3, r4, r5, pc}

08002434 <_signal_r>:
 8002434:	b530      	push	{r4, r5, lr}
 8002436:	291f      	cmp	r1, #31
 8002438:	b083      	sub	sp, #12
 800243a:	4605      	mov	r5, r0
 800243c:	d808      	bhi.n	8002450 <_signal_r+0x1c>
 800243e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002440:	460c      	mov	r4, r1
 8002442:	b153      	cbz	r3, 800245a <_signal_r+0x26>
 8002444:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002448:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800244c:	b003      	add	sp, #12
 800244e:	bd30      	pop	{r4, r5, pc}
 8002450:	2316      	movs	r3, #22
 8002452:	6003      	str	r3, [r0, #0]
 8002454:	f04f 30ff 	mov.w	r0, #4294967295
 8002458:	e7f8      	b.n	800244c <_signal_r+0x18>
 800245a:	2180      	movs	r1, #128	@ 0x80
 800245c:	9201      	str	r2, [sp, #4]
 800245e:	f7fe fb95 	bl	8000b8c <_malloc_r>
 8002462:	9a01      	ldr	r2, [sp, #4]
 8002464:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8002466:	4603      	mov	r3, r0
 8002468:	2800      	cmp	r0, #0
 800246a:	d0f3      	beq.n	8002454 <_signal_r+0x20>
 800246c:	1f01      	subs	r1, r0, #4
 800246e:	f100 057c 	add.w	r5, r0, #124	@ 0x7c
 8002472:	2000      	movs	r0, #0
 8002474:	f841 0f04 	str.w	r0, [r1, #4]!
 8002478:	42a9      	cmp	r1, r5
 800247a:	d1fb      	bne.n	8002474 <_signal_r+0x40>
 800247c:	e7e2      	b.n	8002444 <_signal_r+0x10>
 800247e:	bf00      	nop

08002480 <_raise_r>:
 8002480:	291f      	cmp	r1, #31
 8002482:	b538      	push	{r3, r4, r5, lr}
 8002484:	4605      	mov	r5, r0
 8002486:	d81e      	bhi.n	80024c6 <_raise_r+0x46>
 8002488:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800248a:	460c      	mov	r4, r1
 800248c:	b16a      	cbz	r2, 80024aa <_raise_r+0x2a>
 800248e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002492:	b153      	cbz	r3, 80024aa <_raise_r+0x2a>
 8002494:	2b01      	cmp	r3, #1
 8002496:	d006      	beq.n	80024a6 <_raise_r+0x26>
 8002498:	1c59      	adds	r1, r3, #1
 800249a:	d010      	beq.n	80024be <_raise_r+0x3e>
 800249c:	2100      	movs	r1, #0
 800249e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80024a2:	4620      	mov	r0, r4
 80024a4:	4798      	blx	r3
 80024a6:	2000      	movs	r0, #0
 80024a8:	bd38      	pop	{r3, r4, r5, pc}
 80024aa:	4628      	mov	r0, r5
 80024ac:	f000 f8f2 	bl	8002694 <_getpid_r>
 80024b0:	4622      	mov	r2, r4
 80024b2:	4601      	mov	r1, r0
 80024b4:	4628      	mov	r0, r5
 80024b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024ba:	f000 b8d5 	b.w	8002668 <_kill_r>
 80024be:	2316      	movs	r3, #22
 80024c0:	6003      	str	r3, [r0, #0]
 80024c2:	2001      	movs	r0, #1
 80024c4:	bd38      	pop	{r3, r4, r5, pc}
 80024c6:	2316      	movs	r3, #22
 80024c8:	6003      	str	r3, [r0, #0]
 80024ca:	f04f 30ff 	mov.w	r0, #4294967295
 80024ce:	bd38      	pop	{r3, r4, r5, pc}

080024d0 <__sigtramp_r>:
 80024d0:	291f      	cmp	r1, #31
 80024d2:	d82a      	bhi.n	800252a <__sigtramp_r+0x5a>
 80024d4:	b538      	push	{r3, r4, r5, lr}
 80024d6:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80024d8:	460c      	mov	r4, r1
 80024da:	4605      	mov	r5, r0
 80024dc:	b1a3      	cbz	r3, 8002508 <__sigtramp_r+0x38>
 80024de:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 80024e2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80024e6:	b14a      	cbz	r2, 80024fc <__sigtramp_r+0x2c>
 80024e8:	1c51      	adds	r1, r2, #1
 80024ea:	d00b      	beq.n	8002504 <__sigtramp_r+0x34>
 80024ec:	2a01      	cmp	r2, #1
 80024ee:	d007      	beq.n	8002500 <__sigtramp_r+0x30>
 80024f0:	2500      	movs	r5, #0
 80024f2:	4620      	mov	r0, r4
 80024f4:	601d      	str	r5, [r3, #0]
 80024f6:	4790      	blx	r2
 80024f8:	4628      	mov	r0, r5
 80024fa:	bd38      	pop	{r3, r4, r5, pc}
 80024fc:	2001      	movs	r0, #1
 80024fe:	bd38      	pop	{r3, r4, r5, pc}
 8002500:	2003      	movs	r0, #3
 8002502:	bd38      	pop	{r3, r4, r5, pc}
 8002504:	2002      	movs	r0, #2
 8002506:	bd38      	pop	{r3, r4, r5, pc}
 8002508:	2180      	movs	r1, #128	@ 0x80
 800250a:	f7fe fb3f 	bl	8000b8c <_malloc_r>
 800250e:	4603      	mov	r3, r0
 8002510:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8002512:	b138      	cbz	r0, 8002524 <__sigtramp_r+0x54>
 8002514:	1f02      	subs	r2, r0, #4
 8002516:	2100      	movs	r1, #0
 8002518:	307c      	adds	r0, #124	@ 0x7c
 800251a:	f842 1f04 	str.w	r1, [r2, #4]!
 800251e:	4290      	cmp	r0, r2
 8002520:	d1fb      	bne.n	800251a <__sigtramp_r+0x4a>
 8002522:	e7dc      	b.n	80024de <__sigtramp_r+0xe>
 8002524:	f04f 30ff 	mov.w	r0, #4294967295
 8002528:	bd38      	pop	{r3, r4, r5, pc}
 800252a:	f04f 30ff 	mov.w	r0, #4294967295
 800252e:	4770      	bx	lr

08002530 <raise>:
 8002530:	b538      	push	{r3, r4, r5, lr}
 8002532:	4b13      	ldr	r3, [pc, #76]	@ (8002580 <raise+0x50>)
 8002534:	281f      	cmp	r0, #31
 8002536:	681d      	ldr	r5, [r3, #0]
 8002538:	d81d      	bhi.n	8002576 <raise+0x46>
 800253a:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 800253c:	4604      	mov	r4, r0
 800253e:	b162      	cbz	r2, 800255a <raise+0x2a>
 8002540:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8002544:	b14b      	cbz	r3, 800255a <raise+0x2a>
 8002546:	2b01      	cmp	r3, #1
 8002548:	d005      	beq.n	8002556 <raise+0x26>
 800254a:	1c59      	adds	r1, r3, #1
 800254c:	d00f      	beq.n	800256e <raise+0x3e>
 800254e:	2100      	movs	r1, #0
 8002550:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 8002554:	4798      	blx	r3
 8002556:	2000      	movs	r0, #0
 8002558:	bd38      	pop	{r3, r4, r5, pc}
 800255a:	4628      	mov	r0, r5
 800255c:	f000 f89a 	bl	8002694 <_getpid_r>
 8002560:	4622      	mov	r2, r4
 8002562:	4601      	mov	r1, r0
 8002564:	4628      	mov	r0, r5
 8002566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800256a:	f000 b87d 	b.w	8002668 <_kill_r>
 800256e:	2316      	movs	r3, #22
 8002570:	602b      	str	r3, [r5, #0]
 8002572:	2001      	movs	r0, #1
 8002574:	bd38      	pop	{r3, r4, r5, pc}
 8002576:	2316      	movs	r3, #22
 8002578:	602b      	str	r3, [r5, #0]
 800257a:	f04f 30ff 	mov.w	r0, #4294967295
 800257e:	bd38      	pop	{r3, r4, r5, pc}
 8002580:	2000001c 	.word	0x2000001c

08002584 <signal>:
 8002584:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <signal+0x48>)
 8002586:	281f      	cmp	r0, #31
 8002588:	b570      	push	{r4, r5, r6, lr}
 800258a:	681e      	ldr	r6, [r3, #0]
 800258c:	d808      	bhi.n	80025a0 <signal+0x1c>
 800258e:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 8002590:	4604      	mov	r4, r0
 8002592:	460d      	mov	r5, r1
 8002594:	b14b      	cbz	r3, 80025aa <signal+0x26>
 8002596:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800259a:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
 800259e:	bd70      	pop	{r4, r5, r6, pc}
 80025a0:	2316      	movs	r3, #22
 80025a2:	6033      	str	r3, [r6, #0]
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295
 80025a8:	bd70      	pop	{r4, r5, r6, pc}
 80025aa:	2180      	movs	r1, #128	@ 0x80
 80025ac:	4630      	mov	r0, r6
 80025ae:	f7fe faed 	bl	8000b8c <_malloc_r>
 80025b2:	4603      	mov	r3, r0
 80025b4:	63f0      	str	r0, [r6, #60]	@ 0x3c
 80025b6:	2800      	cmp	r0, #0
 80025b8:	d0f4      	beq.n	80025a4 <signal+0x20>
 80025ba:	1f02      	subs	r2, r0, #4
 80025bc:	2100      	movs	r1, #0
 80025be:	307c      	adds	r0, #124	@ 0x7c
 80025c0:	f842 1f04 	str.w	r1, [r2, #4]!
 80025c4:	4290      	cmp	r0, r2
 80025c6:	d1fb      	bne.n	80025c0 <signal+0x3c>
 80025c8:	e7e5      	b.n	8002596 <signal+0x12>
 80025ca:	bf00      	nop
 80025cc:	2000001c 	.word	0x2000001c

080025d0 <_init_signal>:
 80025d0:	b538      	push	{r3, r4, r5, lr}
 80025d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002600 <_init_signal+0x30>)
 80025d4:	681d      	ldr	r5, [r3, #0]
 80025d6:	6bec      	ldr	r4, [r5, #60]	@ 0x3c
 80025d8:	b10c      	cbz	r4, 80025de <_init_signal+0xe>
 80025da:	2000      	movs	r0, #0
 80025dc:	bd38      	pop	{r3, r4, r5, pc}
 80025de:	2180      	movs	r1, #128	@ 0x80
 80025e0:	4628      	mov	r0, r5
 80025e2:	f7fe fad3 	bl	8000b8c <_malloc_r>
 80025e6:	63e8      	str	r0, [r5, #60]	@ 0x3c
 80025e8:	b138      	cbz	r0, 80025fa <_init_signal+0x2a>
 80025ea:	1f03      	subs	r3, r0, #4
 80025ec:	f100 027c 	add.w	r2, r0, #124	@ 0x7c
 80025f0:	f843 4f04 	str.w	r4, [r3, #4]!
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d1fb      	bne.n	80025f0 <_init_signal+0x20>
 80025f8:	e7ef      	b.n	80025da <_init_signal+0xa>
 80025fa:	f04f 30ff 	mov.w	r0, #4294967295
 80025fe:	bd38      	pop	{r3, r4, r5, pc}
 8002600:	2000001c 	.word	0x2000001c

08002604 <__sigtramp>:
 8002604:	b538      	push	{r3, r4, r5, lr}
 8002606:	4b17      	ldr	r3, [pc, #92]	@ (8002664 <__sigtramp+0x60>)
 8002608:	281f      	cmp	r0, #31
 800260a:	681d      	ldr	r5, [r3, #0]
 800260c:	d826      	bhi.n	800265c <__sigtramp+0x58>
 800260e:	4604      	mov	r4, r0
 8002610:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 8002612:	b1a0      	cbz	r0, 800263e <__sigtramp+0x3a>
 8002614:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8002618:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800261c:	b14b      	cbz	r3, 8002632 <__sigtramp+0x2e>
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	d00b      	beq.n	800263a <__sigtramp+0x36>
 8002622:	2b01      	cmp	r3, #1
 8002624:	d007      	beq.n	8002636 <__sigtramp+0x32>
 8002626:	2500      	movs	r5, #0
 8002628:	6005      	str	r5, [r0, #0]
 800262a:	4620      	mov	r0, r4
 800262c:	4798      	blx	r3
 800262e:	4628      	mov	r0, r5
 8002630:	bd38      	pop	{r3, r4, r5, pc}
 8002632:	2001      	movs	r0, #1
 8002634:	bd38      	pop	{r3, r4, r5, pc}
 8002636:	2003      	movs	r0, #3
 8002638:	bd38      	pop	{r3, r4, r5, pc}
 800263a:	2002      	movs	r0, #2
 800263c:	bd38      	pop	{r3, r4, r5, pc}
 800263e:	2180      	movs	r1, #128	@ 0x80
 8002640:	4628      	mov	r0, r5
 8002642:	f7fe faa3 	bl	8000b8c <_malloc_r>
 8002646:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8002648:	b140      	cbz	r0, 800265c <__sigtramp+0x58>
 800264a:	1f03      	subs	r3, r0, #4
 800264c:	f100 017c 	add.w	r1, r0, #124	@ 0x7c
 8002650:	2200      	movs	r2, #0
 8002652:	f843 2f04 	str.w	r2, [r3, #4]!
 8002656:	4299      	cmp	r1, r3
 8002658:	d1fb      	bne.n	8002652 <__sigtramp+0x4e>
 800265a:	e7db      	b.n	8002614 <__sigtramp+0x10>
 800265c:	f04f 30ff 	mov.w	r0, #4294967295
 8002660:	bd38      	pop	{r3, r4, r5, pc}
 8002662:	bf00      	nop
 8002664:	2000001c 	.word	0x2000001c

08002668 <_kill_r>:
 8002668:	b570      	push	{r4, r5, r6, lr}
 800266a:	460c      	mov	r4, r1
 800266c:	4d08      	ldr	r5, [pc, #32]	@ (8002690 <_kill_r+0x28>)
 800266e:	4603      	mov	r3, r0
 8002670:	2600      	movs	r6, #0
 8002672:	4620      	mov	r0, r4
 8002674:	4611      	mov	r1, r2
 8002676:	461c      	mov	r4, r3
 8002678:	602e      	str	r6, [r5, #0]
 800267a:	f000 f977 	bl	800296c <_kill>
 800267e:	1c43      	adds	r3, r0, #1
 8002680:	d000      	beq.n	8002684 <_kill_r+0x1c>
 8002682:	bd70      	pop	{r4, r5, r6, pc}
 8002684:	682b      	ldr	r3, [r5, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0fb      	beq.n	8002682 <_kill_r+0x1a>
 800268a:	6023      	str	r3, [r4, #0]
 800268c:	bd70      	pop	{r4, r5, r6, pc}
 800268e:	bf00      	nop
 8002690:	200002f4 	.word	0x200002f4

08002694 <_getpid_r>:
 8002694:	f000 b952 	b.w	800293c <_getpid>
 8002698:	0000      	movs	r0, r0
 800269a:	0000      	movs	r0, r0
 800269c:	0000      	movs	r0, r0
 800269e:	0000      	movs	r0, r0

080026a0 <memchr>:
 80026a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80026a4:	2a10      	cmp	r2, #16
 80026a6:	db2b      	blt.n	8002700 <memchr+0x60>
 80026a8:	f010 0f07 	tst.w	r0, #7
 80026ac:	d008      	beq.n	80026c0 <memchr+0x20>
 80026ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80026b2:	3a01      	subs	r2, #1
 80026b4:	428b      	cmp	r3, r1
 80026b6:	d02d      	beq.n	8002714 <memchr+0x74>
 80026b8:	f010 0f07 	tst.w	r0, #7
 80026bc:	b342      	cbz	r2, 8002710 <memchr+0x70>
 80026be:	d1f6      	bne.n	80026ae <memchr+0xe>
 80026c0:	b4f0      	push	{r4, r5, r6, r7}
 80026c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80026c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80026ca:	f022 0407 	bic.w	r4, r2, #7
 80026ce:	f07f 0700 	mvns.w	r7, #0
 80026d2:	2300      	movs	r3, #0
 80026d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80026d8:	3c08      	subs	r4, #8
 80026da:	ea85 0501 	eor.w	r5, r5, r1
 80026de:	ea86 0601 	eor.w	r6, r6, r1
 80026e2:	fa85 f547 	uadd8	r5, r5, r7
 80026e6:	faa3 f587 	sel	r5, r3, r7
 80026ea:	fa86 f647 	uadd8	r6, r6, r7
 80026ee:	faa5 f687 	sel	r6, r5, r7
 80026f2:	b98e      	cbnz	r6, 8002718 <memchr+0x78>
 80026f4:	d1ee      	bne.n	80026d4 <memchr+0x34>
 80026f6:	bcf0      	pop	{r4, r5, r6, r7}
 80026f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80026fc:	f002 0207 	and.w	r2, r2, #7
 8002700:	b132      	cbz	r2, 8002710 <memchr+0x70>
 8002702:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002706:	3a01      	subs	r2, #1
 8002708:	ea83 0301 	eor.w	r3, r3, r1
 800270c:	b113      	cbz	r3, 8002714 <memchr+0x74>
 800270e:	d1f8      	bne.n	8002702 <memchr+0x62>
 8002710:	2000      	movs	r0, #0
 8002712:	4770      	bx	lr
 8002714:	3801      	subs	r0, #1
 8002716:	4770      	bx	lr
 8002718:	2d00      	cmp	r5, #0
 800271a:	bf06      	itte	eq
 800271c:	4635      	moveq	r5, r6
 800271e:	3803      	subeq	r0, #3
 8002720:	3807      	subne	r0, #7
 8002722:	f015 0f01 	tst.w	r5, #1
 8002726:	d107      	bne.n	8002738 <memchr+0x98>
 8002728:	3001      	adds	r0, #1
 800272a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800272e:	bf02      	ittt	eq
 8002730:	3001      	addeq	r0, #1
 8002732:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8002736:	3001      	addeq	r0, #1
 8002738:	bcf0      	pop	{r4, r5, r6, r7}
 800273a:	3801      	subs	r0, #1
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop

08002740 <_realloc_r>:
 8002740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002744:	4614      	mov	r4, r2
 8002746:	b349      	cbz	r1, 800279c <_realloc_r+0x5c>
 8002748:	b1ea      	cbz	r2, 8002786 <_realloc_r+0x46>
 800274a:	4606      	mov	r6, r0
 800274c:	460d      	mov	r5, r1
 800274e:	f000 f8dd 	bl	800290c <_malloc_usable_size_r>
 8002752:	4284      	cmp	r4, r0
 8002754:	4607      	mov	r7, r0
 8002756:	d802      	bhi.n	800275e <_realloc_r+0x1e>
 8002758:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800275c:	d81a      	bhi.n	8002794 <_realloc_r+0x54>
 800275e:	4621      	mov	r1, r4
 8002760:	4630      	mov	r0, r6
 8002762:	f7fe fa13 	bl	8000b8c <_malloc_r>
 8002766:	4680      	mov	r8, r0
 8002768:	b178      	cbz	r0, 800278a <_realloc_r+0x4a>
 800276a:	42bc      	cmp	r4, r7
 800276c:	4622      	mov	r2, r4
 800276e:	4629      	mov	r1, r5
 8002770:	bf28      	it	cs
 8002772:	463a      	movcs	r2, r7
 8002774:	f7fe fe12 	bl	800139c <memcpy>
 8002778:	4630      	mov	r0, r6
 800277a:	4629      	mov	r1, r5
 800277c:	f7fe fece 	bl	800151c <_free_r>
 8002780:	4640      	mov	r0, r8
 8002782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002786:	f7fe fec9 	bl	800151c <_free_r>
 800278a:	f04f 0800 	mov.w	r8, #0
 800278e:	4640      	mov	r0, r8
 8002790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002794:	46a8      	mov	r8, r5
 8002796:	4640      	mov	r0, r8
 8002798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800279c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027a0:	4611      	mov	r1, r2
 80027a2:	f7fe b9f3 	b.w	8000b8c <_malloc_r>
 80027a6:	bf00      	nop

080027a8 <__smakebuf_r>:
 80027a8:	b570      	push	{r4, r5, r6, lr}
 80027aa:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80027ae:	460c      	mov	r4, r1
 80027b0:	0799      	lsls	r1, r3, #30
 80027b2:	b096      	sub	sp, #88	@ 0x58
 80027b4:	d507      	bpl.n	80027c6 <__smakebuf_r+0x1e>
 80027b6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80027ba:	2201      	movs	r2, #1
 80027bc:	e9c4 3204 	strd	r3, r2, [r4, #16]
 80027c0:	6023      	str	r3, [r4, #0]
 80027c2:	b016      	add	sp, #88	@ 0x58
 80027c4:	bd70      	pop	{r4, r5, r6, pc}
 80027c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027ca:	2900      	cmp	r1, #0
 80027cc:	4605      	mov	r5, r0
 80027ce:	db29      	blt.n	8002824 <__smakebuf_r+0x7c>
 80027d0:	466a      	mov	r2, sp
 80027d2:	f000 f873 	bl	80028bc <_fstat_r>
 80027d6:	2800      	cmp	r0, #0
 80027d8:	db22      	blt.n	8002820 <__smakebuf_r+0x78>
 80027da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80027de:	4628      	mov	r0, r5
 80027e0:	9e01      	ldr	r6, [sp, #4]
 80027e2:	f7fe f9d3 	bl	8000b8c <_malloc_r>
 80027e6:	b388      	cbz	r0, 800284c <__smakebuf_r+0xa4>
 80027e8:	89a3      	ldrh	r3, [r4, #12]
 80027ea:	6020      	str	r0, [r4, #0]
 80027ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027f0:	f406 4670 	and.w	r6, r6, #61440	@ 0xf000
 80027f4:	81a3      	strh	r3, [r4, #12]
 80027f6:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
 80027fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027fe:	e9c4 0304 	strd	r0, r3, [r4, #16]
 8002802:	d1de      	bne.n	80027c2 <__smakebuf_r+0x1a>
 8002804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002808:	4628      	mov	r0, r5
 800280a:	f000 f86d 	bl	80028e8 <_isatty_r>
 800280e:	2800      	cmp	r0, #0
 8002810:	d0d7      	beq.n	80027c2 <__smakebuf_r+0x1a>
 8002812:	89a3      	ldrh	r3, [r4, #12]
 8002814:	f023 0303 	bic.w	r3, r3, #3
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	81a3      	strh	r3, [r4, #12]
 800281e:	e7d0      	b.n	80027c2 <__smakebuf_r+0x1a>
 8002820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002824:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002828:	bf14      	ite	ne
 800282a:	2640      	movne	r6, #64	@ 0x40
 800282c:	f44f 6680 	moveq.w	r6, #1024	@ 0x400
 8002830:	4631      	mov	r1, r6
 8002832:	4628      	mov	r0, r5
 8002834:	f7fe f9aa 	bl	8000b8c <_malloc_r>
 8002838:	b140      	cbz	r0, 800284c <__smakebuf_r+0xa4>
 800283a:	89a3      	ldrh	r3, [r4, #12]
 800283c:	6020      	str	r0, [r4, #0]
 800283e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002842:	e9c4 0604 	strd	r0, r6, [r4, #16]
 8002846:	81a3      	strh	r3, [r4, #12]
 8002848:	b016      	add	sp, #88	@ 0x58
 800284a:	bd70      	pop	{r4, r5, r6, pc}
 800284c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002850:	059a      	lsls	r2, r3, #22
 8002852:	d4b6      	bmi.n	80027c2 <__smakebuf_r+0x1a>
 8002854:	f023 0303 	bic.w	r3, r3, #3
 8002858:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	2101      	movs	r1, #1
 8002862:	e9c4 2104 	strd	r2, r1, [r4, #16]
 8002866:	81a3      	strh	r3, [r4, #12]
 8002868:	6022      	str	r2, [r4, #0]
 800286a:	e7aa      	b.n	80027c2 <__smakebuf_r+0x1a>

0800286c <__swhatbuf_r>:
 800286c:	b570      	push	{r4, r5, r6, lr}
 800286e:	460c      	mov	r4, r1
 8002870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002874:	2900      	cmp	r1, #0
 8002876:	b096      	sub	sp, #88	@ 0x58
 8002878:	4615      	mov	r5, r2
 800287a:	461e      	mov	r6, r3
 800287c:	db0f      	blt.n	800289e <__swhatbuf_r+0x32>
 800287e:	466a      	mov	r2, sp
 8002880:	f000 f81c 	bl	80028bc <_fstat_r>
 8002884:	2800      	cmp	r0, #0
 8002886:	db0a      	blt.n	800289e <__swhatbuf_r+0x32>
 8002888:	9b01      	ldr	r3, [sp, #4]
 800288a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800288e:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8002892:	fab3 f383 	clz	r3, r3
 8002896:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	e008      	b.n	80028b0 <__swhatbuf_r+0x44>
 800289e:	89a2      	ldrh	r2, [r4, #12]
 80028a0:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	bf14      	ite	ne
 80028aa:	2240      	movne	r2, #64	@ 0x40
 80028ac:	f44f 6280 	moveq.w	r2, #1024	@ 0x400
 80028b0:	2000      	movs	r0, #0
 80028b2:	6033      	str	r3, [r6, #0]
 80028b4:	602a      	str	r2, [r5, #0]
 80028b6:	b016      	add	sp, #88	@ 0x58
 80028b8:	bd70      	pop	{r4, r5, r6, pc}
 80028ba:	bf00      	nop

080028bc <_fstat_r>:
 80028bc:	b570      	push	{r4, r5, r6, lr}
 80028be:	460c      	mov	r4, r1
 80028c0:	4d08      	ldr	r5, [pc, #32]	@ (80028e4 <_fstat_r+0x28>)
 80028c2:	4603      	mov	r3, r0
 80028c4:	2600      	movs	r6, #0
 80028c6:	4620      	mov	r0, r4
 80028c8:	4611      	mov	r1, r2
 80028ca:	461c      	mov	r4, r3
 80028cc:	602e      	str	r6, [r5, #0]
 80028ce:	f000 f82d 	bl	800292c <_fstat>
 80028d2:	1c43      	adds	r3, r0, #1
 80028d4:	d000      	beq.n	80028d8 <_fstat_r+0x1c>
 80028d6:	bd70      	pop	{r4, r5, r6, pc}
 80028d8:	682b      	ldr	r3, [r5, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0fb      	beq.n	80028d6 <_fstat_r+0x1a>
 80028de:	6023      	str	r3, [r4, #0]
 80028e0:	bd70      	pop	{r4, r5, r6, pc}
 80028e2:	bf00      	nop
 80028e4:	200002f4 	.word	0x200002f4

080028e8 <_isatty_r>:
 80028e8:	b538      	push	{r3, r4, r5, lr}
 80028ea:	4d07      	ldr	r5, [pc, #28]	@ (8002908 <_isatty_r+0x20>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	4604      	mov	r4, r0
 80028f0:	4608      	mov	r0, r1
 80028f2:	602a      	str	r2, [r5, #0]
 80028f4:	f000 f832 	bl	800295c <_isatty>
 80028f8:	1c43      	adds	r3, r0, #1
 80028fa:	d000      	beq.n	80028fe <_isatty_r+0x16>
 80028fc:	bd38      	pop	{r3, r4, r5, pc}
 80028fe:	682b      	ldr	r3, [r5, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0fb      	beq.n	80028fc <_isatty_r+0x14>
 8002904:	6023      	str	r3, [r4, #0]
 8002906:	bd38      	pop	{r3, r4, r5, pc}
 8002908:	200002f4 	.word	0x200002f4

0800290c <_malloc_usable_size_r>:
 800290c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002910:	1f18      	subs	r0, r3, #4
 8002912:	2b00      	cmp	r3, #0
 8002914:	bfbc      	itt	lt
 8002916:	580b      	ldrlt	r3, [r1, r0]
 8002918:	18c0      	addlt	r0, r0, r3
 800291a:	4770      	bx	lr

0800291c <_close>:
 800291c:	4b02      	ldr	r3, [pc, #8]	@ (8002928 <_close+0xc>)
 800291e:	2258      	movs	r2, #88	@ 0x58
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	f04f 30ff 	mov.w	r0, #4294967295
 8002926:	4770      	bx	lr
 8002928:	200002f4 	.word	0x200002f4

0800292c <_fstat>:
 800292c:	4b02      	ldr	r3, [pc, #8]	@ (8002938 <_fstat+0xc>)
 800292e:	2258      	movs	r2, #88	@ 0x58
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	f04f 30ff 	mov.w	r0, #4294967295
 8002936:	4770      	bx	lr
 8002938:	200002f4 	.word	0x200002f4

0800293c <_getpid>:
 800293c:	4b02      	ldr	r3, [pc, #8]	@ (8002948 <_getpid+0xc>)
 800293e:	2258      	movs	r2, #88	@ 0x58
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	f04f 30ff 	mov.w	r0, #4294967295
 8002946:	4770      	bx	lr
 8002948:	200002f4 	.word	0x200002f4

0800294c <_gettimeofday>:
 800294c:	4b02      	ldr	r3, [pc, #8]	@ (8002958 <_gettimeofday+0xc>)
 800294e:	2258      	movs	r2, #88	@ 0x58
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	f04f 30ff 	mov.w	r0, #4294967295
 8002956:	4770      	bx	lr
 8002958:	200002f4 	.word	0x200002f4

0800295c <_isatty>:
 800295c:	4b02      	ldr	r3, [pc, #8]	@ (8002968 <_isatty+0xc>)
 800295e:	2258      	movs	r2, #88	@ 0x58
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	2000      	movs	r0, #0
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	200002f4 	.word	0x200002f4

0800296c <_kill>:
 800296c:	4b02      	ldr	r3, [pc, #8]	@ (8002978 <_kill+0xc>)
 800296e:	2258      	movs	r2, #88	@ 0x58
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	f04f 30ff 	mov.w	r0, #4294967295
 8002976:	4770      	bx	lr
 8002978:	200002f4 	.word	0x200002f4

0800297c <_lseek>:
 800297c:	4b02      	ldr	r3, [pc, #8]	@ (8002988 <_lseek+0xc>)
 800297e:	2258      	movs	r2, #88	@ 0x58
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	f04f 30ff 	mov.w	r0, #4294967295
 8002986:	4770      	bx	lr
 8002988:	200002f4 	.word	0x200002f4

0800298c <_read>:
 800298c:	4b02      	ldr	r3, [pc, #8]	@ (8002998 <_read+0xc>)
 800298e:	2258      	movs	r2, #88	@ 0x58
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	f04f 30ff 	mov.w	r0, #4294967295
 8002996:	4770      	bx	lr
 8002998:	200002f4 	.word	0x200002f4

0800299c <_write>:
 800299c:	4b02      	ldr	r3, [pc, #8]	@ (80029a8 <_write+0xc>)
 800299e:	2258      	movs	r2, #88	@ 0x58
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	f04f 30ff 	mov.w	r0, #4294967295
 80029a6:	4770      	bx	lr
 80029a8:	200002f4 	.word	0x200002f4

080029ac <_exit>:
 80029ac:	e7fe      	b.n	80029ac <_exit>
 80029ae:	bf00      	nop

080029b0 <__do_global_dtors_aux>:
 80029b0:	b510      	push	{r4, lr}
 80029b2:	4c05      	ldr	r4, [pc, #20]	@ (80029c8 <__do_global_dtors_aux+0x18>)
 80029b4:	7823      	ldrb	r3, [r4, #0]
 80029b6:	b933      	cbnz	r3, 80029c6 <__do_global_dtors_aux+0x16>
 80029b8:	4b04      	ldr	r3, [pc, #16]	@ (80029cc <__do_global_dtors_aux+0x1c>)
 80029ba:	b113      	cbz	r3, 80029c2 <__do_global_dtors_aux+0x12>
 80029bc:	4804      	ldr	r0, [pc, #16]	@ (80029d0 <__do_global_dtors_aux+0x20>)
 80029be:	f3af 8000 	nop.w
 80029c2:	2301      	movs	r3, #1
 80029c4:	7023      	strb	r3, [r4, #0]
 80029c6:	bd10      	pop	{r4, pc}
 80029c8:	20000315 	.word	0x20000315
 80029cc:	00000000 	.word	0x00000000
 80029d0:	08003ce0 	.word	0x08003ce0

080029d4 <frame_dummy>:
 80029d4:	b508      	push	{r3, lr}
 80029d6:	4b03      	ldr	r3, [pc, #12]	@ (80029e4 <frame_dummy+0x10>)
 80029d8:	b11b      	cbz	r3, 80029e2 <frame_dummy+0xe>
 80029da:	4903      	ldr	r1, [pc, #12]	@ (80029e8 <frame_dummy+0x14>)
 80029dc:	4803      	ldr	r0, [pc, #12]	@ (80029ec <frame_dummy+0x18>)
 80029de:	f3af 8000 	nop.w
 80029e2:	bd08      	pop	{r3, pc}
 80029e4:	00000000 	.word	0x00000000
 80029e8:	20000318 	.word	0x20000318
 80029ec:	08003ce0 	.word	0x08003ce0

080029f0 <handle>:
/// This function will handle the 'p' command send from the capture board.
/// It returns the squared version of the scmd given.
/// It does this in approximately equal time, which allows us to see clear
/// differences between different scmd values.
uint8_t handle(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 80029f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  int return_string_len =  ((arr[1] + 1) * arr[0]) + 1;
  char string[return_string_len];

  // expects an input of byte lenght, of number neurons in first layer#
  for(int x = 0; x < arr[0]; x++){
      net->layers[0].neurons[x].a = (int8_t)(buf[x]);
 80029f2:	4d31      	ldr	r5, [pc, #196]	@ (8002ab8 <handle+0xc8>)
{
 80029f4:	460c      	mov	r4, r1
      net->layers[0].neurons[x].a = (int8_t)(buf[x]);
 80029f6:	6829      	ldr	r1, [r5, #0]
 80029f8:	6849      	ldr	r1, [r1, #4]
{
 80029fa:	b089      	sub	sp, #36	@ 0x24
  volatile uint8_t result = 0;
 80029fc:	2200      	movs	r2, #0
 80029fe:	6849      	ldr	r1, [r1, #4]
 8002a00:	f88d 2007 	strb.w	r2, [sp, #7]
  for(int x = 0; x < arr[0]; x++){
 8002a04:	1e5a      	subs	r2, r3, #1
 8002a06:	3306      	adds	r3, #6
      net->layers[0].neurons[x].a = (int8_t)(buf[x]);
 8002a08:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8002a0c:	7248      	strb	r0, [r1, #9]
  for(int x = 0; x < arr[0]; x++){
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	f101 010c 	add.w	r1, r1, #12
 8002a14:	d1f8      	bne.n	8002a08 <handle+0x18>
  }
  // char string[] = "Hello";
  for(int x = 0; x < arr[1]; x++){ // Crossing first layer (not input layer)
      for(int y = 0;y<arr[0];y++){ // Choose each neuron from input layer, and save it's weight, and set weight of first weight to (x+1) * 10, in essence this is only for basic testing, and essentialy it sends back S1,S2,S3,S4,S5...0 where SX is weight of input X-th connection, of x-th neuron   
          if(y == 0){
              net->layers[0].neurons[y].weights[x] = (uint8_t)((x+1) * 10);
 8002a16:	682b      	ldr	r3, [r5, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	a902      	add	r1, sp, #8
 8002a20:	220a      	movs	r2, #10
 8002a22:	701a      	strb	r2, [r3, #0]
 8002a24:	460f      	mov	r7, r1
      for(int y = 0;y<arr[0];y++){ // Choose each neuron from input layer, and save it's weight, and set weight of first weight to (x+1) * 10, in essence this is only for basic testing, and essentialy it sends back S1,S2,S3,S4,S5...0 where SX is weight of input X-th connection, of x-th neuron   
 8002a26:	2300      	movs	r3, #0
          }
          string[(x*(arr[0]+1)) + y] = net->layers[0].neurons[y].weights[x];
 8002a28:	260c      	movs	r6, #12
 8002a2a:	682a      	ldr	r2, [r5, #0]
 8002a2c:	6850      	ldr	r0, [r2, #4]
 8002a2e:	6840      	ldr	r0, [r0, #4]
 8002a30:	fb06 0003 	mla	r0, r6, r3, r0
      for(int y = 0;y<arr[0];y++){ // Choose each neuron from input layer, and save it's weight, and set weight of first weight to (x+1) * 10, in essence this is only for basic testing, and essentialy it sends back S1,S2,S3,S4,S5...0 where SX is weight of input X-th connection, of x-th neuron   
 8002a34:	3301      	adds	r3, #1
          string[(x*(arr[0]+1)) + y] = net->layers[0].neurons[y].weights[x];
 8002a36:	6840      	ldr	r0, [r0, #4]
      for(int y = 0;y<arr[0];y++){ // Choose each neuron from input layer, and save it's weight, and set weight of first weight to (x+1) * 10, in essence this is only for basic testing, and essentialy it sends back S1,S2,S3,S4,S5...0 where SX is weight of input X-th connection, of x-th neuron   
 8002a38:	2b07      	cmp	r3, #7
          string[(x*(arr[0]+1)) + y] = net->layers[0].neurons[y].weights[x];
 8002a3a:	7800      	ldrb	r0, [r0, #0]
 8002a3c:	f801 0b01 	strb.w	r0, [r1], #1
      for(int y = 0;y<arr[0];y++){ // Choose each neuron from input layer, and save it's weight, and set weight of first weight to (x+1) * 10, in essence this is only for basic testing, and essentialy it sends back S1,S2,S3,S4,S5...0 where SX is weight of input X-th connection, of x-th neuron   
 8002a40:	d1f3      	bne.n	8002a2a <handle+0x3a>
      }
      string[(x*(arr[0]+1)) + arr[0]] = net->layers[0].neurons[x].bias;
 8002a42:	6853      	ldr	r3, [r2, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	7a1b      	ldrb	r3, [r3, #8]
 8002a48:	f88d 300f 	strb.w	r3, [sp, #15]
              net->layers[0].neurons[y].weights[x] = (uint8_t)((x+1) * 10);
 8002a4c:	6853      	ldr	r3, [r2, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2214      	movs	r2, #20
 8002a54:	705a      	strb	r2, [r3, #1]
 8002a56:	a804      	add	r0, sp, #16
      for(int y = 0;y<arr[0];y++){ // Choose each neuron from input layer, and save it's weight, and set weight of first weight to (x+1) * 10, in essence this is only for basic testing, and essentialy it sends back S1,S2,S3,S4,S5...0 where SX is weight of input X-th connection, of x-th neuron   
 8002a58:	2300      	movs	r3, #0
          string[(x*(arr[0]+1)) + y] = net->layers[0].neurons[y].weights[x];
 8002a5a:	260c      	movs	r6, #12
 8002a5c:	6829      	ldr	r1, [r5, #0]
 8002a5e:	684a      	ldr	r2, [r1, #4]
 8002a60:	6852      	ldr	r2, [r2, #4]
 8002a62:	fb06 2203 	mla	r2, r6, r3, r2
      for(int y = 0;y<arr[0];y++){ // Choose each neuron from input layer, and save it's weight, and set weight of first weight to (x+1) * 10, in essence this is only for basic testing, and essentialy it sends back S1,S2,S3,S4,S5...0 where SX is weight of input X-th connection, of x-th neuron   
 8002a66:	3301      	adds	r3, #1
          string[(x*(arr[0]+1)) + y] = net->layers[0].neurons[y].weights[x];
 8002a68:	6852      	ldr	r2, [r2, #4]
      for(int y = 0;y<arr[0];y++){ // Choose each neuron from input layer, and save it's weight, and set weight of first weight to (x+1) * 10, in essence this is only for basic testing, and essentialy it sends back S1,S2,S3,S4,S5...0 where SX is weight of input X-th connection, of x-th neuron   
 8002a6a:	2b07      	cmp	r3, #7
          string[(x*(arr[0]+1)) + y] = net->layers[0].neurons[y].weights[x];
 8002a6c:	7852      	ldrb	r2, [r2, #1]
 8002a6e:	f800 2b01 	strb.w	r2, [r0], #1
      for(int y = 0;y<arr[0];y++){ // Choose each neuron from input layer, and save it's weight, and set weight of first weight to (x+1) * 10, in essence this is only for basic testing, and essentialy it sends back S1,S2,S3,S4,S5...0 where SX is weight of input X-th connection, of x-th neuron   
 8002a72:	d1f3      	bne.n	8002a5c <handle+0x6c>
      string[(x*(arr[0]+1)) + arr[0]] = net->layers[0].neurons[x].bias;
 8002a74:	684b      	ldr	r3, [r1, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
  }
  string[return_string_len - 1] = 0;
 8002a78:	2600      	movs	r6, #0
      string[(x*(arr[0]+1)) + arr[0]] = net->layers[0].neurons[x].bias;
 8002a7a:	7d1b      	ldrb	r3, [r3, #20]
 8002a7c:	f88d 3017 	strb.w	r3, [sp, #23]
  string[return_string_len - 1] = 0;
 8002a80:	f88d 601d 	strb.w	r6, [sp, #29]


  // Start measurement.
  trigger_high();
 8002a84:	f000 fad2 	bl	800302c <trigger_high>

  forward(*net,0);
 8002a88:	682b      	ldr	r3, [r5, #0]

  // Stop measurement.
  trigger_low();

  // For now we can just return the result back to the user.
  result = scmd*scmd;
 8002a8a:	fb14 f404 	smulbb	r4, r4, r4
  forward(*net,0);
 8002a8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002a92:	4632      	mov	r2, r6
  result = scmd*scmd;
 8002a94:	b2e4      	uxtb	r4, r4
  forward(*net,0);
 8002a96:	f000 f8a7 	bl	8002be8 <forward>
  trigger_low();
 8002a9a:	f000 face 	bl	800303a <trigger_low>
  result = scmd*scmd;
 8002a9e:	f88d 4007 	strb.w	r4, [sp, #7]
  uint8_t buff[1] = { result };
  uint8_t return_len = return_string_len;
  simpleserial_put('r', return_len, string);
 8002aa2:	463a      	mov	r2, r7
 8002aa4:	2116      	movs	r1, #22
 8002aa6:	2072      	movs	r0, #114	@ 0x72
  uint8_t buff[1] = { result };
 8002aa8:	f89d 3007 	ldrb.w	r3, [sp, #7]
  simpleserial_put('r', return_len, string);
 8002aac:	f000 f958 	bl	8002d60 <simpleserial_put>

  return 0;
}
 8002ab0:	4630      	mov	r0, r6
 8002ab2:	b009      	add	sp, #36	@ 0x24
 8002ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	2000006c 	.word	0x2000006c

08002abc <main>:

int main(void) {
 8002abc:	b507      	push	{r0, r1, r2, lr}
    // Setup the specific chipset.
  platform_init();
 8002abe:	f000 fa13 	bl	8002ee8 <platform_init>
  // Setup serial communication line.
  init_uart();
 8002ac2:	f000 fa51 	bl	8002f68 <init_uart>
  // Setup measurement trigger.
  trigger_setup();
 8002ac6:	f000 fa8d 	bl	8002fe4 <trigger_setup>

  simpleserial_init();
 8002aca:	f000 f937 	bl	8002d3c <simpleserial_init>

  // Insert your handlers here.
  simpleserial_addcmd('p', 16, handle);
 8002ace:	4a0a      	ldr	r2, [pc, #40]	@ (8002af8 <main+0x3c>)
 8002ad0:	2110      	movs	r1, #16
 8002ad2:	2070      	movs	r0, #112	@ 0x70
 8002ad4:	f000 f918 	bl	8002d08 <simpleserial_addcmd>

  arr[0] = 7;
 8002ad8:	4a08      	ldr	r2, [pc, #32]	@ (8002afc <main+0x40>)
  arr[1] = 2;
 8002ada:	2302      	movs	r3, #2
 8002adc:	2107      	movs	r1, #7
 8002ade:	e9c2 1300 	strd	r1, r3, [r2]
  arr[2] = 2;
  network ann = construct_quantized_network2(3,arr);
 8002ae2:	4668      	mov	r0, sp
 8002ae4:	2103      	movs	r1, #3
  arr[2] = 2;
 8002ae6:	6093      	str	r3, [r2, #8]
  network ann = construct_quantized_network2(3,arr);
 8002ae8:	f000 f833 	bl	8002b52 <construct_quantized_network2>
  net = &ann;
 8002aec:	4b04      	ldr	r3, [pc, #16]	@ (8002b00 <main+0x44>)
 8002aee:	f8c3 d000 	str.w	sp, [r3]
  // What for the capture board to send commands and handle them.
  while (1)
    simpleserial_get();
 8002af2:	f000 f98d 	bl	8002e10 <simpleserial_get>
  while (1)
 8002af6:	e7fc      	b.n	8002af2 <main+0x36>
 8002af8:	080029f1 	.word	0x080029f1
 8002afc:	20000000 	.word	0x20000000
 8002b00:	2000006c 	.word	0x2000006c

08002b04 <quantized_create_neuron>:

//Generating ANN functions
/**
 * Create quantized neuron (weights, biases and activation functions), while also filling random values to it's weight for NEXT LAYER connections
 */
neuron quantized_create_neuron(int num_out_weights){
 8002b04:	b570      	push	{r4, r5, r6, lr}
 8002b06:	4604      	mov	r4, r0
    neuron new_neuron;
    new_neuron.bias = 0;
    new_neuron.a = 0;
    new_neuron.weights = (uint8_t*) malloc(num_out_weights * sizeof(uint8_t));
 8002b08:	4608      	mov	r0, r1
neuron quantized_create_neuron(int num_out_weights){
 8002b0a:	460d      	mov	r5, r1
    new_neuron.weights = (uint8_t*) malloc(num_out_weights * sizeof(uint8_t));
 8002b0c:	f7fe f80a 	bl	8000b24 <malloc>
    new_neuron.num_weights = num_out_weights;

    for (int i=0; i<num_out_weights; i++){
        //new_neuron.weights[i] = (uint8_t)(rand() / (RAND_MAX / ( QUANTIZED_MAX - QUANTIZED_MIN + 2)));
        //new_neuron.weights[i] = (uint8_t)(rand() % 256);
        new_neuron.weights[i] = 0;
 8002b10:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
 8002b14:	2100      	movs	r1, #0
    new_neuron.weights = (uint8_t*) malloc(num_out_weights * sizeof(uint8_t));
 8002b16:	4606      	mov	r6, r0
        new_neuron.weights[i] = 0;
 8002b18:	f7fe fb14 	bl	8001144 <memset>
    }
    return new_neuron;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	8123      	strh	r3, [r4, #8]
 8002b20:	e9c4 5600 	strd	r5, r6, [r4]
}
 8002b24:	4620      	mov	r0, r4
 8002b26:	bd70      	pop	{r4, r5, r6, pc}

08002b28 <create_layer>:
/**
 * Create layer, containing all neccesary nerons
 */
layer create_layer(int num_neurons){
 8002b28:	b538      	push	{r3, r4, r5, lr}
 8002b2a:	4604      	mov	r4, r0
    layer lay;
    lay.num_neurons = num_neurons;
    lay.neurons = (neuron*) malloc(num_neurons * sizeof(neuron));
 8002b2c:	200c      	movs	r0, #12
 8002b2e:	4348      	muls	r0, r1
layer create_layer(int num_neurons){
 8002b30:	460d      	mov	r5, r1
    lay.neurons = (neuron*) malloc(num_neurons * sizeof(neuron));
 8002b32:	f7fd fff7 	bl	8000b24 <malloc>
    return lay;
 8002b36:	e9c4 5000 	strd	r5, r0, [r4]
}
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	bd38      	pop	{r3, r4, r5, pc}

08002b3e <create_network>:
/**
 * Create whole network, containing all neccesary layers
 */
network create_network(int num_layers){
 8002b3e:	b538      	push	{r3, r4, r5, lr}
 8002b40:	4604      	mov	r4, r0
    network net;
    net.num_layers = num_layers;
    net.layers = (layer*) malloc(num_layers * sizeof(layer));
 8002b42:	00c8      	lsls	r0, r1, #3
network create_network(int num_layers){
 8002b44:	460d      	mov	r5, r1
    net.layers = (layer*) malloc(num_layers * sizeof(layer));
 8002b46:	f7fd ffed 	bl	8000b24 <malloc>
    return net;
 8002b4a:	e9c4 5000 	strd	r5, r0, [r4]
}
 8002b4e:	4620      	mov	r0, r4
 8002b50:	bd38      	pop	{r3, r4, r5, pc}

08002b52 <construct_quantized_network2>:
/**
 * Initialize/allocate whole network
 */
network construct_quantized_network2(int num_layers, int *num_neurons) {
 8002b52:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b56:	4607      	mov	r7, r0
    srand(time(NULL)); 
 8002b58:	2000      	movs	r0, #0
network construct_quantized_network2(int num_layers, int *num_neurons) {
 8002b5a:	4690      	mov	r8, r2
 8002b5c:	460c      	mov	r4, r1
    srand(time(NULL)); 
 8002b5e:	f7fe fb43 	bl	80011e8 <time>
 8002b62:	f7fe f89b 	bl	8000c9c <srand>
    network net = create_network(num_layers);
 8002b66:	4621      	mov	r1, r4
 8002b68:	4638      	mov	r0, r7
 8002b6a:	f7ff ffe8 	bl	8002b3e <create_network>
 8002b6e:	687d      	ldr	r5, [r7, #4]
    int i, j;
    for (i=0; i<num_layers; i++){
 8002b70:	2600      	movs	r6, #0
 8002b72:	42a6      	cmp	r6, r4
 8002b74:	db13      	blt.n	8002b9e <construct_quantized_network2+0x4c>
        net.layers[i] = create_layer(num_neurons[i]);
    }
    // For each layer create neurons with number of weights eqaual to the number of neurons in the following layer,
    // wherein the last layer is the output layer
    for (i=1; i<num_layers; i++){
 8002b76:	2601      	movs	r6, #1
        for (j=0; j<net.layers[i - 1].num_neurons; j++){
 8002b78:	f1a5 0908 	sub.w	r9, r5, #8
            net.layers[i - 1].neurons[j] = quantized_create_neuron(net.layers[i].num_neurons);
 8002b7c:	f1a5 0a04 	sub.w	sl, r5, #4
    for (i=1; i<num_layers; i++){
 8002b80:	42a6      	cmp	r6, r4
 8002b82:	db24      	blt.n	8002bce <construct_quantized_network2+0x7c>
        }
    }
    for (j=0; j<net.layers[num_layers - 1].num_neurons; j++){// Create neurons for output layer, it's weight should be 0, as they connect to nothing
 8002b84:	f104 5400 	add.w	r4, r4, #536870912	@ 0x20000000
 8002b88:	3c01      	subs	r4, #1
 8002b8a:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
            net.layers[num_layers - 1].neurons[j] = quantized_create_neuron(0);
 8002b8e:	260c      	movs	r6, #12
    for (j=0; j<net.layers[num_layers - 1].num_neurons; j++){// Create neurons for output layer, it's weight should be 0, as they connect to nothing
 8002b90:	2400      	movs	r4, #0
 8002b92:	682b      	ldr	r3, [r5, #0]
 8002b94:	42a3      	cmp	r3, r4
 8002b96:	dc1f      	bgt.n	8002bd8 <construct_quantized_network2+0x86>
    }
    return net;
}
 8002b98:	4638      	mov	r0, r7
 8002b9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        net.layers[i] = create_layer(num_neurons[i]);
 8002b9e:	f858 1026 	ldr.w	r1, [r8, r6, lsl #2]
 8002ba2:	eb05 00c6 	add.w	r0, r5, r6, lsl #3
 8002ba6:	f7ff ffbf 	bl	8002b28 <create_layer>
    for (i=0; i<num_layers; i++){
 8002baa:	3601      	adds	r6, #1
 8002bac:	e7e1      	b.n	8002b72 <construct_quantized_network2+0x20>
            net.layers[i - 1].neurons[j] = quantized_create_neuron(net.layers[i].num_neurons);
 8002bae:	f85a 0036 	ldr.w	r0, [sl, r6, lsl #3]
 8002bb2:	f855 1036 	ldr.w	r1, [r5, r6, lsl #3]
 8002bb6:	fb0b 0008 	mla	r0, fp, r8, r0
 8002bba:	f7ff ffa3 	bl	8002b04 <quantized_create_neuron>
        for (j=0; j<net.layers[i - 1].num_neurons; j++){
 8002bbe:	f108 0801 	add.w	r8, r8, #1
 8002bc2:	f859 3036 	ldr.w	r3, [r9, r6, lsl #3]
 8002bc6:	4543      	cmp	r3, r8
 8002bc8:	dcf1      	bgt.n	8002bae <construct_quantized_network2+0x5c>
    for (i=1; i<num_layers; i++){
 8002bca:	3601      	adds	r6, #1
 8002bcc:	e7d8      	b.n	8002b80 <construct_quantized_network2+0x2e>
        for (j=0; j<net.layers[i - 1].num_neurons; j++){
 8002bce:	f04f 0800 	mov.w	r8, #0
            net.layers[i - 1].neurons[j] = quantized_create_neuron(net.layers[i].num_neurons);
 8002bd2:	f04f 0b0c 	mov.w	fp, #12
 8002bd6:	e7f4      	b.n	8002bc2 <construct_quantized_network2+0x70>
            net.layers[num_layers - 1].neurons[j] = quantized_create_neuron(0);
 8002bd8:	6868      	ldr	r0, [r5, #4]
 8002bda:	2100      	movs	r1, #0
 8002bdc:	fb06 0004 	mla	r0, r6, r4, r0
 8002be0:	f7ff ff90 	bl	8002b04 <quantized_create_neuron>
    for (j=0; j<net.layers[num_layers - 1].num_neurons; j++){// Create neurons for output layer, it's weight should be 0, as they connect to nothing
 8002be4:	3401      	adds	r4, #1
 8002be6:	e7d4      	b.n	8002b92 <construct_quantized_network2+0x40>

08002be8 <forward>:
        free(&(net.layers[i].neurons));
    }
    free(&(net.layers));
}

void forward(network net, int dummy_operations){
 8002be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bec:	b085      	sub	sp, #20
 8002bee:	466b      	mov	r3, sp
 8002bf0:	e883 0003 	stmia.w	r3, {r0, r1}
 8002bf4:	4690      	mov	r8, r2
 8002bf6:	4683      	mov	fp, r0
    int i, j, k;
    uint8_t result, scmd = 16;
    // for each layer
    for (i=1; i<net.num_layers; i++){
 8002bf8:	460c      	mov	r4, r1
 8002bfa:	2601      	movs	r6, #1
        
        // for each neuron in this layer
        for (j=0; j<net.layers[i].num_neurons; j++){   
            uint32_t z = net.layers[i].neurons[j].bias;
 8002bfc:	f04f 0a0c 	mov.w	sl, #12
                }
            }
            //apply sigmoid to the last layer
            else{ // if we are at last layer, apply sigmoid AF to all it's neurons results
                // Sigmoid for the output layer
                float sigmoid = 1.0f / (1.0f + expf(-z));
 8002c00:	f04f 597e 	mov.w	r9, #1065353216	@ 0x3f800000
    for (i=1; i<net.num_layers; i++){
 8002c04:	455e      	cmp	r6, fp
 8002c06:	db3c      	blt.n	8002c82 <forward+0x9a>
                result = scmd *scmd;
                result = scmd *scmd;
            }
        }
    }
}
 8002c08:	b005      	add	sp, #20
 8002c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            uint32_t z = net.layers[i].neurons[j].bias;
 8002c0e:	68e7      	ldr	r7, [r4, #12]
            for (k=0; k<net.layers[i - 1].num_neurons; k++){
 8002c10:	6823      	ldr	r3, [r4, #0]
            uint32_t z = net.layers[i].neurons[j].bias;
 8002c12:	fb0a 7705 	mla	r7, sl, r5, r7
            for (k=0; k<net.layers[i - 1].num_neurons; k++){
 8002c16:	f04f 0c00 	mov.w	ip, #0
            uint32_t z = net.layers[i].neurons[j].bias;
 8002c1a:	7a38      	ldrb	r0, [r7, #8]
            for (k=0; k<net.layers[i - 1].num_neurons; k++){
 8002c1c:	4563      	cmp	r3, ip
 8002c1e:	dc11      	bgt.n	8002c44 <forward+0x5c>
            if(i < net.num_layers-1){ // if we are at last layer use relu AF (this should be to classification MLP)
 8002c20:	f10b 32ff 	add.w	r2, fp, #4294967295
 8002c24:	42b2      	cmp	r2, r6
 8002c26:	dd18      	ble.n	8002c5a <forward+0x72>
                if(((uint8_t)(z)) > QUANTIZED_POS_MAX){// if the intermediate value is under the treshold (0), set final value of actiovation to 0
 8002c28:	0603      	lsls	r3, r0, #24
 8002c2a:	d428      	bmi.n	8002c7e <forward+0x96>
                net.layers[i].neurons[j].a = (uint8_t)(sigmoid * 127); // Scale to fit in int8_t range
 8002c2c:	b2c0      	uxtb	r0, r0
                    net.layers[i].neurons[j].a = (uint8_t)(z);
 8002c2e:	7278      	strb	r0, [r7, #9]
        for (j=0; j<net.layers[i].num_neurons; j++){   
 8002c30:	3501      	adds	r5, #1
 8002c32:	68a2      	ldr	r2, [r4, #8]
 8002c34:	42aa      	cmp	r2, r5
 8002c36:	dcea      	bgt.n	8002c0e <forward+0x26>
        if (dummy_operations > 0){ // Dummy opetaions to confuse attacker, it is aplied only, and only if expresly allowed
 8002c38:	f1b8 0f00 	cmp.w	r8, #0
 8002c3c:	dc23      	bgt.n	8002c86 <forward+0x9e>
    for (i=1; i<net.num_layers; i++){
 8002c3e:	3601      	adds	r6, #1
 8002c40:	3408      	adds	r4, #8
 8002c42:	e7df      	b.n	8002c04 <forward+0x1c>
                uint32_t mult = (uint32_t)(net.layers[i-1].neurons[k].weights[j]) * (uint32_t)(net.layers[i-1].neurons[k].a);
 8002c44:	6862      	ldr	r2, [r4, #4]
 8002c46:	fb0a 220c 	mla	r2, sl, ip, r2
            for (k=0; k<net.layers[i - 1].num_neurons; k++){
 8002c4a:	f10c 0c01 	add.w	ip, ip, #1
                uint32_t mult = (uint32_t)(net.layers[i-1].neurons[k].weights[j]) * (uint32_t)(net.layers[i-1].neurons[k].a);
 8002c4e:	6851      	ldr	r1, [r2, #4]
 8002c50:	7a52      	ldrb	r2, [r2, #9]
 8002c52:	5d49      	ldrb	r1, [r1, r5]
                z += mult; // We are looking for THIS MULTIPLICATION
 8002c54:	fb01 0002 	mla	r0, r1, r2, r0
            for (k=0; k<net.layers[i - 1].num_neurons; k++){
 8002c58:	e7e0      	b.n	8002c1c <forward+0x34>
                float sigmoid = 1.0f / (1.0f + expf(-z));
 8002c5a:	4240      	negs	r0, r0
 8002c5c:	f7fd fce8 	bl	8000630 <__aeabi_ui2f>
 8002c60:	f7fd fa96 	bl	8000190 <expf>
 8002c64:	4649      	mov	r1, r9
 8002c66:	f7fd fc33 	bl	80004d0 <__addsf3>
 8002c6a:	4601      	mov	r1, r0
 8002c6c:	4648      	mov	r0, r9
 8002c6e:	f7fd fdeb 	bl	8000848 <__aeabi_fdiv>
                net.layers[i].neurons[j].a = (uint8_t)(sigmoid * 127); // Scale to fit in int8_t range
 8002c72:	4909      	ldr	r1, [pc, #36]	@ (8002c98 <forward+0xb0>)
 8002c74:	f7fd fd34 	bl	80006e0 <__aeabi_fmul>
 8002c78:	f7fd ff34 	bl	8000ae4 <__aeabi_f2uiz>
 8002c7c:	e7d6      	b.n	8002c2c <forward+0x44>
 8002c7e:	2000      	movs	r0, #0
 8002c80:	e7d5      	b.n	8002c2e <forward+0x46>
        for (j=0; j<net.layers[i].num_neurons; j++){   
 8002c82:	2500      	movs	r5, #0
 8002c84:	e7d5      	b.n	8002c32 <forward+0x4a>
            for (volatile int dummy_i = 0; dummy_i<10; dummy_i++) {
 8002c86:	2200      	movs	r2, #0
 8002c88:	9203      	str	r2, [sp, #12]
 8002c8a:	9a03      	ldr	r2, [sp, #12]
 8002c8c:	2a09      	cmp	r2, #9
 8002c8e:	dcd6      	bgt.n	8002c3e <forward+0x56>
 8002c90:	9a03      	ldr	r2, [sp, #12]
 8002c92:	3201      	adds	r2, #1
 8002c94:	e7f8      	b.n	8002c88 <forward+0xa0>
 8002c96:	bf00      	nop
 8002c98:	42fe0000 	.word	0x42fe0000

08002c9c <ss_crc>:


// 0xA6 formerly 
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 8002c9c:	b510      	push	{r4, lr}
 8002c9e:	4602      	mov	r2, r0
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 8002ca0:	4401      	add	r1, r0
	uint8_t crc = 0x00;
 8002ca2:	2000      	movs	r0, #0
	while (len--) {
 8002ca4:	428a      	cmp	r2, r1
 8002ca6:	d100      	bne.n	8002caa <ss_crc+0xe>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
		}
	}
	return crc;

}
 8002ca8:	bd10      	pop	{r4, pc}
		crc ^= *buf++;
 8002caa:	f812 3b01 	ldrb.w	r3, [r2], #1
 8002cae:	2408      	movs	r4, #8
 8002cb0:	4058      	eors	r0, r3
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8002cb2:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8002cb6:	ea4f 0340 	mov.w	r3, r0, lsl #1
 8002cba:	bf18      	it	ne
 8002cbc:	f083 034d 	eorne.w	r3, r3, #77	@ 0x4d
		for (k = 0; k < 8; k++) {
 8002cc0:	3c01      	subs	r4, #1
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8002cc2:	b2d8      	uxtb	r0, r3
		for (k = 0; k < 8; k++) {
 8002cc4:	d1f5      	bne.n	8002cb2 <ss_crc+0x16>
 8002cc6:	e7ed      	b.n	8002ca4 <ss_crc+0x8>

08002cc8 <stuff_data>:
    return 0x00;

}

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
 8002cc8:	b530      	push	{r4, r5, lr}
	uint8_t i = 1;
	uint8_t last = 0;
 8002cca:	2200      	movs	r2, #0
 8002ccc:	4604      	mov	r4, r0
	uint8_t i = 1;
 8002cce:	2301      	movs	r3, #1
	for (; i < len; i++) {
 8002cd0:	428b      	cmp	r3, r1
 8002cd2:	d301      	bcc.n	8002cd8 <stuff_data+0x10>
			buf[last] = i - last;
			last = i;
		}
	}
	return 0x00;
}
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	bd30      	pop	{r4, r5, pc}
		if (buf[i] == FRAME_BYTE) {
 8002cd8:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8002cdc:	b915      	cbnz	r5, 8002ce4 <stuff_data+0x1c>
			buf[last] = i - last;
 8002cde:	1a9d      	subs	r5, r3, r2
 8002ce0:	5485      	strb	r5, [r0, r2]
 8002ce2:	461a      	mov	r2, r3
	for (; i < len; i++) {
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	e7f2      	b.n	8002cd0 <stuff_data+0x8>

08002cea <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 8002cea:	b530      	push	{r4, r5, lr}
	uint8_t next = buf[0];
 8002cec:	7804      	ldrb	r4, [r0, #0]
	buf[0] = 0x00;
 8002cee:	2500      	movs	r5, #0
{
 8002cf0:	4602      	mov	r2, r0
	buf[0] = 0x00;
 8002cf2:	7005      	strb	r5, [r0, #0]
	uint8_t next = buf[0];
 8002cf4:	4620      	mov	r0, r4
	//len -= 1;
	uint8_t tmp = next;
	while ((next < len) && tmp != 0) {
 8002cf6:	4288      	cmp	r0, r1
 8002cf8:	d200      	bcs.n	8002cfc <unstuff_data+0x12>
 8002cfa:	b904      	cbnz	r4, 8002cfe <unstuff_data+0x14>
		tmp = buf[next];
		buf[next] = FRAME_BYTE;
		next += tmp;
	}
	return next;
}
 8002cfc:	bd30      	pop	{r4, r5, pc}
		tmp = buf[next];
 8002cfe:	5c14      	ldrb	r4, [r2, r0]
		buf[next] = FRAME_BYTE;
 8002d00:	5415      	strb	r5, [r2, r0]
		next += tmp;
 8002d02:	1903      	adds	r3, r0, r4
 8002d04:	b2d8      	uxtb	r0, r3
 8002d06:	e7f6      	b.n	8002cf6 <unstuff_data+0xc>

08002d08 <simpleserial_addcmd>:
	simpleserial_addcmd('v', 0, check_version);
    simpleserial_addcmd('w', 0, ss_get_commands);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 8002d08:	b538      	push	{r3, r4, r5, lr}
	if(num_commands >= MAX_SS_CMDS) {
 8002d0a:	4d0b      	ldr	r5, [pc, #44]	@ (8002d38 <simpleserial_addcmd+0x30>)
 8002d0c:	682b      	ldr	r3, [r5, #0]
 8002d0e:	2b0f      	cmp	r3, #15
 8002d10:	dd04      	ble.n	8002d1c <simpleserial_addcmd+0x14>
		putch('a');
 8002d12:	2061      	movs	r0, #97	@ 0x61
		return 1;
	}

	if(len >= MAX_SS_LEN) {
		putch('b');
 8002d14:	f000 f9b2 	bl	800307c <putch>
		return 1;
 8002d18:	2001      	movs	r0, #1
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 8002d1a:	bd38      	pop	{r3, r4, r5, pc}
	if(len >= MAX_SS_LEN) {
 8002d1c:	29ff      	cmp	r1, #255	@ 0xff
 8002d1e:	d901      	bls.n	8002d24 <simpleserial_addcmd+0x1c>
		putch('b');
 8002d20:	2062      	movs	r0, #98	@ 0x62
 8002d22:	e7f7      	b.n	8002d14 <simpleserial_addcmd+0xc>
	commands[num_commands].c   = c;
 8002d24:	240c      	movs	r4, #12
 8002d26:	fb04 5403 	mla	r4, r4, r3, r5
	num_commands++;
 8002d2a:	3301      	adds	r3, #1
	commands[num_commands].c   = c;
 8002d2c:	7120      	strb	r0, [r4, #4]
	commands[num_commands].fp  = fp;
 8002d2e:	e9c4 1202 	strd	r1, r2, [r4, #8]
	num_commands++;
 8002d32:	602b      	str	r3, [r5, #0]
	return 0;
 8002d34:	2000      	movs	r0, #0
 8002d36:	e7f0      	b.n	8002d1a <simpleserial_addcmd+0x12>
 8002d38:	20000070 	.word	0x20000070

08002d3c <simpleserial_init>:
{
 8002d3c:	b508      	push	{r3, lr}
	simpleserial_addcmd('v', 0, check_version);
 8002d3e:	4a06      	ldr	r2, [pc, #24]	@ (8002d58 <simpleserial_init+0x1c>)
 8002d40:	2100      	movs	r1, #0
 8002d42:	2076      	movs	r0, #118	@ 0x76
 8002d44:	f7ff ffe0 	bl	8002d08 <simpleserial_addcmd>
}
 8002d48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    simpleserial_addcmd('w', 0, ss_get_commands);
 8002d4c:	4a03      	ldr	r2, [pc, #12]	@ (8002d5c <simpleserial_init+0x20>)
 8002d4e:	2100      	movs	r1, #0
 8002d50:	2077      	movs	r0, #119	@ 0x77
 8002d52:	f7ff bfd9 	b.w	8002d08 <simpleserial_addcmd>
 8002d56:	bf00      	nop
 8002d58:	08002db7 	.word	0x08002db7
 8002d5c:	08002dd5 	.word	0x08002dd5

08002d60 <simpleserial_put>:
	simpleserial_put('e', 0x01, &err);
	return;
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8002d60:	b570      	push	{r4, r5, r6, lr}
 8002d62:	b0c0      	sub	sp, #256	@ 0x100
 8002d64:	460c      	mov	r4, r1
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 8002d66:	2500      	movs	r5, #0
{
 8002d68:	4611      	mov	r1, r2
	data_buf[1] = c;
 8002d6a:	f88d 0001 	strb.w	r0, [sp, #1]
	data_buf[2] = size;
	int i = 0;
	for (; i < size; i++) {
		data_buf[i + 3] = output[i];
 8002d6e:	4622      	mov	r2, r4
 8002d70:	f10d 0003 	add.w	r0, sp, #3
	data_buf[2] = size;
 8002d74:	f88d 4002 	strb.w	r4, [sp, #2]
	data_buf[0] = 0x00;
 8002d78:	f88d 5000 	strb.w	r5, [sp]
		data_buf[i + 3] = output[i];
 8002d7c:	f7fe fb0e 	bl	800139c <memcpy>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8002d80:	1ca1      	adds	r1, r4, #2
 8002d82:	b2c9      	uxtb	r1, r1
 8002d84:	f10d 0001 	add.w	r0, sp, #1
 8002d88:	f7ff ff88 	bl	8002c9c <ss_crc>
 8002d8c:	eb0d 0304 	add.w	r3, sp, r4
	data_buf[i + 4] = 0x00;
 8002d90:	1d26      	adds	r6, r4, #4
	stuff_data(data_buf, i + 5);
 8002d92:	1d61      	adds	r1, r4, #5
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8002d94:	70d8      	strb	r0, [r3, #3]
	stuff_data(data_buf, i + 5);
 8002d96:	b2c9      	uxtb	r1, r1
 8002d98:	4668      	mov	r0, sp
	data_buf[i + 4] = 0x00;
 8002d9a:	f80d 5006 	strb.w	r5, [sp, r6]
	stuff_data(data_buf, i + 5);
 8002d9e:	f7ff ff93 	bl	8002cc8 <stuff_data>
	for (int i = 0; i < size + 5; i++) {
 8002da2:	466c      	mov	r4, sp
		putch(data_buf[i]);
 8002da4:	f814 0b01 	ldrb.w	r0, [r4], #1
	for (int i = 0; i < size + 5; i++) {
 8002da8:	3501      	adds	r5, #1
		putch(data_buf[i]);
 8002daa:	f000 f967 	bl	800307c <putch>
	for (int i = 0; i < size + 5; i++) {
 8002dae:	42ae      	cmp	r6, r5
 8002db0:	daf8      	bge.n	8002da4 <simpleserial_put+0x44>
	}
}
 8002db2:	b040      	add	sp, #256	@ 0x100
 8002db4:	bd70      	pop	{r4, r5, r6, pc}

08002db6 <check_version>:
{
 8002db6:	b507      	push	{r0, r1, r2, lr}
	uint8_t ver = SS_VER;
 8002db8:	2303      	movs	r3, #3
	simpleserial_put('r', 1, &ver);
 8002dba:	f10d 0207 	add.w	r2, sp, #7
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	2072      	movs	r0, #114	@ 0x72
	uint8_t ver = SS_VER;
 8002dc2:	f88d 3007 	strb.w	r3, [sp, #7]
	simpleserial_put('r', 1, &ver);
 8002dc6:	f7ff ffcb 	bl	8002d60 <simpleserial_put>
}
 8002dca:	2000      	movs	r0, #0
 8002dcc:	b003      	add	sp, #12
 8002dce:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dd2:	0000      	movs	r0, r0

08002dd4 <ss_get_commands>:
{
 8002dd4:	b530      	push	{r4, r5, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8002dd6:	480d      	ldr	r0, [pc, #52]	@ (8002e0c <ss_get_commands+0x38>)
 8002dd8:	7801      	ldrb	r1, [r0, #0]
{
 8002dda:	b085      	sub	sp, #20
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8002ddc:	2200      	movs	r2, #0
        cmd_chars[i] = commands[i].c;
 8002dde:	240c      	movs	r4, #12
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8002de0:	b2d3      	uxtb	r3, r2
 8002de2:	428b      	cmp	r3, r1
 8002de4:	f102 0201 	add.w	r2, r2, #1
 8002de8:	db06      	blt.n	8002df8 <ss_get_commands+0x24>
    simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 8002dea:	466a      	mov	r2, sp
 8002dec:	2072      	movs	r0, #114	@ 0x72
 8002dee:	f7ff ffb7 	bl	8002d60 <simpleserial_put>
}
 8002df2:	2000      	movs	r0, #0
 8002df4:	b005      	add	sp, #20
 8002df6:	bd30      	pop	{r4, r5, pc}
        cmd_chars[i] = commands[i].c;
 8002df8:	f103 0510 	add.w	r5, r3, #16
 8002dfc:	fb04 0303 	mla	r3, r4, r3, r0
 8002e00:	446d      	add	r5, sp
 8002e02:	791b      	ldrb	r3, [r3, #4]
 8002e04:	f805 3c10 	strb.w	r3, [r5, #-16]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8002e08:	e7ea      	b.n	8002de0 <ss_get_commands+0xc>
 8002e0a:	bf00      	nop
 8002e0c:	20000070 	.word	0x20000070

08002e10 <simpleserial_get>:
{
 8002e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e14:	b0c2      	sub	sp, #264	@ 0x108
	uint8_t err = 0;
 8002e16:	2500      	movs	r5, #0
 8002e18:	ae02      	add	r6, sp, #8
 8002e1a:	f88d 5007 	strb.w	r5, [sp, #7]
	for (int i = 0; i < 4; i++) {
 8002e1e:	4634      	mov	r4, r6
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 8002e20:	f000 f912 	bl	8003048 <getch>
 8002e24:	f806 0b01 	strb.w	r0, [r6], #1
		if (data_buf[i] == FRAME_BYTE) {
 8002e28:	b958      	cbnz	r0, 8002e42 <simpleserial_get+0x32>
			goto ERROR;
 8002e2a:	2005      	movs	r0, #5
			err = SS_ERR_FRAME_BYTE;
 8002e2c:	f88d 0007 	strb.w	r0, [sp, #7]
	simpleserial_put('e', 0x01, &err);
 8002e30:	f10d 0207 	add.w	r2, sp, #7
 8002e34:	2101      	movs	r1, #1
 8002e36:	2065      	movs	r0, #101	@ 0x65
 8002e38:	f7ff ff92 	bl	8002d60 <simpleserial_put>
}
 8002e3c:	b042      	add	sp, #264	@ 0x108
 8002e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < 4; i++) {
 8002e42:	3501      	adds	r5, #1
 8002e44:	2d04      	cmp	r5, #4
 8002e46:	d1eb      	bne.n	8002e20 <simpleserial_get+0x10>
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8002e48:	4629      	mov	r1, r5
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	f7ff ff4d 	bl	8002cea <unstuff_data>
	for(c = 0; c < num_commands; c++)
 8002e50:	4f24      	ldr	r7, [pc, #144]	@ (8002ee4 <simpleserial_get+0xd4>)
		if(commands[c].c == data_buf[1])
 8002e52:	7861      	ldrb	r1, [r4, #1]
	for(c = 0; c < num_commands; c++)
 8002e54:	683a      	ldr	r2, [r7, #0]
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8002e56:	4680      	mov	r8, r0
	for(c = 0; c < num_commands; c++)
 8002e58:	2300      	movs	r3, #0
		if(commands[c].c == data_buf[1])
 8002e5a:	200c      	movs	r0, #12
	for(c = 0; c < num_commands; c++)
 8002e5c:	fa5f f983 	uxtb.w	r9, r3
 8002e60:	4591      	cmp	r9, r2
 8002e62:	db02      	blt.n	8002e6a <simpleserial_get+0x5a>
	if (c == num_commands) {
 8002e64:	d107      	bne.n	8002e76 <simpleserial_get+0x66>
 8002e66:	2001      	movs	r0, #1
 8002e68:	e7e0      	b.n	8002e2c <simpleserial_get+0x1c>
		if(commands[c].c == data_buf[1])
 8002e6a:	fb00 7609 	mla	r6, r0, r9, r7
 8002e6e:	3301      	adds	r3, #1
 8002e70:	7936      	ldrb	r6, [r6, #4]
 8002e72:	428e      	cmp	r6, r1
 8002e74:	d1f2      	bne.n	8002e5c <simpleserial_get+0x4c>
	if ((data_buf[3] + 5) < next_frame) {
 8002e76:	78e3      	ldrb	r3, [r4, #3]
 8002e78:	3305      	adds	r3, #5
 8002e7a:	4543      	cmp	r3, r8
 8002e7c:	da02      	bge.n	8002e84 <simpleserial_get+0x74>
		goto ERROR;
 8002e7e:	2004      	movs	r0, #4
 8002e80:	e7d4      	b.n	8002e2c <simpleserial_get+0x1c>
	for (; i < data_buf[3] + 5; i++) {
 8002e82:	4635      	mov	r5, r6
		data_buf[i] = getch();
 8002e84:	f000 f8e0 	bl	8003048 <getch>
 8002e88:	5560      	strb	r0, [r4, r5]
		if (data_buf[i] == FRAME_BYTE) {
 8002e8a:	2800      	cmp	r0, #0
 8002e8c:	d0cd      	beq.n	8002e2a <simpleserial_get+0x1a>
	for (; i < data_buf[3] + 5; i++) {
 8002e8e:	78e3      	ldrb	r3, [r4, #3]
 8002e90:	1c6e      	adds	r6, r5, #1
 8002e92:	3304      	adds	r3, #4
 8002e94:	42b3      	cmp	r3, r6
 8002e96:	daf4      	bge.n	8002e82 <simpleserial_get+0x72>
	data_buf[i] = getch();
 8002e98:	f000 f8d6 	bl	8003048 <getch>
 8002e9c:	55a0      	strb	r0, [r4, r6]
	if (data_buf[i] != FRAME_BYTE) {
 8002e9e:	2800      	cmp	r0, #0
 8002ea0:	d1ed      	bne.n	8002e7e <simpleserial_get+0x6e>
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 8002ea2:	f1c8 0301 	rsb	r3, r8, #1
 8002ea6:	fa53 f186 	uxtab	r1, r3, r6
 8002eaa:	b2c9      	uxtb	r1, r1
 8002eac:	fa5f fa86 	uxtb.w	sl, r6
 8002eb0:	eb04 0008 	add.w	r0, r4, r8
 8002eb4:	f7ff ff19 	bl	8002cea <unstuff_data>
	uint8_t crc = ss_crc(data_buf+1, i-2);
 8002eb8:	f1aa 0102 	sub.w	r1, sl, #2
 8002ebc:	b2c9      	uxtb	r1, r1
 8002ebe:	f10d 0009 	add.w	r0, sp, #9
 8002ec2:	f7ff feeb 	bl	8002c9c <ss_crc>
	if (crc != data_buf[i-1]) {
 8002ec6:	5d63      	ldrb	r3, [r4, r5]
 8002ec8:	4283      	cmp	r3, r0
 8002eca:	d109      	bne.n	8002ee0 <simpleserial_get+0xd0>
	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 8002ecc:	230c      	movs	r3, #12
 8002ece:	fb03 7709 	mla	r7, r3, r9, r7
 8002ed2:	78e2      	ldrb	r2, [r4, #3]
 8002ed4:	68fd      	ldr	r5, [r7, #12]
 8002ed6:	78a1      	ldrb	r1, [r4, #2]
 8002ed8:	7860      	ldrb	r0, [r4, #1]
 8002eda:	446b      	add	r3, sp
 8002edc:	47a8      	blx	r5
 8002ede:	e7a5      	b.n	8002e2c <simpleserial_get+0x1c>
 8002ee0:	2002      	movs	r0, #2
 8002ee2:	e7a3      	b.n	8002e2c <simpleserial_get+0x1c>
 8002ee4:	20000070 	.word	0x20000070

08002ee8 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8002ee8:	b570      	push	{r4, r5, r6, lr}
 8002eea:	b096      	sub	sp, #88	@ 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8002eec:	2400      	movs	r4, #0
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8002eee:	2603      	movs	r6, #3
 8002ef0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002ef4:	a80c      	add	r0, sp, #48	@ 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8002ef6:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8002ef8:	e9cd 630c 	strd	r6, r3, [sp, #48]	@ 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8002efc:	9410      	str	r4, [sp, #64]	@ 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8002efe:	9414      	str	r4, [sp, #80]	@ 0x50
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002f00:	f000 f8d4 	bl	80030ac <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8002f04:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8002f06:	4621      	mov	r1, r4
 8002f08:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8002f0a:	e9cd 3502 	strd	r3, r5, [sp, #8]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f0e:	e9cd 4404 	strd	r4, r4, [sp, #16]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f12:	9406      	str	r4, [sp, #24]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8002f14:	f000 fb1c 	bl	8003550 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f18:	4b11      	ldr	r3, [pc, #68]	@ (8002f60 <platform_init+0x78>)
 8002f1a:	695a      	ldr	r2, [r3, #20]
 8002f1c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8002f20:	615a      	str	r2, [r3, #20]
 8002f22:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002f24:	e9cd 4609 	strd	r4, r6, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8002f2c:	4c0d      	ldr	r4, [pc, #52]	@ (8002f64 <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f2e:	9301      	str	r3, [sp, #4]
 8002f30:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8002f32:	a907      	add	r1, sp, #28
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8002f34:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8002f38:	4620      	mov	r0, r4
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8002f3a:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8002f3e:	f000 fba7 	bl	8003690 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8002f42:	462a      	mov	r2, r5
 8002f44:	4620      	mov	r0, r4
 8002f46:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002f4a:	f000 fc61 	bl	8003810 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8002f4e:	462a      	mov	r2, r5
 8002f50:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002f54:	4620      	mov	r0, r4
 8002f56:	f000 fc5b 	bl	8003810 <HAL_GPIO_WritePin>
#endif
}
 8002f5a:	b016      	add	sp, #88	@ 0x58
 8002f5c:	bd70      	pop	{r4, r5, r6, pc}
 8002f5e:	bf00      	nop
 8002f60:	40021000 	.word	0x40021000
 8002f64:	48000800 	.word	0x48000800

08002f68 <init_uart>:

void init_uart(void)
{
 8002f68:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8002f6a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
{
 8002f6e:	b088      	sub	sp, #32
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8002f70:	2302      	movs	r3, #2
 8002f72:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GpioInit.Pull      = GPIO_PULLUP;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002f76:	2101      	movs	r1, #1
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 8002f7e:	4c16      	ldr	r4, [pc, #88]	@ (8002fd8 <init_uart+0x70>)
  GpioInit.Alternate = GPIO_AF7_USART1;
 8002f80:	2307      	movs	r3, #7
 8002f82:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 8002f84:	6963      	ldr	r3, [r4, #20]
 8002f86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f8a:	6163      	str	r3, [r4, #20]
 8002f8c:	6963      	ldr	r3, [r4, #20]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f92:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8002f94:	a903      	add	r1, sp, #12
 8002f96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  __GPIOA_CLK_ENABLE();
 8002f9a:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8002f9c:	f000 fb78 	bl	8003690 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8002fa0:	480e      	ldr	r0, [pc, #56]	@ (8002fdc <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 8002fa2:	f8df c03c 	ldr.w	ip, [pc, #60]	@ 8002fe0 <init_uart+0x78>
 8002fa6:	f44f 3361 	mov.w	r3, #230400	@ 0x38400
 8002faa:	e9c0 c300 	strd	ip, r3, [r0]
  #else
  UartHandle.Init.BaudRate   = 38400;
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8002fae:	2300      	movs	r3, #0
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8002fb0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8002fb4:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8002fb6:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8002fb8:	230c      	movs	r3, #12
 8002fba:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 8002fbc:	69a3      	ldr	r3, [r4, #24]
 8002fbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fc2:	61a3      	str	r3, [r4, #24]
 8002fc4:	69a3      	ldr	r3, [r4, #24]
 8002fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fca:	9302      	str	r3, [sp, #8]
 8002fcc:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 8002fce:	f000 fd5b 	bl	8003a88 <HAL_UART_Init>
}
 8002fd2:	b008      	add	sp, #32
 8002fd4:	bd10      	pop	{r4, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	20000134 	.word	0x20000134
 8002fe0:	40013800 	.word	0x40013800

08002fe4 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe4:	4b10      	ldr	r3, [pc, #64]	@ (8003028 <trigger_setup+0x44>)
{
 8002fe6:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe8:	695a      	ldr	r2, [r3, #20]
 8002fea:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002fee:	615a      	str	r2, [r3, #20]
 8002ff0:	695b      	ldr	r3, [r3, #20]
{
 8002ff2:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8002ffc:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8003000:	2301      	movs	r3, #1
 8003002:	e9cd 4301 	strd	r4, r3, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003006:	2500      	movs	r5, #0
 8003008:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 800300a:	a901      	add	r1, sp, #4
 800300c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003010:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8003014:	f000 fb3c 	bl	8003690 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8003018:	462a      	mov	r2, r5
 800301a:	4621      	mov	r1, r4
 800301c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003020:	f000 fbf6 	bl	8003810 <HAL_GPIO_WritePin>
}
 8003024:	b007      	add	sp, #28
 8003026:	bd30      	pop	{r4, r5, pc}
 8003028:	40021000 	.word	0x40021000

0800302c <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 800302c:	2201      	movs	r2, #1
 800302e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003032:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003036:	f000 bbeb 	b.w	8003810 <HAL_GPIO_WritePin>

0800303a <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 800303a:	2200      	movs	r2, #0
 800303c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003040:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003044:	f000 bbe4 	b.w	8003810 <HAL_GPIO_WritePin>

08003048 <getch>:
}

char getch(void)
{
 8003048:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 800304a:	4d0a      	ldr	r5, [pc, #40]	@ (8003074 <getch+0x2c>)
    USART1->ICR |= (1 << 3);
 800304c:	4c0a      	ldr	r4, [pc, #40]	@ (8003078 <getch+0x30>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 800304e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003052:	2201      	movs	r2, #1
 8003054:	f10d 0107 	add.w	r1, sp, #7
 8003058:	4628      	mov	r0, r5
 800305a:	f000 fd95 	bl	8003b88 <HAL_UART_Receive>
 800305e:	b918      	cbnz	r0, 8003068 <getch+0x20>
  //putch(d);
  return d;
}
 8003060:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003064:	b003      	add	sp, #12
 8003066:	bd30      	pop	{r4, r5, pc}
    USART1->ICR |= (1 << 3);
 8003068:	6a23      	ldr	r3, [r4, #32]
 800306a:	f043 0308 	orr.w	r3, r3, #8
 800306e:	6223      	str	r3, [r4, #32]
 8003070:	e7ed      	b.n	800304e <getch+0x6>
 8003072:	bf00      	nop
 8003074:	20000134 	.word	0x20000134
 8003078:	40013800 	.word	0x40013800

0800307c <putch>:

void putch(char c)
{
 800307c:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 800307e:	f241 3388 	movw	r3, #5000	@ 0x1388
  uint8_t d  = c;
 8003082:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8003086:	2201      	movs	r2, #1
 8003088:	f10d 0107 	add.w	r1, sp, #7
 800308c:	4802      	ldr	r0, [pc, #8]	@ (8003098 <putch+0x1c>)
 800308e:	f000 fd25 	bl	8003adc <HAL_UART_Transmit>
}
 8003092:	b003      	add	sp, #12
 8003094:	f85d fb04 	ldr.w	pc, [sp], #4
 8003098:	20000134 	.word	0x20000134

0800309c <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 800309c:	4b02      	ldr	r3, [pc, #8]	@ (80030a8 <HAL_GetTick+0xc>)
 800309e:	6818      	ldr	r0, [r3, #0]
 80030a0:	1c42      	adds	r2, r0, #1
 80030a2:	601a      	str	r2, [r3, #0]
}
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	200001a4 	.word	0x200001a4

080030ac <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ac:	6803      	ldr	r3, [r0, #0]
{
 80030ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b2:	07d9      	lsls	r1, r3, #31
{
 80030b4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b6:	d411      	bmi.n	80030dc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b8:	6823      	ldr	r3, [r4, #0]
 80030ba:	079a      	lsls	r2, r3, #30
 80030bc:	f100 808b 	bmi.w	80031d6 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	071e      	lsls	r6, r3, #28
 80030c4:	f100 80f3 	bmi.w	80032ae <HAL_RCC_OscConfig+0x202>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030c8:	6823      	ldr	r3, [r4, #0]
 80030ca:	075d      	lsls	r5, r3, #29
 80030cc:	f100 8136 	bmi.w	800333c <HAL_RCC_OscConfig+0x290>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030d0:	69e2      	ldr	r2, [r4, #28]
 80030d2:	2a00      	cmp	r2, #0
 80030d4:	f040 81b8 	bne.w	8003448 <HAL_RCC_OscConfig+0x39c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80030d8:	2000      	movs	r0, #0
 80030da:	e01f      	b.n	800311c <HAL_RCC_OscConfig+0x70>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80030dc:	49b3      	ldr	r1, [pc, #716]	@ (80033ac <HAL_RCC_OscConfig+0x300>)
 80030de:	684b      	ldr	r3, [r1, #4]
 80030e0:	f003 030c 	and.w	r3, r3, #12
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d007      	beq.n	80030f8 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030e8:	684b      	ldr	r3, [r1, #4]
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d117      	bne.n	8003122 <HAL_RCC_OscConfig+0x76>
 80030f2:	684b      	ldr	r3, [r1, #4]
 80030f4:	03db      	lsls	r3, r3, #15
 80030f6:	d514      	bpl.n	8003122 <HAL_RCC_OscConfig+0x76>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030fc:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003100:	6809      	ldr	r1, [r1, #0]
 8003102:	fa93 f3a3 	rbit	r3, r3
 8003106:	2201      	movs	r2, #1
 8003108:	fab3 f383 	clz	r3, r3
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	420b      	tst	r3, r1
 8003112:	d0d1      	beq.n	80030b8 <HAL_RCC_OscConfig+0xc>
 8003114:	6863      	ldr	r3, [r4, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1ce      	bne.n	80030b8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800311a:	2001      	movs	r0, #1
}
 800311c:	b003      	add	sp, #12
 800311e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003122:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003126:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800312a:	d120      	bne.n	800316e <HAL_RCC_OscConfig+0xc2>
 800312c:	680b      	ldr	r3, [r1, #0]
 800312e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003132:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003134:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8003136:	f023 030f 	bic.w	r3, r3, #15
 800313a:	4313      	orrs	r3, r2
 800313c:	62cb      	str	r3, [r1, #44]	@ 0x2c
        tickstart = HAL_GetTick();
 800313e:	f7ff ffad 	bl	800309c <HAL_GetTick>
 8003142:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
 8003146:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003148:	2701      	movs	r7, #1
 800314a:	fa96 f3a6 	rbit	r3, r6
 800314e:	680a      	ldr	r2, [r1, #0]
 8003150:	fa96 f3a6 	rbit	r3, r6
 8003154:	fab3 f383 	clz	r3, r3
 8003158:	fa07 f303 	lsl.w	r3, r7, r3
 800315c:	4213      	tst	r3, r2
 800315e:	d1ab      	bne.n	80030b8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003160:	f7ff ff9c 	bl	800309c <HAL_GetTick>
 8003164:	1b40      	subs	r0, r0, r5
 8003166:	2864      	cmp	r0, #100	@ 0x64
 8003168:	d9ef      	bls.n	800314a <HAL_RCC_OscConfig+0x9e>
            return HAL_TIMEOUT;
 800316a:	2003      	movs	r0, #3
 800316c:	e7d6      	b.n	800311c <HAL_RCC_OscConfig+0x70>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800316e:	bb1b      	cbnz	r3, 80031b8 <HAL_RCC_OscConfig+0x10c>
 8003170:	680b      	ldr	r3, [r1, #0]
 8003172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003176:	600b      	str	r3, [r1, #0]
 8003178:	680b      	ldr	r3, [r1, #0]
 800317a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800317e:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003180:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8003182:	f023 030f 	bic.w	r3, r3, #15
 8003186:	4313      	orrs	r3, r2
 8003188:	62cb      	str	r3, [r1, #44]	@ 0x2c
        tickstart = HAL_GetTick();
 800318a:	f7ff ff87 	bl	800309c <HAL_GetTick>
 800318e:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
 8003192:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003194:	2701      	movs	r7, #1
 8003196:	fa96 f3a6 	rbit	r3, r6
 800319a:	680a      	ldr	r2, [r1, #0]
 800319c:	fa96 f3a6 	rbit	r3, r6
 80031a0:	fab3 f383 	clz	r3, r3
 80031a4:	fa07 f303 	lsl.w	r3, r7, r3
 80031a8:	4213      	tst	r3, r2
 80031aa:	d085      	beq.n	80030b8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ac:	f7ff ff76 	bl	800309c <HAL_GetTick>
 80031b0:	1b40      	subs	r0, r0, r5
 80031b2:	2864      	cmp	r0, #100	@ 0x64
 80031b4:	d9ef      	bls.n	8003196 <HAL_RCC_OscConfig+0xea>
 80031b6:	e7d8      	b.n	800316a <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031bc:	680b      	ldr	r3, [r1, #0]
 80031be:	d103      	bne.n	80031c8 <HAL_RCC_OscConfig+0x11c>
 80031c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031c4:	600b      	str	r3, [r1, #0]
 80031c6:	e7b1      	b.n	800312c <HAL_RCC_OscConfig+0x80>
 80031c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031cc:	600b      	str	r3, [r1, #0]
 80031ce:	680b      	ldr	r3, [r1, #0]
 80031d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031d4:	e7ad      	b.n	8003132 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80031d6:	4975      	ldr	r1, [pc, #468]	@ (80033ac <HAL_RCC_OscConfig+0x300>)
 80031d8:	684b      	ldr	r3, [r1, #4]
 80031da:	f013 0f0c 	tst.w	r3, #12
 80031de:	d007      	beq.n	80031f0 <HAL_RCC_OscConfig+0x144>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80031e0:	684b      	ldr	r3, [r1, #4]
 80031e2:	f003 030c 	and.w	r3, r3, #12
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d11f      	bne.n	800322a <HAL_RCC_OscConfig+0x17e>
 80031ea:	684b      	ldr	r3, [r1, #4]
 80031ec:	03df      	lsls	r7, r3, #15
 80031ee:	d41c      	bmi.n	800322a <HAL_RCC_OscConfig+0x17e>
 80031f0:	2302      	movs	r3, #2
 80031f2:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031f6:	6808      	ldr	r0, [r1, #0]
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	2201      	movs	r2, #1
 80031fe:	fab3 f383 	clz	r3, r3
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	4203      	tst	r3, r0
 8003208:	d002      	beq.n	8003210 <HAL_RCC_OscConfig+0x164>
 800320a:	6923      	ldr	r3, [r4, #16]
 800320c:	4293      	cmp	r3, r2
 800320e:	d184      	bne.n	800311a <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003210:	6808      	ldr	r0, [r1, #0]
 8003212:	22f8      	movs	r2, #248	@ 0xf8
 8003214:	fa92 f2a2 	rbit	r2, r2
 8003218:	6963      	ldr	r3, [r4, #20]
 800321a:	fab2 f282 	clz	r2, r2
 800321e:	4093      	lsls	r3, r2
 8003220:	f020 02f8 	bic.w	r2, r0, #248	@ 0xf8
 8003224:	4313      	orrs	r3, r2
 8003226:	600b      	str	r3, [r1, #0]
 8003228:	e74a      	b.n	80030c0 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800322a:	6922      	ldr	r2, [r4, #16]
 800322c:	2501      	movs	r5, #1
 800322e:	b1f2      	cbz	r2, 800326e <HAL_RCC_OscConfig+0x1c2>
 8003230:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8003234:	fab3 f383 	clz	r3, r3
 8003238:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800323c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	2702      	movs	r7, #2
 8003244:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8003246:	f7ff ff29 	bl	800309c <HAL_GetTick>
 800324a:	4606      	mov	r6, r0
 800324c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003250:	680a      	ldr	r2, [r1, #0]
 8003252:	fa97 f3a7 	rbit	r3, r7
 8003256:	fab3 f383 	clz	r3, r3
 800325a:	fa05 f303 	lsl.w	r3, r5, r3
 800325e:	4213      	tst	r3, r2
 8003260:	d1d6      	bne.n	8003210 <HAL_RCC_OscConfig+0x164>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003262:	f7ff ff1b 	bl	800309c <HAL_GetTick>
 8003266:	1b80      	subs	r0, r0, r6
 8003268:	2802      	cmp	r0, #2
 800326a:	d9ef      	bls.n	800324c <HAL_RCC_OscConfig+0x1a0>
 800326c:	e77d      	b.n	800316a <HAL_RCC_OscConfig+0xbe>
 800326e:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8003272:	fab3 f383 	clz	r3, r3
 8003276:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800327a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	2702      	movs	r7, #2
 8003282:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003284:	f7ff ff0a 	bl	800309c <HAL_GetTick>
 8003288:	4606      	mov	r6, r0
 800328a:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328e:	680a      	ldr	r2, [r1, #0]
 8003290:	fa97 f3a7 	rbit	r3, r7
 8003294:	fab3 f383 	clz	r3, r3
 8003298:	fa05 f303 	lsl.w	r3, r5, r3
 800329c:	4213      	tst	r3, r2
 800329e:	f43f af0f 	beq.w	80030c0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032a2:	f7ff fefb 	bl	800309c <HAL_GetTick>
 80032a6:	1b80      	subs	r0, r0, r6
 80032a8:	2802      	cmp	r0, #2
 80032aa:	d9ee      	bls.n	800328a <HAL_RCC_OscConfig+0x1de>
 80032ac:	e75d      	b.n	800316a <HAL_RCC_OscConfig+0xbe>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032ae:	69a2      	ldr	r2, [r4, #24]
 80032b0:	4d3e      	ldr	r5, [pc, #248]	@ (80033ac <HAL_RCC_OscConfig+0x300>)
 80032b2:	483f      	ldr	r0, [pc, #252]	@ (80033b0 <HAL_RCC_OscConfig+0x304>)
 80032b4:	2101      	movs	r1, #1
 80032b6:	b302      	cbz	r2, 80032fa <HAL_RCC_OscConfig+0x24e>
 80032b8:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 80032bc:	fab3 f383 	clz	r3, r3
 80032c0:	4403      	add	r3, r0
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	2602      	movs	r6, #2
 80032c6:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 80032c8:	f7ff fee8 	bl	800309c <HAL_GetTick>
 80032cc:	4607      	mov	r7, r0
 80032ce:	fa96 f3a6 	rbit	r3, r6
 80032d2:	fa96 f3a6 	rbit	r3, r6
 80032d6:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032da:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80032dc:	fa96 f3a6 	rbit	r3, r6
 80032e0:	fab3 f383 	clz	r3, r3
 80032e4:	fa01 f303 	lsl.w	r3, r1, r3
 80032e8:	4213      	tst	r3, r2
 80032ea:	f47f aeed 	bne.w	80030c8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ee:	f7ff fed5 	bl	800309c <HAL_GetTick>
 80032f2:	1bc0      	subs	r0, r0, r7
 80032f4:	2802      	cmp	r0, #2
 80032f6:	d9ea      	bls.n	80032ce <HAL_RCC_OscConfig+0x222>
 80032f8:	e737      	b.n	800316a <HAL_RCC_OscConfig+0xbe>
 80032fa:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 80032fe:	fab3 f383 	clz	r3, r3
 8003302:	4403      	add	r3, r0
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	2602      	movs	r6, #2
 8003308:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800330a:	f7ff fec7 	bl	800309c <HAL_GetTick>
 800330e:	4607      	mov	r7, r0
 8003310:	fa96 f3a6 	rbit	r3, r6
 8003314:	fa96 f3a6 	rbit	r3, r6
 8003318:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800331c:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 800331e:	fa96 f3a6 	rbit	r3, r6
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	fa01 f303 	lsl.w	r3, r1, r3
 800332a:	4213      	tst	r3, r2
 800332c:	f43f aecc 	beq.w	80030c8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003330:	f7ff feb4 	bl	800309c <HAL_GetTick>
 8003334:	1bc0      	subs	r0, r0, r7
 8003336:	2802      	cmp	r0, #2
 8003338:	d9ea      	bls.n	8003310 <HAL_RCC_OscConfig+0x264>
 800333a:	e716      	b.n	800316a <HAL_RCC_OscConfig+0xbe>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800333c:	491b      	ldr	r1, [pc, #108]	@ (80033ac <HAL_RCC_OscConfig+0x300>)
 800333e:	69cb      	ldr	r3, [r1, #28]
 8003340:	00d8      	lsls	r0, r3, #3
 8003342:	d431      	bmi.n	80033a8 <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003344:	69cb      	ldr	r3, [r1, #28]
 8003346:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800334a:	61cb      	str	r3, [r1, #28]
 800334c:	69cb      	ldr	r3, [r1, #28]
 800334e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003352:	9301      	str	r3, [sp, #4]
 8003354:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003356:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003358:	4e16      	ldr	r6, [pc, #88]	@ (80033b4 <HAL_RCC_OscConfig+0x308>)
 800335a:	6833      	ldr	r3, [r6, #0]
 800335c:	05da      	lsls	r2, r3, #23
 800335e:	d52b      	bpl.n	80033b8 <HAL_RCC_OscConfig+0x30c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003360:	68e3      	ldr	r3, [r4, #12]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d138      	bne.n	80033d8 <HAL_RCC_OscConfig+0x32c>
 8003366:	6a0b      	ldr	r3, [r1, #32]
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 800336e:	f7ff fe95 	bl	800309c <HAL_GetTick>
 8003372:	2602      	movs	r6, #2
 8003374:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003376:	f04f 0801 	mov.w	r8, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800337a:	f241 3988 	movw	r9, #5000	@ 0x1388
 800337e:	fa96 f3a6 	rbit	r3, r6
 8003382:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003386:	6a0a      	ldr	r2, [r1, #32]
 8003388:	fa96 f3a6 	rbit	r3, r6
 800338c:	fab3 f383 	clz	r3, r3
 8003390:	fa08 f303 	lsl.w	r3, r8, r3
 8003394:	4213      	tst	r3, r2
 8003396:	d051      	beq.n	800343c <HAL_RCC_OscConfig+0x390>
    if(pwrclkchanged == SET)
 8003398:	2d00      	cmp	r5, #0
 800339a:	f43f ae99 	beq.w	80030d0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800339e:	69cb      	ldr	r3, [r1, #28]
 80033a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033a4:	61cb      	str	r3, [r1, #28]
 80033a6:	e693      	b.n	80030d0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80033a8:	2500      	movs	r5, #0
 80033aa:	e7d5      	b.n	8003358 <HAL_RCC_OscConfig+0x2ac>
 80033ac:	40021000 	.word	0x40021000
 80033b0:	10908120 	.word	0x10908120
 80033b4:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033b8:	6833      	ldr	r3, [r6, #0]
 80033ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033be:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80033c0:	f7ff fe6c 	bl	800309c <HAL_GetTick>
 80033c4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c6:	6833      	ldr	r3, [r6, #0]
 80033c8:	05db      	lsls	r3, r3, #23
 80033ca:	d4c9      	bmi.n	8003360 <HAL_RCC_OscConfig+0x2b4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033cc:	f7ff fe66 	bl	800309c <HAL_GetTick>
 80033d0:	1bc0      	subs	r0, r0, r7
 80033d2:	2864      	cmp	r0, #100	@ 0x64
 80033d4:	d9f7      	bls.n	80033c6 <HAL_RCC_OscConfig+0x31a>
 80033d6:	e6c8      	b.n	800316a <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d8:	bb13      	cbnz	r3, 8003420 <HAL_RCC_OscConfig+0x374>
 80033da:	6a0b      	ldr	r3, [r1, #32]
 80033dc:	f023 0301 	bic.w	r3, r3, #1
 80033e0:	620b      	str	r3, [r1, #32]
 80033e2:	6a0b      	ldr	r3, [r1, #32]
 80033e4:	f023 0304 	bic.w	r3, r3, #4
 80033e8:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 80033ea:	f7ff fe57 	bl	800309c <HAL_GetTick>
 80033ee:	2602      	movs	r6, #2
 80033f0:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f2:	f04f 0801 	mov.w	r8, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f6:	f241 3988 	movw	r9, #5000	@ 0x1388
 80033fa:	fa96 f3a6 	rbit	r3, r6
 80033fe:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003402:	6a0a      	ldr	r2, [r1, #32]
 8003404:	fa96 f3a6 	rbit	r3, r6
 8003408:	fab3 f383 	clz	r3, r3
 800340c:	fa08 f303 	lsl.w	r3, r8, r3
 8003410:	4213      	tst	r3, r2
 8003412:	d0c1      	beq.n	8003398 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003414:	f7ff fe42 	bl	800309c <HAL_GetTick>
 8003418:	1bc0      	subs	r0, r0, r7
 800341a:	4548      	cmp	r0, r9
 800341c:	d9ed      	bls.n	80033fa <HAL_RCC_OscConfig+0x34e>
 800341e:	e6a4      	b.n	800316a <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003420:	2b05      	cmp	r3, #5
 8003422:	6a0b      	ldr	r3, [r1, #32]
 8003424:	d103      	bne.n	800342e <HAL_RCC_OscConfig+0x382>
 8003426:	f043 0304 	orr.w	r3, r3, #4
 800342a:	620b      	str	r3, [r1, #32]
 800342c:	e79b      	b.n	8003366 <HAL_RCC_OscConfig+0x2ba>
 800342e:	f023 0301 	bic.w	r3, r3, #1
 8003432:	620b      	str	r3, [r1, #32]
 8003434:	6a0b      	ldr	r3, [r1, #32]
 8003436:	f023 0304 	bic.w	r3, r3, #4
 800343a:	e797      	b.n	800336c <HAL_RCC_OscConfig+0x2c0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800343c:	f7ff fe2e 	bl	800309c <HAL_GetTick>
 8003440:	1bc0      	subs	r0, r0, r7
 8003442:	4548      	cmp	r0, r9
 8003444:	d99b      	bls.n	800337e <HAL_RCC_OscConfig+0x2d2>
 8003446:	e690      	b.n	800316a <HAL_RCC_OscConfig+0xbe>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003448:	493f      	ldr	r1, [pc, #252]	@ (8003548 <HAL_RCC_OscConfig+0x49c>)
 800344a:	684b      	ldr	r3, [r1, #4]
 800344c:	f003 030c 	and.w	r3, r3, #12
 8003450:	2b08      	cmp	r3, #8
 8003452:	f43f ae62 	beq.w	800311a <HAL_RCC_OscConfig+0x6e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003456:	2a02      	cmp	r2, #2
 8003458:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800345c:	d150      	bne.n	8003500 <HAL_RCC_OscConfig+0x454>
 800345e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8003462:	fab3 f383 	clz	r3, r3
 8003466:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800346a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003474:	f7ff fe12 	bl	800309c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003478:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 800354c <HAL_RCC_OscConfig+0x4a0>
        tickstart = HAL_GetTick();
 800347c:	4606      	mov	r6, r0
 800347e:	f04f 7700 	mov.w	r7, #33554432	@ 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003482:	2501      	movs	r5, #1
 8003484:	fa97 f3a7 	rbit	r3, r7
 8003488:	680a      	ldr	r2, [r1, #0]
 800348a:	fa97 f3a7 	rbit	r3, r7
 800348e:	fab3 f383 	clz	r3, r3
 8003492:	fa05 f303 	lsl.w	r3, r5, r3
 8003496:	4213      	tst	r3, r2
 8003498:	d12c      	bne.n	80034f4 <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800349a:	e9d4 0308 	ldrd	r0, r3, [r4, #32]
 800349e:	684a      	ldr	r2, [r1, #4]
 80034a0:	4303      	orrs	r3, r0
 80034a2:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 80034a6:	4313      	orrs	r3, r2
 80034a8:	604b      	str	r3, [r1, #4]
 80034aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034ae:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80034b2:	fab3 f383 	clz	r3, r3
 80034b6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80034ba:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80034be:	009b      	lsls	r3, r3, #2
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c0:	4f22      	ldr	r7, [pc, #136]	@ (800354c <HAL_RCC_OscConfig+0x4a0>)
        __HAL_RCC_PLL_ENABLE();
 80034c2:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 80034c4:	f7ff fdea 	bl	800309c <HAL_GetTick>
 80034c8:	f04f 7500 	mov.w	r5, #33554432	@ 0x2000000
 80034cc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034ce:	2601      	movs	r6, #1
 80034d0:	fa95 f3a5 	rbit	r3, r5
 80034d4:	680a      	ldr	r2, [r1, #0]
 80034d6:	fa95 f3a5 	rbit	r3, r5
 80034da:	fab3 f383 	clz	r3, r3
 80034de:	fa06 f303 	lsl.w	r3, r6, r3
 80034e2:	4213      	tst	r3, r2
 80034e4:	f47f adf8 	bne.w	80030d8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e8:	f7ff fdd8 	bl	800309c <HAL_GetTick>
 80034ec:	1b00      	subs	r0, r0, r4
 80034ee:	42b8      	cmp	r0, r7
 80034f0:	d9ee      	bls.n	80034d0 <HAL_RCC_OscConfig+0x424>
 80034f2:	e63a      	b.n	800316a <HAL_RCC_OscConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f4:	f7ff fdd2 	bl	800309c <HAL_GetTick>
 80034f8:	1b83      	subs	r3, r0, r6
 80034fa:	4543      	cmp	r3, r8
 80034fc:	d9c2      	bls.n	8003484 <HAL_RCC_OscConfig+0x3d8>
 80034fe:	e634      	b.n	800316a <HAL_RCC_OscConfig+0xbe>
 8003500:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8003504:	fab3 f383 	clz	r3, r3
 8003508:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800350c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003516:	f7ff fdc1 	bl	800309c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800351a:	4f0c      	ldr	r7, [pc, #48]	@ (800354c <HAL_RCC_OscConfig+0x4a0>)
        tickstart = HAL_GetTick();
 800351c:	4604      	mov	r4, r0
 800351e:	f04f 7500 	mov.w	r5, #33554432	@ 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003522:	2601      	movs	r6, #1
 8003524:	fa95 f3a5 	rbit	r3, r5
 8003528:	680a      	ldr	r2, [r1, #0]
 800352a:	fa95 f3a5 	rbit	r3, r5
 800352e:	fab3 f383 	clz	r3, r3
 8003532:	fa06 f303 	lsl.w	r3, r6, r3
 8003536:	4213      	tst	r3, r2
 8003538:	f43f adce 	beq.w	80030d8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800353c:	f7ff fdae 	bl	800309c <HAL_GetTick>
 8003540:	1b00      	subs	r0, r0, r4
 8003542:	42b8      	cmp	r0, r7
 8003544:	d9ee      	bls.n	8003524 <HAL_RCC_OscConfig+0x478>
 8003546:	e610      	b.n	800316a <HAL_RCC_OscConfig+0xbe>
 8003548:	40021000 	.word	0x40021000
 800354c:	00030d40 	.word	0x00030d40

08003550 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003550:	4a4d      	ldr	r2, [pc, #308]	@ (8003688 <HAL_RCC_ClockConfig+0x138>)
{
 8003552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003554:	6813      	ldr	r3, [r2, #0]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	428b      	cmp	r3, r1
{
 800355c:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800355e:	d311      	bcc.n	8003584 <HAL_RCC_ClockConfig+0x34>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003560:	6822      	ldr	r2, [r4, #0]
 8003562:	0795      	lsls	r5, r2, #30
 8003564:	d41a      	bmi.n	800359c <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003566:	07d0      	lsls	r0, r2, #31
 8003568:	d420      	bmi.n	80035ac <HAL_RCC_ClockConfig+0x5c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800356a:	4a47      	ldr	r2, [pc, #284]	@ (8003688 <HAL_RCC_ClockConfig+0x138>)
 800356c:	6813      	ldr	r3, [r2, #0]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	428b      	cmp	r3, r1
 8003574:	d86c      	bhi.n	8003650 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003576:	6822      	ldr	r2, [r4, #0]
 8003578:	0751      	lsls	r1, r2, #29
 800357a:	d474      	bmi.n	8003666 <HAL_RCC_ClockConfig+0x116>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357c:	0713      	lsls	r3, r2, #28
 800357e:	d47a      	bmi.n	8003676 <HAL_RCC_ClockConfig+0x126>
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8003580:	2000      	movs	r0, #0
 8003582:	e00a      	b.n	800359a <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003584:	6813      	ldr	r3, [r2, #0]
 8003586:	f023 0307 	bic.w	r3, r3, #7
 800358a:	430b      	orrs	r3, r1
 800358c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800358e:	6813      	ldr	r3, [r2, #0]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	428b      	cmp	r3, r1
 8003596:	d0e3      	beq.n	8003560 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 8003598:	2001      	movs	r0, #1
}
 800359a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800359c:	483b      	ldr	r0, [pc, #236]	@ (800368c <HAL_RCC_ClockConfig+0x13c>)
 800359e:	68a5      	ldr	r5, [r4, #8]
 80035a0:	6843      	ldr	r3, [r0, #4]
 80035a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035a6:	432b      	orrs	r3, r5
 80035a8:	6043      	str	r3, [r0, #4]
 80035aa:	e7dc      	b.n	8003566 <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ac:	6862      	ldr	r2, [r4, #4]
 80035ae:	4d37      	ldr	r5, [pc, #220]	@ (800368c <HAL_RCC_ClockConfig+0x13c>)
 80035b0:	2a01      	cmp	r2, #1
 80035b2:	d125      	bne.n	8003600 <HAL_RCC_ClockConfig+0xb0>
 80035b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035b8:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035bc:	6828      	ldr	r0, [r5, #0]
 80035be:	fa93 f3a3 	rbit	r3, r3
 80035c2:	fab3 f383 	clz	r3, r3
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035cc:	d0e4      	beq.n	8003598 <HAL_RCC_ClockConfig+0x48>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ce:	686b      	ldr	r3, [r5, #4]
 80035d0:	f023 0303 	bic.w	r3, r3, #3
 80035d4:	4313      	orrs	r3, r2
 80035d6:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80035d8:	f7ff fd60 	bl	800309c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035dc:	6863      	ldr	r3, [r4, #4]
 80035de:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80035e0:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e2:	f241 3788 	movw	r7, #5000	@ 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e6:	d11c      	bne.n	8003622 <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80035e8:	686b      	ldr	r3, [r5, #4]
 80035ea:	f003 030c 	and.w	r3, r3, #12
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d0bb      	beq.n	800356a <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f2:	f7ff fd53 	bl	800309c <HAL_GetTick>
 80035f6:	1b80      	subs	r0, r0, r6
 80035f8:	42b8      	cmp	r0, r7
 80035fa:	d9f5      	bls.n	80035e8 <HAL_RCC_ClockConfig+0x98>
          return HAL_TIMEOUT;
 80035fc:	2003      	movs	r0, #3
 80035fe:	e7cc      	b.n	800359a <HAL_RCC_ClockConfig+0x4a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003600:	2a02      	cmp	r2, #2
 8003602:	bf0c      	ite	eq
 8003604:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 8003608:	2302      	movne	r3, #2
 800360a:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360e:	682e      	ldr	r6, [r5, #0]
 8003610:	fa93 f3a3 	rbit	r3, r3
 8003614:	2001      	movs	r0, #1
 8003616:	fab3 f383 	clz	r3, r3
 800361a:	fa00 f303 	lsl.w	r3, r0, r3
 800361e:	4233      	tst	r3, r6
 8003620:	e7d4      	b.n	80035cc <HAL_RCC_ClockConfig+0x7c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003622:	2b02      	cmp	r3, #2
 8003624:	d10f      	bne.n	8003646 <HAL_RCC_ClockConfig+0xf6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003626:	686b      	ldr	r3, [r5, #4]
 8003628:	f003 030c 	and.w	r3, r3, #12
 800362c:	2b08      	cmp	r3, #8
 800362e:	d09c      	beq.n	800356a <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003630:	f7ff fd34 	bl	800309c <HAL_GetTick>
 8003634:	1b80      	subs	r0, r0, r6
 8003636:	42b8      	cmp	r0, r7
 8003638:	d9f5      	bls.n	8003626 <HAL_RCC_ClockConfig+0xd6>
 800363a:	e7df      	b.n	80035fc <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800363c:	f7ff fd2e 	bl	800309c <HAL_GetTick>
 8003640:	1b80      	subs	r0, r0, r6
 8003642:	42b8      	cmp	r0, r7
 8003644:	d8da      	bhi.n	80035fc <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003646:	686b      	ldr	r3, [r5, #4]
 8003648:	f013 0f0c 	tst.w	r3, #12
 800364c:	d1f6      	bne.n	800363c <HAL_RCC_ClockConfig+0xec>
 800364e:	e78c      	b.n	800356a <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003650:	6813      	ldr	r3, [r2, #0]
 8003652:	f023 0307 	bic.w	r3, r3, #7
 8003656:	430b      	orrs	r3, r1
 8003658:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800365a:	6813      	ldr	r3, [r2, #0]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	428b      	cmp	r3, r1
 8003662:	d199      	bne.n	8003598 <HAL_RCC_ClockConfig+0x48>
 8003664:	e787      	b.n	8003576 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003666:	4909      	ldr	r1, [pc, #36]	@ (800368c <HAL_RCC_ClockConfig+0x13c>)
 8003668:	68e0      	ldr	r0, [r4, #12]
 800366a:	684b      	ldr	r3, [r1, #4]
 800366c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003670:	4303      	orrs	r3, r0
 8003672:	604b      	str	r3, [r1, #4]
 8003674:	e782      	b.n	800357c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003676:	4a05      	ldr	r2, [pc, #20]	@ (800368c <HAL_RCC_ClockConfig+0x13c>)
 8003678:	6921      	ldr	r1, [r4, #16]
 800367a:	6853      	ldr	r3, [r2, #4]
 800367c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8003680:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003684:	6053      	str	r3, [r2, #4]
 8003686:	e77b      	b.n	8003580 <HAL_RCC_ClockConfig+0x30>
 8003688:	40022000 	.word	0x40022000
 800368c:	40021000 	.word	0x40021000

08003690 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003694:	f8df 816c 	ldr.w	r8, [pc, #364]	@ 8003804 <HAL_GPIO_Init+0x174>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003698:	4c5b      	ldr	r4, [pc, #364]	@ (8003808 <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00U;
 800369a:	2300      	movs	r3, #0
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800369c:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != RESET)
 80036a0:	680a      	ldr	r2, [r1, #0]
 80036a2:	fa32 f503 	lsrs.w	r5, r2, r3
 80036a6:	d102      	bne.n	80036ae <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 80036a8:	b003      	add	sp, #12
 80036aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80036ae:	2501      	movs	r5, #1
 80036b0:	fa05 fa03 	lsl.w	sl, r5, r3
    if(iocurrent)
 80036b4:	ea1a 0202 	ands.w	r2, sl, r2
 80036b8:	f000 8099 	beq.w	80037ee <HAL_GPIO_Init+0x15e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036bc:	684d      	ldr	r5, [r1, #4]
 80036be:	f025 0e10 	bic.w	lr, r5, #16
 80036c2:	f1be 0f02 	cmp.w	lr, #2
 80036c6:	d111      	bne.n	80036ec <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3];
 80036c8:	08df      	lsrs	r7, r3, #3
 80036ca:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036ce:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80036d2:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036d4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80036d8:	fa09 fb0c 	lsl.w	fp, r9, ip
 80036dc:	ea26 0b0b 	bic.w	fp, r6, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036e0:	690e      	ldr	r6, [r1, #16]
 80036e2:	fa06 f60c 	lsl.w	r6, r6, ip
 80036e6:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->AFR[position >> 3] = temp;
 80036ea:	623e      	str	r6, [r7, #32]
      temp = GPIOx->MODER;
 80036ec:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80036f4:	2603      	movs	r6, #3
 80036f6:	fa06 f70c 	lsl.w	r7, r6, ip
 80036fa:	ea2b 0b07 	bic.w	fp, fp, r7
 80036fe:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003700:	f005 0703 	and.w	r7, r5, #3
 8003704:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003708:	f10e 3eff 	add.w	lr, lr, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800370c:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003710:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 8003714:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003716:	d811      	bhi.n	800373c <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8003718:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800371a:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 800371e:	68cf      	ldr	r7, [r1, #12]
 8003720:	fa07 f70c 	lsl.w	r7, r7, ip
 8003724:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8003728:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800372a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800372c:	ea27 0e0a 	bic.w	lr, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003730:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8003734:	409f      	lsls	r7, r3
 8003736:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800373a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800373c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800373e:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003740:	688e      	ldr	r6, [r1, #8]
 8003742:	fa06 f60c 	lsl.w	r6, r6, ip
 8003746:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8003748:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800374a:	00ee      	lsls	r6, r5, #3
 800374c:	d54f      	bpl.n	80037ee <HAL_GPIO_Init+0x15e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800374e:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8003752:	f046 0601 	orr.w	r6, r6, #1
 8003756:	f8c8 6018 	str.w	r6, [r8, #24]
 800375a:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800375e:	f023 0703 	bic.w	r7, r3, #3
 8003762:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8003766:	f006 0601 	and.w	r6, r6, #1
 800376a:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 800376e:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8003770:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003774:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8003776:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8003778:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800377c:	fa09 fe0c 	lsl.w	lr, r9, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003780:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8003784:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003788:	d033      	beq.n	80037f2 <HAL_GPIO_Init+0x162>
 800378a:	4e20      	ldr	r6, [pc, #128]	@ (800380c <HAL_GPIO_Init+0x17c>)
 800378c:	42b0      	cmp	r0, r6
 800378e:	d032      	beq.n	80037f6 <HAL_GPIO_Init+0x166>
 8003790:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003794:	42b0      	cmp	r0, r6
 8003796:	d030      	beq.n	80037fa <HAL_GPIO_Init+0x16a>
 8003798:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800379c:	42b0      	cmp	r0, r6
 800379e:	d02e      	beq.n	80037fe <HAL_GPIO_Init+0x16e>
 80037a0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80037a4:	42b0      	cmp	r0, r6
 80037a6:	bf14      	ite	ne
 80037a8:	2605      	movne	r6, #5
 80037aa:	2604      	moveq	r6, #4
 80037ac:	fa06 f60c 	lsl.w	r6, r6, ip
 80037b0:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80037b4:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80037b6:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80037b8:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037ba:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
        temp &= ~((uint32_t)iocurrent);
 80037be:	bf0c      	ite	eq
 80037c0:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80037c2:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 80037c4:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80037c6:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037c8:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 80037cc:	bf0c      	ite	eq
 80037ce:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80037d0:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 80037d2:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80037d4:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037d6:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 80037da:	bf0c      	ite	eq
 80037dc:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80037de:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 80037e0:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80037e2:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037e4:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80037e6:	bf54      	ite	pl
 80037e8:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80037ea:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 80037ec:	60e6      	str	r6, [r4, #12]
    position++;
 80037ee:	3301      	adds	r3, #1
 80037f0:	e756      	b.n	80036a0 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037f2:	2600      	movs	r6, #0
 80037f4:	e7da      	b.n	80037ac <HAL_GPIO_Init+0x11c>
 80037f6:	2601      	movs	r6, #1
 80037f8:	e7d8      	b.n	80037ac <HAL_GPIO_Init+0x11c>
 80037fa:	2602      	movs	r6, #2
 80037fc:	e7d6      	b.n	80037ac <HAL_GPIO_Init+0x11c>
 80037fe:	2603      	movs	r6, #3
 8003800:	e7d4      	b.n	80037ac <HAL_GPIO_Init+0x11c>
 8003802:	bf00      	nop
 8003804:	40021000 	.word	0x40021000
 8003808:	40010400 	.word	0x40010400
 800380c:	48000400 	.word	0x48000400

08003810 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003810:	b10a      	cbz	r2, 8003816 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003812:	6181      	str	r1, [r0, #24]
 8003814:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003816:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8003818:	4770      	bx	lr
 800381a:	0000      	movs	r0, r0

0800381c <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800381c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800381e:	6883      	ldr	r3, [r0, #8]
 8003820:	69c1      	ldr	r1, [r0, #28]
{
 8003822:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003824:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003826:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003828:	432b      	orrs	r3, r5
 800382a:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800382c:	f424 4416 	bic.w	r4, r4, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003830:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003832:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003836:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003838:	4323      	orrs	r3, r4
 800383a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800383c:	6853      	ldr	r3, [r2, #4]
 800383e:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003840:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003842:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003846:	4323      	orrs	r3, r4
 8003848:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800384a:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800384c:	6983      	ldr	r3, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800384e:	f424 6430 	bic.w	r4, r4, #2816	@ 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003852:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003854:	4323      	orrs	r3, r4
 8003856:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003858:	4b54      	ldr	r3, [pc, #336]	@ (80039ac <UART_SetConfig+0x190>)
 800385a:	429a      	cmp	r2, r3
 800385c:	d112      	bne.n	8003884 <UART_SetConfig+0x68>
 800385e:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 8003862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003864:	f003 0303 	and.w	r3, r3, #3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d06b      	beq.n	8003944 <UART_SetConfig+0x128>
 800386c:	2b03      	cmp	r3, #3
 800386e:	d01e      	beq.n	80038ae <UART_SetConfig+0x92>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003870:	6840      	ldr	r0, [r0, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003872:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003876:	ea4f 0350 	mov.w	r3, r0, lsr #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800387a:	f040 8089 	bne.w	8003990 <UART_SetConfig+0x174>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800387e:	f503 0361 	add.w	r3, r3, #14745600	@ 0xe10000
 8003882:	e01e      	b.n	80038c2 <UART_SetConfig+0xa6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003884:	4b4a      	ldr	r3, [pc, #296]	@ (80039b0 <UART_SetConfig+0x194>)
 8003886:	429a      	cmp	r2, r3
 8003888:	d11e      	bne.n	80038c8 <UART_SetConfig+0xac>
 800388a:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 800388e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003890:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003894:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003898:	d054      	beq.n	8003944 <UART_SetConfig+0x128>
 800389a:	d805      	bhi.n	80038a8 <UART_SetConfig+0x8c>
 800389c:	2b00      	cmp	r3, #0
 800389e:	d05a      	beq.n	8003956 <UART_SetConfig+0x13a>
 80038a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038a4:	d0e4      	beq.n	8003870 <UART_SetConfig+0x54>
 80038a6:	e038      	b.n	800391a <UART_SetConfig+0xfe>
 80038a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038ac:	d135      	bne.n	800391a <UART_SetConfig+0xfe>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80038ae:	6840      	ldr	r0, [r0, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038b0:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80038b4:	ea4f 0350 	mov.w	r3, r0, lsr #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038b8:	d16f      	bne.n	800399a <UART_SetConfig+0x17e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80038ba:	f103 73f4 	add.w	r3, r3, #31981568	@ 0x1e80000
 80038be:	f503 4390 	add.w	r3, r3, #18432	@ 0x4800
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80038c2:	fbb3 f3f0 	udiv	r3, r3, r0
 80038c6:	e050      	b.n	800396a <UART_SetConfig+0x14e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038c8:	4b3a      	ldr	r3, [pc, #232]	@ (80039b4 <UART_SetConfig+0x198>)
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d10f      	bne.n	80038ee <UART_SetConfig+0xd2>
 80038ce:	f503 33e4 	add.w	r3, r3, #116736	@ 0x1c800
 80038d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80038d8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80038dc:	d032      	beq.n	8003944 <UART_SetConfig+0x128>
 80038de:	d803      	bhi.n	80038e8 <UART_SetConfig+0xcc>
 80038e0:	b3cb      	cbz	r3, 8003956 <UART_SetConfig+0x13a>
 80038e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038e6:	e7dd      	b.n	80038a4 <UART_SetConfig+0x88>
 80038e8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80038ec:	e7de      	b.n	80038ac <UART_SetConfig+0x90>
 80038ee:	4b32      	ldr	r3, [pc, #200]	@ (80039b8 <UART_SetConfig+0x19c>)
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d10f      	bne.n	8003914 <UART_SetConfig+0xf8>
 80038f4:	f503 33e2 	add.w	r3, r3, #115712	@ 0x1c400
 80038f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80038fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003902:	d01f      	beq.n	8003944 <UART_SetConfig+0x128>
 8003904:	d803      	bhi.n	800390e <UART_SetConfig+0xf2>
 8003906:	b333      	cbz	r3, 8003956 <UART_SetConfig+0x13a>
 8003908:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800390c:	e7ca      	b.n	80038a4 <UART_SetConfig+0x88>
 800390e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003912:	e7cb      	b.n	80038ac <UART_SetConfig+0x90>
 8003914:	4b29      	ldr	r3, [pc, #164]	@ (80039bc <UART_SetConfig+0x1a0>)
 8003916:	429a      	cmp	r2, r3
 8003918:	d005      	beq.n	8003926 <UART_SetConfig+0x10a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800391a:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800391e:	f04f 0001 	mov.w	r0, #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003922:	d02b      	beq.n	800397c <UART_SetConfig+0x160>
    }
  }

  return ret;

}
 8003924:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003926:	4b26      	ldr	r3, [pc, #152]	@ (80039c0 <UART_SetConfig+0x1a4>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800392e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003932:	d007      	beq.n	8003944 <UART_SetConfig+0x128>
 8003934:	d803      	bhi.n	800393e <UART_SetConfig+0x122>
 8003936:	b173      	cbz	r3, 8003956 <UART_SetConfig+0x13a>
 8003938:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800393c:	e7b2      	b.n	80038a4 <UART_SetConfig+0x88>
 800393e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003942:	e7b3      	b.n	80038ac <UART_SetConfig+0x90>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003944:	6840      	ldr	r0, [r0, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003946:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800394a:	ea4f 0350 	mov.w	r3, r0, lsr #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800394e:	d129      	bne.n	80039a4 <UART_SetConfig+0x188>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003950:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003954:	e7b5      	b.n	80038c2 <UART_SetConfig+0xa6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003956:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800395a:	6841      	ldr	r1, [r0, #4]
 800395c:	ea4f 0351 	mov.w	r3, r1, lsr #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003960:	d10e      	bne.n	8003980 <UART_SetConfig+0x164>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003962:	f503 0361 	add.w	r3, r3, #14745600	@ 0xe10000
 8003966:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800396a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800396c:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 800396e:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003972:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8003976:	430b      	orrs	r3, r1
 8003978:	60d3      	str	r3, [r2, #12]
 800397a:	e7d3      	b.n	8003924 <UART_SetConfig+0x108>
  uint16_t usartdiv                   = 0x0000U;
 800397c:	2300      	movs	r3, #0
 800397e:	e7f6      	b.n	800396e <UART_SetConfig+0x152>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003980:	f503 03e1 	add.w	r3, r3, #7372800	@ 0x708000
 8003984:	fbb3 f3f1 	udiv	r3, r3, r1
 8003988:	b29b      	uxth	r3, r3
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800398a:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800398c:	2000      	movs	r0, #0
 800398e:	e7c9      	b.n	8003924 <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003990:	f503 03e1 	add.w	r3, r3, #7372800	@ 0x708000
 8003994:	fbb3 f3f0 	udiv	r3, r3, r0
 8003998:	e7f6      	b.n	8003988 <UART_SetConfig+0x16c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800399a:	f503 0374 	add.w	r3, r3, #15990784	@ 0xf40000
 800399e:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80039a2:	e7f7      	b.n	8003994 <UART_SetConfig+0x178>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80039a4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80039a8:	e7f4      	b.n	8003994 <UART_SetConfig+0x178>
 80039aa:	bf00      	nop
 80039ac:	40013800 	.word	0x40013800
 80039b0:	40004400 	.word	0x40004400
 80039b4:	40004800 	.word	0x40004800
 80039b8:	40004c00 	.word	0x40004c00
 80039bc:	40005000 	.word	0x40005000
 80039c0:	40021000 	.word	0x40021000

080039c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80039c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80039cc:	4604      	mov	r4, r0
 80039ce:	4616      	mov	r6, r2
 80039d0:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039d2:	6825      	ldr	r5, [r4, #0]
 80039d4:	69eb      	ldr	r3, [r5, #28]
 80039d6:	ea31 0303 	bics.w	r3, r1, r3
 80039da:	bf0c      	ite	eq
 80039dc:	2301      	moveq	r3, #1
 80039de:	2300      	movne	r3, #0
 80039e0:	42b3      	cmp	r3, r6
 80039e2:	d001      	beq.n	80039e8 <UART_WaitOnFlagUntilTimeout+0x24>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80039e4:	2000      	movs	r0, #0
 80039e6:	e016      	b.n	8003a16 <UART_WaitOnFlagUntilTimeout+0x52>
    if(Timeout != HAL_MAX_DELAY)
 80039e8:	f1b8 3fff 	cmp.w	r8, #4294967295
 80039ec:	d0f2      	beq.n	80039d4 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80039ee:	f1b8 0f00 	cmp.w	r8, #0
 80039f2:	d112      	bne.n	8003a1a <UART_WaitOnFlagUntilTimeout+0x56>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039f4:	682b      	ldr	r3, [r5, #0]
 80039f6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80039fa:	602b      	str	r3, [r5, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fc:	68ab      	ldr	r3, [r5, #8]
 80039fe:	f023 0301 	bic.w	r3, r3, #1
 8003a02:	60ab      	str	r3, [r5, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8003a04:	2320      	movs	r3, #32
 8003a06:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003a0a:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
        __HAL_UNLOCK(huart);
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
        return HAL_TIMEOUT;
 8003a14:	2003      	movs	r0, #3
}
 8003a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003a1a:	f7ff fb3f 	bl	800309c <HAL_GetTick>
 8003a1e:	1bc0      	subs	r0, r0, r7
 8003a20:	4540      	cmp	r0, r8
 8003a22:	d9d6      	bls.n	80039d2 <UART_WaitOnFlagUntilTimeout+0xe>
 8003a24:	e7e6      	b.n	80039f4 <UART_WaitOnFlagUntilTimeout+0x30>

08003a26 <UART_CheckIdleState>:
{
 8003a26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a28:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	66c1      	str	r1, [r0, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 8003a2e:	f7ff fb35 	bl	800309c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a32:	6826      	ldr	r6, [r4, #0]
 8003a34:	6833      	ldr	r3, [r6, #0]
 8003a36:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8003a38:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a3a:	d416      	bmi.n	8003a6a <UART_CheckIdleState+0x44>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a3c:	6833      	ldr	r3, [r6, #0]
 8003a3e:	075b      	lsls	r3, r3, #29
 8003a40:	d50a      	bpl.n	8003a58 <UART_CheckIdleState+0x32>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a42:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	462b      	mov	r3, r5
 8003a4c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a50:	4620      	mov	r0, r4
 8003a52:	f7ff ffb7 	bl	80039c4 <UART_WaitOnFlagUntilTimeout>
 8003a56:	b9a0      	cbnz	r0, 8003a82 <UART_CheckIdleState+0x5c>
  huart->gState  = HAL_UART_STATE_READY;
 8003a58:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003a5a:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8003a5c:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
  __HAL_UNLOCK(huart);
 8003a60:	f884 0068 	strb.w	r0, [r4, #104]	@ 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8003a64:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
  return HAL_OK;
 8003a68:	e00c      	b.n	8003a84 <UART_CheckIdleState+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	460a      	mov	r2, r1
 8003a72:	4603      	mov	r3, r0
 8003a74:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003a78:	4620      	mov	r0, r4
 8003a7a:	f7ff ffa3 	bl	80039c4 <UART_WaitOnFlagUntilTimeout>
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	d0dc      	beq.n	8003a3c <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003a82:	2003      	movs	r0, #3
}
 8003a84:	b002      	add	sp, #8
 8003a86:	bd70      	pop	{r4, r5, r6, pc}

08003a88 <HAL_UART_Init>:
{
 8003a88:	b538      	push	{r3, r4, r5, lr}
  if(huart == NULL)
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	b320      	cbz	r0, 8003ad8 <HAL_UART_Init+0x50>
  if(huart->gState == HAL_UART_STATE_RESET)
 8003a8e:	f890 3069 	ldrb.w	r3, [r0, #105]	@ 0x69
 8003a92:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003a96:	b90b      	cbnz	r3, 8003a9c <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8003a98:	f880 2068 	strb.w	r2, [r0, #104]	@ 0x68
  __HAL_UART_DISABLE(huart);
 8003a9c:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003a9e:	2324      	movs	r3, #36	@ 0x24
 8003aa0:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
  __HAL_UART_DISABLE(huart);
 8003aa4:	682b      	ldr	r3, [r5, #0]
 8003aa6:	f023 0301 	bic.w	r3, r3, #1
 8003aaa:	602b      	str	r3, [r5, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aac:	4620      	mov	r0, r4
 8003aae:	f7ff feb5 	bl	800381c <UART_SetConfig>
 8003ab2:	2801      	cmp	r0, #1
 8003ab4:	d010      	beq.n	8003ad8 <HAL_UART_Init+0x50>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ab6:	686b      	ldr	r3, [r5, #4]
 8003ab8:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8003abc:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003abe:	68ab      	ldr	r3, [r5, #8]
 8003ac0:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8003ac4:	60ab      	str	r3, [r5, #8]
  __HAL_UART_ENABLE(huart);
 8003ac6:	682b      	ldr	r3, [r5, #0]
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	602b      	str	r3, [r5, #0]
  return UART_CheckIdleState(huart);
 8003ace:	4620      	mov	r0, r4
}
 8003ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return UART_CheckIdleState(huart);
 8003ad4:	f7ff bfa7 	b.w	8003a26 <UART_CheckIdleState>
}
 8003ad8:	2001      	movs	r0, #1
 8003ada:	bd38      	pop	{r3, r4, r5, pc}

08003adc <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ade:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003ae0:	f890 3069 	ldrb.w	r3, [r0, #105]	@ 0x69
 8003ae4:	2b20      	cmp	r3, #32
{
 8003ae6:	460d      	mov	r5, r1
 8003ae8:	4604      	mov	r4, r0
 8003aea:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8003aec:	d14a      	bne.n	8003b84 <HAL_UART_Transmit+0xa8>
  {
    if((pData == NULL ) || (Size == 0U))
 8003aee:	2d00      	cmp	r5, #0
 8003af0:	d046      	beq.n	8003b80 <HAL_UART_Transmit+0xa4>
 8003af2:	2a00      	cmp	r2, #0
 8003af4:	d044      	beq.n	8003b80 <HAL_UART_Transmit+0xa4>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003af6:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d042      	beq.n	8003b84 <HAL_UART_Transmit+0xa8>
 8003afe:	2301      	movs	r3, #1
 8003b00:	f880 3068 	strb.w	r3, [r0, #104]	@ 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b04:	2300      	movs	r3, #0
 8003b06:	66c3      	str	r3, [r0, #108]	@ 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b08:	2321      	movs	r3, #33	@ 0x21
 8003b0a:	f880 3069 	strb.w	r3, [r0, #105]	@ 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003b0e:	f7ff fac5 	bl	800309c <HAL_GetTick>

    huart->TxXferSize = Size;
 8003b12:	f8a4 1050 	strh.w	r1, [r4, #80]	@ 0x50
    tickstart = HAL_GetTick();
 8003b16:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8003b18:	f8a4 1052 	strh.w	r1, [r4, #82]	@ 0x52
    while(huart->TxXferCount > 0U)
 8003b1c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8003b20:	b292      	uxth	r2, r2
 8003b22:	b962      	cbnz	r2, 8003b3e <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b24:	9600      	str	r6, [sp, #0]
 8003b26:	463b      	mov	r3, r7
 8003b28:	2140      	movs	r1, #64	@ 0x40
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f7ff ff4a 	bl	80039c4 <UART_WaitOnFlagUntilTimeout>
 8003b30:	b998      	cbnz	r0, 8003b5a <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b32:	2320      	movs	r3, #32
 8003b34:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b38:	f884 0068 	strb.w	r0, [r4, #104]	@ 0x68

    return HAL_OK;
 8003b3c:	e00e      	b.n	8003b5c <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 8003b3e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8003b42:	3a01      	subs	r2, #1
 8003b44:	b292      	uxth	r2, r2
 8003b46:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b4a:	463b      	mov	r3, r7
 8003b4c:	9600      	str	r6, [sp, #0]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	2180      	movs	r1, #128	@ 0x80
 8003b52:	4620      	mov	r0, r4
 8003b54:	f7ff ff36 	bl	80039c4 <UART_WaitOnFlagUntilTimeout>
 8003b58:	b110      	cbz	r0, 8003b60 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8003b5a:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003b5c:	b003      	add	sp, #12
 8003b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b60:	68a3      	ldr	r3, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003b62:	6822      	ldr	r2, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b68:	d107      	bne.n	8003b7a <HAL_UART_Transmit+0x9e>
 8003b6a:	6923      	ldr	r3, [r4, #16]
 8003b6c:	b92b      	cbnz	r3, 8003b7a <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003b6e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003b76:	8513      	strh	r3, [r2, #40]	@ 0x28
 8003b78:	e7d0      	b.n	8003b1c <HAL_UART_Transmit+0x40>
 8003b7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003b7e:	e7fa      	b.n	8003b76 <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 8003b80:	2001      	movs	r0, #1
 8003b82:	e7eb      	b.n	8003b5c <HAL_UART_Transmit+0x80>
    __HAL_LOCK(huart);
 8003b84:	2002      	movs	r0, #2
 8003b86:	e7e9      	b.n	8003b5c <HAL_UART_Transmit+0x80>

08003b88 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003b8c:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8003b8e:	f890 306a 	ldrb.w	r3, [r0, #106]	@ 0x6a
 8003b92:	2b20      	cmp	r3, #32
{
 8003b94:	460d      	mov	r5, r1
 8003b96:	4604      	mov	r4, r0
 8003b98:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8003b9a:	d15c      	bne.n	8003c56 <HAL_UART_Receive+0xce>
  {
    if((pData == NULL ) || (Size == 0U))
 8003b9c:	2d00      	cmp	r5, #0
 8003b9e:	d058      	beq.n	8003c52 <HAL_UART_Receive+0xca>
 8003ba0:	2a00      	cmp	r2, #0
 8003ba2:	d056      	beq.n	8003c52 <HAL_UART_Receive+0xca>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ba4:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d054      	beq.n	8003c56 <HAL_UART_Receive+0xce>
 8003bac:	2301      	movs	r3, #1
 8003bae:	f880 3068 	strb.w	r3, [r0, #104]	@ 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 8003bb2:	6803      	ldr	r3, [r0, #0]
 8003bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb8:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	66c3      	str	r3, [r0, #108]	@ 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bbe:	2322      	movs	r3, #34	@ 0x22
 8003bc0:	f880 306a 	strb.w	r3, [r0, #106]	@ 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003bc4:	f7ff fa6a 	bl	800309c <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003bc8:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8003bca:	f8a4 1058 	strh.w	r1, [r4, #88]	@ 0x58
    UART_MASK_COMPUTATION(huart);
 8003bce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8003bd2:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 8003bd4:	f8a4 105a 	strh.w	r1, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 8003bd8:	d115      	bne.n	8003c06 <HAL_UART_Receive+0x7e>
 8003bda:	6923      	ldr	r3, [r4, #16]
 8003bdc:	b98b      	cbnz	r3, 8003c02 <HAL_UART_Receive+0x7a>
 8003bde:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8003be2:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003be6:	f8b4 705c 	ldrh.w	r7, [r4, #92]	@ 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8003bea:	f8b4 005a 	ldrh.w	r0, [r4, #90]	@ 0x5a
 8003bee:	b280      	uxth	r0, r0
 8003bf0:	b980      	cbnz	r0, 8003c14 <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003bf2:	2320      	movs	r3, #32
 8003bf4:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bf8:	f884 0068 	strb.w	r0, [r4, #104]	@ 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003bfc:	b002      	add	sp, #8
 8003bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8003c02:	23ff      	movs	r3, #255	@ 0xff
 8003c04:	e7ed      	b.n	8003be2 <HAL_UART_Receive+0x5a>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1ed      	bne.n	8003be6 <HAL_UART_Receive+0x5e>
 8003c0a:	6923      	ldr	r3, [r4, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f8      	beq.n	8003c02 <HAL_UART_Receive+0x7a>
 8003c10:	237f      	movs	r3, #127	@ 0x7f
 8003c12:	e7e6      	b.n	8003be2 <HAL_UART_Receive+0x5a>
      huart->RxXferCount--;
 8003c14:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 8003c18:	3a01      	subs	r2, #1
 8003c1a:	b292      	uxth	r2, r2
 8003c1c:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c20:	4643      	mov	r3, r8
 8003c22:	9600      	str	r6, [sp, #0]
 8003c24:	2200      	movs	r2, #0
 8003c26:	2120      	movs	r1, #32
 8003c28:	4620      	mov	r0, r4
 8003c2a:	f7ff fecb 	bl	80039c4 <UART_WaitOnFlagUntilTimeout>
 8003c2e:	b9a0      	cbnz	r0, 8003c5a <HAL_UART_Receive+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c30:	68a2      	ldr	r2, [r4, #8]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8003c32:	6823      	ldr	r3, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c34:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8003c38:	d106      	bne.n	8003c48 <HAL_UART_Receive+0xc0>
 8003c3a:	6922      	ldr	r2, [r4, #16]
 8003c3c:	b922      	cbnz	r2, 8003c48 <HAL_UART_Receive+0xc0>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8003c3e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003c40:	403b      	ands	r3, r7
 8003c42:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8003c46:	e7d0      	b.n	8003bea <HAL_UART_Receive+0x62>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003c48:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003c4a:	403b      	ands	r3, r7
 8003c4c:	f805 3b01 	strb.w	r3, [r5], #1
 8003c50:	e7cb      	b.n	8003bea <HAL_UART_Receive+0x62>
      return  HAL_ERROR;
 8003c52:	2001      	movs	r0, #1
 8003c54:	e7d2      	b.n	8003bfc <HAL_UART_Receive+0x74>
    __HAL_LOCK(huart);
 8003c56:	2002      	movs	r0, #2
 8003c58:	e7d0      	b.n	8003bfc <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 8003c5a:	2003      	movs	r0, #3
 8003c5c:	e7ce      	b.n	8003bfc <HAL_UART_Receive+0x74>
 8003c5e:	0000      	movs	r0, r0

08003c60 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003c60:	4a0a      	ldr	r2, [pc, #40]	@ (8003c8c <_sbrk+0x2c>)
 8003c62:	6811      	ldr	r1, [r2, #0]
{
 8003c64:	b508      	push	{r3, lr}
 8003c66:	4603      	mov	r3, r0
	if (heap_end == 0)
 8003c68:	b909      	cbnz	r1, 8003c6e <_sbrk+0xe>
		heap_end = &end;
 8003c6a:	4909      	ldr	r1, [pc, #36]	@ (8003c90 <_sbrk+0x30>)
 8003c6c:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8003c6e:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8003c70:	4669      	mov	r1, sp
 8003c72:	4403      	add	r3, r0
 8003c74:	428b      	cmp	r3, r1
 8003c76:	d906      	bls.n	8003c86 <_sbrk+0x26>
	{
		errno = ENOMEM;
 8003c78:	f7fd fb4e 	bl	8001318 <__errno>
 8003c7c:	230c      	movs	r3, #12
 8003c7e:	6003      	str	r3, [r0, #0]
		return (char *) -1;
 8003c80:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (char *) prev_heap_end;
}
 8003c84:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8003c86:	6013      	str	r3, [r2, #0]
	return (char *) prev_heap_end;
 8003c88:	e7fc      	b.n	8003c84 <_sbrk+0x24>
 8003c8a:	bf00      	nop
 8003c8c:	200001ac 	.word	0x200001ac
 8003c90:	20000330 	.word	0x20000330

08003c94 <Reset_Handler>:
 8003c94:	2100      	movs	r1, #0
 8003c96:	e003      	b.n	8003ca0 <LoopCopyDataInit>

08003c98 <CopyDataInit>:
 8003c98:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc8 <LoopForever+0x2>)
 8003c9a:	585b      	ldr	r3, [r3, r1]
 8003c9c:	5043      	str	r3, [r0, r1]
 8003c9e:	3104      	adds	r1, #4

08003ca0 <LoopCopyDataInit>:
 8003ca0:	480a      	ldr	r0, [pc, #40]	@ (8003ccc <LoopForever+0x6>)
 8003ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd0 <LoopForever+0xa>)
 8003ca4:	1842      	adds	r2, r0, r1
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d3f6      	bcc.n	8003c98 <CopyDataInit>
 8003caa:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd4 <LoopForever+0xe>)
 8003cac:	e002      	b.n	8003cb4 <LoopFillZerobss>

08003cae <FillZerobss>:
 8003cae:	2300      	movs	r3, #0
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	3204      	adds	r2, #4

08003cb4 <LoopFillZerobss>:
 8003cb4:	4b08      	ldr	r3, [pc, #32]	@ (8003cd8 <LoopForever+0x12>)
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d3f9      	bcc.n	8003cae <FillZerobss>
 8003cba:	f3af 8000 	nop.w
 8003cbe:	f7fd fb31 	bl	8001324 <__libc_init_array>
 8003cc2:	f7fe fefb 	bl	8002abc <main>

08003cc6 <LoopForever>:
 8003cc6:	e7fe      	b.n	8003cc6 <LoopForever>
 8003cc8:	08003df0 	.word	0x08003df0
 8003ccc:	20000000 	.word	0x20000000
 8003cd0:	2000006c 	.word	0x2000006c
 8003cd4:	2000006c 	.word	0x2000006c
 8003cd8:	20000330 	.word	0x20000330

08003cdc <BusFault_Handler>:
 8003cdc:	e7fe      	b.n	8003cdc <BusFault_Handler>
 8003cde:	0000      	movs	r0, r0

08003ce0 <_init>:
 8003ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce2:	bf00      	nop
 8003ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ce6:	bc08      	pop	{r3}
 8003ce8:	469e      	mov	lr, r3
 8003cea:	4770      	bx	lr

08003cec <_fini>:
 8003cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cee:	bf00      	nop
 8003cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf2:	bc08      	pop	{r3}
 8003cf4:	469e      	mov	lr, r3
 8003cf6:	4770      	bx	lr
