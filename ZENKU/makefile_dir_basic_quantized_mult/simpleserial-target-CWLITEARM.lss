
simpleserial-target-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a5c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002be4  08002be4  00003be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bf4  08002bf4  00003bfc  2**0
                  CONTENTS
  4 .ARM          00000000  08002bf4  08002bf4  00003bfc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bf4  08002bfc  00003bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bf4  08002bf4  00003bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bf8  08002bf8  00003bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00003bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000000  08002bfc  00004000  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000158  08002bfc  00004158  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00003bfc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003d78  00000000  00000000  00003c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009ad  00000000  00000000  0000799e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000dca  00000000  00000000  0000834b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e8  00000000  00000000  00009115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000188  00000000  00000000  000092fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f2e  00000000  00000000  00009485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000014dc  00000000  00000000  0000b3b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000012  00000000  00000000  0000c88f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006e4  00000000  00000000  0000c8a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  0000cf88  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000070  00000000  00000000  0000d0cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loclists 00000065  00000000  00000000  0000d13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__libc_init_array>:
 8000188:	b570      	push	{r4, r5, r6, lr}
 800018a:	4b0f      	ldr	r3, [pc, #60]	@ (80001c8 <__libc_init_array+0x40>)
 800018c:	4d0f      	ldr	r5, [pc, #60]	@ (80001cc <__libc_init_array+0x44>)
 800018e:	42ab      	cmp	r3, r5
 8000190:	eba3 0605 	sub.w	r6, r3, r5
 8000194:	d007      	beq.n	80001a6 <__libc_init_array+0x1e>
 8000196:	10b6      	asrs	r6, r6, #2
 8000198:	2400      	movs	r4, #0
 800019a:	f855 3b04 	ldr.w	r3, [r5], #4
 800019e:	3401      	adds	r4, #1
 80001a0:	4798      	blx	r3
 80001a2:	42a6      	cmp	r6, r4
 80001a4:	d8f9      	bhi.n	800019a <__libc_init_array+0x12>
 80001a6:	f002 fd11 	bl	8002bcc <_init>
 80001aa:	4d09      	ldr	r5, [pc, #36]	@ (80001d0 <__libc_init_array+0x48>)
 80001ac:	4b09      	ldr	r3, [pc, #36]	@ (80001d4 <__libc_init_array+0x4c>)
 80001ae:	1b5e      	subs	r6, r3, r5
 80001b0:	42ab      	cmp	r3, r5
 80001b2:	ea4f 06a6 	mov.w	r6, r6, asr #2
 80001b6:	d006      	beq.n	80001c6 <__libc_init_array+0x3e>
 80001b8:	2400      	movs	r4, #0
 80001ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80001be:	3401      	adds	r4, #1
 80001c0:	4798      	blx	r3
 80001c2:	42a6      	cmp	r6, r4
 80001c4:	d8f9      	bhi.n	80001ba <__libc_init_array+0x32>
 80001c6:	bd70      	pop	{r4, r5, r6, pc}
 80001c8:	08002bf4 	.word	0x08002bf4
 80001cc:	08002bf4 	.word	0x08002bf4
 80001d0:	08002bf4 	.word	0x08002bf4
 80001d4:	08002bf8 	.word	0x08002bf8

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000013c 	.word	0x2000013c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002bcc 	.word	0x08002bcc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000140 	.word	0x20000140
 8000214:	08002bcc 	.word	0x08002bcc

08000218 <one_mult>:
/// This function will handle the 'p' command send from the capture board.
/// It returns the squared version of the scmd given.
/// It does this in approximately equal time, which allows us to see clear
/// differences between different scmd values.
uint8_t one_mult(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 8000218:	b590      	push	{r4, r7, lr}
 800021a:	b08d      	sub	sp, #52	@ 0x34
 800021c:	af00      	add	r7, sp, #0
 800021e:	603b      	str	r3, [r7, #0]
 8000220:	4603      	mov	r3, r0
 8000222:	71fb      	strb	r3, [r7, #7]
 8000224:	460b      	mov	r3, r1
 8000226:	71bb      	strb	r3, [r7, #6]
 8000228:	4613      	mov	r3, r2
 800022a:	717b      	strb	r3, [r7, #5]
  volatile uint8_t result = 0;
 800022c:	2300      	movs	r3, #0
 800022e:	77fb      	strb	r3, [r7, #31]
  int arr[4] = {7,5,4,2};
 8000230:	4b20      	ldr	r3, [pc, #128]	@ (80002b4 <one_mult+0x9c>)
 8000232:	f107 040c 	add.w	r4, r7, #12
 8000236:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000238:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t weight = 27;
 800023c:	231b      	movs	r3, #27
 800023e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t buff[2] = { weight };
 8000242:	2300      	movs	r3, #0
 8000244:	813b      	strh	r3, [r7, #8]
 8000246:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800024a:	723b      	strb	r3, [r7, #8]
  buff[-1] = 0;
 800024c:	2300      	movs	r3, #0
 800024e:	71fb      	strb	r3, [r7, #7]
    
  trigger_high();                                          // Start measurement!!!
 8000250:	f000 fcdc 	bl	8000c0c <trigger_high>
  for(int x = 0;x<100;x++){
 8000254:	2300      	movs	r3, #0
 8000256:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000258:	e003      	b.n	8000262 <one_mult+0x4a>
      __asm__("nop");
 800025a:	bf00      	nop
  for(int x = 0;x<100;x++){
 800025c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800025e:	3301      	adds	r3, #1
 8000260:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000264:	2b63      	cmp	r3, #99	@ 0x63
 8000266:	ddf8      	ble.n	800025a <one_mult+0x42>
  }
  uint32_t num = (uint32_t)(weight * buf[0]);
 8000268:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800026c:	683a      	ldr	r2, [r7, #0]
 800026e:	7812      	ldrb	r2, [r2, #0]
 8000270:	fb02 f303 	mul.w	r3, r2, r3
 8000274:	623b      	str	r3, [r7, #32]
  for(int x = 0;x<100;x++){
 8000276:	2300      	movs	r3, #0
 8000278:	62bb      	str	r3, [r7, #40]	@ 0x28
 800027a:	e003      	b.n	8000284 <one_mult+0x6c>
      __asm__("nop");
 800027c:	bf00      	nop
  for(int x = 0;x<100;x++){
 800027e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000280:	3301      	adds	r3, #1
 8000282:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000286:	2b63      	cmp	r3, #99	@ 0x63
 8000288:	ddf8      	ble.n	800027c <one_mult+0x64>
  }
  trigger_low();                                             // Stop measurement!!!
 800028a:	f000 fcca 	bl	8000c22 <trigger_low>
    
  result = scmd*scmd;
 800028e:	79ba      	ldrb	r2, [r7, #6]
 8000290:	79bb      	ldrb	r3, [r7, #6]
 8000292:	fb12 f303 	smulbb	r3, r2, r3
 8000296:	b2db      	uxtb	r3, r3
 8000298:	77fb      	strb	r3, [r7, #31]
  // For now we can just return the result back to the user.
  simpleserial_put('r', 2, buff);
 800029a:	f107 0308 	add.w	r3, r7, #8
 800029e:	461a      	mov	r2, r3
 80002a0:	2102      	movs	r1, #2
 80002a2:	2072      	movs	r0, #114	@ 0x72
 80002a4:	f000 fb44 	bl	8000930 <simpleserial_put>
  return 0;
 80002a8:	2300      	movs	r3, #0
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	3734      	adds	r7, #52	@ 0x34
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd90      	pop	{r4, r7, pc}
 80002b2:	bf00      	nop
 80002b4:	08002be4 	.word	0x08002be4

080002b8 <hundred_mult>:



uint8_t hundred_mult(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 80002b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002bc:	b090      	sub	sp, #64	@ 0x40
 80002be:	af00      	add	r7, sp, #0
 80002c0:	603b      	str	r3, [r7, #0]
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
 80002c6:	460b      	mov	r3, r1
 80002c8:	71bb      	strb	r3, [r7, #6]
 80002ca:	4613      	mov	r3, r2
 80002cc:	717b      	strb	r3, [r7, #5]
 80002ce:	466b      	mov	r3, sp
 80002d0:	469a      	mov	sl, r3
  //All operations to do before capturing, because after high low, there exist possibily that after low capturing iss still in progress
  volatile uint8_t result = 0;
 80002d2:	2300      	movs	r3, #0
 80002d4:	76fb      	strb	r3, [r7, #27]
  int arr[4] = {7,5,4,2};
 80002d6:	4b56      	ldr	r3, [pc, #344]	@ (8000430 <hundred_mult+0x178>)
 80002d8:	f107 0608 	add.w	r6, r7, #8
 80002dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002de:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  unsigned char weight = 5;
 80002e2:	2305      	movs	r3, #5
 80002e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  unsigned char counter = 250;
 80002e8:	23fa      	movs	r3, #250	@ 0xfa
 80002ea:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  unsigned char resutl;
  unsigned char val = buf[0];
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  char string[counter+1]; 
 80002f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80002fa:	1c59      	adds	r1, r3, #1
 80002fc:	1e4b      	subs	r3, r1, #1
 80002fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000300:	460a      	mov	r2, r1
 8000302:	2300      	movs	r3, #0
 8000304:	4690      	mov	r8, r2
 8000306:	4699      	mov	r9, r3
 8000308:	f04f 0200 	mov.w	r2, #0
 800030c:	f04f 0300 	mov.w	r3, #0
 8000310:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000314:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000318:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800031c:	460a      	mov	r2, r1
 800031e:	2300      	movs	r3, #0
 8000320:	4614      	mov	r4, r2
 8000322:	461d      	mov	r5, r3
 8000324:	f04f 0200 	mov.w	r2, #0
 8000328:	f04f 0300 	mov.w	r3, #0
 800032c:	00eb      	lsls	r3, r5, #3
 800032e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000332:	00e2      	lsls	r2, r4, #3
 8000334:	460b      	mov	r3, r1
 8000336:	3307      	adds	r3, #7
 8000338:	08db      	lsrs	r3, r3, #3
 800033a:	00db      	lsls	r3, r3, #3
 800033c:	ebad 0d03 	sub.w	sp, sp, r3
 8000340:	466b      	mov	r3, sp
 8000342:	3300      	adds	r3, #0
 8000344:	627b      	str	r3, [r7, #36]	@ 0x24
  string[counter - 1] = 0;
 8000346:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800034a:	3b01      	subs	r3, #1
 800034c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800034e:	2100      	movs	r1, #0
 8000350:	54d1      	strb	r1, [r2, r3]
  //For now we can just return the result back to the user.
  for(int x = 0; x < counter; x++){
 8000352:	2300      	movs	r3, #0
 8000354:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000356:	e013      	b.n	8000380 <hundred_mult+0xc8>
        string[x] = x % (counter/2);
 8000358:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800035c:	085b      	lsrs	r3, r3, #1
 800035e:	b2db      	uxtb	r3, r3
 8000360:	461a      	mov	r2, r3
 8000362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000364:	fb93 f1f2 	sdiv	r1, r3, r2
 8000368:	fb01 f202 	mul.w	r2, r1, r2
 800036c:	1a9b      	subs	r3, r3, r2
 800036e:	b2d9      	uxtb	r1, r3
 8000370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000374:	4413      	add	r3, r2
 8000376:	460a      	mov	r2, r1
 8000378:	701a      	strb	r2, [r3, #0]
  for(int x = 0; x < counter; x++){
 800037a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800037c:	3301      	adds	r3, #1
 800037e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000380:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000384:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000386:	429a      	cmp	r2, r3
 8000388:	dbe6      	blt.n	8000358 <hundred_mult+0xa0>
  }


    
  trigger_high();                                          // Start measurement!!!
 800038a:	f000 fc3f 	bl	8000c0c <trigger_high>
  for(int x = 0;x<100;x++){
 800038e:	2300      	movs	r3, #0
 8000390:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000392:	e003      	b.n	800039c <hundred_mult+0xe4>
      __asm__("nop");
 8000394:	bf00      	nop
  for(int x = 0;x<100;x++){
 8000396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000398:	3301      	adds	r3, #1
 800039a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800039c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800039e:	2b63      	cmp	r3, #99	@ 0x63
 80003a0:	ddf8      	ble.n	8000394 <hundred_mult+0xdc>
  }
  for(uint8_t x = 0;x<counter;x++){
 80003a2:	2300      	movs	r3, #0
 80003a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80003a8:	e01c      	b.n	80003e4 <hundred_mult+0x12c>
      __asm__("nop");
 80003aa:	bf00      	nop
      __asm__("nop");
 80003ac:	bf00      	nop
      unsigned char akt = x % (counter/2);
 80003ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80003b2:	085b      	lsrs	r3, r3, #1
 80003b4:	b2da      	uxtb	r2, r3
 80003b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80003ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80003be:	fb01 f202 	mul.w	r2, r1, r2
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      //unsigned char result = (unsigned char)(x * val);
      uint32_t num = (uint32_t)(x) * (uint32_t)(val);
 80003c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80003cc:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80003d0:	fb02 f303 	mul.w	r3, r2, r3
 80003d4:	61fb      	str	r3, [r7, #28]
      __asm__("nop");
 80003d6:	bf00      	nop
      __asm__("nop");
 80003d8:	bf00      	nop
  for(uint8_t x = 0;x<counter;x++){
 80003da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80003de:	3301      	adds	r3, #1
 80003e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80003e4:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80003e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d3dc      	bcc.n	80003aa <hundred_mult+0xf2>
  }
  for(int x = 0;x<100;x++){
 80003f0:	2300      	movs	r3, #0
 80003f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80003f4:	e003      	b.n	80003fe <hundred_mult+0x146>
      __asm__("nop");
 80003f6:	bf00      	nop
  for(int x = 0;x<100;x++){
 80003f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80003fa:	3301      	adds	r3, #1
 80003fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80003fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000400:	2b63      	cmp	r3, #99	@ 0x63
 8000402:	ddf8      	ble.n	80003f6 <hundred_mult+0x13e>
  }
  trigger_low();                                        // Stop measurement!!!
 8000404:	f000 fc0d 	bl	8000c22 <trigger_low>
    
  result = scmd*scmd;
 8000408:	79ba      	ldrb	r2, [r7, #6]
 800040a:	79bb      	ldrb	r3, [r7, #6]
 800040c:	fb12 f303 	smulbb	r3, r2, r3
 8000410:	b2db      	uxtb	r3, r3
 8000412:	76fb      	strb	r3, [r7, #27]
  simpleserial_put('r', 2, result);
 8000414:	7efb      	ldrb	r3, [r7, #27]
 8000416:	b2db      	uxtb	r3, r3
 8000418:	461a      	mov	r2, r3
 800041a:	2102      	movs	r1, #2
 800041c:	2072      	movs	r0, #114	@ 0x72
 800041e:	f000 fa87 	bl	8000930 <simpleserial_put>
  return 0;
 8000422:	2300      	movs	r3, #0
 8000424:	46d5      	mov	sp, sl
}
 8000426:	4618      	mov	r0, r3
 8000428:	3740      	adds	r7, #64	@ 0x40
 800042a:	46bd      	mov	sp, r7
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	08002be4 	.word	0x08002be4

08000434 <main>:



int main(void) {
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  // Setup the specific chipset.
  platform_init();
 8000438:	f000 fb1a 	bl	8000a70 <platform_init>
  // Setup serial communication line.
  init_uart();
 800043c:	f000 fb6a 	bl	8000b14 <init_uart>
  // Setup measurement trigger.
  trigger_setup();
 8000440:	f000 fbb8 	bl	8000bb4 <trigger_setup>

  simpleserial_init();
 8000444:	f000 f8e8 	bl	8000618 <simpleserial_init>

  // Insert your handlers here.
  simpleserial_addcmd('p', 16, hundred_mult);
 8000448:	4a06      	ldr	r2, [pc, #24]	@ (8000464 <main+0x30>)
 800044a:	2110      	movs	r1, #16
 800044c:	2070      	movs	r0, #112	@ 0x70
 800044e:	f000 f8f5 	bl	800063c <simpleserial_addcmd>
  simpleserial_addcmd('o', 16, one_mult);
 8000452:	4a05      	ldr	r2, [pc, #20]	@ (8000468 <main+0x34>)
 8000454:	2110      	movs	r1, #16
 8000456:	206f      	movs	r0, #111	@ 0x6f
 8000458:	f000 f8f0 	bl	800063c <simpleserial_addcmd>

  // What for the capture board to send commands and handle them.
  while (1)
    simpleserial_get();
 800045c:	f000 f934 	bl	80006c8 <simpleserial_get>
 8000460:	e7fc      	b.n	800045c <main+0x28>
 8000462:	bf00      	nop
 8000464:	080002b9 	.word	0x080002b9
 8000468:	08000219 	.word	0x08000219

0800046c <ss_crc>:


// 0xA6 formerly 
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	460b      	mov	r3, r1
 8000476:	70fb      	strb	r3, [r7, #3]
	unsigned int k = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
	uint8_t crc = 0x00;
 800047c:	2300      	movs	r3, #0
 800047e:	72fb      	strb	r3, [r7, #11]
	while (len--) {
 8000480:	e01f      	b.n	80004c2 <ss_crc+0x56>
		crc ^= *buf++;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	1c5a      	adds	r2, r3, #1
 8000486:	607a      	str	r2, [r7, #4]
 8000488:	781a      	ldrb	r2, [r3, #0]
 800048a:	7afb      	ldrb	r3, [r7, #11]
 800048c:	4053      	eors	r3, r2
 800048e:	72fb      	strb	r3, [r7, #11]
		for (k = 0; k < 8; k++) {
 8000490:	2300      	movs	r3, #0
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	e012      	b.n	80004bc <ss_crc+0x50>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8000496:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800049a:	2b00      	cmp	r3, #0
 800049c:	da07      	bge.n	80004ae <ss_crc+0x42>
 800049e:	7afb      	ldrb	r3, [r7, #11]
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	b25b      	sxtb	r3, r3
 80004a4:	f083 034d 	eor.w	r3, r3, #77	@ 0x4d
 80004a8:	b25b      	sxtb	r3, r3
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	e002      	b.n	80004b4 <ss_crc+0x48>
 80004ae:	7afb      	ldrb	r3, [r7, #11]
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	72fb      	strb	r3, [r7, #11]
		for (k = 0; k < 8; k++) {
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	3301      	adds	r3, #1
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	2b07      	cmp	r3, #7
 80004c0:	d9e9      	bls.n	8000496 <ss_crc+0x2a>
	while (len--) {
 80004c2:	78fb      	ldrb	r3, [r7, #3]
 80004c4:	1e5a      	subs	r2, r3, #1
 80004c6:	70fa      	strb	r2, [r7, #3]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d1da      	bne.n	8000482 <ss_crc+0x16>
		}
	}
	return crc;
 80004cc:	7afb      	ldrb	r3, [r7, #11]

}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <check_version>:
}

#define FRAME_BYTE 0x00

uint8_t check_version(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *data)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	603b      	str	r3, [r7, #0]
 80004e0:	4603      	mov	r3, r0
 80004e2:	71fb      	strb	r3, [r7, #7]
 80004e4:	460b      	mov	r3, r1
 80004e6:	71bb      	strb	r3, [r7, #6]
 80004e8:	4613      	mov	r3, r2
 80004ea:	717b      	strb	r3, [r7, #5]
	uint8_t ver = SS_VER;
 80004ec:	2303      	movs	r3, #3
 80004ee:	73fb      	strb	r3, [r7, #15]
	simpleserial_put('r', 1, &ver);
 80004f0:	f107 030f 	add.w	r3, r7, #15
 80004f4:	461a      	mov	r2, r3
 80004f6:	2101      	movs	r1, #1
 80004f8:	2072      	movs	r0, #114	@ 0x72
 80004fa:	f000 fa19 	bl	8000930 <simpleserial_put>
	return SS_ERR_OK;
 80004fe:	2300      	movs	r3, #0
}
 8000500:	4618      	mov	r0, r3
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <ss_get_commands>:

uint8_t ss_get_commands(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *data)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	4603      	mov	r3, r0
 8000512:	71fb      	strb	r3, [r7, #7]
 8000514:	460b      	mov	r3, r1
 8000516:	71bb      	strb	r3, [r7, #6]
 8000518:	4613      	mov	r3, r2
 800051a:	717b      	strb	r3, [r7, #5]
    uint8_t cmd_chars[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800051c:	2300      	movs	r3, #0
 800051e:	77fb      	strb	r3, [r7, #31]
 8000520:	e010      	b.n	8000544 <ss_get_commands+0x3c>
        cmd_chars[i] = commands[i].c;
 8000522:	7ffa      	ldrb	r2, [r7, #31]
 8000524:	7ff9      	ldrb	r1, [r7, #31]
 8000526:	4811      	ldr	r0, [pc, #68]	@ (800056c <ss_get_commands+0x64>)
 8000528:	4613      	mov	r3, r2
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	4413      	add	r3, r2
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	4403      	add	r3, r0
 8000532:	781a      	ldrb	r2, [r3, #0]
 8000534:	f101 0320 	add.w	r3, r1, #32
 8000538:	443b      	add	r3, r7
 800053a:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800053e:	7ffb      	ldrb	r3, [r7, #31]
 8000540:	3301      	adds	r3, #1
 8000542:	77fb      	strb	r3, [r7, #31]
 8000544:	7ffa      	ldrb	r2, [r7, #31]
 8000546:	4b0a      	ldr	r3, [pc, #40]	@ (8000570 <ss_get_commands+0x68>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	b2db      	uxtb	r3, r3
 800054c:	429a      	cmp	r2, r3
 800054e:	dbe8      	blt.n	8000522 <ss_get_commands+0x1a>
    }

    simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 8000550:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <ss_get_commands+0x68>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	b2db      	uxtb	r3, r3
 8000556:	f107 020c 	add.w	r2, r7, #12
 800055a:	4619      	mov	r1, r3
 800055c:	2072      	movs	r0, #114	@ 0x72
 800055e:	f000 f9e7 	bl	8000930 <simpleserial_put>
    return 0x00;
 8000562:	2300      	movs	r3, #0

}
 8000564:	4618      	mov	r0, r3
 8000566:	3720      	adds	r7, #32
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000004 	.word	0x20000004
 8000570:	20000000 	.word	0x20000000

08000574 <stuff_data>:

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	460b      	mov	r3, r1
 800057e:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 1;
 8000580:	2301      	movs	r3, #1
 8000582:	73fb      	strb	r3, [r7, #15]
	uint8_t last = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	73bb      	strb	r3, [r7, #14]
	for (; i < len; i++) {
 8000588:	e012      	b.n	80005b0 <stuff_data+0x3c>
		if (buf[i] == FRAME_BYTE) {
 800058a:	7bfb      	ldrb	r3, [r7, #15]
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	4413      	add	r3, r2
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d109      	bne.n	80005aa <stuff_data+0x36>
			buf[last] = i - last;
 8000596:	7bbb      	ldrb	r3, [r7, #14]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	4413      	add	r3, r2
 800059c:	7bf9      	ldrb	r1, [r7, #15]
 800059e:	7bba      	ldrb	r2, [r7, #14]
 80005a0:	1a8a      	subs	r2, r1, r2
 80005a2:	b2d2      	uxtb	r2, r2
 80005a4:	701a      	strb	r2, [r3, #0]
			last = i;
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	73bb      	strb	r3, [r7, #14]
	for (; i < len; i++) {
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	3301      	adds	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	7bfa      	ldrb	r2, [r7, #15]
 80005b2:	78fb      	ldrb	r3, [r7, #3]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d3e8      	bcc.n	800058a <stuff_data+0x16>
		}
	}
	return 0x00;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]
	uint8_t next = buf[0];
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	73fb      	strb	r3, [r7, #15]
	buf[0] = 0x00;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
	//len -= 1;
	uint8_t tmp = next;
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	73bb      	strb	r3, [r7, #14]
	while ((next < len) && tmp != 0) {
 80005e0:	e00d      	b.n	80005fe <unstuff_data+0x3a>
		tmp = buf[next];
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	4413      	add	r3, r2
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	73bb      	strb	r3, [r7, #14]
		buf[next] = FRAME_BYTE;
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	4413      	add	r3, r2
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
		next += tmp;
 80005f6:	7bfa      	ldrb	r2, [r7, #15]
 80005f8:	7bbb      	ldrb	r3, [r7, #14]
 80005fa:	4413      	add	r3, r2
 80005fc:	73fb      	strb	r3, [r7, #15]
	while ((next < len) && tmp != 0) {
 80005fe:	7bfa      	ldrb	r2, [r7, #15]
 8000600:	78fb      	ldrb	r3, [r7, #3]
 8000602:	429a      	cmp	r2, r3
 8000604:	d202      	bcs.n	800060c <unstuff_data+0x48>
 8000606:	7bbb      	ldrb	r3, [r7, #14]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d1ea      	bne.n	80005e2 <unstuff_data+0x1e>
	}
	return next;
 800060c:	7bfb      	ldrb	r3, [r7, #15]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <simpleserial_init>:

// Set up the SimpleSerial module by preparing internal commands
// This just adds the "v" command for now...
void simpleserial_init()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	simpleserial_addcmd('v', 0, check_version);
 800061c:	4a05      	ldr	r2, [pc, #20]	@ (8000634 <simpleserial_init+0x1c>)
 800061e:	2100      	movs	r1, #0
 8000620:	2076      	movs	r0, #118	@ 0x76
 8000622:	f000 f80b 	bl	800063c <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 8000626:	4a04      	ldr	r2, [pc, #16]	@ (8000638 <simpleserial_init+0x20>)
 8000628:	2100      	movs	r1, #0
 800062a:	2077      	movs	r0, #119	@ 0x77
 800062c:	f000 f806 	bl	800063c <simpleserial_addcmd>
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	080004d9 	.word	0x080004d9
 8000638:	08000509 	.word	0x08000509

0800063c <simpleserial_addcmd>:

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
 8000648:	73fb      	strb	r3, [r7, #15]
	if(num_commands >= MAX_SS_CMDS) {
 800064a:	4b1d      	ldr	r3, [pc, #116]	@ (80006c0 <simpleserial_addcmd+0x84>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b0f      	cmp	r3, #15
 8000650:	dd04      	ble.n	800065c <simpleserial_addcmd+0x20>
		putch('a');
 8000652:	2061      	movs	r0, #97	@ 0x61
 8000654:	f000 fb0e 	bl	8000c74 <putch>
		return 1;
 8000658:	2301      	movs	r3, #1
 800065a:	e02d      	b.n	80006b8 <simpleserial_addcmd+0x7c>
	}

	if(len >= MAX_SS_LEN) {
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	2bff      	cmp	r3, #255	@ 0xff
 8000660:	d904      	bls.n	800066c <simpleserial_addcmd+0x30>
		putch('b');
 8000662:	2062      	movs	r0, #98	@ 0x62
 8000664:	f000 fb06 	bl	8000c74 <putch>
		return 1;
 8000668:	2301      	movs	r3, #1
 800066a:	e025      	b.n	80006b8 <simpleserial_addcmd+0x7c>
	}

	commands[num_commands].c   = c;
 800066c:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <simpleserial_addcmd+0x84>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	4914      	ldr	r1, [pc, #80]	@ (80006c4 <simpleserial_addcmd+0x88>)
 8000672:	4613      	mov	r3, r2
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	4413      	add	r3, r2
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	440b      	add	r3, r1
 800067c:	7bfa      	ldrb	r2, [r7, #15]
 800067e:	701a      	strb	r2, [r3, #0]
	commands[num_commands].len = len;
 8000680:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <simpleserial_addcmd+0x84>)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	490f      	ldr	r1, [pc, #60]	@ (80006c4 <simpleserial_addcmd+0x88>)
 8000686:	4613      	mov	r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	440b      	add	r3, r1
 8000690:	3304      	adds	r3, #4
 8000692:	68ba      	ldr	r2, [r7, #8]
 8000694:	601a      	str	r2, [r3, #0]
	commands[num_commands].fp  = fp;
 8000696:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <simpleserial_addcmd+0x84>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	490a      	ldr	r1, [pc, #40]	@ (80006c4 <simpleserial_addcmd+0x88>)
 800069c:	4613      	mov	r3, r2
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	4413      	add	r3, r2
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	440b      	add	r3, r1
 80006a6:	3308      	adds	r3, #8
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	601a      	str	r2, [r3, #0]
	num_commands++;
 80006ac:	4b04      	ldr	r3, [pc, #16]	@ (80006c0 <simpleserial_addcmd+0x84>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	4a03      	ldr	r2, [pc, #12]	@ (80006c0 <simpleserial_addcmd+0x84>)
 80006b4:	6013      	str	r3, [r2, #0]

	return 0;
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000000 	.word	0x20000000
 80006c4:	20000004 	.word	0x20000004

080006c8 <simpleserial_get>:

void simpleserial_get(void)
{
 80006c8:	b590      	push	{r4, r7, lr}
 80006ca:	b0c7      	sub	sp, #284	@ 0x11c
 80006cc:	af00      	add	r7, sp, #0
	uint8_t data_buf[MAX_SS_LEN];
	uint8_t err = 0;
 80006ce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80006d2:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 4; i++) {
 80006da:	2300      	movs	r3, #0
 80006dc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80006e0:	e022      	b.n	8000728 <simpleserial_get+0x60>
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 80006e2:	f000 faa9 	bl	8000c38 <getch>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4619      	mov	r1, r3
 80006ea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80006ee:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 80006f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80006f6:	4413      	add	r3, r2
 80006f8:	460a      	mov	r2, r1
 80006fa:	701a      	strb	r2, [r3, #0]
		if (data_buf[i] == FRAME_BYTE) {
 80006fc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000700:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8000704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000708:	4413      	add	r3, r2
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d106      	bne.n	800071e <simpleserial_get+0x56>
			err = SS_ERR_FRAME_BYTE;
 8000710:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000714:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8000718:	2205      	movs	r2, #5
 800071a:	701a      	strb	r2, [r3, #0]
			goto ERROR;
 800071c:	e0f9      	b.n	8000912 <simpleserial_get+0x24a>
	for (int i = 0; i < 4; i++) {
 800071e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000722:	3301      	adds	r3, #1
 8000724:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800072c:	2b03      	cmp	r3, #3
 800072e:	ddd8      	ble.n	80006e2 <simpleserial_get+0x1a>
		}
	}
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	2104      	movs	r1, #4
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff44 	bl	80005c4 <unstuff_data>
 800073c:	4603      	mov	r3, r0
 800073e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b

	// check for valid command
	uint8_t c = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
	for(c = 0; c < num_commands; c++)
 8000748:	2300      	movs	r3, #0
 800074a:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 800074e:	e014      	b.n	800077a <simpleserial_get+0xb2>
	{
		if(commands[c].c == data_buf[1])
 8000750:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 8000754:	4974      	ldr	r1, [pc, #464]	@ (8000928 <simpleserial_get+0x260>)
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	440b      	add	r3, r1
 8000760:	781a      	ldrb	r2, [r3, #0]
 8000762:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000766:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800076a:	785b      	ldrb	r3, [r3, #1]
 800076c:	429a      	cmp	r2, r3
 800076e:	d00b      	beq.n	8000788 <simpleserial_get+0xc0>
	for(c = 0; c < num_commands; c++)
 8000770:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8000774:	3301      	adds	r3, #1
 8000776:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 800077a:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 800077e:	4b6b      	ldr	r3, [pc, #428]	@ (800092c <simpleserial_get+0x264>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	429a      	cmp	r2, r3
 8000784:	dbe4      	blt.n	8000750 <simpleserial_get+0x88>
 8000786:	e000      	b.n	800078a <simpleserial_get+0xc2>
			break;
 8000788:	bf00      	nop
	}

	if (c == num_commands) {
 800078a:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 800078e:	4b67      	ldr	r3, [pc, #412]	@ (800092c <simpleserial_get+0x264>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	429a      	cmp	r2, r3
 8000794:	d106      	bne.n	80007a4 <simpleserial_get+0xdc>
		err = SS_ERR_CMD;
 8000796:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800079a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800079e:	2201      	movs	r2, #1
 80007a0:	701a      	strb	r2, [r3, #0]
		goto ERROR;
 80007a2:	e0b6      	b.n	8000912 <simpleserial_get+0x24a>
	}

	//check that next frame not beyond end of message
	// account for cmd, scmd, len, data, crc, end of frame
	if ((data_buf[3] + 5) < next_frame) {
 80007a4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80007ac:	78db      	ldrb	r3, [r3, #3]
 80007ae:	1d5a      	adds	r2, r3, #5
 80007b0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80007b4:	429a      	cmp	r2, r3
 80007b6:	da06      	bge.n	80007c6 <simpleserial_get+0xfe>
		err = SS_ERR_LEN;
 80007b8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007bc:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80007c0:	2204      	movs	r2, #4
 80007c2:	701a      	strb	r2, [r3, #0]
		goto ERROR;
 80007c4:	e0a5      	b.n	8000912 <simpleserial_get+0x24a>
	}

	// read in data
	// eq to len + crc + frame end
	int i = 4;
 80007c6:	2304      	movs	r3, #4
 80007c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	for (; i < data_buf[3] + 5; i++) {
 80007cc:	e022      	b.n	8000814 <simpleserial_get+0x14c>
		data_buf[i] = getch();
 80007ce:	f000 fa33 	bl	8000c38 <getch>
 80007d2:	4603      	mov	r3, r0
 80007d4:	4619      	mov	r1, r3
 80007d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007da:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 80007de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80007e2:	4413      	add	r3, r2
 80007e4:	460a      	mov	r2, r1
 80007e6:	701a      	strb	r2, [r3, #0]
		if (data_buf[i] == FRAME_BYTE) {
 80007e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007ec:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 80007f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80007f4:	4413      	add	r3, r2
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d106      	bne.n	800080a <simpleserial_get+0x142>
			err = SS_ERR_FRAME_BYTE;
 80007fc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000800:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8000804:	2205      	movs	r2, #5
 8000806:	701a      	strb	r2, [r3, #0]
			goto ERROR;
 8000808:	e083      	b.n	8000912 <simpleserial_get+0x24a>
	for (; i < data_buf[3] + 5; i++) {
 800080a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800080e:	3301      	adds	r3, #1
 8000810:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000814:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000818:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800081c:	78db      	ldrb	r3, [r3, #3]
 800081e:	3304      	adds	r3, #4
 8000820:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8000824:	429a      	cmp	r2, r3
 8000826:	ddd2      	ble.n	80007ce <simpleserial_get+0x106>
		}
	}

	//check that final byte is the FRAME_BYTE
	data_buf[i] = getch();
 8000828:	f000 fa06 	bl	8000c38 <getch>
 800082c:	4603      	mov	r3, r0
 800082e:	4619      	mov	r1, r3
 8000830:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000834:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8000838:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800083c:	4413      	add	r3, r2
 800083e:	460a      	mov	r2, r1
 8000840:	701a      	strb	r2, [r3, #0]
	if (data_buf[i] != FRAME_BYTE) {
 8000842:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000846:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 800084a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800084e:	4413      	add	r3, r2
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d006      	beq.n	8000864 <simpleserial_get+0x19c>
		err = SS_ERR_LEN;
 8000856:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800085a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800085e:	2204      	movs	r2, #4
 8000860:	701a      	strb	r2, [r3, #0]
		goto ERROR;
 8000862:	e056      	b.n	8000912 <simpleserial_get+0x24a>
	}

	//fully unstuff data now
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 8000864:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8000868:	f107 0208 	add.w	r2, r7, #8
 800086c:	18d0      	adds	r0, r2, r3
 800086e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000872:	b2da      	uxtb	r2, r3
 8000874:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	b2db      	uxtb	r3, r3
 800087c:	3301      	adds	r3, #1
 800087e:	b2db      	uxtb	r3, r3
 8000880:	4619      	mov	r1, r3
 8000882:	f7ff fe9f 	bl	80005c4 <unstuff_data>

	//calc crc excluding original frame offset and frame end and crc
	uint8_t crc = ss_crc(data_buf+1, i-2);
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	3301      	adds	r3, #1
 800088c:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8000890:	b2d2      	uxtb	r2, r2
 8000892:	3a02      	subs	r2, #2
 8000894:	b2d2      	uxtb	r2, r2
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fde7 	bl	800046c <ss_crc>
 800089e:	4603      	mov	r3, r0
 80008a0:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
	if (crc != data_buf[i-1]) {
 80008a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80008a8:	3b01      	subs	r3, #1
 80008aa:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80008ae:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80008b2:	5cd3      	ldrb	r3, [r2, r3]
 80008b4:	f897 210a 	ldrb.w	r2, [r7, #266]	@ 0x10a
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d006      	beq.n	80008ca <simpleserial_get+0x202>
		err = SS_ERR_CRC;
 80008bc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008c0:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80008c4:	2202      	movs	r2, #2
 80008c6:	701a      	strb	r2, [r3, #0]
		goto ERROR;
 80008c8:	e023      	b.n	8000912 <simpleserial_get+0x24a>
	}

	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 80008ca:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 80008ce:	4916      	ldr	r1, [pc, #88]	@ (8000928 <simpleserial_get+0x260>)
 80008d0:	4613      	mov	r3, r2
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	4413      	add	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	440b      	add	r3, r1
 80008da:	3308      	adds	r3, #8
 80008dc:	681c      	ldr	r4, [r3, #0]
 80008de:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008e2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80008e6:	7858      	ldrb	r0, [r3, #1]
 80008e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80008f0:	7899      	ldrb	r1, [r3, #2]
 80008f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008f6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80008fa:	78da      	ldrb	r2, [r3, #3]
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	3304      	adds	r3, #4
 8000902:	47a0      	blx	r4
 8000904:	4603      	mov	r3, r0
 8000906:	461a      	mov	r2, r3
 8000908:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800090c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8000910:	701a      	strb	r2, [r3, #0]

ERROR:
	simpleserial_put('e', 0x01, &err);
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	461a      	mov	r2, r3
 8000916:	2101      	movs	r1, #1
 8000918:	2065      	movs	r0, #101	@ 0x65
 800091a:	f000 f809 	bl	8000930 <simpleserial_put>
	return;
 800091e:	bf00      	nop
}
 8000920:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8000924:	46bd      	mov	sp, r7
 8000926:	bd90      	pop	{r4, r7, pc}
 8000928:	20000004 	.word	0x20000004
 800092c:	20000000 	.word	0x20000000

08000930 <simpleserial_put>:

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b0c5      	sub	sp, #276	@ 0x114
 8000934:	af00      	add	r7, sp, #0
 8000936:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800093a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000944:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000948:	4602      	mov	r2, r0
 800094a:	701a      	strb	r2, [r3, #0]
 800094c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000950:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000954:	460a      	mov	r2, r1
 8000956:	701a      	strb	r2, [r3, #0]
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 8000958:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800095c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
	data_buf[1] = c;
 8000964:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000968:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800096c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000970:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8000974:	7812      	ldrb	r2, [r2, #0]
 8000976:	705a      	strb	r2, [r3, #1]
	data_buf[2] = size;
 8000978:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800097c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000980:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000984:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000988:	7812      	ldrb	r2, [r2, #0]
 800098a:	709a      	strb	r2, [r3, #2]
	int i = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	for (; i < size; i++) {
 8000992:	e015      	b.n	80009c0 <simpleserial_put+0x90>
		data_buf[i + 3] = output[i];
 8000994:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000998:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800099c:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80009a0:	6812      	ldr	r2, [r2, #0]
 80009a2:	441a      	add	r2, r3
 80009a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80009a8:	3303      	adds	r3, #3
 80009aa:	7811      	ldrb	r1, [r2, #0]
 80009ac:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80009b0:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80009b4:	54d1      	strb	r1, [r2, r3]
	for (; i < size; i++) {
 80009b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80009ba:	3301      	adds	r3, #1
 80009bc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80009c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009c4:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80009ce:	429a      	cmp	r2, r3
 80009d0:	dbe0      	blt.n	8000994 <simpleserial_put+0x64>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 80009d2:	f107 0308 	add.w	r3, r7, #8
 80009d6:	3301      	adds	r3, #1
 80009d8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80009dc:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80009e0:	7812      	ldrb	r2, [r2, #0]
 80009e2:	3202      	adds	r2, #2
 80009e4:	b2d1      	uxtb	r1, r2
 80009e6:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80009ea:	1cd4      	adds	r4, r2, #3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fd3d 	bl	800046c <ss_crc>
 80009f2:	4603      	mov	r3, r0
 80009f4:	461a      	mov	r2, r3
 80009f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80009fe:	551a      	strb	r2, [r3, r4]
	data_buf[i + 4] = 0x00;
 8000a00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000a04:	3304      	adds	r3, #4
 8000a06:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a0a:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000a0e:	2100      	movs	r1, #0
 8000a10:	54d1      	strb	r1, [r2, r3]
	stuff_data(data_buf, i + 5);
 8000a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	3305      	adds	r3, #5
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	f107 0308 	add.w	r3, r7, #8
 8000a20:	4611      	mov	r1, r2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fda6 	bl	8000574 <stuff_data>
	for (int i = 0; i < size + 5; i++) {
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000a2e:	e00f      	b.n	8000a50 <simpleserial_put+0x120>
		putch(data_buf[i]);
 8000a30:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a34:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8000a38:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000a3c:	4413      	add	r3, r2
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 f917 	bl	8000c74 <putch>
	for (int i = 0; i < size + 5; i++) {
 8000a46:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000a50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a54:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	3304      	adds	r3, #4
 8000a5c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8000a60:	429a      	cmp	r2, r3
 8000a62:	dde5      	ble.n	8000a30 <simpleserial_put+0x100>
	}
}
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop
 8000a68:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd90      	pop	{r4, r7, pc}

08000a70 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b096      	sub	sp, #88	@ 0x58
 8000a74:	af00      	add	r7, sp, #0
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8000a76:	2303      	movs	r3, #3
 8000a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000a7a:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a7e:	633b      	str	r3, [r7, #48]	@ 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8000a80:	2300      	movs	r3, #0
 8000a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000a88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 f925 	bl	8000cdc <HAL_RCC_OscConfig>

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000a92:	230f      	movs	r3, #15
 8000a94:	61bb      	str	r3, [r7, #24]
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000a96:	2301      	movs	r3, #1
 8000a98:	61fb      	str	r3, [r7, #28]
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
     uint32_t flash_latency = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	657b      	str	r3, [r7, #84]	@ 0x54
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8000aaa:	f107 0318 	add.w	r3, r7, #24
 8000aae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 f929 	bl	8001d08 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <platform_init+0x9c>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	4a14      	ldr	r2, [pc, #80]	@ (8000b0c <platform_init+0x9c>)
 8000abc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000ac0:	6153      	str	r3, [r2, #20]
 8000ac2:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <platform_init+0x9c>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8000ace:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000ad2:	607b      	str	r3, [r7, #4]
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
  GpioInit.Pull      = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480a      	ldr	r0, [pc, #40]	@ (8000b10 <platform_init+0xa0>)
 8000ae6:	f001 fa99 	bl	800201c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000aea:	2201      	movs	r2, #1
 8000aec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000af0:	4807      	ldr	r0, [pc, #28]	@ (8000b10 <platform_init+0xa0>)
 8000af2:	f001 fc11 	bl	8002318 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000af6:	2201      	movs	r2, #1
 8000af8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000afc:	4804      	ldr	r0, [pc, #16]	@ (8000b10 <platform_init+0xa0>)
 8000afe:	f001 fc0b 	bl	8002318 <HAL_GPIO_WritePin>
#endif
}
 8000b02:	bf00      	nop
 8000b04:	3758      	adds	r7, #88	@ 0x58
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	48000800 	.word	0x48000800

08000b14 <init_uart>:

void init_uart(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 8000b1a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b1e:	60fb      	str	r3, [r7, #12]
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	613b      	str	r3, [r7, #16]
  GpioInit.Pull      = GPIO_PULLUP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	61bb      	str	r3, [r7, #24]
  GpioInit.Alternate = GPIO_AF7_USART1;
 8000b2c:	2307      	movs	r3, #7
 8000b2e:	61fb      	str	r3, [r7, #28]
  __GPIOA_CLK_ENABLE();
 8000b30:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba8 <init_uart+0x94>)
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	4a1c      	ldr	r2, [pc, #112]	@ (8000ba8 <init_uart+0x94>)
 8000b36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b3a:	6153      	str	r3, [r2, #20]
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba8 <init_uart+0x94>)
 8000b3e:	695b      	ldr	r3, [r3, #20]
 8000b40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b52:	f001 fa63 	bl	800201c <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <init_uart+0x98>)
 8000b58:	4a15      	ldr	r2, [pc, #84]	@ (8000bb0 <init_uart+0x9c>)
 8000b5a:	601a      	str	r2, [r3, #0]
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 8000b5c:	4b13      	ldr	r3, [pc, #76]	@ (8000bac <init_uart+0x98>)
 8000b5e:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000b62:	605a      	str	r2, [r3, #4]
  #else
  UartHandle.Init.BaudRate   = 38400;
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000b64:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <init_uart+0x98>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <init_uart+0x98>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000b70:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <init_uart+0x98>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <init_uart+0x98>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <init_uart+0x98>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  __USART1_CLK_ENABLE();
 8000b82:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <init_uart+0x94>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	4a08      	ldr	r2, [pc, #32]	@ (8000ba8 <init_uart+0x94>)
 8000b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b8c:	6193      	str	r3, [r2, #24]
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <init_uart+0x94>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  HAL_UART_Init(&UartHandle);
 8000b9a:	4804      	ldr	r0, [pc, #16]	@ (8000bac <init_uart+0x98>)
 8000b9c:	f001 fe1d 	bl	80027da <HAL_UART_Init>
}
 8000ba0:	bf00      	nop
 8000ba2:	3720      	adds	r7, #32
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	200000c4 	.word	0x200000c4
 8000bb0:	40013800 	.word	0x40013800

08000bb4 <trigger_setup>:

void trigger_setup(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b13      	ldr	r3, [pc, #76]	@ (8000c08 <trigger_setup+0x54>)
 8000bbc:	695b      	ldr	r3, [r3, #20]
 8000bbe:	4a12      	ldr	r2, [pc, #72]	@ (8000c08 <trigger_setup+0x54>)
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bc4:	6153      	str	r3, [r2, #20]
 8000bc6:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <trigger_setup+0x54>)
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
 8000bd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bd6:	607b      	str	r3, [r7, #4]
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	60bb      	str	r3, [r7, #8]
  GpioInit.Pull      = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000be0:	2303      	movs	r3, #3
 8000be2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	4619      	mov	r1, r3
 8000be8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bec:	f001 fa16 	bl	800201c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bfa:	f001 fb8d 	bl	8002318 <HAL_GPIO_WritePin>
}
 8000bfe:	bf00      	nop
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000

08000c0c <trigger_high>:

void trigger_high(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c1a:	f001 fb7d 	bl	8002318 <HAL_GPIO_WritePin>
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <trigger_low>:

void trigger_low(void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c30:	f001 fb72 	bl	8002318 <HAL_GPIO_WritePin>
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <getch>:

char getch(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8000c3e:	e005      	b.n	8000c4c <getch+0x14>
    USART1->ICR |= (1 << 3);
 8000c40:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <getch+0x34>)
 8000c42:	6a1b      	ldr	r3, [r3, #32]
 8000c44:	4a09      	ldr	r2, [pc, #36]	@ (8000c6c <getch+0x34>)
 8000c46:	f043 0308 	orr.w	r3, r3, #8
 8000c4a:	6213      	str	r3, [r2, #32]
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8000c4c:	1df9      	adds	r1, r7, #7
 8000c4e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000c52:	2201      	movs	r2, #1
 8000c54:	4806      	ldr	r0, [pc, #24]	@ (8000c70 <getch+0x38>)
 8000c56:	f001 fedd 	bl	8002a14 <HAL_UART_Receive>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d1ef      	bne.n	8000c40 <getch+0x8>
  //putch(d);
  return d;
 8000c60:	79fb      	ldrb	r3, [r7, #7]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40013800 	.word	0x40013800
 8000c70:	200000c4 	.word	0x200000c4

08000c74 <putch>:

void putch(char c)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  uint8_t d  = c;
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000c82:	f107 010f 	add.w	r1, r7, #15
 8000c86:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4803      	ldr	r0, [pc, #12]	@ (8000c9c <putch+0x28>)
 8000c8e:	f001 fe35 	bl	80028fc <HAL_UART_Transmit>
}
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200000c4 	.word	0x200000c4

08000ca0 <HAL_GetTick>:
{
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
	return hal_sys_tick++;
 8000ca4:	4b04      	ldr	r3, [pc, #16]	@ (8000cb8 <HAL_GetTick+0x18>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	1c5a      	adds	r2, r3, #1
 8000caa:	4903      	ldr	r1, [pc, #12]	@ (8000cb8 <HAL_GetTick+0x18>)
 8000cac:	600a      	str	r2, [r1, #0]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000134 	.word	0x20000134

08000cbc <HAL_RCC_GetSysClockFreq>:

#define UART_CR1_FIELDS  ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | \
                                     USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8)) /*!< UART or USART CR1 fields of parameters set by UART_SetConfig API */

uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
	return F_CPU;
 8000cc0:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <HAL_RCC_GetPCLK1Freq>:

uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
	return F_CPU;
 8000cd0:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr

08000cdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ce8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000cec:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cf8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 8180 	beq.w	800100a <HAL_RCC_OscConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d0a:	4bbe      	ldr	r3, [pc, #760]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 030c 	and.w	r3, r3, #12
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	d00c      	beq.n	8000d30 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d16:	4bbb      	ldr	r3, [pc, #748]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 030c 	and.w	r3, r3, #12
 8000d1e:	2b08      	cmp	r3, #8
 8000d20:	d15d      	bne.n	8000dde <HAL_RCC_OscConfig+0x102>
 8000d22:	4bb8      	ldr	r3, [pc, #736]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d2e:	d156      	bne.n	8000dde <HAL_RCC_OscConfig+0x102>
 8000d30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d34:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d38:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000d3c:	fa93 f3a3 	rbit	r3, r3
 8000d40:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000d44:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d48:	fab3 f383 	clz	r3, r3
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	095b      	lsrs	r3, r3, #5
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d102      	bne.n	8000d62 <HAL_RCC_OscConfig+0x86>
 8000d5c:	4ba9      	ldr	r3, [pc, #676]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	e015      	b.n	8000d8e <HAL_RCC_OscConfig+0xb2>
 8000d62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d66:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d6a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000d6e:	fa93 f3a3 	rbit	r3, r3
 8000d72:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000d76:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d7a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000d7e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000d82:	fa93 f3a3 	rbit	r3, r3
 8000d86:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000d8a:	4b9e      	ldr	r3, [pc, #632]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d8e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d92:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000d96:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000d9a:	fa92 f2a2 	rbit	r2, r2
 8000d9e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return(result);
 8000da2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000da6:	fab2 f282 	clz	r2, r2
 8000daa:	b252      	sxtb	r2, r2
 8000dac:	f042 0220 	orr.w	r2, r2, #32
 8000db0:	b252      	sxtb	r2, r2
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	f002 021f 	and.w	r2, r2, #31
 8000db8:	2101      	movs	r1, #1
 8000dba:	fa01 f202 	lsl.w	r2, r1, r2
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f000 8121 	beq.w	8001008 <HAL_RCC_OscConfig+0x32c>
 8000dc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f040 8118 	bne.w	8001008 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	f000 bf8c 	b.w	8001cf6 <HAL_RCC_OscConfig+0x101a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000de2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dee:	d106      	bne.n	8000dfe <HAL_RCC_OscConfig+0x122>
 8000df0:	4b84      	ldr	r3, [pc, #528]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a83      	ldr	r2, [pc, #524]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000df6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	e036      	b.n	8000e6c <HAL_RCC_OscConfig+0x190>
 8000dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d10c      	bne.n	8000e28 <HAL_RCC_OscConfig+0x14c>
 8000e0e:	4b7d      	ldr	r3, [pc, #500]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a7c      	ldr	r2, [pc, #496]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000e14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	4b7a      	ldr	r3, [pc, #488]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a79      	ldr	r2, [pc, #484]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000e20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	e021      	b.n	8000e6c <HAL_RCC_OscConfig+0x190>
 8000e28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e38:	d10c      	bne.n	8000e54 <HAL_RCC_OscConfig+0x178>
 8000e3a:	4b72      	ldr	r3, [pc, #456]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a71      	ldr	r2, [pc, #452]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000e40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	4b6f      	ldr	r3, [pc, #444]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a6e      	ldr	r2, [pc, #440]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e00b      	b.n	8000e6c <HAL_RCC_OscConfig+0x190>
 8000e54:	4b6b      	ldr	r3, [pc, #428]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a6a      	ldr	r2, [pc, #424]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000e5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	4b68      	ldr	r3, [pc, #416]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a67      	ldr	r2, [pc, #412]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000e66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e6a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e6c:	4b65      	ldr	r3, [pc, #404]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e70:	f023 020f 	bic.w	r2, r3, #15
 8000e74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	4960      	ldr	r1, [pc, #384]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000e82:	4313      	orrs	r3, r2
 8000e84:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d05a      	beq.n	8000f4c <HAL_RCC_OscConfig+0x270>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e96:	f7ff ff03 	bl	8000ca0 <HAL_GetTick>
 8000e9a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e9e:	e00a      	b.n	8000eb6 <HAL_RCC_OscConfig+0x1da>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ea0:	f7ff fefe 	bl	8000ca0 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	2b64      	cmp	r3, #100	@ 0x64
 8000eae:	d902      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x1da>
          {
            return HAL_TIMEOUT;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	f000 bf20 	b.w	8001cf6 <HAL_RCC_OscConfig+0x101a>
 8000eb6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000eba:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ebe:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000ec2:	fa93 f3a3 	rbit	r3, r3
 8000ec6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return(result);
 8000eca:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ece:	fab3 f383 	clz	r3, r3
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	095b      	lsrs	r3, r3, #5
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d102      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x20c>
 8000ee2:	4b48      	ldr	r3, [pc, #288]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	e015      	b.n	8000f14 <HAL_RCC_OscConfig+0x238>
 8000ee8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000eec:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000ef4:	fa93 f3a3 	rbit	r3, r3
 8000ef8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000efc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f00:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000f04:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000f08:	fa93 f3a3 	rbit	r3, r3
 8000f0c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000f10:	4b3c      	ldr	r3, [pc, #240]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f14:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f18:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000f1c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000f20:	fa92 f2a2 	rbit	r2, r2
 8000f24:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return(result);
 8000f28:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000f2c:	fab2 f282 	clz	r2, r2
 8000f30:	b252      	sxtb	r2, r2
 8000f32:	f042 0220 	orr.w	r2, r2, #32
 8000f36:	b252      	sxtb	r2, r2
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	f002 021f 	and.w	r2, r2, #31
 8000f3e:	2101      	movs	r1, #1
 8000f40:	fa01 f202 	lsl.w	r2, r1, r2
 8000f44:	4013      	ands	r3, r2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0aa      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x1c4>
 8000f4a:	e05e      	b.n	800100a <HAL_RCC_OscConfig+0x32e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fea8 	bl	8000ca0 <HAL_GetTick>
 8000f50:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f54:	e00a      	b.n	8000f6c <HAL_RCC_OscConfig+0x290>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f56:	f7ff fea3 	bl	8000ca0 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b64      	cmp	r3, #100	@ 0x64
 8000f64:	d902      	bls.n	8000f6c <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	f000 bec5 	b.w	8001cf6 <HAL_RCC_OscConfig+0x101a>
 8000f6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f70:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f74:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000f78:	fa93 f3a3 	rbit	r3, r3
 8000f7c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return(result);
 8000f80:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f84:	fab3 f383 	clz	r3, r3
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d102      	bne.n	8000f9e <HAL_RCC_OscConfig+0x2c2>
 8000f98:	4b1a      	ldr	r3, [pc, #104]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	e015      	b.n	8000fca <HAL_RCC_OscConfig+0x2ee>
 8000f9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fa2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000faa:	fa93 f3a3 	rbit	r3, r3
 8000fae:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000fb2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fb6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000fba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000fbe:	fa93 f3a3 	rbit	r3, r3
 8000fc2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <HAL_RCC_OscConfig+0x328>)
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fce:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8000fd2:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000fd6:	fa92 f2a2 	rbit	r2, r2
 8000fda:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return(result);
 8000fde:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000fe2:	fab2 f282 	clz	r2, r2
 8000fe6:	b252      	sxtb	r2, r2
 8000fe8:	f042 0220 	orr.w	r2, r2, #32
 8000fec:	b252      	sxtb	r2, r2
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	f002 021f 	and.w	r2, r2, #31
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1aa      	bne.n	8000f56 <HAL_RCC_OscConfig+0x27a>
 8001000:	e003      	b.n	800100a <HAL_RCC_OscConfig+0x32e>
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800100a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800100e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 817e 	beq.w	800131c <HAL_RCC_OscConfig+0x640>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001020:	4ba6      	ldr	r3, [pc, #664]	@ (80012bc <HAL_RCC_OscConfig+0x5e0>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 030c 	and.w	r3, r3, #12
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00b      	beq.n	8001044 <HAL_RCC_OscConfig+0x368>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800102c:	4ba3      	ldr	r3, [pc, #652]	@ (80012bc <HAL_RCC_OscConfig+0x5e0>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 030c 	and.w	r3, r3, #12
 8001034:	2b08      	cmp	r3, #8
 8001036:	d173      	bne.n	8001120 <HAL_RCC_OscConfig+0x444>
 8001038:	4ba0      	ldr	r3, [pc, #640]	@ (80012bc <HAL_RCC_OscConfig+0x5e0>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d16d      	bne.n	8001120 <HAL_RCC_OscConfig+0x444>
 8001044:	2302      	movs	r3, #2
 8001046:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800104e:	fa93 f3a3 	rbit	r3, r3
 8001052:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return(result);
 8001056:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800105a:	fab3 f383 	clz	r3, r3
 800105e:	b2db      	uxtb	r3, r3
 8001060:	095b      	lsrs	r3, r3, #5
 8001062:	b2db      	uxtb	r3, r3
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d102      	bne.n	8001074 <HAL_RCC_OscConfig+0x398>
 800106e:	4b93      	ldr	r3, [pc, #588]	@ (80012bc <HAL_RCC_OscConfig+0x5e0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	e013      	b.n	800109c <HAL_RCC_OscConfig+0x3c0>
 8001074:	2302      	movs	r3, #2
 8001076:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800107e:	fa93 f3a3 	rbit	r3, r3
 8001082:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001086:	2302      	movs	r3, #2
 8001088:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800108c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001090:	fa93 f3a3 	rbit	r3, r3
 8001094:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001098:	4b88      	ldr	r3, [pc, #544]	@ (80012bc <HAL_RCC_OscConfig+0x5e0>)
 800109a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800109c:	2202      	movs	r2, #2
 800109e:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80010a2:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80010a6:	fa92 f2a2 	rbit	r2, r2
 80010aa:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return(result);
 80010ae:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80010b2:	fab2 f282 	clz	r2, r2
 80010b6:	b252      	sxtb	r2, r2
 80010b8:	f042 0220 	orr.w	r2, r2, #32
 80010bc:	b252      	sxtb	r2, r2
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	f002 021f 	and.w	r2, r2, #31
 80010c4:	2101      	movs	r1, #1
 80010c6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ca:	4013      	ands	r3, r2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00a      	beq.n	80010e6 <HAL_RCC_OscConfig+0x40a>
 80010d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d002      	beq.n	80010e6 <HAL_RCC_OscConfig+0x40a>
      {
        return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	f000 be08 	b.w	8001cf6 <HAL_RCC_OscConfig+0x101a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e6:	4b75      	ldr	r3, [pc, #468]	@ (80012bc <HAL_RCC_OscConfig+0x5e0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6959      	ldr	r1, [r3, #20]
 80010fa:	23f8      	movs	r3, #248	@ 0xf8
 80010fc:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001100:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001104:	fa93 f3a3 	rbit	r3, r3
 8001108:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
  return(result);
 800110c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001110:	fab3 f383 	clz	r3, r3
 8001114:	fa01 f303 	lsl.w	r3, r1, r3
 8001118:	4968      	ldr	r1, [pc, #416]	@ (80012bc <HAL_RCC_OscConfig+0x5e0>)
 800111a:	4313      	orrs	r3, r2
 800111c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111e:	e0fd      	b.n	800131c <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001124:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 8088 	beq.w	8001242 <HAL_RCC_OscConfig+0x566>
 8001132:	2301      	movs	r3, #1
 8001134:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001138:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800113c:	fa93 f3a3 	rbit	r3, r3
 8001140:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return(result);
 8001144:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001148:	fab3 f383 	clz	r3, r3
 800114c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001150:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	461a      	mov	r2, r3
 8001158:	2301      	movs	r3, #1
 800115a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fda0 	bl	8000ca0 <HAL_GetTick>
 8001160:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001164:	e00a      	b.n	800117c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001166:	f7ff fd9b 	bl	8000ca0 <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d902      	bls.n	800117c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	f000 bdbd 	b.w	8001cf6 <HAL_RCC_OscConfig+0x101a>
 800117c:	2302      	movs	r3, #2
 800117e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001182:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001186:	fa93 f3a3 	rbit	r3, r3
 800118a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return(result);
 800118e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001192:	fab3 f383 	clz	r3, r3
 8001196:	b2db      	uxtb	r3, r3
 8001198:	095b      	lsrs	r3, r3, #5
 800119a:	b2db      	uxtb	r3, r3
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d102      	bne.n	80011ac <HAL_RCC_OscConfig+0x4d0>
 80011a6:	4b45      	ldr	r3, [pc, #276]	@ (80012bc <HAL_RCC_OscConfig+0x5e0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	e013      	b.n	80011d4 <HAL_RCC_OscConfig+0x4f8>
 80011ac:	2302      	movs	r3, #2
 80011ae:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80011b6:	fa93 f3a3 	rbit	r3, r3
 80011ba:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80011be:	2302      	movs	r3, #2
 80011c0:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80011c4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80011c8:	fa93 f3a3 	rbit	r3, r3
 80011cc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80011d0:	4b3a      	ldr	r3, [pc, #232]	@ (80012bc <HAL_RCC_OscConfig+0x5e0>)
 80011d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d4:	2202      	movs	r2, #2
 80011d6:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80011da:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80011de:	fa92 f2a2 	rbit	r2, r2
 80011e2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return(result);
 80011e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80011ea:	fab2 f282 	clz	r2, r2
 80011ee:	b252      	sxtb	r2, r2
 80011f0:	f042 0220 	orr.w	r2, r2, #32
 80011f4:	b252      	sxtb	r2, r2
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	f002 021f 	and.w	r2, r2, #31
 80011fc:	2101      	movs	r1, #1
 80011fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001202:	4013      	ands	r3, r2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0ae      	beq.n	8001166 <HAL_RCC_OscConfig+0x48a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001208:	4b2c      	ldr	r3, [pc, #176]	@ (80012bc <HAL_RCC_OscConfig+0x5e0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001214:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6959      	ldr	r1, [r3, #20]
 800121c:	23f8      	movs	r3, #248	@ 0xf8
 800121e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001222:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001226:	fa93 f3a3 	rbit	r3, r3
 800122a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  return(result);
 800122e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001232:	fab3 f383 	clz	r3, r3
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	4920      	ldr	r1, [pc, #128]	@ (80012bc <HAL_RCC_OscConfig+0x5e0>)
 800123c:	4313      	orrs	r3, r2
 800123e:	600b      	str	r3, [r1, #0]
 8001240:	e06c      	b.n	800131c <HAL_RCC_OscConfig+0x640>
 8001242:	2301      	movs	r3, #1
 8001244:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001248:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800124c:	fa93 f3a3 	rbit	r3, r3
 8001250:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return(result);
 8001254:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001258:	fab3 f383 	clz	r3, r3
 800125c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001260:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	461a      	mov	r2, r3
 8001268:	2300      	movs	r3, #0
 800126a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fd18 	bl	8000ca0 <HAL_GetTick>
 8001270:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001274:	e00a      	b.n	800128c <HAL_RCC_OscConfig+0x5b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001276:	f7ff fd13 	bl	8000ca0 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d902      	bls.n	800128c <HAL_RCC_OscConfig+0x5b0>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	f000 bd35 	b.w	8001cf6 <HAL_RCC_OscConfig+0x101a>
 800128c:	2302      	movs	r3, #2
 800128e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001296:	fa93 f3a3 	rbit	r3, r3
 800129a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return(result);
 800129e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a2:	fab3 f383 	clz	r3, r3
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	095b      	lsrs	r3, r3, #5
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d104      	bne.n	80012c0 <HAL_RCC_OscConfig+0x5e4>
 80012b6:	4b01      	ldr	r3, [pc, #4]	@ (80012bc <HAL_RCC_OscConfig+0x5e0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	e015      	b.n	80012e8 <HAL_RCC_OscConfig+0x60c>
 80012bc:	40021000 	.word	0x40021000
 80012c0:	2302      	movs	r3, #2
 80012c2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80012ca:	fa93 f3a3 	rbit	r3, r3
 80012ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80012d2:	2302      	movs	r3, #2
 80012d4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80012d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80012dc:	fa93 f3a3 	rbit	r3, r3
 80012e0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80012e4:	4bc5      	ldr	r3, [pc, #788]	@ (80015fc <HAL_RCC_OscConfig+0x920>)
 80012e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e8:	2202      	movs	r2, #2
 80012ea:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80012ee:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80012f2:	fa92 f2a2 	rbit	r2, r2
 80012f6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return(result);
 80012fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80012fe:	fab2 f282 	clz	r2, r2
 8001302:	b252      	sxtb	r2, r2
 8001304:	f042 0220 	orr.w	r2, r2, #32
 8001308:	b252      	sxtb	r2, r2
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	f002 021f 	and.w	r2, r2, #31
 8001310:	2101      	movs	r1, #1
 8001312:	fa01 f202 	lsl.w	r2, r1, r2
 8001316:	4013      	ands	r3, r2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1ac      	bne.n	8001276 <HAL_RCC_OscConfig+0x59a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001320:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 810a 	beq.w	8001546 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001336:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d073      	beq.n	800142a <HAL_RCC_OscConfig+0x74e>
 8001342:	2301      	movs	r3, #1
 8001344:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800134c:	fa93 f3a3 	rbit	r3, r3
 8001350:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return(result);
 8001354:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001358:	fab3 f383 	clz	r3, r3
 800135c:	461a      	mov	r2, r3
 800135e:	4ba8      	ldr	r3, [pc, #672]	@ (8001600 <HAL_RCC_OscConfig+0x924>)
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	461a      	mov	r2, r3
 8001366:	2301      	movs	r3, #1
 8001368:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136a:	f7ff fc99 	bl	8000ca0 <HAL_GetTick>
 800136e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001372:	e00a      	b.n	800138a <HAL_RCC_OscConfig+0x6ae>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001374:	f7ff fc94 	bl	8000ca0 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d902      	bls.n	800138a <HAL_RCC_OscConfig+0x6ae>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	f000 bcb6 	b.w	8001cf6 <HAL_RCC_OscConfig+0x101a>
 800138a:	2302      	movs	r3, #2
 800138c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001390:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001394:	fa93 f3a3 	rbit	r3, r3
 8001398:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800139c:	2302      	movs	r3, #2
 800139e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80013a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80013a6:	fa93 f2a3 	rbit	r2, r3
 80013aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013ae:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013bc:	2202      	movs	r2, #2
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	fa93 f2a3 	rbit	r2, r3
 80013ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80013d6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d8:	4b88      	ldr	r3, [pc, #544]	@ (80015fc <HAL_RCC_OscConfig+0x920>)
 80013da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013e0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013e4:	2102      	movs	r1, #2
 80013e6:	6019      	str	r1, [r3, #0]
 80013e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013ec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	fa93 f1a3 	rbit	r1, r3
 80013f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013fa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80013fe:	6019      	str	r1, [r3, #0]
  return(result);
 8001400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001404:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	fab3 f383 	clz	r3, r3
 800140e:	b25b      	sxtb	r3, r3
 8001410:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001414:	b25b      	sxtb	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	f003 031f 	and.w	r3, r3, #31
 800141c:	2101      	movs	r1, #1
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	4013      	ands	r3, r2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0a5      	beq.n	8001374 <HAL_RCC_OscConfig+0x698>
 8001428:	e08d      	b.n	8001546 <HAL_RCC_OscConfig+0x86a>
 800142a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800142e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001432:	2201      	movs	r2, #1
 8001434:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001436:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800143a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	fa93 f2a3 	rbit	r2, r3
 8001444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001448:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800144c:	601a      	str	r2, [r3, #0]
  return(result);
 800144e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001452:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001456:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001458:	fab3 f383 	clz	r3, r3
 800145c:	461a      	mov	r2, r3
 800145e:	4b68      	ldr	r3, [pc, #416]	@ (8001600 <HAL_RCC_OscConfig+0x924>)
 8001460:	4413      	add	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	461a      	mov	r2, r3
 8001466:	2300      	movs	r3, #0
 8001468:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146a:	f7ff fc19 	bl	8000ca0 <HAL_GetTick>
 800146e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001472:	e00a      	b.n	800148a <HAL_RCC_OscConfig+0x7ae>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001474:	f7ff fc14 	bl	8000ca0 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d902      	bls.n	800148a <HAL_RCC_OscConfig+0x7ae>
        {
          return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	f000 bc36 	b.w	8001cf6 <HAL_RCC_OscConfig+0x101a>
 800148a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800148e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001492:	2202      	movs	r2, #2
 8001494:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800149a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	fa93 f2a3 	rbit	r2, r3
 80014a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014b2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014b6:	2202      	movs	r2, #2
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014be:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	fa93 f2a3 	rbit	r2, r3
 80014c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014cc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014da:	2202      	movs	r2, #2
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	fa93 f2a3 	rbit	r2, r3
 80014ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80014f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f6:	4b41      	ldr	r3, [pc, #260]	@ (80015fc <HAL_RCC_OscConfig+0x920>)
 80014f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014fe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001502:	2102      	movs	r1, #2
 8001504:	6019      	str	r1, [r3, #0]
 8001506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800150a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	fa93 f1a3 	rbit	r1, r3
 8001514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001518:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800151c:	6019      	str	r1, [r3, #0]
  return(result);
 800151e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001522:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	fab3 f383 	clz	r3, r3
 800152c:	b25b      	sxtb	r3, r3
 800152e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001532:	b25b      	sxtb	r3, r3
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f003 031f 	and.w	r3, r3, #31
 800153a:	2101      	movs	r1, #1
 800153c:	fa01 f303 	lsl.w	r3, r1, r3
 8001540:	4013      	ands	r3, r2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d196      	bne.n	8001474 <HAL_RCC_OscConfig+0x798>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800154a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 81a4 	beq.w	80018a4 <HAL_RCC_OscConfig+0xbc8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001562:	4b26      	ldr	r3, [pc, #152]	@ (80015fc <HAL_RCC_OscConfig+0x920>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d116      	bne.n	800159c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	4b23      	ldr	r3, [pc, #140]	@ (80015fc <HAL_RCC_OscConfig+0x920>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	4a22      	ldr	r2, [pc, #136]	@ (80015fc <HAL_RCC_OscConfig+0x920>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001578:	61d3      	str	r3, [r2, #28]
 800157a:	4b20      	ldr	r3, [pc, #128]	@ (80015fc <HAL_RCC_OscConfig+0x920>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001586:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001590:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001594:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001596:	2301      	movs	r3, #1
 8001598:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159c:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <HAL_RCC_OscConfig+0x928>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d11a      	bne.n	80015de <HAL_RCC_OscConfig+0x902>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015a8:	4b16      	ldr	r3, [pc, #88]	@ (8001604 <HAL_RCC_OscConfig+0x928>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a15      	ldr	r2, [pc, #84]	@ (8001604 <HAL_RCC_OscConfig+0x928>)
 80015ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b4:	f7ff fb74 	bl	8000ca0 <HAL_GetTick>
 80015b8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015bc:	e009      	b.n	80015d2 <HAL_RCC_OscConfig+0x8f6>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015be:	f7ff fb6f 	bl	8000ca0 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	@ 0x64
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x8f6>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e391      	b.n	8001cf6 <HAL_RCC_OscConfig+0x101a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <HAL_RCC_OscConfig+0x928>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0ef      	beq.n	80015be <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d10c      	bne.n	8001608 <HAL_RCC_OscConfig+0x92c>
 80015ee:	4b03      	ldr	r3, [pc, #12]	@ (80015fc <HAL_RCC_OscConfig+0x920>)
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	4a02      	ldr	r2, [pc, #8]	@ (80015fc <HAL_RCC_OscConfig+0x920>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6213      	str	r3, [r2, #32]
 80015fa:	e03b      	b.n	8001674 <HAL_RCC_OscConfig+0x998>
 80015fc:	40021000 	.word	0x40021000
 8001600:	10908120 	.word	0x10908120
 8001604:	40007000 	.word	0x40007000
 8001608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800160c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10c      	bne.n	8001632 <HAL_RCC_OscConfig+0x956>
 8001618:	4b7f      	ldr	r3, [pc, #508]	@ (8001818 <HAL_RCC_OscConfig+0xb3c>)
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	4a7e      	ldr	r2, [pc, #504]	@ (8001818 <HAL_RCC_OscConfig+0xb3c>)
 800161e:	f023 0301 	bic.w	r3, r3, #1
 8001622:	6213      	str	r3, [r2, #32]
 8001624:	4b7c      	ldr	r3, [pc, #496]	@ (8001818 <HAL_RCC_OscConfig+0xb3c>)
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	4a7b      	ldr	r2, [pc, #492]	@ (8001818 <HAL_RCC_OscConfig+0xb3c>)
 800162a:	f023 0304 	bic.w	r3, r3, #4
 800162e:	6213      	str	r3, [r2, #32]
 8001630:	e020      	b.n	8001674 <HAL_RCC_OscConfig+0x998>
 8001632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001636:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	2b05      	cmp	r3, #5
 8001640:	d10c      	bne.n	800165c <HAL_RCC_OscConfig+0x980>
 8001642:	4b75      	ldr	r3, [pc, #468]	@ (8001818 <HAL_RCC_OscConfig+0xb3c>)
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	4a74      	ldr	r2, [pc, #464]	@ (8001818 <HAL_RCC_OscConfig+0xb3c>)
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	6213      	str	r3, [r2, #32]
 800164e:	4b72      	ldr	r3, [pc, #456]	@ (8001818 <HAL_RCC_OscConfig+0xb3c>)
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4a71      	ldr	r2, [pc, #452]	@ (8001818 <HAL_RCC_OscConfig+0xb3c>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6213      	str	r3, [r2, #32]
 800165a:	e00b      	b.n	8001674 <HAL_RCC_OscConfig+0x998>
 800165c:	4b6e      	ldr	r3, [pc, #440]	@ (8001818 <HAL_RCC_OscConfig+0xb3c>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	4a6d      	ldr	r2, [pc, #436]	@ (8001818 <HAL_RCC_OscConfig+0xb3c>)
 8001662:	f023 0301 	bic.w	r3, r3, #1
 8001666:	6213      	str	r3, [r2, #32]
 8001668:	4b6b      	ldr	r3, [pc, #428]	@ (8001818 <HAL_RCC_OscConfig+0xb3c>)
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	4a6a      	ldr	r2, [pc, #424]	@ (8001818 <HAL_RCC_OscConfig+0xb3c>)
 800166e:	f023 0304 	bic.w	r3, r3, #4
 8001672:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001674:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001678:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 8082 	beq.w	800178a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001686:	f7ff fb0b 	bl	8000ca0 <HAL_GetTick>
 800168a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168e:	e00b      	b.n	80016a8 <HAL_RCC_OscConfig+0x9cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001690:	f7ff fb06 	bl	8000ca0 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x9cc>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e326      	b.n	8001cf6 <HAL_RCC_OscConfig+0x101a>
 80016a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ac:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80016b0:	2202      	movs	r2, #2
 80016b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	fa93 f2a3 	rbit	r2, r3
 80016c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80016d4:	2202      	movs	r2, #2
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016dc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	fa93 f2a3 	rbit	r2, r3
 80016e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ea:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80016ee:	601a      	str	r2, [r3, #0]
  return(result);
 80016f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80016f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fa:	fab3 f383 	clz	r3, r3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	095b      	lsrs	r3, r3, #5
 8001702:	b2db      	uxtb	r3, r3
 8001704:	f043 0302 	orr.w	r3, r3, #2
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d102      	bne.n	8001714 <HAL_RCC_OscConfig+0xa38>
 800170e:	4b42      	ldr	r3, [pc, #264]	@ (8001818 <HAL_RCC_OscConfig+0xb3c>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	e013      	b.n	800173c <HAL_RCC_OscConfig+0xa60>
 8001714:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001718:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800171c:	2202      	movs	r2, #2
 800171e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001720:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001724:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	fa93 f2a3 	rbit	r2, r3
 800172e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001732:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	4b37      	ldr	r3, [pc, #220]	@ (8001818 <HAL_RCC_OscConfig+0xb3c>)
 800173a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001740:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 8001744:	2102      	movs	r1, #2
 8001746:	6011      	str	r1, [r2, #0]
 8001748:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800174c:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	fa92 f1a2 	rbit	r1, r2
 8001756:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800175a:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800175e:	6011      	str	r1, [r2, #0]
  return(result);
 8001760:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001764:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	fab2 f282 	clz	r2, r2
 800176e:	b252      	sxtb	r2, r2
 8001770:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001774:	b252      	sxtb	r2, r2
 8001776:	b2d2      	uxtb	r2, r2
 8001778:	f002 021f 	and.w	r2, r2, #31
 800177c:	2101      	movs	r1, #1
 800177e:	fa01 f202 	lsl.w	r2, r1, r2
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d083      	beq.n	8001690 <HAL_RCC_OscConfig+0x9b4>
 8001788:	e082      	b.n	8001890 <HAL_RCC_OscConfig+0xbb4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178a:	f7ff fa89 	bl	8000ca0 <HAL_GetTick>
 800178e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001792:	e00b      	b.n	80017ac <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001794:	f7ff fa84 	bl	8000ca0 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e2a4      	b.n	8001cf6 <HAL_RCC_OscConfig+0x101a>
 80017ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80017b4:	2202      	movs	r2, #2
 80017b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017bc:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	fa93 f2a3 	rbit	r2, r3
 80017c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ca:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80017d8:	2202      	movs	r2, #2
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	fa93 f2a3 	rbit	r2, r3
 80017ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ee:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80017f2:	601a      	str	r2, [r3, #0]
  return(result);
 80017f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80017fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fe:	fab3 f383 	clz	r3, r3
 8001802:	b2db      	uxtb	r3, r3
 8001804:	095b      	lsrs	r3, r3, #5
 8001806:	b2db      	uxtb	r3, r3
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d104      	bne.n	800181c <HAL_RCC_OscConfig+0xb40>
 8001812:	4b01      	ldr	r3, [pc, #4]	@ (8001818 <HAL_RCC_OscConfig+0xb3c>)
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	e015      	b.n	8001844 <HAL_RCC_OscConfig+0xb68>
 8001818:	40021000 	.word	0x40021000
 800181c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001820:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001824:	2202      	movs	r2, #2
 8001826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001828:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800182c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	fa93 f2a3 	rbit	r2, r3
 8001836:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800183a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	4bad      	ldr	r3, [pc, #692]	@ (8001af8 <HAL_RCC_OscConfig+0xe1c>)
 8001842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001844:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001848:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 800184c:	2102      	movs	r1, #2
 800184e:	6011      	str	r1, [r2, #0]
 8001850:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001854:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 8001858:	6812      	ldr	r2, [r2, #0]
 800185a:	fa92 f1a2 	rbit	r1, r2
 800185e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001862:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001866:	6011      	str	r1, [r2, #0]
  return(result);
 8001868:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800186c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001870:	6812      	ldr	r2, [r2, #0]
 8001872:	fab2 f282 	clz	r2, r2
 8001876:	b252      	sxtb	r2, r2
 8001878:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800187c:	b252      	sxtb	r2, r2
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	f002 021f 	and.w	r2, r2, #31
 8001884:	2101      	movs	r1, #1
 8001886:	fa01 f202 	lsl.w	r2, r1, r2
 800188a:	4013      	ands	r3, r2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d181      	bne.n	8001794 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001890:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001894:	2b01      	cmp	r3, #1
 8001896:	d105      	bne.n	80018a4 <HAL_RCC_OscConfig+0xbc8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001898:	4b97      	ldr	r3, [pc, #604]	@ (8001af8 <HAL_RCC_OscConfig+0xe1c>)
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	4a96      	ldr	r2, [pc, #600]	@ (8001af8 <HAL_RCC_OscConfig+0xe1c>)
 800189e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018a2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 821f 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x1018>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018b6:	4b90      	ldr	r3, [pc, #576]	@ (8001af8 <HAL_RCC_OscConfig+0xe1c>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b08      	cmp	r3, #8
 80018c0:	f000 8216 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x1014>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	f040 8166 	bne.w	8001ba2 <HAL_RCC_OscConfig+0xec6>
 80018d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018da:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80018de:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e8:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	fa93 f2a3 	rbit	r2, r3
 80018f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80018fa:	601a      	str	r2, [r3, #0]
  return(result);
 80018fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001900:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001904:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001906:	fab3 f383 	clz	r3, r3
 800190a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800190e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	461a      	mov	r2, r3
 8001916:	2300      	movs	r3, #0
 8001918:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191a:	f7ff f9c1 	bl	8000ca0 <HAL_GetTick>
 800191e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001922:	e00a      	b.n	800193a <HAL_RCC_OscConfig+0xc5e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001924:	f7ff f9bc 	bl	8000ca0 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	4a72      	ldr	r2, [pc, #456]	@ (8001afc <HAL_RCC_OscConfig+0xe20>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0xc5e>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e1dd      	b.n	8001cf6 <HAL_RCC_OscConfig+0x101a>
 800193a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800193e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001942:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001946:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800194c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	fa93 f2a3 	rbit	r2, r3
 8001956:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800195a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800195e:	601a      	str	r2, [r3, #0]
  return(result);
 8001960:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001964:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001968:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800196a:	fab3 f383 	clz	r3, r3
 800196e:	b2db      	uxtb	r3, r3
 8001970:	095b      	lsrs	r3, r3, #5
 8001972:	b2db      	uxtb	r3, r3
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b01      	cmp	r3, #1
 800197c:	d102      	bne.n	8001984 <HAL_RCC_OscConfig+0xca8>
 800197e:	4b5e      	ldr	r3, [pc, #376]	@ (8001af8 <HAL_RCC_OscConfig+0xe1c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	e027      	b.n	80019d4 <HAL_RCC_OscConfig+0xcf8>
 8001984:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001988:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800198c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001990:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001996:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	fa93 f2a3 	rbit	r2, r3
 80019a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ae:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80019b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019bc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	fa93 f2a3 	rbit	r2, r3
 80019c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ca:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	4b49      	ldr	r3, [pc, #292]	@ (8001af8 <HAL_RCC_OscConfig+0xe1c>)
 80019d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019d8:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 80019dc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80019e0:	6011      	str	r1, [r2, #0]
 80019e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019e6:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	fa92 f1a2 	rbit	r1, r2
 80019f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019f4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80019f8:	6011      	str	r1, [r2, #0]
  return(result);
 80019fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019fe:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	fab2 f282 	clz	r2, r2
 8001a08:	b252      	sxtb	r2, r2
 8001a0a:	f042 0220 	orr.w	r2, r2, #32
 8001a0e:	b252      	sxtb	r2, r2
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	f002 021f 	and.w	r2, r2, #31
 8001a16:	2101      	movs	r1, #1
 8001a18:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d180      	bne.n	8001924 <HAL_RCC_OscConfig+0xc48>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a22:	4b35      	ldr	r3, [pc, #212]	@ (8001af8 <HAL_RCC_OscConfig+0xe1c>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	430b      	orrs	r3, r1
 8001a44:	492c      	ldr	r1, [pc, #176]	@ (8001af8 <HAL_RCC_OscConfig+0xe1c>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	604b      	str	r3, [r1, #4]
 8001a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a4e:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001a52:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a5c:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	fa93 f2a3 	rbit	r2, r3
 8001a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a6a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001a6e:	601a      	str	r2, [r3, #0]
  return(result);
 8001a70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a74:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001a78:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a7a:	fab3 f383 	clz	r3, r3
 8001a7e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a82:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	461a      	mov	r2, r3
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff f907 	bl	8000ca0 <HAL_GetTick>
 8001a92:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a96:	e00a      	b.n	8001aae <HAL_RCC_OscConfig+0xdd2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a98:	f7ff f902 	bl	8000ca0 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	4a15      	ldr	r2, [pc, #84]	@ (8001afc <HAL_RCC_OscConfig+0xe20>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0xdd2>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e123      	b.n	8001cf6 <HAL_RCC_OscConfig+0x101a>
 8001aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001ab6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001aba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	fa93 f2a3 	rbit	r2, r3
 8001aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ace:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001ad2:	601a      	str	r2, [r3, #0]
  return(result);
 8001ad4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001adc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ade:	fab3 f383 	clz	r3, r3
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	095b      	lsrs	r3, r3, #5
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d106      	bne.n	8001b00 <HAL_RCC_OscConfig+0xe24>
 8001af2:	4b01      	ldr	r3, [pc, #4]	@ (8001af8 <HAL_RCC_OscConfig+0xe1c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	e02b      	b.n	8001b50 <HAL_RCC_OscConfig+0xe74>
 8001af8:	40021000 	.word	0x40021000
 8001afc:	00030d40 	.word	0x00030d40
 8001b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b04:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b12:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	fa93 f2a3 	rbit	r2, r3
 8001b1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b20:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b38:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	fa93 f2a3 	rbit	r2, r3
 8001b42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b46:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	4b6c      	ldr	r3, [pc, #432]	@ (8001d00 <HAL_RCC_OscConfig+0x1024>)
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b54:	f5a2 72e2 	sub.w	r2, r2, #452	@ 0x1c4
 8001b58:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b5c:	6011      	str	r1, [r2, #0]
 8001b5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b62:	f5a2 72e2 	sub.w	r2, r2, #452	@ 0x1c4
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	fa92 f1a2 	rbit	r1, r2
 8001b6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b70:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001b74:	6011      	str	r1, [r2, #0]
  return(result);
 8001b76:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b7a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	fab2 f282 	clz	r2, r2
 8001b84:	b252      	sxtb	r2, r2
 8001b86:	f042 0220 	orr.w	r2, r2, #32
 8001b8a:	b252      	sxtb	r2, r2
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	f002 021f 	and.w	r2, r2, #31
 8001b92:	2101      	movs	r1, #1
 8001b94:	fa01 f202 	lsl.w	r2, r1, r2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f43f af7c 	beq.w	8001a98 <HAL_RCC_OscConfig+0xdbc>
 8001ba0:	e0a8      	b.n	8001cf4 <HAL_RCC_OscConfig+0x1018>
 8001ba2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8001baa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001bae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb4:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	fa93 f2a3 	rbit	r2, r3
 8001bbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001bc6:	601a      	str	r2, [r3, #0]
  return(result);
 8001bc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bcc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001bd0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd2:	fab3 f383 	clz	r3, r3
 8001bd6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001bda:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	461a      	mov	r2, r3
 8001be2:	2300      	movs	r3, #0
 8001be4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be6:	f7ff f85b 	bl	8000ca0 <HAL_GetTick>
 8001bea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bee:	e00a      	b.n	8001c06 <HAL_RCC_OscConfig+0xf2a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf0:	f7ff f856 	bl	8000ca0 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	4a41      	ldr	r2, [pc, #260]	@ (8001d04 <HAL_RCC_OscConfig+0x1028>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0xf2a>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e077      	b.n	8001cf6 <HAL_RCC_OscConfig+0x101a>
 8001c06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c0a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c0e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c18:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	fa93 f2a3 	rbit	r2, r3
 8001c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c26:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c2a:	601a      	str	r2, [r3, #0]
  return(result);
 8001c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c30:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c34:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	095b      	lsrs	r3, r3, #5
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d102      	bne.n	8001c50 <HAL_RCC_OscConfig+0xf74>
 8001c4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d00 <HAL_RCC_OscConfig+0x1024>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	e027      	b.n	8001ca0 <HAL_RCC_OscConfig+0xfc4>
 8001c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c54:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c62:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	fa93 f2a3 	rbit	r2, r3
 8001c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c70:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001c7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c88:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	fa93 f2a3 	rbit	r2, r3
 8001c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c96:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	4b18      	ldr	r3, [pc, #96]	@ (8001d00 <HAL_RCC_OscConfig+0x1024>)
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ca4:	f5a2 72f6 	sub.w	r2, r2, #492	@ 0x1ec
 8001ca8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001cac:	6011      	str	r1, [r2, #0]
 8001cae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cb2:	f5a2 72f6 	sub.w	r2, r2, #492	@ 0x1ec
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	fa92 f1a2 	rbit	r1, r2
 8001cbc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cc0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001cc4:	6011      	str	r1, [r2, #0]
  return(result);
 8001cc6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cca:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	fab2 f282 	clz	r2, r2
 8001cd4:	b252      	sxtb	r2, r2
 8001cd6:	f042 0220 	orr.w	r2, r2, #32
 8001cda:	b252      	sxtb	r2, r2
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	f002 021f 	and.w	r2, r2, #31
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d180      	bne.n	8001bf0 <HAL_RCC_OscConfig+0xf14>
 8001cee:	e001      	b.n	8001cf4 <HAL_RCC_OscConfig+0x1018>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e000      	b.n	8001cf6 <HAL_RCC_OscConfig+0x101a>
    }
  }
  
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40021000 	.word	0x40021000
 8001d04:	00030d40 	.word	0x00030d40

08001d08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b09c      	sub	sp, #112	@ 0x70
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001d16:	4b98      	ldr	r3, [pc, #608]	@ (8001f78 <HAL_RCC_ClockConfig+0x270>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d910      	bls.n	8001d46 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d24:	4b94      	ldr	r3, [pc, #592]	@ (8001f78 <HAL_RCC_ClockConfig+0x270>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 0207 	bic.w	r2, r3, #7
 8001d2c:	4992      	ldr	r1, [pc, #584]	@ (8001f78 <HAL_RCC_ClockConfig+0x270>)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d34:	4b90      	ldr	r3, [pc, #576]	@ (8001f78 <HAL_RCC_ClockConfig+0x270>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d001      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e15a      	b.n	8001ffc <HAL_RCC_ClockConfig+0x2f4>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d008      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d52:	4b8a      	ldr	r3, [pc, #552]	@ (8001f7c <HAL_RCC_ClockConfig+0x274>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	4987      	ldr	r1, [pc, #540]	@ (8001f7c <HAL_RCC_ClockConfig+0x274>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 810d 	beq.w	8001f8c <HAL_RCC_ClockConfig+0x284>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d13d      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xee>
 8001d7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d7e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d82:	fa93 f3a3 	rbit	r3, r3
 8001d86:	667b      	str	r3, [r7, #100]	@ 0x64
  return(result);
 8001d88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8a:	fab3 f383 	clz	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	095b      	lsrs	r3, r3, #5
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d102      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x9c>
 8001d9e:	4b77      	ldr	r3, [pc, #476]	@ (8001f7c <HAL_RCC_ClockConfig+0x274>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	e00f      	b.n	8001dc4 <HAL_RCC_ClockConfig+0xbc>
 8001da4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001da8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001db2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001db6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001db8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001dba:	fa93 f3a3 	rbit	r3, r3
 8001dbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8001dc0:	4b6e      	ldr	r3, [pc, #440]	@ (8001f7c <HAL_RCC_ClockConfig+0x274>)
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001dc8:	653a      	str	r2, [r7, #80]	@ 0x50
 8001dca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001dcc:	fa92 f2a2 	rbit	r2, r2
 8001dd0:	64fa      	str	r2, [r7, #76]	@ 0x4c
  return(result);
 8001dd2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001dd4:	fab2 f282 	clz	r2, r2
 8001dd8:	b252      	sxtb	r2, r2
 8001dda:	f042 0220 	orr.w	r2, r2, #32
 8001dde:	b252      	sxtb	r2, r2
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	f002 021f 	and.w	r2, r2, #31
 8001de6:	2101      	movs	r1, #1
 8001de8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d17d      	bne.n	8001eee <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e102      	b.n	8001ffc <HAL_RCC_ClockConfig+0x2f4>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d13d      	bne.n	8001e7a <HAL_RCC_ClockConfig+0x172>
 8001dfe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e02:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e06:	fa93 f3a3 	rbit	r3, r3
 8001e0a:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8001e0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	095b      	lsrs	r3, r3, #5
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d102      	bne.n	8001e28 <HAL_RCC_ClockConfig+0x120>
 8001e22:	4b56      	ldr	r3, [pc, #344]	@ (8001f7c <HAL_RCC_ClockConfig+0x274>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	e00f      	b.n	8001e48 <HAL_RCC_ClockConfig+0x140>
 8001e28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e30:	fa93 f3a3 	rbit	r3, r3
 8001e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e3e:	fa93 f3a3 	rbit	r3, r3
 8001e42:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e44:	4b4d      	ldr	r3, [pc, #308]	@ (8001f7c <HAL_RCC_ClockConfig+0x274>)
 8001e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e4c:	633a      	str	r2, [r7, #48]	@ 0x30
 8001e4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e50:	fa92 f2a2 	rbit	r2, r2
 8001e54:	62fa      	str	r2, [r7, #44]	@ 0x2c
  return(result);
 8001e56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e58:	fab2 f282 	clz	r2, r2
 8001e5c:	b252      	sxtb	r2, r2
 8001e5e:	f042 0220 	orr.w	r2, r2, #32
 8001e62:	b252      	sxtb	r2, r2
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	f002 021f 	and.w	r2, r2, #31
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d13b      	bne.n	8001eee <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e0c0      	b.n	8001ffc <HAL_RCC_ClockConfig+0x2f4>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e88:	fab3 f383 	clz	r3, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	095b      	lsrs	r3, r3, #5
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d102      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0x19a>
 8001e9c:	4b37      	ldr	r3, [pc, #220]	@ (8001f7c <HAL_RCC_ClockConfig+0x274>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	e00d      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	6a3b      	ldr	r3, [r7, #32]
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	2302      	movs	r3, #2
 8001eb0:	61bb      	str	r3, [r7, #24]
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	4b30      	ldr	r3, [pc, #192]	@ (8001f7c <HAL_RCC_ClockConfig+0x274>)
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	613a      	str	r2, [r7, #16]
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	fa92 f2a2 	rbit	r2, r2
 8001ec8:	60fa      	str	r2, [r7, #12]
  return(result);
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	fab2 f282 	clz	r2, r2
 8001ed0:	b252      	sxtb	r2, r2
 8001ed2:	f042 0220 	orr.w	r2, r2, #32
 8001ed6:	b252      	sxtb	r2, r2
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	f002 021f 	and.w	r2, r2, #31
 8001ede:	2101      	movs	r1, #1
 8001ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e086      	b.n	8001ffc <HAL_RCC_ClockConfig+0x2f4>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eee:	4b23      	ldr	r3, [pc, #140]	@ (8001f7c <HAL_RCC_ClockConfig+0x274>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f023 0203 	bic.w	r2, r3, #3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	4920      	ldr	r1, [pc, #128]	@ (8001f7c <HAL_RCC_ClockConfig+0x274>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f00:	f7fe fece 	bl	8000ca0 <HAL_GetTick>
 8001f04:	66f8      	str	r0, [r7, #108]	@ 0x6c
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d112      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x22c>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f0e:	e00a      	b.n	8001f26 <HAL_RCC_ClockConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f10:	f7fe fec6 	bl	8000ca0 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_ClockConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e06a      	b.n	8001ffc <HAL_RCC_ClockConfig+0x2f4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f26:	4b15      	ldr	r3, [pc, #84]	@ (8001f7c <HAL_RCC_ClockConfig+0x274>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d1ee      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x208>
 8001f32:	e02b      	b.n	8001f8c <HAL_RCC_ClockConfig+0x284>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d121      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x278>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f3c:	e00a      	b.n	8001f54 <HAL_RCC_ClockConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3e:	f7fe feaf 	bl	8000ca0 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_ClockConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e053      	b.n	8001ffc <HAL_RCC_ClockConfig+0x2f4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f54:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <HAL_RCC_ClockConfig+0x274>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 030c 	and.w	r3, r3, #12
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d1ee      	bne.n	8001f3e <HAL_RCC_ClockConfig+0x236>
 8001f60:	e014      	b.n	8001f8c <HAL_RCC_ClockConfig+0x284>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f62:	f7fe fe9d 	bl	8000ca0 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d905      	bls.n	8001f80 <HAL_RCC_ClockConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e041      	b.n	8001ffc <HAL_RCC_ClockConfig+0x2f4>
 8001f78:	40022000 	.word	0x40022000
 8001f7c:	40021000 	.word	0x40021000
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f80:	4b20      	ldr	r3, [pc, #128]	@ (8002004 <HAL_RCC_ClockConfig+0x2fc>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1ea      	bne.n	8001f62 <HAL_RCC_ClockConfig+0x25a>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002008 <HAL_RCC_ClockConfig+0x300>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d210      	bcs.n	8001fbc <HAL_RCC_ClockConfig+0x2b4>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002008 <HAL_RCC_ClockConfig+0x300>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 0207 	bic.w	r2, r3, #7
 8001fa2:	4919      	ldr	r1, [pc, #100]	@ (8002008 <HAL_RCC_ClockConfig+0x300>)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001faa:	4b17      	ldr	r3, [pc, #92]	@ (8002008 <HAL_RCC_ClockConfig+0x300>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x2b4>
    {
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e01f      	b.n	8001ffc <HAL_RCC_ClockConfig+0x2f4>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <HAL_RCC_ClockConfig+0x2d2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <HAL_RCC_ClockConfig+0x2fc>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	490b      	ldr	r1, [pc, #44]	@ (8002004 <HAL_RCC_ClockConfig+0x2fc>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d009      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fe6:	4b07      	ldr	r3, [pc, #28]	@ (8002004 <HAL_RCC_ClockConfig+0x2fc>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4903      	ldr	r1, [pc, #12]	@ (8002004 <HAL_RCC_ClockConfig+0x2fc>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3770      	adds	r7, #112	@ 0x70
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40021000 	.word	0x40021000
 8002008:	40022000 	.word	0x40022000

0800200c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  //return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
  return F_CPU;
 8002010:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800201c:	b480      	push	{r7}
 800201e:	b087      	sub	sp, #28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002032:	e154      	b.n	80022de <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	2101      	movs	r1, #1
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	fa01 f303 	lsl.w	r3, r1, r3
 8002040:	4013      	ands	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 8146 	beq.w	80022d8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b02      	cmp	r3, #2
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0x40>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b12      	cmp	r3, #18
 800205a:	d123      	bne.n	80020a4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	08da      	lsrs	r2, r3, #3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3208      	adds	r2, #8
 8002064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002068:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	220f      	movs	r2, #15
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	08da      	lsrs	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3208      	adds	r2, #8
 800209e:	6939      	ldr	r1, [r7, #16]
 80020a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	2203      	movs	r2, #3
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0203 	and.w	r2, r3, #3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d00b      	beq.n	80020f8 <HAL_GPIO_Init+0xdc>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d007      	beq.n	80020f8 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020ec:	2b11      	cmp	r3, #17
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b12      	cmp	r3, #18
 80020f6:	d130      	bne.n	800215a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800212e:	2201      	movs	r2, #1
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4013      	ands	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	091b      	lsrs	r3, r3, #4
 8002144:	f003 0201 	and.w	r2, r3, #1
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	2203      	movs	r2, #3
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4013      	ands	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 80a0 	beq.w	80022d8 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002198:	4b58      	ldr	r3, [pc, #352]	@ (80022fc <HAL_GPIO_Init+0x2e0>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	4a57      	ldr	r2, [pc, #348]	@ (80022fc <HAL_GPIO_Init+0x2e0>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6193      	str	r3, [r2, #24]
 80021a4:	4b55      	ldr	r3, [pc, #340]	@ (80022fc <HAL_GPIO_Init+0x2e0>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80021b0:	4a53      	ldr	r2, [pc, #332]	@ (8002300 <HAL_GPIO_Init+0x2e4>)
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	089b      	lsrs	r3, r3, #2
 80021b6:	3302      	adds	r3, #2
 80021b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021bc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	220f      	movs	r2, #15
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	4013      	ands	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021da:	d019      	beq.n	8002210 <HAL_GPIO_Init+0x1f4>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a49      	ldr	r2, [pc, #292]	@ (8002304 <HAL_GPIO_Init+0x2e8>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d013      	beq.n	800220c <HAL_GPIO_Init+0x1f0>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a48      	ldr	r2, [pc, #288]	@ (8002308 <HAL_GPIO_Init+0x2ec>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d00d      	beq.n	8002208 <HAL_GPIO_Init+0x1ec>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a47      	ldr	r2, [pc, #284]	@ (800230c <HAL_GPIO_Init+0x2f0>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d007      	beq.n	8002204 <HAL_GPIO_Init+0x1e8>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a46      	ldr	r2, [pc, #280]	@ (8002310 <HAL_GPIO_Init+0x2f4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d101      	bne.n	8002200 <HAL_GPIO_Init+0x1e4>
 80021fc:	2304      	movs	r3, #4
 80021fe:	e008      	b.n	8002212 <HAL_GPIO_Init+0x1f6>
 8002200:	2305      	movs	r3, #5
 8002202:	e006      	b.n	8002212 <HAL_GPIO_Init+0x1f6>
 8002204:	2303      	movs	r3, #3
 8002206:	e004      	b.n	8002212 <HAL_GPIO_Init+0x1f6>
 8002208:	2302      	movs	r3, #2
 800220a:	e002      	b.n	8002212 <HAL_GPIO_Init+0x1f6>
 800220c:	2301      	movs	r3, #1
 800220e:	e000      	b.n	8002212 <HAL_GPIO_Init+0x1f6>
 8002210:	2300      	movs	r3, #0
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	f002 0203 	and.w	r2, r2, #3
 8002218:	0092      	lsls	r2, r2, #2
 800221a:	4093      	lsls	r3, r2
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002222:	4937      	ldr	r1, [pc, #220]	@ (8002300 <HAL_GPIO_Init+0x2e4>)
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	089b      	lsrs	r3, r3, #2
 8002228:	3302      	adds	r3, #2
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002230:	4b38      	ldr	r3, [pc, #224]	@ (8002314 <HAL_GPIO_Init+0x2f8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	43db      	mvns	r3, r3
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002254:	4a2f      	ldr	r2, [pc, #188]	@ (8002314 <HAL_GPIO_Init+0x2f8>)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800225a:	4b2e      	ldr	r3, [pc, #184]	@ (8002314 <HAL_GPIO_Init+0x2f8>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	43db      	mvns	r3, r3
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4013      	ands	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4313      	orrs	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800227e:	4a25      	ldr	r2, [pc, #148]	@ (8002314 <HAL_GPIO_Init+0x2f8>)
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002284:	4b23      	ldr	r3, [pc, #140]	@ (8002314 <HAL_GPIO_Init+0x2f8>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	43db      	mvns	r3, r3
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	4013      	ands	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022a8:	4a1a      	ldr	r2, [pc, #104]	@ (8002314 <HAL_GPIO_Init+0x2f8>)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022ae:	4b19      	ldr	r3, [pc, #100]	@ (8002314 <HAL_GPIO_Init+0x2f8>)
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	43db      	mvns	r3, r3
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4013      	ands	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80022d2:	4a10      	ldr	r2, [pc, #64]	@ (8002314 <HAL_GPIO_Init+0x2f8>)
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	3301      	adds	r3, #1
 80022dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	fa22 f303 	lsr.w	r3, r2, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f47f aea3 	bne.w	8002034 <HAL_GPIO_Init+0x18>
  }
}
 80022ee:	bf00      	nop
 80022f0:	bf00      	nop
 80022f2:	371c      	adds	r7, #28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000
 8002300:	40010000 	.word	0x40010000
 8002304:	48000400 	.word	0x48000400
 8002308:	48000800 	.word	0x48000800
 800230c:	48000c00 	.word	0x48000c00
 8002310:	48001000 	.word	0x48001000
 8002314:	40010400 	.word	0x40010400

08002318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	807b      	strh	r3, [r7, #2]
 8002324:	4613      	mov	r3, r2
 8002326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002328:	787b      	ldrb	r3, [r7, #1]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800232e:	887a      	ldrh	r2, [r7, #2]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002334:	e002      	b.n	800233c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002336:	887a      	ldrh	r2, [r7, #2]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr
 8002346:	0000      	movs	r0, r0

08002348 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002354:	2310      	movs	r3, #16
 8002356:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002358:	2300      	movs	r3, #0
 800235a:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 800235c:	2300      	movs	r3, #0
 800235e:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	431a      	orrs	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	4313      	orrs	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002386:	f023 030c 	bic.w	r3, r3, #12
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	68f9      	ldr	r1, [r7, #12]
 8002390:	430b      	orrs	r3, r1
 8002392:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699a      	ldr	r2, [r3, #24]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4aa1      	ldr	r2, [pc, #644]	@ (8002654 <UART_SetConfig+0x30c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d120      	bne.n	8002416 <UART_SetConfig+0xce>
 80023d4:	4ba0      	ldr	r3, [pc, #640]	@ (8002658 <UART_SetConfig+0x310>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d817      	bhi.n	8002410 <UART_SetConfig+0xc8>
 80023e0:	a201      	add	r2, pc, #4	@ (adr r2, 80023e8 <UART_SetConfig+0xa0>)
 80023e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e6:	bf00      	nop
 80023e8:	080023f9 	.word	0x080023f9
 80023ec:	08002405 	.word	0x08002405
 80023f0:	0800240b 	.word	0x0800240b
 80023f4:	080023ff 	.word	0x080023ff
 80023f8:	2301      	movs	r3, #1
 80023fa:	75fb      	strb	r3, [r7, #23]
 80023fc:	e0b5      	b.n	800256a <UART_SetConfig+0x222>
 80023fe:	2302      	movs	r3, #2
 8002400:	75fb      	strb	r3, [r7, #23]
 8002402:	e0b2      	b.n	800256a <UART_SetConfig+0x222>
 8002404:	2304      	movs	r3, #4
 8002406:	75fb      	strb	r3, [r7, #23]
 8002408:	e0af      	b.n	800256a <UART_SetConfig+0x222>
 800240a:	2308      	movs	r3, #8
 800240c:	75fb      	strb	r3, [r7, #23]
 800240e:	e0ac      	b.n	800256a <UART_SetConfig+0x222>
 8002410:	2310      	movs	r3, #16
 8002412:	75fb      	strb	r3, [r7, #23]
 8002414:	e0a9      	b.n	800256a <UART_SetConfig+0x222>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a90      	ldr	r2, [pc, #576]	@ (800265c <UART_SetConfig+0x314>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d124      	bne.n	800246a <UART_SetConfig+0x122>
 8002420:	4b8d      	ldr	r3, [pc, #564]	@ (8002658 <UART_SetConfig+0x310>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002424:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002428:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800242c:	d011      	beq.n	8002452 <UART_SetConfig+0x10a>
 800242e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002432:	d817      	bhi.n	8002464 <UART_SetConfig+0x11c>
 8002434:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002438:	d011      	beq.n	800245e <UART_SetConfig+0x116>
 800243a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800243e:	d811      	bhi.n	8002464 <UART_SetConfig+0x11c>
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <UART_SetConfig+0x104>
 8002444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002448:	d006      	beq.n	8002458 <UART_SetConfig+0x110>
 800244a:	e00b      	b.n	8002464 <UART_SetConfig+0x11c>
 800244c:	2300      	movs	r3, #0
 800244e:	75fb      	strb	r3, [r7, #23]
 8002450:	e08b      	b.n	800256a <UART_SetConfig+0x222>
 8002452:	2302      	movs	r3, #2
 8002454:	75fb      	strb	r3, [r7, #23]
 8002456:	e088      	b.n	800256a <UART_SetConfig+0x222>
 8002458:	2304      	movs	r3, #4
 800245a:	75fb      	strb	r3, [r7, #23]
 800245c:	e085      	b.n	800256a <UART_SetConfig+0x222>
 800245e:	2308      	movs	r3, #8
 8002460:	75fb      	strb	r3, [r7, #23]
 8002462:	e082      	b.n	800256a <UART_SetConfig+0x222>
 8002464:	2310      	movs	r3, #16
 8002466:	75fb      	strb	r3, [r7, #23]
 8002468:	e07f      	b.n	800256a <UART_SetConfig+0x222>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a7c      	ldr	r2, [pc, #496]	@ (8002660 <UART_SetConfig+0x318>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d124      	bne.n	80024be <UART_SetConfig+0x176>
 8002474:	4b78      	ldr	r3, [pc, #480]	@ (8002658 <UART_SetConfig+0x310>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002478:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800247c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002480:	d011      	beq.n	80024a6 <UART_SetConfig+0x15e>
 8002482:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002486:	d817      	bhi.n	80024b8 <UART_SetConfig+0x170>
 8002488:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800248c:	d011      	beq.n	80024b2 <UART_SetConfig+0x16a>
 800248e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002492:	d811      	bhi.n	80024b8 <UART_SetConfig+0x170>
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <UART_SetConfig+0x158>
 8002498:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800249c:	d006      	beq.n	80024ac <UART_SetConfig+0x164>
 800249e:	e00b      	b.n	80024b8 <UART_SetConfig+0x170>
 80024a0:	2300      	movs	r3, #0
 80024a2:	75fb      	strb	r3, [r7, #23]
 80024a4:	e061      	b.n	800256a <UART_SetConfig+0x222>
 80024a6:	2302      	movs	r3, #2
 80024a8:	75fb      	strb	r3, [r7, #23]
 80024aa:	e05e      	b.n	800256a <UART_SetConfig+0x222>
 80024ac:	2304      	movs	r3, #4
 80024ae:	75fb      	strb	r3, [r7, #23]
 80024b0:	e05b      	b.n	800256a <UART_SetConfig+0x222>
 80024b2:	2308      	movs	r3, #8
 80024b4:	75fb      	strb	r3, [r7, #23]
 80024b6:	e058      	b.n	800256a <UART_SetConfig+0x222>
 80024b8:	2310      	movs	r3, #16
 80024ba:	75fb      	strb	r3, [r7, #23]
 80024bc:	e055      	b.n	800256a <UART_SetConfig+0x222>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a68      	ldr	r2, [pc, #416]	@ (8002664 <UART_SetConfig+0x31c>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d124      	bne.n	8002512 <UART_SetConfig+0x1ca>
 80024c8:	4b63      	ldr	r3, [pc, #396]	@ (8002658 <UART_SetConfig+0x310>)
 80024ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024cc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80024d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80024d4:	d011      	beq.n	80024fa <UART_SetConfig+0x1b2>
 80024d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80024da:	d817      	bhi.n	800250c <UART_SetConfig+0x1c4>
 80024dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024e0:	d011      	beq.n	8002506 <UART_SetConfig+0x1be>
 80024e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024e6:	d811      	bhi.n	800250c <UART_SetConfig+0x1c4>
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <UART_SetConfig+0x1ac>
 80024ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024f0:	d006      	beq.n	8002500 <UART_SetConfig+0x1b8>
 80024f2:	e00b      	b.n	800250c <UART_SetConfig+0x1c4>
 80024f4:	2300      	movs	r3, #0
 80024f6:	75fb      	strb	r3, [r7, #23]
 80024f8:	e037      	b.n	800256a <UART_SetConfig+0x222>
 80024fa:	2302      	movs	r3, #2
 80024fc:	75fb      	strb	r3, [r7, #23]
 80024fe:	e034      	b.n	800256a <UART_SetConfig+0x222>
 8002500:	2304      	movs	r3, #4
 8002502:	75fb      	strb	r3, [r7, #23]
 8002504:	e031      	b.n	800256a <UART_SetConfig+0x222>
 8002506:	2308      	movs	r3, #8
 8002508:	75fb      	strb	r3, [r7, #23]
 800250a:	e02e      	b.n	800256a <UART_SetConfig+0x222>
 800250c:	2310      	movs	r3, #16
 800250e:	75fb      	strb	r3, [r7, #23]
 8002510:	e02b      	b.n	800256a <UART_SetConfig+0x222>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a54      	ldr	r2, [pc, #336]	@ (8002668 <UART_SetConfig+0x320>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d124      	bne.n	8002566 <UART_SetConfig+0x21e>
 800251c:	4b4e      	ldr	r3, [pc, #312]	@ (8002658 <UART_SetConfig+0x310>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002520:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002524:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002528:	d011      	beq.n	800254e <UART_SetConfig+0x206>
 800252a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800252e:	d817      	bhi.n	8002560 <UART_SetConfig+0x218>
 8002530:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002534:	d011      	beq.n	800255a <UART_SetConfig+0x212>
 8002536:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800253a:	d811      	bhi.n	8002560 <UART_SetConfig+0x218>
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <UART_SetConfig+0x200>
 8002540:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002544:	d006      	beq.n	8002554 <UART_SetConfig+0x20c>
 8002546:	e00b      	b.n	8002560 <UART_SetConfig+0x218>
 8002548:	2300      	movs	r3, #0
 800254a:	75fb      	strb	r3, [r7, #23]
 800254c:	e00d      	b.n	800256a <UART_SetConfig+0x222>
 800254e:	2302      	movs	r3, #2
 8002550:	75fb      	strb	r3, [r7, #23]
 8002552:	e00a      	b.n	800256a <UART_SetConfig+0x222>
 8002554:	2304      	movs	r3, #4
 8002556:	75fb      	strb	r3, [r7, #23]
 8002558:	e007      	b.n	800256a <UART_SetConfig+0x222>
 800255a:	2308      	movs	r3, #8
 800255c:	75fb      	strb	r3, [r7, #23]
 800255e:	e004      	b.n	800256a <UART_SetConfig+0x222>
 8002560:	2310      	movs	r3, #16
 8002562:	75fb      	strb	r3, [r7, #23]
 8002564:	e001      	b.n	800256a <UART_SetConfig+0x222>
 8002566:	2310      	movs	r3, #16
 8002568:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002572:	d17b      	bne.n	800266c <UART_SetConfig+0x324>
  {
    switch (clocksource)
 8002574:	7dfb      	ldrb	r3, [r7, #23]
 8002576:	2b08      	cmp	r3, #8
 8002578:	d856      	bhi.n	8002628 <UART_SetConfig+0x2e0>
 800257a:	a201      	add	r2, pc, #4	@ (adr r2, 8002580 <UART_SetConfig+0x238>)
 800257c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002580:	080025a5 	.word	0x080025a5
 8002584:	080025c1 	.word	0x080025c1
 8002588:	080025dd 	.word	0x080025dd
 800258c:	08002629 	.word	0x08002629
 8002590:	080025f7 	.word	0x080025f7
 8002594:	08002629 	.word	0x08002629
 8002598:	08002629 	.word	0x08002629
 800259c:	08002629 	.word	0x08002629
 80025a0:	08002613 	.word	0x08002613
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80025a4:	f7fe fb92 	bl	8000ccc <HAL_RCC_GetPCLK1Freq>
 80025a8:	4603      	mov	r3, r0
 80025aa:	005a      	lsls	r2, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	085b      	lsrs	r3, r3, #1
 80025b2:	441a      	add	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	82bb      	strh	r3, [r7, #20]
        break;
 80025be:	e036      	b.n	800262e <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80025c0:	f7ff fd24 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 80025c4:	4603      	mov	r3, r0
 80025c6:	005a      	lsls	r2, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	085b      	lsrs	r3, r3, #1
 80025ce:	441a      	add	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d8:	82bb      	strh	r3, [r7, #20]
        break;
 80025da:	e028      	b.n	800262e <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	085b      	lsrs	r3, r3, #1
 80025e2:	f103 73f4 	add.w	r3, r3, #31981568	@ 0x1e80000
 80025e6:	f503 4390 	add.w	r3, r3, #18432	@ 0x4800
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6852      	ldr	r2, [r2, #4]
 80025ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80025f2:	82bb      	strh	r3, [r7, #20]
        break;
 80025f4:	e01b      	b.n	800262e <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80025f6:	f7fe fb61 	bl	8000cbc <HAL_RCC_GetSysClockFreq>
 80025fa:	4603      	mov	r3, r0
 80025fc:	005a      	lsls	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	085b      	lsrs	r3, r3, #1
 8002604:	441a      	add	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	fbb2 f3f3 	udiv	r3, r2, r3
 800260e:	82bb      	strh	r3, [r7, #20]
        break;
 8002610:	e00d      	b.n	800262e <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	085b      	lsrs	r3, r3, #1
 8002618:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	fbb2 f3f3 	udiv	r3, r2, r3
 8002624:	82bb      	strh	r3, [r7, #20]
        break;
 8002626:	e002      	b.n	800262e <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	74fb      	strb	r3, [r7, #19]
        break;
 800262c:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 800262e:	8abb      	ldrh	r3, [r7, #20]
 8002630:	f023 030f 	bic.w	r3, r3, #15
 8002634:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002636:	8abb      	ldrh	r3, [r7, #20]
 8002638:	105b      	asrs	r3, r3, #1
 800263a:	b29b      	uxth	r3, r3
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	b29a      	uxth	r2, r3
 8002642:	897b      	ldrh	r3, [r7, #10]
 8002644:	4313      	orrs	r3, r2
 8002646:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	897a      	ldrh	r2, [r7, #10]
 800264e:	60da      	str	r2, [r3, #12]
 8002650:	e075      	b.n	800273e <UART_SetConfig+0x3f6>
 8002652:	bf00      	nop
 8002654:	40013800 	.word	0x40013800
 8002658:	40021000 	.word	0x40021000
 800265c:	40004400 	.word	0x40004400
 8002660:	40004800 	.word	0x40004800
 8002664:	40004c00 	.word	0x40004c00
 8002668:	40005000 	.word	0x40005000
  }
  else
  {
    switch (clocksource)
 800266c:	7dfb      	ldrb	r3, [r7, #23]
 800266e:	2b08      	cmp	r3, #8
 8002670:	d862      	bhi.n	8002738 <UART_SetConfig+0x3f0>
 8002672:	a201      	add	r2, pc, #4	@ (adr r2, 8002678 <UART_SetConfig+0x330>)
 8002674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002678:	0800269d 	.word	0x0800269d
 800267c:	080026bd 	.word	0x080026bd
 8002680:	080026dd 	.word	0x080026dd
 8002684:	08002739 	.word	0x08002739
 8002688:	080026fd 	.word	0x080026fd
 800268c:	08002739 	.word	0x08002739
 8002690:	08002739 	.word	0x08002739
 8002694:	08002739 	.word	0x08002739
 8002698:	0800271d 	.word	0x0800271d
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800269c:	f7fe fb16 	bl	8000ccc <HAL_RCC_GetPCLK1Freq>
 80026a0:	4602      	mov	r2, r0
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	085b      	lsrs	r3, r3, #1
 80026a8:	441a      	add	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60da      	str	r2, [r3, #12]
        break;
 80026ba:	e040      	b.n	800273e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80026bc:	f7ff fca6 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 80026c0:	4602      	mov	r2, r0
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	085b      	lsrs	r3, r3, #1
 80026c8:	441a      	add	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60da      	str	r2, [r3, #12]
        break;
 80026da:	e030      	b.n	800273e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	085b      	lsrs	r3, r3, #1
 80026e2:	f503 0374 	add.w	r3, r3, #15990784	@ 0xf40000
 80026e6:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6852      	ldr	r2, [r2, #4]
 80026ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60da      	str	r2, [r3, #12]
        break;
 80026fa:	e020      	b.n	800273e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80026fc:	f7fe fade 	bl	8000cbc <HAL_RCC_GetSysClockFreq>
 8002700:	4602      	mov	r2, r0
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	085b      	lsrs	r3, r3, #1
 8002708:	441a      	add	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002712:	b29a      	uxth	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	60da      	str	r2, [r3, #12]
        break;
 800271a:	e010      	b.n	800273e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	085b      	lsrs	r3, r3, #1
 8002722:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	fbb2 f3f3 	udiv	r3, r2, r3
 800272e:	b29a      	uxth	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60da      	str	r2, [r3, #12]
        break;
 8002736:	e002      	b.n	800273e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	74fb      	strb	r3, [r7, #19]
        break;
 800273c:	bf00      	nop
    }
  }

  return ret;
 800273e:	7cfb      	ldrb	r3, [r7, #19]

}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af02      	add	r7, sp, #8
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800275a:	f7fe faa1 	bl	8000ca0 <HAL_GetTick>
 800275e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b08      	cmp	r3, #8
 800276c:	d10e      	bne.n	800278c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800276e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f873 	bl	8002868 <UART_WaitOnFlagUntilTimeout>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e022      	b.n	80027d2 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b04      	cmp	r3, #4
 8002798:	d10e      	bne.n	80027b8 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800279a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f85d 	bl	8002868 <UART_WaitOnFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e00c      	b.n	80027d2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
  huart->RxState = HAL_UART_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e039      	b.n	8002860 <HAL_UART_Init+0x86>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d103      	bne.n	8002800 <HAL_UART_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    //HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2224      	movs	r2, #36	@ 0x24
 8002804:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0201 	bic.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff fd95 	bl	8002348 <UART_SetConfig>
 800281e:	4603      	mov	r3, r0
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e01b      	b.n	8002860 <HAL_UART_Init+0x86>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002836:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002846:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0201 	orr.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return UART_CheckIdleState(huart);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff ff75 	bl	8002748 <UART_CheckIdleState>
 800285e:	4603      	mov	r3, r0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	4613      	mov	r3, r2
 8002876:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002878:	e02c      	b.n	80028d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002880:	d028      	beq.n	80028d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d007      	beq.n	8002898 <UART_WaitOnFlagUntilTimeout+0x30>
 8002888:	f7fe fa0a 	bl	8000ca0 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	429a      	cmp	r2, r3
 8002896:	d21d      	bcs.n	80028d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80028a6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0201 	bic.w	r2, r2, #1
 80028b6:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e00f      	b.n	80028f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	69da      	ldr	r2, [r3, #28]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	4013      	ands	r3, r2
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	bf0c      	ite	eq
 80028e4:	2301      	moveq	r3, #1
 80028e6:	2300      	movne	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	461a      	mov	r2, r3
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d0c3      	beq.n	800287a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af02      	add	r7, sp, #8
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	4613      	mov	r3, r2
 800290a:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b20      	cmp	r3, #32
 800291a:	d176      	bne.n	8002a0a <HAL_UART_Transmit+0x10e>
  {
    if((pData == NULL ) || (Size == 0U))
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <HAL_UART_Transmit+0x2c>
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e06f      	b.n	8002a0c <HAL_UART_Transmit+0x110>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <HAL_UART_Transmit+0x3e>
 8002936:	2302      	movs	r3, #2
 8002938:	e068      	b.n	8002a0c <HAL_UART_Transmit+0x110>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2221      	movs	r2, #33	@ 0x21
 800294c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002950:	f7fe f9a6 	bl	8000ca0 <HAL_GetTick>
 8002954:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	88fa      	ldrh	r2, [r7, #6]
 800295a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	88fa      	ldrh	r2, [r7, #6]
 8002962:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while(huart->TxXferCount > 0U)
 8002966:	e033      	b.n	80029d0 <HAL_UART_Transmit+0xd4>
    {
      huart->TxXferCount--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800296e:	b29b      	uxth	r3, r3
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2200      	movs	r2, #0
 8002982:	2180      	movs	r1, #128	@ 0x80
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f7ff ff6f 	bl	8002868 <UART_WaitOnFlagUntilTimeout>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e03b      	b.n	8002a0c <HAL_UART_Transmit+0x110>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800299c:	d111      	bne.n	80029c2 <HAL_UART_Transmit+0xc6>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10d      	bne.n	80029c2 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	881a      	ldrh	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029b6:	b292      	uxth	r2, r2
 80029b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pData += 2U;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	3302      	adds	r3, #2
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	e006      	b.n	80029d0 <HAL_UART_Transmit+0xd4>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	60ba      	str	r2, [r7, #8]
 80029c8:	781a      	ldrb	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    while(huart->TxXferCount > 0U)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1c5      	bne.n	8002968 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2200      	movs	r2, #0
 80029e4:	2140      	movs	r1, #64	@ 0x40
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f7ff ff3e 	bl	8002868 <UART_WaitOnFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_UART_Transmit+0xfa>
    {
      return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e00a      	b.n	8002a0c <HAL_UART_Transmit+0x110>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    return HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	e000      	b.n	8002a0c <HAL_UART_Transmit+0x110>
  }
  else
  {
    return HAL_BUSY;
 8002a0a:	2302      	movs	r3, #2
  }
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	@ 0x28
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	4613      	mov	r3, r2
 8002a22:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	f040 809f 	bne.w	8002b74 <HAL_UART_Receive+0x160>
  {
    if((pData == NULL ) || (Size == 0U))
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <HAL_UART_Receive+0x2e>
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e097      	b.n	8002b76 <HAL_UART_Receive+0x162>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_UART_Receive+0x40>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e090      	b.n	8002b76 <HAL_UART_Receive+0x162>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f04f 32ff 	mov.w	r2, #4294967295
 8002a64:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2222      	movs	r2, #34	@ 0x22
 8002a70:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002a74:	f7fe f914 	bl	8000ca0 <HAL_GetTick>
 8002a78:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize = Size;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	88fa      	ldrh	r2, [r7, #6]
 8002a7e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	88fa      	ldrh	r2, [r7, #6]
 8002a86:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a92:	d10e      	bne.n	8002ab2 <HAL_UART_Receive+0x9e>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d105      	bne.n	8002aa8 <HAL_UART_Receive+0x94>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002aa2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002aa6:	e015      	b.n	8002ad4 <HAL_UART_Receive+0xc0>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	22ff      	movs	r2, #255	@ 0xff
 8002aac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002ab0:	e010      	b.n	8002ad4 <HAL_UART_Receive+0xc0>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_UART_Receive+0xc0>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d104      	bne.n	8002acc <HAL_UART_Receive+0xb8>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	22ff      	movs	r2, #255	@ 0xff
 8002ac6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002aca:	e003      	b.n	8002ad4 <HAL_UART_Receive+0xc0>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	227f      	movs	r2, #127	@ 0x7f
 8002ad0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002ada:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8002adc:	e03a      	b.n	8002b54 <HAL_UART_Receive+0x140>
    {
      huart->RxXferCount--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	2200      	movs	r2, #0
 8002af8:	2120      	movs	r1, #32
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f7ff feb4 	bl	8002868 <UART_WaitOnFlagUntilTimeout>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_UART_Receive+0xf6>
      {
        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e035      	b.n	8002b76 <HAL_UART_Receive+0x162>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b12:	d112      	bne.n	8002b3a <HAL_UART_Receive+0x126>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10e      	bne.n	8002b3a <HAL_UART_Receive+0x126>
      {
        tmp = (uint16_t*) pData ;
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	8b7b      	ldrh	r3, [r7, #26]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	3302      	adds	r3, #2
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	e00c      	b.n	8002b54 <HAL_UART_Receive+0x140>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	b2d9      	uxtb	r1, r3
 8002b44:	8b7b      	ldrh	r3, [r7, #26]
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	1c58      	adds	r0, r3, #1
 8002b4c:	60b8      	str	r0, [r7, #8]
 8002b4e:	400a      	ands	r2, r1
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1be      	bne.n	8002ade <HAL_UART_Receive+0xca>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    return HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	e000      	b.n	8002b76 <HAL_UART_Receive+0x162>
  }
  else
  {
    return HAL_BUSY;
 8002b74:	2302      	movs	r3, #2
  }
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	0000      	movs	r0, r0

08002b80 <Reset_Handler>:
 8002b80:	2100      	movs	r1, #0
 8002b82:	e003      	b.n	8002b8c <LoopCopyDataInit>

08002b84 <CopyDataInit>:
 8002b84:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <LoopForever+0x2>)
 8002b86:	585b      	ldr	r3, [r3, r1]
 8002b88:	5043      	str	r3, [r0, r1]
 8002b8a:	3104      	adds	r1, #4

08002b8c <LoopCopyDataInit>:
 8002b8c:	480a      	ldr	r0, [pc, #40]	@ (8002bb8 <LoopForever+0x6>)
 8002b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002bbc <LoopForever+0xa>)
 8002b90:	1842      	adds	r2, r0, r1
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d3f6      	bcc.n	8002b84 <CopyDataInit>
 8002b96:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc0 <LoopForever+0xe>)
 8002b98:	e002      	b.n	8002ba0 <LoopFillZerobss>

08002b9a <FillZerobss>:
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	3204      	adds	r2, #4

08002ba0 <LoopFillZerobss>:
 8002ba0:	4b08      	ldr	r3, [pc, #32]	@ (8002bc4 <LoopForever+0x12>)
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d3f9      	bcc.n	8002b9a <FillZerobss>
 8002ba6:	f3af 8000 	nop.w
 8002baa:	f7fd faed 	bl	8000188 <__libc_init_array>
 8002bae:	f7fd fc41 	bl	8000434 <main>

08002bb2 <LoopForever>:
 8002bb2:	e7fe      	b.n	8002bb2 <LoopForever>
 8002bb4:	08002bfc 	.word	0x08002bfc
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	20000000 	.word	0x20000000
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	20000158 	.word	0x20000158

08002bc8 <BusFault_Handler>:
 8002bc8:	e7fe      	b.n	8002bc8 <BusFault_Handler>
 8002bca:	0000      	movs	r0, r0

08002bcc <_init>:
 8002bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bce:	bf00      	nop
 8002bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bd2:	bc08      	pop	{r3}
 8002bd4:	469e      	mov	lr, r3
 8002bd6:	4770      	bx	lr

08002bd8 <_fini>:
 8002bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bda:	bf00      	nop
 8002bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bde:	bc08      	pop	{r3}
 8002be0:	469e      	mov	lr, r3
 8002be2:	4770      	bx	lr
