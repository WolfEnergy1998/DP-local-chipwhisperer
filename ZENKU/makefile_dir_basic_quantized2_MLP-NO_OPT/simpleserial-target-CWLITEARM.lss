
simpleserial-target-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005644  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080057d4  080057d4  000067d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058bc  080058bc  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  080058bc  080058bc  000068bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058c4  080058c4  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058c4  080058c4  000068c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058c8  080058c8  000068c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080058cc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  2000006c  08005938  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000330  08005938  00007330  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f8f  00000000  00000000  00007096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005560  00000000  00000000  0001f025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00001254  00000000  00000000  00024585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000820  00000000  00000000  000257e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000208  00000000  00000000  00026000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000927e  00000000  00000000  00026208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000319b  00000000  00000000  0002f486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000012  00000000  00000000  00032621  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001908  00000000  00000000  00032634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  00033f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000070  00000000  00000000  00034080  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loclists 000031b2  00000000  00000000  000340f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_rnglists 000002c1  00000000  00000000  000372a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 00000140  00000000  00000000  00037563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <expf>:
 8000190:	b538      	push	{r3, r4, r5, lr}
 8000192:	4604      	mov	r4, r0
 8000194:	f000 f82c 	bl	80001f0 <__ieee754_expf>
 8000198:	4605      	mov	r5, r0
 800019a:	4620      	mov	r0, r4
 800019c:	f000 f820 	bl	80001e0 <finitef>
 80001a0:	b148      	cbz	r0, 80001b6 <expf+0x26>
 80001a2:	490d      	ldr	r1, [pc, #52]	@ (80001d8 <expf+0x48>)
 80001a4:	4620      	mov	r0, r4
 80001a6:	f000 fc57 	bl	8000a58 <__aeabi_fcmpgt>
 80001aa:	b930      	cbnz	r0, 80001ba <expf+0x2a>
 80001ac:	490b      	ldr	r1, [pc, #44]	@ (80001dc <expf+0x4c>)
 80001ae:	4620      	mov	r0, r4
 80001b0:	f000 fc34 	bl	8000a1c <__aeabi_fcmplt>
 80001b4:	b948      	cbnz	r0, 80001ca <expf+0x3a>
 80001b6:	4628      	mov	r0, r5
 80001b8:	bd38      	pop	{r3, r4, r5, pc}
 80001ba:	f001 f8ad 	bl	8001318 <__errno>
 80001be:	f04f 45ff 	mov.w	r5, #2139095040	@ 0x7f800000
 80001c2:	2322      	movs	r3, #34	@ 0x22
 80001c4:	6003      	str	r3, [r0, #0]
 80001c6:	4628      	mov	r0, r5
 80001c8:	bd38      	pop	{r3, r4, r5, pc}
 80001ca:	f001 f8a5 	bl	8001318 <__errno>
 80001ce:	2322      	movs	r3, #34	@ 0x22
 80001d0:	2500      	movs	r5, #0
 80001d2:	6003      	str	r3, [r0, #0]
 80001d4:	e7ef      	b.n	80001b6 <expf+0x26>
 80001d6:	bf00      	nop
 80001d8:	42b17217 	.word	0x42b17217
 80001dc:	c2cff1b5 	.word	0xc2cff1b5

080001e0 <finitef>:
 80001e0:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80001e4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80001e8:	bfac      	ite	ge
 80001ea:	2000      	movge	r0, #0
 80001ec:	2001      	movlt	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__ieee754_expf>:
 80001f0:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80001f4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	4604      	mov	r4, r0
 80001fe:	d86c      	bhi.n	80002da <__ieee754_expf+0xea>
 8000200:	ea4f 75d0 	mov.w	r5, r0, lsr #31
 8000204:	f000 80c6 	beq.w	8000394 <__ieee754_expf+0x1a4>
 8000208:	497b      	ldr	r1, [pc, #492]	@ (80003f8 <__ieee754_expf+0x208>)
 800020a:	4288      	cmp	r0, r1
 800020c:	f300 80b4 	bgt.w	8000378 <__ieee754_expf+0x188>
 8000210:	2800      	cmp	r0, #0
 8000212:	f2c0 80b6 	blt.w	8000382 <__ieee754_expf+0x192>
 8000216:	4b79      	ldr	r3, [pc, #484]	@ (80003fc <__ieee754_expf+0x20c>)
 8000218:	429a      	cmp	r2, r3
 800021a:	d963      	bls.n	80002e4 <__ieee754_expf+0xf4>
 800021c:	4b78      	ldr	r3, [pc, #480]	@ (8000400 <__ieee754_expf+0x210>)
 800021e:	429a      	cmp	r2, r3
 8000220:	f200 80c5 	bhi.w	80003ae <__ieee754_expf+0x1be>
 8000224:	4e77      	ldr	r6, [pc, #476]	@ (8000404 <__ieee754_expf+0x214>)
 8000226:	4620      	mov	r0, r4
 8000228:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 800022c:	f000 f94e 	bl	80004cc <__aeabi_fsub>
 8000230:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8000234:	f1c5 0601 	rsb	r6, r5, #1
 8000238:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800023c:	4607      	mov	r7, r0
 800023e:	1b76      	subs	r6, r6, r5
 8000240:	4641      	mov	r1, r8
 8000242:	4638      	mov	r0, r7
 8000244:	f000 f942 	bl	80004cc <__aeabi_fsub>
 8000248:	4601      	mov	r1, r0
 800024a:	4604      	mov	r4, r0
 800024c:	f000 fa48 	bl	80006e0 <__aeabi_fmul>
 8000250:	496d      	ldr	r1, [pc, #436]	@ (8000408 <__ieee754_expf+0x218>)
 8000252:	4605      	mov	r5, r0
 8000254:	f000 fa44 	bl	80006e0 <__aeabi_fmul>
 8000258:	496c      	ldr	r1, [pc, #432]	@ (800040c <__ieee754_expf+0x21c>)
 800025a:	f000 f937 	bl	80004cc <__aeabi_fsub>
 800025e:	4629      	mov	r1, r5
 8000260:	f000 fa3e 	bl	80006e0 <__aeabi_fmul>
 8000264:	496a      	ldr	r1, [pc, #424]	@ (8000410 <__ieee754_expf+0x220>)
 8000266:	f000 f933 	bl	80004d0 <__addsf3>
 800026a:	4629      	mov	r1, r5
 800026c:	f000 fa38 	bl	80006e0 <__aeabi_fmul>
 8000270:	4968      	ldr	r1, [pc, #416]	@ (8000414 <__ieee754_expf+0x224>)
 8000272:	f000 f92b 	bl	80004cc <__aeabi_fsub>
 8000276:	4629      	mov	r1, r5
 8000278:	f000 fa32 	bl	80006e0 <__aeabi_fmul>
 800027c:	4966      	ldr	r1, [pc, #408]	@ (8000418 <__ieee754_expf+0x228>)
 800027e:	f000 f927 	bl	80004d0 <__addsf3>
 8000282:	4629      	mov	r1, r5
 8000284:	f000 fa2c 	bl	80006e0 <__aeabi_fmul>
 8000288:	4601      	mov	r1, r0
 800028a:	4620      	mov	r0, r4
 800028c:	f000 f91e 	bl	80004cc <__aeabi_fsub>
 8000290:	4605      	mov	r5, r0
 8000292:	4601      	mov	r1, r0
 8000294:	4620      	mov	r0, r4
 8000296:	f000 fa23 	bl	80006e0 <__aeabi_fmul>
 800029a:	46aa      	mov	sl, r5
 800029c:	4681      	mov	r9, r0
 800029e:	2e00      	cmp	r6, #0
 80002a0:	d052      	beq.n	8000348 <__ieee754_expf+0x158>
 80002a2:	4629      	mov	r1, r5
 80002a4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80002a8:	f000 f910 	bl	80004cc <__aeabi_fsub>
 80002ac:	4601      	mov	r1, r0
 80002ae:	4648      	mov	r0, r9
 80002b0:	f000 faca 	bl	8000848 <__aeabi_fdiv>
 80002b4:	4601      	mov	r1, r0
 80002b6:	4640      	mov	r0, r8
 80002b8:	f000 f908 	bl	80004cc <__aeabi_fsub>
 80002bc:	4639      	mov	r1, r7
 80002be:	f000 f905 	bl	80004cc <__aeabi_fsub>
 80002c2:	4601      	mov	r1, r0
 80002c4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80002c8:	f000 f900 	bl	80004cc <__aeabi_fsub>
 80002cc:	f116 0f7d 	cmn.w	r6, #125	@ 0x7d
 80002d0:	db64      	blt.n	800039c <__ieee754_expf+0x1ac>
 80002d2:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	4601      	mov	r1, r0
 80002dc:	f000 f8f8 	bl	80004d0 <__addsf3>
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	f1b2 5f50 	cmp.w	r2, #872415232	@ 0x34000000
 80002e8:	d209      	bcs.n	80002fe <__ieee754_expf+0x10e>
 80002ea:	494c      	ldr	r1, [pc, #304]	@ (800041c <__ieee754_expf+0x22c>)
 80002ec:	4620      	mov	r0, r4
 80002ee:	f000 f8ef 	bl	80004d0 <__addsf3>
 80002f2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80002f6:	f000 fbaf 	bl	8000a58 <__aeabi_fcmpgt>
 80002fa:	2800      	cmp	r0, #0
 80002fc:	d175      	bne.n	80003ea <__ieee754_expf+0x1fa>
 80002fe:	4621      	mov	r1, r4
 8000300:	4620      	mov	r0, r4
 8000302:	f000 f9ed 	bl	80006e0 <__aeabi_fmul>
 8000306:	4940      	ldr	r1, [pc, #256]	@ (8000408 <__ieee754_expf+0x218>)
 8000308:	4605      	mov	r5, r0
 800030a:	f000 f9e9 	bl	80006e0 <__aeabi_fmul>
 800030e:	493f      	ldr	r1, [pc, #252]	@ (800040c <__ieee754_expf+0x21c>)
 8000310:	f000 f8dc 	bl	80004cc <__aeabi_fsub>
 8000314:	4629      	mov	r1, r5
 8000316:	f000 f9e3 	bl	80006e0 <__aeabi_fmul>
 800031a:	493d      	ldr	r1, [pc, #244]	@ (8000410 <__ieee754_expf+0x220>)
 800031c:	f000 f8d8 	bl	80004d0 <__addsf3>
 8000320:	4629      	mov	r1, r5
 8000322:	f000 f9dd 	bl	80006e0 <__aeabi_fmul>
 8000326:	493b      	ldr	r1, [pc, #236]	@ (8000414 <__ieee754_expf+0x224>)
 8000328:	f000 f8d0 	bl	80004cc <__aeabi_fsub>
 800032c:	4629      	mov	r1, r5
 800032e:	f000 f9d7 	bl	80006e0 <__aeabi_fmul>
 8000332:	4939      	ldr	r1, [pc, #228]	@ (8000418 <__ieee754_expf+0x228>)
 8000334:	f000 f8cc 	bl	80004d0 <__addsf3>
 8000338:	4629      	mov	r1, r5
 800033a:	f000 f9d1 	bl	80006e0 <__aeabi_fmul>
 800033e:	4601      	mov	r1, r0
 8000340:	4620      	mov	r0, r4
 8000342:	f000 f8c3 	bl	80004cc <__aeabi_fsub>
 8000346:	4682      	mov	sl, r0
 8000348:	4651      	mov	r1, sl
 800034a:	4620      	mov	r0, r4
 800034c:	f000 f9c8 	bl	80006e0 <__aeabi_fmul>
 8000350:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000354:	4605      	mov	r5, r0
 8000356:	4650      	mov	r0, sl
 8000358:	f000 f8b8 	bl	80004cc <__aeabi_fsub>
 800035c:	4601      	mov	r1, r0
 800035e:	4628      	mov	r0, r5
 8000360:	f000 fa72 	bl	8000848 <__aeabi_fdiv>
 8000364:	4621      	mov	r1, r4
 8000366:	f000 f8b1 	bl	80004cc <__aeabi_fsub>
 800036a:	4601      	mov	r1, r0
 800036c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8000370:	f000 f8ac 	bl	80004cc <__aeabi_fsub>
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800037c:	2000      	movs	r0, #0
 800037e:	f000 b877 	b.w	8000470 <__math_oflowf>
 8000382:	4b27      	ldr	r3, [pc, #156]	@ (8000420 <__ieee754_expf+0x230>)
 8000384:	429a      	cmp	r2, r3
 8000386:	f67f af46 	bls.w	8000216 <__ieee754_expf+0x26>
 800038a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800038e:	2000      	movs	r0, #0
 8000390:	f000 b86a 	b.w	8000468 <__math_uflowf>
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0a3      	beq.n	80002e0 <__ieee754_expf+0xf0>
 8000398:	2000      	movs	r0, #0
 800039a:	e7a1      	b.n	80002e0 <__ieee754_expf+0xf0>
 800039c:	3664      	adds	r6, #100	@ 0x64
 800039e:	f04f 6158 	mov.w	r1, #226492416	@ 0xd800000
 80003a2:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
 80003a6:	f000 f99b 	bl	80006e0 <__aeabi_fmul>
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	491d      	ldr	r1, [pc, #116]	@ (8000424 <__ieee754_expf+0x234>)
 80003b0:	4620      	mov	r0, r4
 80003b2:	f000 f995 	bl	80006e0 <__aeabi_fmul>
 80003b6:	4b13      	ldr	r3, [pc, #76]	@ (8000404 <__ieee754_expf+0x214>)
 80003b8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80003bc:	6919      	ldr	r1, [r3, #16]
 80003be:	f000 f887 	bl	80004d0 <__addsf3>
 80003c2:	f000 fb69 	bl	8000a98 <__aeabi_f2iz>
 80003c6:	4606      	mov	r6, r0
 80003c8:	f000 f936 	bl	8000638 <__aeabi_i2f>
 80003cc:	4916      	ldr	r1, [pc, #88]	@ (8000428 <__ieee754_expf+0x238>)
 80003ce:	4605      	mov	r5, r0
 80003d0:	f000 f986 	bl	80006e0 <__aeabi_fmul>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4620      	mov	r0, r4
 80003d8:	f000 f878 	bl	80004cc <__aeabi_fsub>
 80003dc:	4913      	ldr	r1, [pc, #76]	@ (800042c <__ieee754_expf+0x23c>)
 80003de:	4607      	mov	r7, r0
 80003e0:	4628      	mov	r0, r5
 80003e2:	f000 f97d 	bl	80006e0 <__aeabi_fmul>
 80003e6:	4680      	mov	r8, r0
 80003e8:	e72a      	b.n	8000240 <__ieee754_expf+0x50>
 80003ea:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80003ee:	4620      	mov	r0, r4
 80003f0:	f000 f86e 	bl	80004d0 <__addsf3>
 80003f4:	e774      	b.n	80002e0 <__ieee754_expf+0xf0>
 80003f6:	bf00      	nop
 80003f8:	42b17217 	.word	0x42b17217
 80003fc:	3eb17218 	.word	0x3eb17218
 8000400:	3f851591 	.word	0x3f851591
 8000404:	080057d4 	.word	0x080057d4
 8000408:	3331bb4c 	.word	0x3331bb4c
 800040c:	35ddea0e 	.word	0x35ddea0e
 8000410:	388ab355 	.word	0x388ab355
 8000414:	3b360b61 	.word	0x3b360b61
 8000418:	3e2aaaab 	.word	0x3e2aaaab
 800041c:	7149f2ca 	.word	0x7149f2ca
 8000420:	42cff1b5 	.word	0x42cff1b5
 8000424:	3fb8aa3b 	.word	0x3fb8aa3b
 8000428:	3f317180 	.word	0x3f317180
 800042c:	3717f7d1 	.word	0x3717f7d1

08000430 <with_errnof>:
 8000430:	b538      	push	{r3, r4, r5, lr}
 8000432:	4605      	mov	r5, r0
 8000434:	460c      	mov	r4, r1
 8000436:	f000 ff6f 	bl	8001318 <__errno>
 800043a:	4603      	mov	r3, r0
 800043c:	4628      	mov	r0, r5
 800043e:	601c      	str	r4, [r3, #0]
 8000440:	bd38      	pop	{r3, r4, r5, pc}
 8000442:	bf00      	nop

08000444 <xflowf>:
 8000444:	b508      	push	{r3, lr}
 8000446:	b138      	cbz	r0, 8000458 <xflowf+0x14>
 8000448:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800044c:	f000 f948 	bl	80006e0 <__aeabi_fmul>
 8000450:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000454:	2122      	movs	r1, #34	@ 0x22
 8000456:	e7eb      	b.n	8000430 <with_errnof>
 8000458:	4608      	mov	r0, r1
 800045a:	f000 f941 	bl	80006e0 <__aeabi_fmul>
 800045e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000462:	2122      	movs	r1, #34	@ 0x22
 8000464:	e7e4      	b.n	8000430 <with_errnof>
 8000466:	bf00      	nop

08000468 <__math_uflowf>:
 8000468:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800046c:	e7ea      	b.n	8000444 <xflowf>
 800046e:	bf00      	nop

08000470 <__math_oflowf>:
 8000470:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8000474:	e7e6      	b.n	8000444 <xflowf>
 8000476:	bf00      	nop

08000478 <__math_divzerof>:
 8000478:	b508      	push	{r3, lr}
 800047a:	b138      	cbz	r0, 800048c <__math_divzerof+0x14>
 800047c:	4805      	ldr	r0, [pc, #20]	@ (8000494 <__math_divzerof+0x1c>)
 800047e:	2100      	movs	r1, #0
 8000480:	f000 f9e2 	bl	8000848 <__aeabi_fdiv>
 8000484:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000488:	2122      	movs	r1, #34	@ 0x22
 800048a:	e7d1      	b.n	8000430 <with_errnof>
 800048c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8000490:	e7f5      	b.n	800047e <__math_divzerof+0x6>
 8000492:	bf00      	nop
 8000494:	bf800000 	.word	0xbf800000

08000498 <__math_invalidf>:
 8000498:	b510      	push	{r4, lr}
 800049a:	4601      	mov	r1, r0
 800049c:	4604      	mov	r4, r0
 800049e:	f000 f815 	bl	80004cc <__aeabi_fsub>
 80004a2:	4601      	mov	r1, r0
 80004a4:	f000 f9d0 	bl	8000848 <__aeabi_fdiv>
 80004a8:	4621      	mov	r1, r4
 80004aa:	4603      	mov	r3, r0
 80004ac:	4620      	mov	r0, r4
 80004ae:	461c      	mov	r4, r3
 80004b0:	f000 fadc 	bl	8000a6c <__aeabi_fcmpun>
 80004b4:	b920      	cbnz	r0, 80004c0 <__math_invalidf+0x28>
 80004b6:	4620      	mov	r0, r4
 80004b8:	2121      	movs	r1, #33	@ 0x21
 80004ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80004be:	e7b7      	b.n	8000430 <with_errnof>
 80004c0:	4620      	mov	r0, r4
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_frsub>:
 80004c4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__addsf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_fsub>:
 80004cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080004d0 <__addsf3>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	bf1f      	itttt	ne
 80004d4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004d8:	ea92 0f03 	teqne	r2, r3
 80004dc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004e0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004e4:	d06a      	beq.n	80005bc <__addsf3+0xec>
 80004e6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004ea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80004ee:	bfc1      	itttt	gt
 80004f0:	18d2      	addgt	r2, r2, r3
 80004f2:	4041      	eorgt	r1, r0
 80004f4:	4048      	eorgt	r0, r1
 80004f6:	4041      	eorgt	r1, r0
 80004f8:	bfb8      	it	lt
 80004fa:	425b      	neglt	r3, r3
 80004fc:	2b19      	cmp	r3, #25
 80004fe:	bf88      	it	hi
 8000500:	4770      	bxhi	lr
 8000502:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000506:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800050a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800050e:	bf18      	it	ne
 8000510:	4240      	negne	r0, r0
 8000512:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000516:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800051a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800051e:	bf18      	it	ne
 8000520:	4249      	negne	r1, r1
 8000522:	ea92 0f03 	teq	r2, r3
 8000526:	d03f      	beq.n	80005a8 <__addsf3+0xd8>
 8000528:	f1a2 0201 	sub.w	r2, r2, #1
 800052c:	fa41 fc03 	asr.w	ip, r1, r3
 8000530:	eb10 000c 	adds.w	r0, r0, ip
 8000534:	f1c3 0320 	rsb	r3, r3, #32
 8000538:	fa01 f103 	lsl.w	r1, r1, r3
 800053c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000540:	d502      	bpl.n	8000548 <__addsf3+0x78>
 8000542:	4249      	negs	r1, r1
 8000544:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000548:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800054c:	d313      	bcc.n	8000576 <__addsf3+0xa6>
 800054e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000552:	d306      	bcc.n	8000562 <__addsf3+0x92>
 8000554:	0840      	lsrs	r0, r0, #1
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	f102 0201 	add.w	r2, r2, #1
 800055e:	2afe      	cmp	r2, #254	@ 0xfe
 8000560:	d251      	bcs.n	8000606 <__addsf3+0x136>
 8000562:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000566:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800056a:	bf08      	it	eq
 800056c:	f020 0001 	biceq.w	r0, r0, #1
 8000570:	ea40 0003 	orr.w	r0, r0, r3
 8000574:	4770      	bx	lr
 8000576:	0049      	lsls	r1, r1, #1
 8000578:	eb40 0000 	adc.w	r0, r0, r0
 800057c:	3a01      	subs	r2, #1
 800057e:	bf28      	it	cs
 8000580:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000584:	d2ed      	bcs.n	8000562 <__addsf3+0x92>
 8000586:	fab0 fc80 	clz	ip, r0
 800058a:	f1ac 0c08 	sub.w	ip, ip, #8
 800058e:	ebb2 020c 	subs.w	r2, r2, ip
 8000592:	fa00 f00c 	lsl.w	r0, r0, ip
 8000596:	bfaa      	itet	ge
 8000598:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800059c:	4252      	neglt	r2, r2
 800059e:	4318      	orrge	r0, r3
 80005a0:	bfbc      	itt	lt
 80005a2:	40d0      	lsrlt	r0, r2
 80005a4:	4318      	orrlt	r0, r3
 80005a6:	4770      	bx	lr
 80005a8:	f092 0f00 	teq	r2, #0
 80005ac:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80005b0:	bf06      	itte	eq
 80005b2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80005b6:	3201      	addeq	r2, #1
 80005b8:	3b01      	subne	r3, #1
 80005ba:	e7b5      	b.n	8000528 <__addsf3+0x58>
 80005bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005c4:	bf18      	it	ne
 80005c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005ca:	d021      	beq.n	8000610 <__addsf3+0x140>
 80005cc:	ea92 0f03 	teq	r2, r3
 80005d0:	d004      	beq.n	80005dc <__addsf3+0x10c>
 80005d2:	f092 0f00 	teq	r2, #0
 80005d6:	bf08      	it	eq
 80005d8:	4608      	moveq	r0, r1
 80005da:	4770      	bx	lr
 80005dc:	ea90 0f01 	teq	r0, r1
 80005e0:	bf1c      	itt	ne
 80005e2:	2000      	movne	r0, #0
 80005e4:	4770      	bxne	lr
 80005e6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80005ea:	d104      	bne.n	80005f6 <__addsf3+0x126>
 80005ec:	0040      	lsls	r0, r0, #1
 80005ee:	bf28      	it	cs
 80005f0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80005f4:	4770      	bx	lr
 80005f6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80005fa:	bf3c      	itt	cc
 80005fc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000600:	4770      	bxcc	lr
 8000602:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000606:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800060a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800060e:	4770      	bx	lr
 8000610:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000614:	bf16      	itet	ne
 8000616:	4608      	movne	r0, r1
 8000618:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800061c:	4601      	movne	r1, r0
 800061e:	0242      	lsls	r2, r0, #9
 8000620:	bf06      	itte	eq
 8000622:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000626:	ea90 0f01 	teqeq	r0, r1
 800062a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800062e:	4770      	bx	lr

08000630 <__aeabi_ui2f>:
 8000630:	f04f 0300 	mov.w	r3, #0
 8000634:	e004      	b.n	8000640 <__aeabi_i2f+0x8>
 8000636:	bf00      	nop

08000638 <__aeabi_i2f>:
 8000638:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	ea5f 0c00 	movs.w	ip, r0
 8000644:	bf08      	it	eq
 8000646:	4770      	bxeq	lr
 8000648:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800064c:	4601      	mov	r1, r0
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	e01c      	b.n	800068e <__aeabi_l2f+0x2a>

08000654 <__aeabi_ul2f>:
 8000654:	ea50 0201 	orrs.w	r2, r0, r1
 8000658:	bf08      	it	eq
 800065a:	4770      	bxeq	lr
 800065c:	f04f 0300 	mov.w	r3, #0
 8000660:	e00a      	b.n	8000678 <__aeabi_l2f+0x14>
 8000662:	bf00      	nop

08000664 <__aeabi_l2f>:
 8000664:	ea50 0201 	orrs.w	r2, r0, r1
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000670:	d502      	bpl.n	8000678 <__aeabi_l2f+0x14>
 8000672:	4240      	negs	r0, r0
 8000674:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000678:	ea5f 0c01 	movs.w	ip, r1
 800067c:	bf02      	ittt	eq
 800067e:	4684      	moveq	ip, r0
 8000680:	4601      	moveq	r1, r0
 8000682:	2000      	moveq	r0, #0
 8000684:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000688:	bf08      	it	eq
 800068a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800068e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000692:	fabc f28c 	clz	r2, ip
 8000696:	3a08      	subs	r2, #8
 8000698:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800069c:	db10      	blt.n	80006c0 <__aeabi_l2f+0x5c>
 800069e:	fa01 fc02 	lsl.w	ip, r1, r2
 80006a2:	4463      	add	r3, ip
 80006a4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006a8:	f1c2 0220 	rsb	r2, r2, #32
 80006ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80006b0:	fa20 f202 	lsr.w	r2, r0, r2
 80006b4:	eb43 0002 	adc.w	r0, r3, r2
 80006b8:	bf08      	it	eq
 80006ba:	f020 0001 	biceq.w	r0, r0, #1
 80006be:	4770      	bx	lr
 80006c0:	f102 0220 	add.w	r2, r2, #32
 80006c4:	fa01 fc02 	lsl.w	ip, r1, r2
 80006c8:	f1c2 0220 	rsb	r2, r2, #32
 80006cc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006d0:	fa21 f202 	lsr.w	r2, r1, r2
 80006d4:	eb43 0002 	adc.w	r0, r3, r2
 80006d8:	bf08      	it	eq
 80006da:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006de:	4770      	bx	lr

080006e0 <__aeabi_fmul>:
 80006e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80006e8:	bf1e      	ittt	ne
 80006ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80006ee:	ea92 0f0c 	teqne	r2, ip
 80006f2:	ea93 0f0c 	teqne	r3, ip
 80006f6:	d06f      	beq.n	80007d8 <__aeabi_fmul+0xf8>
 80006f8:	441a      	add	r2, r3
 80006fa:	ea80 0c01 	eor.w	ip, r0, r1
 80006fe:	0240      	lsls	r0, r0, #9
 8000700:	bf18      	it	ne
 8000702:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000706:	d01e      	beq.n	8000746 <__aeabi_fmul+0x66>
 8000708:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800070c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000710:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000714:	fba0 3101 	umull	r3, r1, r0, r1
 8000718:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800071c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000720:	bf3e      	ittt	cc
 8000722:	0049      	lslcc	r1, r1, #1
 8000724:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000728:	005b      	lslcc	r3, r3, #1
 800072a:	ea40 0001 	orr.w	r0, r0, r1
 800072e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000732:	2afd      	cmp	r2, #253	@ 0xfd
 8000734:	d81d      	bhi.n	8000772 <__aeabi_fmul+0x92>
 8000736:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800073a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800073e:	bf08      	it	eq
 8000740:	f020 0001 	biceq.w	r0, r0, #1
 8000744:	4770      	bx	lr
 8000746:	f090 0f00 	teq	r0, #0
 800074a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800074e:	bf08      	it	eq
 8000750:	0249      	lsleq	r1, r1, #9
 8000752:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000756:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800075a:	3a7f      	subs	r2, #127	@ 0x7f
 800075c:	bfc2      	ittt	gt
 800075e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000762:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000766:	4770      	bxgt	lr
 8000768:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	3a01      	subs	r2, #1
 8000772:	dc5d      	bgt.n	8000830 <__aeabi_fmul+0x150>
 8000774:	f112 0f19 	cmn.w	r2, #25
 8000778:	bfdc      	itt	le
 800077a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800077e:	4770      	bxle	lr
 8000780:	f1c2 0200 	rsb	r2, r2, #0
 8000784:	0041      	lsls	r1, r0, #1
 8000786:	fa21 f102 	lsr.w	r1, r1, r2
 800078a:	f1c2 0220 	rsb	r2, r2, #32
 800078e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000792:	ea5f 0031 	movs.w	r0, r1, rrx
 8000796:	f140 0000 	adc.w	r0, r0, #0
 800079a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800079e:	bf08      	it	eq
 80007a0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007a4:	4770      	bx	lr
 80007a6:	f092 0f00 	teq	r2, #0
 80007aa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80007ae:	bf02      	ittt	eq
 80007b0:	0040      	lsleq	r0, r0, #1
 80007b2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80007b6:	3a01      	subeq	r2, #1
 80007b8:	d0f9      	beq.n	80007ae <__aeabi_fmul+0xce>
 80007ba:	ea40 000c 	orr.w	r0, r0, ip
 80007be:	f093 0f00 	teq	r3, #0
 80007c2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007c6:	bf02      	ittt	eq
 80007c8:	0049      	lsleq	r1, r1, #1
 80007ca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80007ce:	3b01      	subeq	r3, #1
 80007d0:	d0f9      	beq.n	80007c6 <__aeabi_fmul+0xe6>
 80007d2:	ea41 010c 	orr.w	r1, r1, ip
 80007d6:	e78f      	b.n	80006f8 <__aeabi_fmul+0x18>
 80007d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80007dc:	ea92 0f0c 	teq	r2, ip
 80007e0:	bf18      	it	ne
 80007e2:	ea93 0f0c 	teqne	r3, ip
 80007e6:	d00a      	beq.n	80007fe <__aeabi_fmul+0x11e>
 80007e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80007ec:	bf18      	it	ne
 80007ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80007f2:	d1d8      	bne.n	80007a6 <__aeabi_fmul+0xc6>
 80007f4:	ea80 0001 	eor.w	r0, r0, r1
 80007f8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80007fc:	4770      	bx	lr
 80007fe:	f090 0f00 	teq	r0, #0
 8000802:	bf17      	itett	ne
 8000804:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000808:	4608      	moveq	r0, r1
 800080a:	f091 0f00 	teqne	r1, #0
 800080e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000812:	d014      	beq.n	800083e <__aeabi_fmul+0x15e>
 8000814:	ea92 0f0c 	teq	r2, ip
 8000818:	d101      	bne.n	800081e <__aeabi_fmul+0x13e>
 800081a:	0242      	lsls	r2, r0, #9
 800081c:	d10f      	bne.n	800083e <__aeabi_fmul+0x15e>
 800081e:	ea93 0f0c 	teq	r3, ip
 8000822:	d103      	bne.n	800082c <__aeabi_fmul+0x14c>
 8000824:	024b      	lsls	r3, r1, #9
 8000826:	bf18      	it	ne
 8000828:	4608      	movne	r0, r1
 800082a:	d108      	bne.n	800083e <__aeabi_fmul+0x15e>
 800082c:	ea80 0001 	eor.w	r0, r0, r1
 8000830:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000834:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000838:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800083c:	4770      	bx	lr
 800083e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000842:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000846:	4770      	bx	lr

08000848 <__aeabi_fdiv>:
 8000848:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800084c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000850:	bf1e      	ittt	ne
 8000852:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000856:	ea92 0f0c 	teqne	r2, ip
 800085a:	ea93 0f0c 	teqne	r3, ip
 800085e:	d069      	beq.n	8000934 <__aeabi_fdiv+0xec>
 8000860:	eba2 0203 	sub.w	r2, r2, r3
 8000864:	ea80 0c01 	eor.w	ip, r0, r1
 8000868:	0249      	lsls	r1, r1, #9
 800086a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800086e:	d037      	beq.n	80008e0 <__aeabi_fdiv+0x98>
 8000870:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000874:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000878:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800087c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000880:	428b      	cmp	r3, r1
 8000882:	bf38      	it	cc
 8000884:	005b      	lslcc	r3, r3, #1
 8000886:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800088a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800088e:	428b      	cmp	r3, r1
 8000890:	bf24      	itt	cs
 8000892:	1a5b      	subcs	r3, r3, r1
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800089c:	bf24      	itt	cs
 800089e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008a2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008aa:	bf24      	itt	cs
 80008ac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008b8:	bf24      	itt	cs
 80008ba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008be:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	bf18      	it	ne
 80008c6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008ca:	d1e0      	bne.n	800088e <__aeabi_fdiv+0x46>
 80008cc:	2afd      	cmp	r2, #253	@ 0xfd
 80008ce:	f63f af50 	bhi.w	8000772 <__aeabi_fmul+0x92>
 80008d2:	428b      	cmp	r3, r1
 80008d4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008d8:	bf08      	it	eq
 80008da:	f020 0001 	biceq.w	r0, r0, #1
 80008de:	4770      	bx	lr
 80008e0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80008e4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008e8:	327f      	adds	r2, #127	@ 0x7f
 80008ea:	bfc2      	ittt	gt
 80008ec:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80008f0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008f4:	4770      	bxgt	lr
 80008f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008fa:	f04f 0300 	mov.w	r3, #0
 80008fe:	3a01      	subs	r2, #1
 8000900:	e737      	b.n	8000772 <__aeabi_fmul+0x92>
 8000902:	f092 0f00 	teq	r2, #0
 8000906:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800090a:	bf02      	ittt	eq
 800090c:	0040      	lsleq	r0, r0, #1
 800090e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000912:	3a01      	subeq	r2, #1
 8000914:	d0f9      	beq.n	800090a <__aeabi_fdiv+0xc2>
 8000916:	ea40 000c 	orr.w	r0, r0, ip
 800091a:	f093 0f00 	teq	r3, #0
 800091e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000922:	bf02      	ittt	eq
 8000924:	0049      	lsleq	r1, r1, #1
 8000926:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800092a:	3b01      	subeq	r3, #1
 800092c:	d0f9      	beq.n	8000922 <__aeabi_fdiv+0xda>
 800092e:	ea41 010c 	orr.w	r1, r1, ip
 8000932:	e795      	b.n	8000860 <__aeabi_fdiv+0x18>
 8000934:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000938:	ea92 0f0c 	teq	r2, ip
 800093c:	d108      	bne.n	8000950 <__aeabi_fdiv+0x108>
 800093e:	0242      	lsls	r2, r0, #9
 8000940:	f47f af7d 	bne.w	800083e <__aeabi_fmul+0x15e>
 8000944:	ea93 0f0c 	teq	r3, ip
 8000948:	f47f af70 	bne.w	800082c <__aeabi_fmul+0x14c>
 800094c:	4608      	mov	r0, r1
 800094e:	e776      	b.n	800083e <__aeabi_fmul+0x15e>
 8000950:	ea93 0f0c 	teq	r3, ip
 8000954:	d104      	bne.n	8000960 <__aeabi_fdiv+0x118>
 8000956:	024b      	lsls	r3, r1, #9
 8000958:	f43f af4c 	beq.w	80007f4 <__aeabi_fmul+0x114>
 800095c:	4608      	mov	r0, r1
 800095e:	e76e      	b.n	800083e <__aeabi_fmul+0x15e>
 8000960:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000964:	bf18      	it	ne
 8000966:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800096a:	d1ca      	bne.n	8000902 <__aeabi_fdiv+0xba>
 800096c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000970:	f47f af5c 	bne.w	800082c <__aeabi_fmul+0x14c>
 8000974:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000978:	f47f af3c 	bne.w	80007f4 <__aeabi_fmul+0x114>
 800097c:	e75f      	b.n	800083e <__aeabi_fmul+0x15e>
 800097e:	bf00      	nop

08000980 <__gesf2>:
 8000980:	f04f 3cff 	mov.w	ip, #4294967295
 8000984:	e006      	b.n	8000994 <__cmpsf2+0x4>
 8000986:	bf00      	nop

08000988 <__lesf2>:
 8000988:	f04f 0c01 	mov.w	ip, #1
 800098c:	e002      	b.n	8000994 <__cmpsf2+0x4>
 800098e:	bf00      	nop

08000990 <__cmpsf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000998:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800099c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009a4:	bf18      	it	ne
 80009a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009aa:	d011      	beq.n	80009d0 <__cmpsf2+0x40>
 80009ac:	b001      	add	sp, #4
 80009ae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80009b2:	bf18      	it	ne
 80009b4:	ea90 0f01 	teqne	r0, r1
 80009b8:	bf58      	it	pl
 80009ba:	ebb2 0003 	subspl.w	r0, r2, r3
 80009be:	bf88      	it	hi
 80009c0:	17c8      	asrhi	r0, r1, #31
 80009c2:	bf38      	it	cc
 80009c4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80009c8:	bf18      	it	ne
 80009ca:	f040 0001 	orrne.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009d4:	d102      	bne.n	80009dc <__cmpsf2+0x4c>
 80009d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80009da:	d105      	bne.n	80009e8 <__cmpsf2+0x58>
 80009dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80009e0:	d1e4      	bne.n	80009ac <__cmpsf2+0x1c>
 80009e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80009e6:	d0e1      	beq.n	80009ac <__cmpsf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cfrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4608      	mov	r0, r1
 80009f4:	4661      	mov	r1, ip
 80009f6:	e7ff      	b.n	80009f8 <__aeabi_cfcmpeq>

080009f8 <__aeabi_cfcmpeq>:
 80009f8:	b50f      	push	{r0, r1, r2, r3, lr}
 80009fa:	f7ff ffc9 	bl	8000990 <__cmpsf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a08 <__aeabi_fcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cfcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_fcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cfcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_fcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cfcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_fcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffd2 	bl	80009f0 <__aeabi_cfrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_fcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc8 	bl	80009f0 <__aeabi_cfrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_fcmpun>:
 8000a6c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a78:	d102      	bne.n	8000a80 <__aeabi_fcmpun+0x14>
 8000a7a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a7e:	d108      	bne.n	8000a92 <__aeabi_fcmpun+0x26>
 8000a80:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a84:	d102      	bne.n	8000a8c <__aeabi_fcmpun+0x20>
 8000a86:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a8a:	d102      	bne.n	8000a92 <__aeabi_fcmpun+0x26>
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	f04f 0001 	mov.w	r0, #1
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_f2iz>:
 8000a98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000aa0:	d30f      	bcc.n	8000ac2 <__aeabi_f2iz+0x2a>
 8000aa2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000aa6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000aaa:	d90d      	bls.n	8000ac8 <__aeabi_f2iz+0x30>
 8000aac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ab0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ab4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ab8:	fa23 f002 	lsr.w	r0, r3, r2
 8000abc:	bf18      	it	ne
 8000abe:	4240      	negne	r0, r0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr
 8000ac8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000acc:	d101      	bne.n	8000ad2 <__aeabi_f2iz+0x3a>
 8000ace:	0242      	lsls	r2, r0, #9
 8000ad0:	d105      	bne.n	8000ade <__aeabi_f2iz+0x46>
 8000ad2:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000ad6:	bf08      	it	eq
 8000ad8:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000adc:	4770      	bx	lr
 8000ade:	f04f 0000 	mov.w	r0, #0
 8000ae2:	4770      	bx	lr

08000ae4 <__aeabi_f2uiz>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	d20e      	bcs.n	8000b06 <__aeabi_f2uiz+0x22>
 8000ae8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000aec:	d30b      	bcc.n	8000b06 <__aeabi_f2uiz+0x22>
 8000aee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000af2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000af6:	d409      	bmi.n	8000b0c <__aeabi_f2uiz+0x28>
 8000af8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000afc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b00:	fa23 f002 	lsr.w	r0, r3, r2
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr
 8000b0c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b10:	d101      	bne.n	8000b16 <__aeabi_f2uiz+0x32>
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	d102      	bne.n	8000b1c <__aeabi_f2uiz+0x38>
 8000b16:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <malloc>:
 8000b24:	4b02      	ldr	r3, [pc, #8]	@ (8000b30 <malloc+0xc>)
 8000b26:	4601      	mov	r1, r0
 8000b28:	6818      	ldr	r0, [r3, #0]
 8000b2a:	f000 b82f 	b.w	8000b8c <_malloc_r>
 8000b2e:	bf00      	nop
 8000b30:	2000001c 	.word	0x2000001c

08000b34 <free>:
 8000b34:	4b02      	ldr	r3, [pc, #8]	@ (8000b40 <free+0xc>)
 8000b36:	4601      	mov	r1, r0
 8000b38:	6818      	ldr	r0, [r3, #0]
 8000b3a:	f000 bc55 	b.w	80013e8 <_free_r>
 8000b3e:	bf00      	nop
 8000b40:	2000001c 	.word	0x2000001c

08000b44 <sbrk_aligned>:
 8000b44:	b570      	push	{r4, r5, r6, lr}
 8000b46:	4e10      	ldr	r6, [pc, #64]	@ (8000b88 <sbrk_aligned+0x44>)
 8000b48:	6833      	ldr	r3, [r6, #0]
 8000b4a:	4605      	mov	r5, r0
 8000b4c:	460c      	mov	r4, r1
 8000b4e:	b1b3      	cbz	r3, 8000b7e <sbrk_aligned+0x3a>
 8000b50:	4621      	mov	r1, r4
 8000b52:	4628      	mov	r0, r5
 8000b54:	f000 fbb8 	bl	80012c8 <_sbrk_r>
 8000b58:	1c43      	adds	r3, r0, #1
 8000b5a:	d00c      	beq.n	8000b76 <sbrk_aligned+0x32>
 8000b5c:	1cc4      	adds	r4, r0, #3
 8000b5e:	f024 0403 	bic.w	r4, r4, #3
 8000b62:	42a0      	cmp	r0, r4
 8000b64:	d005      	beq.n	8000b72 <sbrk_aligned+0x2e>
 8000b66:	1a21      	subs	r1, r4, r0
 8000b68:	4628      	mov	r0, r5
 8000b6a:	f000 fbad 	bl	80012c8 <_sbrk_r>
 8000b6e:	3001      	adds	r0, #1
 8000b70:	d001      	beq.n	8000b76 <sbrk_aligned+0x32>
 8000b72:	4620      	mov	r0, r4
 8000b74:	bd70      	pop	{r4, r5, r6, pc}
 8000b76:	f04f 34ff 	mov.w	r4, #4294967295
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	bd70      	pop	{r4, r5, r6, pc}
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f000 fba2 	bl	80012c8 <_sbrk_r>
 8000b84:	6030      	str	r0, [r6, #0]
 8000b86:	e7e3      	b.n	8000b50 <sbrk_aligned+0xc>
 8000b88:	200001b0 	.word	0x200001b0

08000b8c <_malloc_r>:
 8000b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b90:	1ccd      	adds	r5, r1, #3
 8000b92:	f025 0503 	bic.w	r5, r5, #3
 8000b96:	3508      	adds	r5, #8
 8000b98:	2d0c      	cmp	r5, #12
 8000b9a:	bf38      	it	cc
 8000b9c:	250c      	movcc	r5, #12
 8000b9e:	2d00      	cmp	r5, #0
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	db16      	blt.n	8000bd4 <_malloc_r+0x48>
 8000ba6:	42a9      	cmp	r1, r5
 8000ba8:	d814      	bhi.n	8000bd4 <_malloc_r+0x48>
 8000baa:	4f35      	ldr	r7, [pc, #212]	@ (8000c80 <_malloc_r+0xf4>)
 8000bac:	f000 f86a 	bl	8000c84 <__malloc_lock>
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	b1aa      	cbz	r2, 8000be0 <_malloc_r+0x54>
 8000bb4:	4614      	mov	r4, r2
 8000bb6:	e003      	b.n	8000bc0 <_malloc_r+0x34>
 8000bb8:	6863      	ldr	r3, [r4, #4]
 8000bba:	4622      	mov	r2, r4
 8000bbc:	b183      	cbz	r3, 8000be0 <_malloc_r+0x54>
 8000bbe:	461c      	mov	r4, r3
 8000bc0:	6823      	ldr	r3, [r4, #0]
 8000bc2:	1b5b      	subs	r3, r3, r5
 8000bc4:	d4f8      	bmi.n	8000bb8 <_malloc_r+0x2c>
 8000bc6:	2b0b      	cmp	r3, #11
 8000bc8:	d821      	bhi.n	8000c0e <_malloc_r+0x82>
 8000bca:	42a2      	cmp	r2, r4
 8000bcc:	6863      	ldr	r3, [r4, #4]
 8000bce:	d055      	beq.n	8000c7c <_malloc_r+0xf0>
 8000bd0:	6053      	str	r3, [r2, #4]
 8000bd2:	e00d      	b.n	8000bf0 <_malloc_r+0x64>
 8000bd4:	230c      	movs	r3, #12
 8000bd6:	6033      	str	r3, [r6, #0]
 8000bd8:	2000      	movs	r0, #0
 8000bda:	b002      	add	sp, #8
 8000bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000be0:	4629      	mov	r1, r5
 8000be2:	4630      	mov	r0, r6
 8000be4:	f7ff ffae 	bl	8000b44 <sbrk_aligned>
 8000be8:	1c43      	adds	r3, r0, #1
 8000bea:	4604      	mov	r4, r0
 8000bec:	d019      	beq.n	8000c22 <_malloc_r+0x96>
 8000bee:	6005      	str	r5, [r0, #0]
 8000bf0:	4630      	mov	r0, r6
 8000bf2:	f000 f84d 	bl	8000c90 <__malloc_unlock>
 8000bf6:	f104 000b 	add.w	r0, r4, #11
 8000bfa:	1d23      	adds	r3, r4, #4
 8000bfc:	f020 0007 	bic.w	r0, r0, #7
 8000c00:	1ac2      	subs	r2, r0, r3
 8000c02:	bf1c      	itt	ne
 8000c04:	1a1b      	subne	r3, r3, r0
 8000c06:	50a3      	strne	r3, [r4, r2]
 8000c08:	b002      	add	sp, #8
 8000c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c0e:	1961      	adds	r1, r4, r5
 8000c10:	42a2      	cmp	r2, r4
 8000c12:	6025      	str	r5, [r4, #0]
 8000c14:	bf14      	ite	ne
 8000c16:	6051      	strne	r1, [r2, #4]
 8000c18:	6079      	streq	r1, [r7, #4]
 8000c1a:	5163      	str	r3, [r4, r5]
 8000c1c:	6863      	ldr	r3, [r4, #4]
 8000c1e:	604b      	str	r3, [r1, #4]
 8000c20:	e7e6      	b.n	8000bf0 <_malloc_r+0x64>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	b323      	cbz	r3, 8000c70 <_malloc_r+0xe4>
 8000c26:	461c      	mov	r4, r3
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1fb      	bne.n	8000c26 <_malloc_r+0x9a>
 8000c2e:	6822      	ldr	r2, [r4, #0]
 8000c30:	9301      	str	r3, [sp, #4]
 8000c32:	4619      	mov	r1, r3
 8000c34:	4630      	mov	r0, r6
 8000c36:	eb04 0802 	add.w	r8, r4, r2
 8000c3a:	f000 fb45 	bl	80012c8 <_sbrk_r>
 8000c3e:	4580      	cmp	r8, r0
 8000c40:	d116      	bne.n	8000c70 <_malloc_r+0xe4>
 8000c42:	6822      	ldr	r2, [r4, #0]
 8000c44:	1aad      	subs	r5, r5, r2
 8000c46:	4629      	mov	r1, r5
 8000c48:	4630      	mov	r0, r6
 8000c4a:	f7ff ff7b 	bl	8000b44 <sbrk_aligned>
 8000c4e:	3001      	adds	r0, #1
 8000c50:	d00e      	beq.n	8000c70 <_malloc_r+0xe4>
 8000c52:	6822      	ldr	r2, [r4, #0]
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	9b01      	ldr	r3, [sp, #4]
 8000c58:	442a      	add	r2, r5
 8000c5a:	6022      	str	r2, [r4, #0]
 8000c5c:	6842      	ldr	r2, [r0, #4]
 8000c5e:	b912      	cbnz	r2, 8000c66 <_malloc_r+0xda>
 8000c60:	e00c      	b.n	8000c7c <_malloc_r+0xf0>
 8000c62:	4610      	mov	r0, r2
 8000c64:	6852      	ldr	r2, [r2, #4]
 8000c66:	42a2      	cmp	r2, r4
 8000c68:	d1fb      	bne.n	8000c62 <_malloc_r+0xd6>
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	6043      	str	r3, [r0, #4]
 8000c6e:	e7bf      	b.n	8000bf0 <_malloc_r+0x64>
 8000c70:	230c      	movs	r3, #12
 8000c72:	6033      	str	r3, [r6, #0]
 8000c74:	4630      	mov	r0, r6
 8000c76:	f000 f80b 	bl	8000c90 <__malloc_unlock>
 8000c7a:	e7ad      	b.n	8000bd8 <_malloc_r+0x4c>
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	e7b7      	b.n	8000bf0 <_malloc_r+0x64>
 8000c80:	200001b0 	.word	0x200001b0

08000c84 <__malloc_lock>:
 8000c84:	4801      	ldr	r0, [pc, #4]	@ (8000c8c <__malloc_lock+0x8>)
 8000c86:	f000 bb7f 	b.w	8001388 <__retarget_lock_acquire_recursive>
 8000c8a:	bf00      	nop
 8000c8c:	20000308 	.word	0x20000308

08000c90 <__malloc_unlock>:
 8000c90:	4801      	ldr	r0, [pc, #4]	@ (8000c98 <__malloc_unlock+0x8>)
 8000c92:	f000 bb81 	b.w	8001398 <__retarget_lock_release_recursive>
 8000c96:	bf00      	nop
 8000c98:	20000308 	.word	0x20000308

08000c9c <srand>:
 8000c9c:	b538      	push	{r3, r4, r5, lr}
 8000c9e:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <srand+0x4c>)
 8000ca0:	681d      	ldr	r5, [r3, #0]
 8000ca2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8000ca4:	4604      	mov	r4, r0
 8000ca6:	b11a      	cbz	r2, 8000cb0 <srand+0x14>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e9c2 4304 	strd	r4, r3, [r2, #16]
 8000cae:	bd38      	pop	{r3, r4, r5, pc}
 8000cb0:	2018      	movs	r0, #24
 8000cb2:	f7ff ff37 	bl	8000b24 <malloc>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	6328      	str	r0, [r5, #48]	@ 0x30
 8000cba:	b178      	cbz	r0, 8000cdc <srand+0x40>
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000cc4:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <srand+0x50>)
 8000cc6:	480a      	ldr	r0, [pc, #40]	@ (8000cf0 <srand+0x54>)
 8000cc8:	490a      	ldr	r1, [pc, #40]	@ (8000cf4 <srand+0x58>)
 8000cca:	6091      	str	r1, [r2, #8]
 8000ccc:	e9c2 0300 	strd	r0, r3, [r2]
 8000cd0:	230b      	movs	r3, #11
 8000cd2:	8193      	strh	r3, [r2, #12]
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e9c2 4304 	strd	r4, r3, [r2, #16]
 8000cda:	bd38      	pop	{r3, r4, r5, pc}
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <srand+0x5c>)
 8000cde:	4807      	ldr	r0, [pc, #28]	@ (8000cfc <srand+0x60>)
 8000ce0:	2146      	movs	r1, #70	@ 0x46
 8000ce2:	f000 fb5b 	bl	800139c <__assert_func>
 8000ce6:	bf00      	nop
 8000ce8:	2000001c 	.word	0x2000001c
 8000cec:	e66d1234 	.word	0xe66d1234
 8000cf0:	abcd330e 	.word	0xabcd330e
 8000cf4:	0005deec 	.word	0x0005deec
 8000cf8:	080057ec 	.word	0x080057ec
 8000cfc:	08005804 	.word	0x08005804

08000d00 <rand>:
 8000d00:	b538      	push	{r3, r4, r5, lr}
 8000d02:	4b19      	ldr	r3, [pc, #100]	@ (8000d68 <rand+0x68>)
 8000d04:	681c      	ldr	r4, [r3, #0]
 8000d06:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8000d08:	b18a      	cbz	r2, 8000d2e <rand+0x2e>
 8000d0a:	6913      	ldr	r3, [r2, #16]
 8000d0c:	4917      	ldr	r1, [pc, #92]	@ (8000d6c <rand+0x6c>)
 8000d0e:	6954      	ldr	r4, [r2, #20]
 8000d10:	4817      	ldr	r0, [pc, #92]	@ (8000d70 <rand+0x70>)
 8000d12:	fb03 f101 	mul.w	r1, r3, r1
 8000d16:	fb00 1104 	mla	r1, r0, r4, r1
 8000d1a:	fba3 3000 	umull	r3, r0, r3, r0
 8000d1e:	3301      	adds	r3, #1
 8000d20:	eb41 0100 	adc.w	r1, r1, r0
 8000d24:	e9c2 3104 	strd	r3, r1, [r2, #16]
 8000d28:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 8000d2c:	bd38      	pop	{r3, r4, r5, pc}
 8000d2e:	2018      	movs	r0, #24
 8000d30:	f7ff fef8 	bl	8000b24 <malloc>
 8000d34:	4602      	mov	r2, r0
 8000d36:	6320      	str	r0, [r4, #48]	@ 0x30
 8000d38:	b188      	cbz	r0, 8000d5e <rand+0x5e>
 8000d3a:	2401      	movs	r4, #1
 8000d3c:	2500      	movs	r5, #0
 8000d3e:	e9c2 4504 	strd	r4, r5, [r2, #16]
 8000d42:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <rand+0x74>)
 8000d44:	4c0c      	ldr	r4, [pc, #48]	@ (8000d78 <rand+0x78>)
 8000d46:	4809      	ldr	r0, [pc, #36]	@ (8000d6c <rand+0x6c>)
 8000d48:	490c      	ldr	r1, [pc, #48]	@ (8000d7c <rand+0x7c>)
 8000d4a:	6091      	str	r1, [r2, #8]
 8000d4c:	e9c2 4300 	strd	r4, r3, [r2]
 8000d50:	230b      	movs	r3, #11
 8000d52:	8193      	strh	r3, [r2, #12]
 8000d54:	4b0a      	ldr	r3, [pc, #40]	@ (8000d80 <rand+0x80>)
 8000d56:	4601      	mov	r1, r0
 8000d58:	e9c2 3104 	strd	r3, r1, [r2, #16]
 8000d5c:	bd38      	pop	{r3, r4, r5, pc}
 8000d5e:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <rand+0x84>)
 8000d60:	4809      	ldr	r0, [pc, #36]	@ (8000d88 <rand+0x88>)
 8000d62:	2152      	movs	r1, #82	@ 0x52
 8000d64:	f000 fb1a 	bl	800139c <__assert_func>
 8000d68:	2000001c 	.word	0x2000001c
 8000d6c:	5851f42d 	.word	0x5851f42d
 8000d70:	4c957f2d 	.word	0x4c957f2d
 8000d74:	e66d1234 	.word	0xe66d1234
 8000d78:	abcd330e 	.word	0xabcd330e
 8000d7c:	0005deec 	.word	0x0005deec
 8000d80:	4c957f2e 	.word	0x4c957f2e
 8000d84:	080057ec 	.word	0x080057ec
 8000d88:	08005804 	.word	0x08005804

08000d8c <stdio_exit_handler>:
 8000d8c:	4a02      	ldr	r2, [pc, #8]	@ (8000d98 <stdio_exit_handler+0xc>)
 8000d8e:	4903      	ldr	r1, [pc, #12]	@ (8000d9c <stdio_exit_handler+0x10>)
 8000d90:	4803      	ldr	r0, [pc, #12]	@ (8000da0 <stdio_exit_handler+0x14>)
 8000d92:	f000 b969 	b.w	8001068 <_fwalk_sglue>
 8000d96:	bf00      	nop
 8000d98:	20000010 	.word	0x20000010
 8000d9c:	080015b5 	.word	0x080015b5
 8000da0:	20000020 	.word	0x20000020

08000da4 <cleanup_stdio>:
 8000da4:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <cleanup_stdio+0x34>)
 8000da6:	6841      	ldr	r1, [r0, #4]
 8000da8:	4299      	cmp	r1, r3
 8000daa:	b510      	push	{r4, lr}
 8000dac:	4604      	mov	r4, r0
 8000dae:	d001      	beq.n	8000db4 <cleanup_stdio+0x10>
 8000db0:	f000 fc00 	bl	80015b4 <_fflush_r>
 8000db4:	68a1      	ldr	r1, [r4, #8]
 8000db6:	4b09      	ldr	r3, [pc, #36]	@ (8000ddc <cleanup_stdio+0x38>)
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d002      	beq.n	8000dc2 <cleanup_stdio+0x1e>
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f000 fbf9 	bl	80015b4 <_fflush_r>
 8000dc2:	68e1      	ldr	r1, [r4, #12]
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <cleanup_stdio+0x3c>)
 8000dc6:	4299      	cmp	r1, r3
 8000dc8:	d004      	beq.n	8000dd4 <cleanup_stdio+0x30>
 8000dca:	4620      	mov	r0, r4
 8000dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dd0:	f000 bbf0 	b.w	80015b4 <_fflush_r>
 8000dd4:	bd10      	pop	{r4, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200001b8 	.word	0x200001b8
 8000ddc:	20000220 	.word	0x20000220
 8000de0:	20000288 	.word	0x20000288

08000de4 <__fp_lock>:
 8000de4:	b508      	push	{r3, lr}
 8000de6:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8000de8:	07da      	lsls	r2, r3, #31
 8000dea:	d402      	bmi.n	8000df2 <__fp_lock+0xe>
 8000dec:	898b      	ldrh	r3, [r1, #12]
 8000dee:	059b      	lsls	r3, r3, #22
 8000df0:	d501      	bpl.n	8000df6 <__fp_lock+0x12>
 8000df2:	2000      	movs	r0, #0
 8000df4:	bd08      	pop	{r3, pc}
 8000df6:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 8000df8:	f000 fac6 	bl	8001388 <__retarget_lock_acquire_recursive>
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	bd08      	pop	{r3, pc}

08000e00 <__fp_unlock>:
 8000e00:	b508      	push	{r3, lr}
 8000e02:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8000e04:	07da      	lsls	r2, r3, #31
 8000e06:	d402      	bmi.n	8000e0e <__fp_unlock+0xe>
 8000e08:	898b      	ldrh	r3, [r1, #12]
 8000e0a:	059b      	lsls	r3, r3, #22
 8000e0c:	d501      	bpl.n	8000e12 <__fp_unlock+0x12>
 8000e0e:	2000      	movs	r0, #0
 8000e10:	bd08      	pop	{r3, pc}
 8000e12:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 8000e14:	f000 fac0 	bl	8001398 <__retarget_lock_release_recursive>
 8000e18:	2000      	movs	r0, #0
 8000e1a:	bd08      	pop	{r3, pc}

08000e1c <global_stdio_init.part.0>:
 8000e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e20:	4c31      	ldr	r4, [pc, #196]	@ (8000ee8 <global_stdio_init.part.0+0xcc>)
 8000e22:	4b32      	ldr	r3, [pc, #200]	@ (8000eec <global_stdio_init.part.0+0xd0>)
 8000e24:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 8000ef0 <global_stdio_init.part.0+0xd4>
 8000e28:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 8000ef4 <global_stdio_init.part.0+0xd8>
 8000e2c:	4f32      	ldr	r7, [pc, #200]	@ (8000ef8 <global_stdio_init.part.0+0xdc>)
 8000e2e:	f8c4 3138 	str.w	r3, [r4, #312]	@ 0x138
 8000e32:	2500      	movs	r5, #0
 8000e34:	4629      	mov	r1, r5
 8000e36:	2304      	movs	r3, #4
 8000e38:	2208      	movs	r2, #8
 8000e3a:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8000e3e:	4e2f      	ldr	r6, [pc, #188]	@ (8000efc <global_stdio_init.part.0+0xe0>)
 8000e40:	60e3      	str	r3, [r4, #12]
 8000e42:	e9c4 5500 	strd	r5, r5, [r4]
 8000e46:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000e4a:	60a5      	str	r5, [r4, #8]
 8000e4c:	6665      	str	r5, [r4, #100]	@ 0x64
 8000e4e:	61a5      	str	r5, [r4, #24]
 8000e50:	f000 f978 	bl	8001144 <memset>
 8000e54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000e58:	e9c4 4908 	strd	r4, r9, [r4, #32]
 8000e5c:	e9c4 870a 	strd	r8, r7, [r4, #40]	@ 0x28
 8000e60:	6326      	str	r6, [r4, #48]	@ 0x30
 8000e62:	f000 fa89 	bl	8001378 <__retarget_lock_init_recursive>
 8000e66:	4629      	mov	r1, r5
 8000e68:	4b25      	ldr	r3, [pc, #148]	@ (8000f00 <global_stdio_init.part.0+0xe4>)
 8000e6a:	6763      	str	r3, [r4, #116]	@ 0x74
 8000e6c:	2208      	movs	r2, #8
 8000e6e:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4
 8000e72:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 8000e76:	e9c4 551e 	strd	r5, r5, [r4, #120]	@ 0x78
 8000e7a:	6725      	str	r5, [r4, #112]	@ 0x70
 8000e7c:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
 8000e80:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
 8000e84:	f000 f95e 	bl	8001144 <memset>
 8000e88:	f104 0368 	add.w	r3, r4, #104	@ 0x68
 8000e8c:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 8000e90:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 8000e94:	e9c4 9823 	strd	r9, r8, [r4, #140]	@ 0x8c
 8000e98:	e9c4 7625 	strd	r7, r6, [r4, #148]	@ 0x94
 8000e9c:	f000 fa6c 	bl	8001378 <__retarget_lock_init_recursive>
 8000ea0:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <global_stdio_init.part.0+0xe8>)
 8000ea2:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
 8000ea6:	4629      	mov	r1, r5
 8000ea8:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
 8000eac:	2208      	movs	r2, #8
 8000eae:	e9c4 5534 	strd	r5, r5, [r4, #208]	@ 0xd0
 8000eb2:	e9c4 5538 	strd	r5, r5, [r4, #224]	@ 0xe0
 8000eb6:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
 8000eba:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8000ebe:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
 8000ec2:	f000 f93f 	bl	8001144 <memset>
 8000ec6:	f104 03d0 	add.w	r3, r4, #208	@ 0xd0
 8000eca:	e9c4 873e 	strd	r8, r7, [r4, #248]	@ 0xf8
 8000ece:	f8c4 90f4 	str.w	r9, [r4, #244]	@ 0xf4
 8000ed2:	f504 7094 	add.w	r0, r4, #296	@ 0x128
 8000ed6:	f8c4 6100 	str.w	r6, [r4, #256]	@ 0x100
 8000eda:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
 8000ede:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ee2:	f000 ba49 	b.w	8001378 <__retarget_lock_init_recursive>
 8000ee6:	bf00      	nop
 8000ee8:	200001b8 	.word	0x200001b8
 8000eec:	08000d8d 	.word	0x08000d8d
 8000ef0:	080010b1 	.word	0x080010b1
 8000ef4:	080010d9 	.word	0x080010d9
 8000ef8:	08001119 	.word	0x08001119
 8000efc:	0800113d 	.word	0x0800113d
 8000f00:	00010009 	.word	0x00010009
 8000f04:	00020012 	.word	0x00020012

08000f08 <__sfp>:
 8000f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f0a:	4606      	mov	r6, r0
 8000f0c:	482a      	ldr	r0, [pc, #168]	@ (8000fb8 <__sfp+0xb0>)
 8000f0e:	f000 fa3b 	bl	8001388 <__retarget_lock_acquire_recursive>
 8000f12:	4b2a      	ldr	r3, [pc, #168]	@ (8000fbc <__sfp+0xb4>)
 8000f14:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d043      	beq.n	8000fa4 <__sfp+0x9c>
 8000f1c:	4f28      	ldr	r7, [pc, #160]	@ (8000fc0 <__sfp+0xb8>)
 8000f1e:	e9d7 3401 	ldrd	r3, r4, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	d504      	bpl.n	8000f30 <__sfp+0x28>
 8000f26:	e024      	b.n	8000f72 <__sfp+0x6a>
 8000f28:	1c5a      	adds	r2, r3, #1
 8000f2a:	f104 0468 	add.w	r4, r4, #104	@ 0x68
 8000f2e:	d020      	beq.n	8000f72 <__sfp+0x6a>
 8000f30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	2d00      	cmp	r5, #0
 8000f38:	d1f6      	bne.n	8000f28 <__sfp+0x20>
 8000f3a:	4b22      	ldr	r3, [pc, #136]	@ (8000fc4 <__sfp+0xbc>)
 8000f3c:	60e3      	str	r3, [r4, #12]
 8000f3e:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000f42:	6665      	str	r5, [r4, #100]	@ 0x64
 8000f44:	f000 fa18 	bl	8001378 <__retarget_lock_init_recursive>
 8000f48:	481b      	ldr	r0, [pc, #108]	@ (8000fb8 <__sfp+0xb0>)
 8000f4a:	f000 fa25 	bl	8001398 <__retarget_lock_release_recursive>
 8000f4e:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000f52:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000f56:	6025      	str	r5, [r4, #0]
 8000f58:	61a5      	str	r5, [r4, #24]
 8000f5a:	2208      	movs	r2, #8
 8000f5c:	4629      	mov	r1, r5
 8000f5e:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8000f62:	f000 f8ef 	bl	8001144 <memset>
 8000f66:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8000f6a:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 8000f6e:	4620      	mov	r0, r4
 8000f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f72:	683d      	ldr	r5, [r7, #0]
 8000f74:	b10d      	cbz	r5, 8000f7a <__sfp+0x72>
 8000f76:	462f      	mov	r7, r5
 8000f78:	e7d1      	b.n	8000f1e <__sfp+0x16>
 8000f7a:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8000f7e:	4630      	mov	r0, r6
 8000f80:	f7ff fe04 	bl	8000b8c <_malloc_r>
 8000f84:	4604      	mov	r4, r0
 8000f86:	b180      	cbz	r0, 8000faa <__sfp+0xa2>
 8000f88:	2304      	movs	r3, #4
 8000f8a:	6005      	str	r5, [r0, #0]
 8000f8c:	6043      	str	r3, [r0, #4]
 8000f8e:	300c      	adds	r0, #12
 8000f90:	4629      	mov	r1, r5
 8000f92:	60a0      	str	r0, [r4, #8]
 8000f94:	4625      	mov	r5, r4
 8000f96:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8000f9a:	f000 f8d3 	bl	8001144 <memset>
 8000f9e:	603c      	str	r4, [r7, #0]
 8000fa0:	462f      	mov	r7, r5
 8000fa2:	e7bc      	b.n	8000f1e <__sfp+0x16>
 8000fa4:	f7ff ff3a 	bl	8000e1c <global_stdio_init.part.0>
 8000fa8:	e7b8      	b.n	8000f1c <__sfp+0x14>
 8000faa:	4803      	ldr	r0, [pc, #12]	@ (8000fb8 <__sfp+0xb0>)
 8000fac:	603c      	str	r4, [r7, #0]
 8000fae:	f000 f9f3 	bl	8001398 <__retarget_lock_release_recursive>
 8000fb2:	230c      	movs	r3, #12
 8000fb4:	6033      	str	r3, [r6, #0]
 8000fb6:	e7da      	b.n	8000f6e <__sfp+0x66>
 8000fb8:	20000314 	.word	0x20000314
 8000fbc:	200001b8 	.word	0x200001b8
 8000fc0:	20000010 	.word	0x20000010
 8000fc4:	ffff0001 	.word	0xffff0001

08000fc8 <__sinit>:
 8000fc8:	b510      	push	{r4, lr}
 8000fca:	4604      	mov	r4, r0
 8000fcc:	480b      	ldr	r0, [pc, #44]	@ (8000ffc <__sinit+0x34>)
 8000fce:	f000 f9db 	bl	8001388 <__retarget_lock_acquire_recursive>
 8000fd2:	6a23      	ldr	r3, [r4, #32]
 8000fd4:	b92b      	cbnz	r3, 8000fe2 <__sinit+0x1a>
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <__sinit+0x38>)
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <__sinit+0x3c>)
 8000fda:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000fde:	6222      	str	r2, [r4, #32]
 8000fe0:	b123      	cbz	r3, 8000fec <__sinit+0x24>
 8000fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fe6:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <__sinit+0x34>)
 8000fe8:	f000 b9d6 	b.w	8001398 <__retarget_lock_release_recursive>
 8000fec:	f7ff ff16 	bl	8000e1c <global_stdio_init.part.0>
 8000ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ff4:	4801      	ldr	r0, [pc, #4]	@ (8000ffc <__sinit+0x34>)
 8000ff6:	f000 b9cf 	b.w	8001398 <__retarget_lock_release_recursive>
 8000ffa:	bf00      	nop
 8000ffc:	20000314 	.word	0x20000314
 8001000:	200001b8 	.word	0x200001b8
 8001004:	08000da5 	.word	0x08000da5

08001008 <__sfp_lock_acquire>:
 8001008:	4801      	ldr	r0, [pc, #4]	@ (8001010 <__sfp_lock_acquire+0x8>)
 800100a:	f000 b9bd 	b.w	8001388 <__retarget_lock_acquire_recursive>
 800100e:	bf00      	nop
 8001010:	20000314 	.word	0x20000314

08001014 <__sfp_lock_release>:
 8001014:	4801      	ldr	r0, [pc, #4]	@ (800101c <__sfp_lock_release+0x8>)
 8001016:	f000 b9bf 	b.w	8001398 <__retarget_lock_release_recursive>
 800101a:	bf00      	nop
 800101c:	20000314 	.word	0x20000314

08001020 <__fp_lock_all>:
 8001020:	b508      	push	{r3, lr}
 8001022:	4805      	ldr	r0, [pc, #20]	@ (8001038 <__fp_lock_all+0x18>)
 8001024:	f000 f9b0 	bl	8001388 <__retarget_lock_acquire_recursive>
 8001028:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800102c:	4a03      	ldr	r2, [pc, #12]	@ (800103c <__fp_lock_all+0x1c>)
 800102e:	4904      	ldr	r1, [pc, #16]	@ (8001040 <__fp_lock_all+0x20>)
 8001030:	2000      	movs	r0, #0
 8001032:	f000 b819 	b.w	8001068 <_fwalk_sglue>
 8001036:	bf00      	nop
 8001038:	20000314 	.word	0x20000314
 800103c:	20000010 	.word	0x20000010
 8001040:	08000de5 	.word	0x08000de5

08001044 <__fp_unlock_all>:
 8001044:	b508      	push	{r3, lr}
 8001046:	4a05      	ldr	r2, [pc, #20]	@ (800105c <__fp_unlock_all+0x18>)
 8001048:	4905      	ldr	r1, [pc, #20]	@ (8001060 <__fp_unlock_all+0x1c>)
 800104a:	2000      	movs	r0, #0
 800104c:	f000 f80c 	bl	8001068 <_fwalk_sglue>
 8001050:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001054:	4803      	ldr	r0, [pc, #12]	@ (8001064 <__fp_unlock_all+0x20>)
 8001056:	f000 b99f 	b.w	8001398 <__retarget_lock_release_recursive>
 800105a:	bf00      	nop
 800105c:	20000010 	.word	0x20000010
 8001060:	08000e01 	.word	0x08000e01
 8001064:	20000314 	.word	0x20000314

08001068 <_fwalk_sglue>:
 8001068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800106c:	4680      	mov	r8, r0
 800106e:	460f      	mov	r7, r1
 8001070:	4616      	mov	r6, r2
 8001072:	f04f 0900 	mov.w	r9, #0
 8001076:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 800107a:	3d01      	subs	r5, #1
 800107c:	d411      	bmi.n	80010a2 <_fwalk_sglue+0x3a>
 800107e:	89a3      	ldrh	r3, [r4, #12]
 8001080:	2b01      	cmp	r3, #1
 8001082:	f105 35ff 	add.w	r5, r5, #4294967295
 8001086:	d908      	bls.n	800109a <_fwalk_sglue+0x32>
 8001088:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800108c:	3301      	adds	r3, #1
 800108e:	4621      	mov	r1, r4
 8001090:	d003      	beq.n	800109a <_fwalk_sglue+0x32>
 8001092:	4640      	mov	r0, r8
 8001094:	47b8      	blx	r7
 8001096:	ea49 0900 	orr.w	r9, r9, r0
 800109a:	1c6b      	adds	r3, r5, #1
 800109c:	f104 0468 	add.w	r4, r4, #104	@ 0x68
 80010a0:	d1ed      	bne.n	800107e <_fwalk_sglue+0x16>
 80010a2:	6836      	ldr	r6, [r6, #0]
 80010a4:	2e00      	cmp	r6, #0
 80010a6:	d1e6      	bne.n	8001076 <_fwalk_sglue+0xe>
 80010a8:	4648      	mov	r0, r9
 80010aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010ae:	bf00      	nop

080010b0 <__sread>:
 80010b0:	b510      	push	{r4, lr}
 80010b2:	460c      	mov	r4, r1
 80010b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010b8:	f000 f8f0 	bl	800129c <_read_r>
 80010bc:	2800      	cmp	r0, #0
 80010be:	db03      	blt.n	80010c8 <__sread+0x18>
 80010c0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80010c2:	4403      	add	r3, r0
 80010c4:	6563      	str	r3, [r4, #84]	@ 0x54
 80010c6:	bd10      	pop	{r4, pc}
 80010c8:	89a3      	ldrh	r3, [r4, #12]
 80010ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80010ce:	81a3      	strh	r3, [r4, #12]
 80010d0:	bd10      	pop	{r4, pc}
 80010d2:	bf00      	nop

080010d4 <__seofread>:
 80010d4:	2000      	movs	r0, #0
 80010d6:	4770      	bx	lr

080010d8 <__swrite>:
 80010d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010dc:	460c      	mov	r4, r1
 80010de:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 80010e2:	461f      	mov	r7, r3
 80010e4:	05cb      	lsls	r3, r1, #23
 80010e6:	4605      	mov	r5, r0
 80010e8:	4616      	mov	r6, r2
 80010ea:	d40b      	bmi.n	8001104 <__swrite+0x2c>
 80010ec:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 80010f0:	81a1      	strh	r1, [r4, #12]
 80010f2:	463b      	mov	r3, r7
 80010f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010f8:	4632      	mov	r2, r6
 80010fa:	4628      	mov	r0, r5
 80010fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001100:	f000 b8f4 	b.w	80012ec <_write_r>
 8001104:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001108:	2302      	movs	r3, #2
 800110a:	2200      	movs	r2, #0
 800110c:	f000 f8b0 	bl	8001270 <_lseek_r>
 8001110:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8001114:	e7ea      	b.n	80010ec <__swrite+0x14>
 8001116:	bf00      	nop

08001118 <__sseek>:
 8001118:	b510      	push	{r4, lr}
 800111a:	460c      	mov	r4, r1
 800111c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001120:	f000 f8a6 	bl	8001270 <_lseek_r>
 8001124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001128:	1c42      	adds	r2, r0, #1
 800112a:	bf0e      	itee	eq
 800112c:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001130:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001134:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001136:	81a3      	strh	r3, [r4, #12]
 8001138:	bd10      	pop	{r4, pc}
 800113a:	bf00      	nop

0800113c <__sclose>:
 800113c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001140:	f000 b86e 	b.w	8001220 <_close_r>

08001144 <memset>:
 8001144:	0783      	lsls	r3, r0, #30
 8001146:	b530      	push	{r4, r5, lr}
 8001148:	d047      	beq.n	80011da <memset+0x96>
 800114a:	1e54      	subs	r4, r2, #1
 800114c:	2a00      	cmp	r2, #0
 800114e:	d03e      	beq.n	80011ce <memset+0x8a>
 8001150:	b2ca      	uxtb	r2, r1
 8001152:	4603      	mov	r3, r0
 8001154:	e001      	b.n	800115a <memset+0x16>
 8001156:	3c01      	subs	r4, #1
 8001158:	d339      	bcc.n	80011ce <memset+0x8a>
 800115a:	f803 2b01 	strb.w	r2, [r3], #1
 800115e:	079d      	lsls	r5, r3, #30
 8001160:	d1f9      	bne.n	8001156 <memset+0x12>
 8001162:	2c03      	cmp	r4, #3
 8001164:	d92c      	bls.n	80011c0 <memset+0x7c>
 8001166:	b2cd      	uxtb	r5, r1
 8001168:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 800116c:	2c0f      	cmp	r4, #15
 800116e:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 8001172:	d935      	bls.n	80011e0 <memset+0x9c>
 8001174:	f1a4 0210 	sub.w	r2, r4, #16
 8001178:	f022 0c0f 	bic.w	ip, r2, #15
 800117c:	f103 0e10 	add.w	lr, r3, #16
 8001180:	44e6      	add	lr, ip
 8001182:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 8001186:	461a      	mov	r2, r3
 8001188:	6015      	str	r5, [r2, #0]
 800118a:	6055      	str	r5, [r2, #4]
 800118c:	6095      	str	r5, [r2, #8]
 800118e:	60d5      	str	r5, [r2, #12]
 8001190:	3210      	adds	r2, #16
 8001192:	4572      	cmp	r2, lr
 8001194:	d1f8      	bne.n	8001188 <memset+0x44>
 8001196:	f10c 0201 	add.w	r2, ip, #1
 800119a:	f014 0f0c 	tst.w	r4, #12
 800119e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80011a2:	f004 0c0f 	and.w	ip, r4, #15
 80011a6:	d013      	beq.n	80011d0 <memset+0x8c>
 80011a8:	f1ac 0304 	sub.w	r3, ip, #4
 80011ac:	f023 0303 	bic.w	r3, r3, #3
 80011b0:	3304      	adds	r3, #4
 80011b2:	4413      	add	r3, r2
 80011b4:	f842 5b04 	str.w	r5, [r2], #4
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d1fb      	bne.n	80011b4 <memset+0x70>
 80011bc:	f00c 0403 	and.w	r4, ip, #3
 80011c0:	b12c      	cbz	r4, 80011ce <memset+0x8a>
 80011c2:	b2c9      	uxtb	r1, r1
 80011c4:	441c      	add	r4, r3
 80011c6:	f803 1b01 	strb.w	r1, [r3], #1
 80011ca:	429c      	cmp	r4, r3
 80011cc:	d1fb      	bne.n	80011c6 <memset+0x82>
 80011ce:	bd30      	pop	{r4, r5, pc}
 80011d0:	4664      	mov	r4, ip
 80011d2:	4613      	mov	r3, r2
 80011d4:	2c00      	cmp	r4, #0
 80011d6:	d1f4      	bne.n	80011c2 <memset+0x7e>
 80011d8:	e7f9      	b.n	80011ce <memset+0x8a>
 80011da:	4603      	mov	r3, r0
 80011dc:	4614      	mov	r4, r2
 80011de:	e7c0      	b.n	8001162 <memset+0x1e>
 80011e0:	461a      	mov	r2, r3
 80011e2:	46a4      	mov	ip, r4
 80011e4:	e7e0      	b.n	80011a8 <memset+0x64>
 80011e6:	bf00      	nop

080011e8 <time>:
 80011e8:	b570      	push	{r4, r5, r6, lr}
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <time+0x34>)
 80011ec:	b084      	sub	sp, #16
 80011ee:	f04f 36ff 	mov.w	r6, #4294967295
 80011f2:	4669      	mov	r1, sp
 80011f4:	4604      	mov	r4, r0
 80011f6:	2200      	movs	r2, #0
 80011f8:	6818      	ldr	r0, [r3, #0]
 80011fa:	e9cd 6600 	strd	r6, r6, [sp]
 80011fe:	f000 f821 	bl	8001244 <_gettimeofday_r>
 8001202:	2800      	cmp	r0, #0
 8001204:	bfb7      	itett	lt
 8001206:	4635      	movlt	r5, r6
 8001208:	e9dd 0100 	ldrdge	r0, r1, [sp]
 800120c:	4630      	movlt	r0, r6
 800120e:	4629      	movlt	r1, r5
 8001210:	b10c      	cbz	r4, 8001216 <time+0x2e>
 8001212:	e9c4 0100 	strd	r0, r1, [r4]
 8001216:	b004      	add	sp, #16
 8001218:	bd70      	pop	{r4, r5, r6, pc}
 800121a:	bf00      	nop
 800121c:	2000001c 	.word	0x2000001c

08001220 <_close_r>:
 8001220:	b538      	push	{r3, r4, r5, lr}
 8001222:	4d07      	ldr	r5, [pc, #28]	@ (8001240 <_close_r+0x20>)
 8001224:	2200      	movs	r2, #0
 8001226:	4604      	mov	r4, r0
 8001228:	4608      	mov	r0, r1
 800122a:	602a      	str	r2, [r5, #0]
 800122c:	f001 fb78 	bl	8002920 <_close>
 8001230:	1c43      	adds	r3, r0, #1
 8001232:	d000      	beq.n	8001236 <_close_r+0x16>
 8001234:	bd38      	pop	{r3, r4, r5, pc}
 8001236:	682b      	ldr	r3, [r5, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0fb      	beq.n	8001234 <_close_r+0x14>
 800123c:	6023      	str	r3, [r4, #0]
 800123e:	bd38      	pop	{r3, r4, r5, pc}
 8001240:	200002f4 	.word	0x200002f4

08001244 <_gettimeofday_r>:
 8001244:	b570      	push	{r4, r5, r6, lr}
 8001246:	460c      	mov	r4, r1
 8001248:	4d08      	ldr	r5, [pc, #32]	@ (800126c <_gettimeofday_r+0x28>)
 800124a:	4603      	mov	r3, r0
 800124c:	2600      	movs	r6, #0
 800124e:	4620      	mov	r0, r4
 8001250:	4611      	mov	r1, r2
 8001252:	461c      	mov	r4, r3
 8001254:	602e      	str	r6, [r5, #0]
 8001256:	f001 fb7b 	bl	8002950 <_gettimeofday>
 800125a:	1c43      	adds	r3, r0, #1
 800125c:	d000      	beq.n	8001260 <_gettimeofday_r+0x1c>
 800125e:	bd70      	pop	{r4, r5, r6, pc}
 8001260:	682b      	ldr	r3, [r5, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0fb      	beq.n	800125e <_gettimeofday_r+0x1a>
 8001266:	6023      	str	r3, [r4, #0]
 8001268:	bd70      	pop	{r4, r5, r6, pc}
 800126a:	bf00      	nop
 800126c:	200002f4 	.word	0x200002f4

08001270 <_lseek_r>:
 8001270:	b538      	push	{r3, r4, r5, lr}
 8001272:	460c      	mov	r4, r1
 8001274:	4d08      	ldr	r5, [pc, #32]	@ (8001298 <_lseek_r+0x28>)
 8001276:	4684      	mov	ip, r0
 8001278:	4611      	mov	r1, r2
 800127a:	4620      	mov	r0, r4
 800127c:	461a      	mov	r2, r3
 800127e:	2300      	movs	r3, #0
 8001280:	602b      	str	r3, [r5, #0]
 8001282:	4664      	mov	r4, ip
 8001284:	f001 fb7c 	bl	8002980 <_lseek>
 8001288:	1c43      	adds	r3, r0, #1
 800128a:	d000      	beq.n	800128e <_lseek_r+0x1e>
 800128c:	bd38      	pop	{r3, r4, r5, pc}
 800128e:	682b      	ldr	r3, [r5, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0fb      	beq.n	800128c <_lseek_r+0x1c>
 8001294:	6023      	str	r3, [r4, #0]
 8001296:	bd38      	pop	{r3, r4, r5, pc}
 8001298:	200002f4 	.word	0x200002f4

0800129c <_read_r>:
 800129c:	b538      	push	{r3, r4, r5, lr}
 800129e:	460c      	mov	r4, r1
 80012a0:	4d08      	ldr	r5, [pc, #32]	@ (80012c4 <_read_r+0x28>)
 80012a2:	4684      	mov	ip, r0
 80012a4:	4611      	mov	r1, r2
 80012a6:	4620      	mov	r0, r4
 80012a8:	461a      	mov	r2, r3
 80012aa:	2300      	movs	r3, #0
 80012ac:	602b      	str	r3, [r5, #0]
 80012ae:	4664      	mov	r4, ip
 80012b0:	f001 fb6e 	bl	8002990 <_read>
 80012b4:	1c43      	adds	r3, r0, #1
 80012b6:	d000      	beq.n	80012ba <_read_r+0x1e>
 80012b8:	bd38      	pop	{r3, r4, r5, pc}
 80012ba:	682b      	ldr	r3, [r5, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0fb      	beq.n	80012b8 <_read_r+0x1c>
 80012c0:	6023      	str	r3, [r4, #0]
 80012c2:	bd38      	pop	{r3, r4, r5, pc}
 80012c4:	200002f4 	.word	0x200002f4

080012c8 <_sbrk_r>:
 80012c8:	b538      	push	{r3, r4, r5, lr}
 80012ca:	4d07      	ldr	r5, [pc, #28]	@ (80012e8 <_sbrk_r+0x20>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	4604      	mov	r4, r0
 80012d0:	4608      	mov	r0, r1
 80012d2:	602a      	str	r2, [r5, #0]
 80012d4:	f004 fa20 	bl	8005718 <_sbrk>
 80012d8:	1c43      	adds	r3, r0, #1
 80012da:	d000      	beq.n	80012de <_sbrk_r+0x16>
 80012dc:	bd38      	pop	{r3, r4, r5, pc}
 80012de:	682b      	ldr	r3, [r5, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0fb      	beq.n	80012dc <_sbrk_r+0x14>
 80012e4:	6023      	str	r3, [r4, #0]
 80012e6:	bd38      	pop	{r3, r4, r5, pc}
 80012e8:	200002f4 	.word	0x200002f4

080012ec <_write_r>:
 80012ec:	b538      	push	{r3, r4, r5, lr}
 80012ee:	460c      	mov	r4, r1
 80012f0:	4d08      	ldr	r5, [pc, #32]	@ (8001314 <_write_r+0x28>)
 80012f2:	4684      	mov	ip, r0
 80012f4:	4611      	mov	r1, r2
 80012f6:	4620      	mov	r0, r4
 80012f8:	461a      	mov	r2, r3
 80012fa:	2300      	movs	r3, #0
 80012fc:	602b      	str	r3, [r5, #0]
 80012fe:	4664      	mov	r4, ip
 8001300:	f001 fb4e 	bl	80029a0 <_write>
 8001304:	1c43      	adds	r3, r0, #1
 8001306:	d000      	beq.n	800130a <_write_r+0x1e>
 8001308:	bd38      	pop	{r3, r4, r5, pc}
 800130a:	682b      	ldr	r3, [r5, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0fb      	beq.n	8001308 <_write_r+0x1c>
 8001310:	6023      	str	r3, [r4, #0]
 8001312:	bd38      	pop	{r3, r4, r5, pc}
 8001314:	200002f4 	.word	0x200002f4

08001318 <__errno>:
 8001318:	4b01      	ldr	r3, [pc, #4]	@ (8001320 <__errno+0x8>)
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	2000001c 	.word	0x2000001c

08001324 <__libc_init_array>:
 8001324:	b570      	push	{r4, r5, r6, lr}
 8001326:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <__libc_init_array+0x40>)
 8001328:	4d0f      	ldr	r5, [pc, #60]	@ (8001368 <__libc_init_array+0x44>)
 800132a:	42ab      	cmp	r3, r5
 800132c:	eba3 0605 	sub.w	r6, r3, r5
 8001330:	d007      	beq.n	8001342 <__libc_init_array+0x1e>
 8001332:	10b6      	asrs	r6, r6, #2
 8001334:	2400      	movs	r4, #0
 8001336:	f855 3b04 	ldr.w	r3, [r5], #4
 800133a:	3401      	adds	r4, #1
 800133c:	4798      	blx	r3
 800133e:	42a6      	cmp	r6, r4
 8001340:	d8f9      	bhi.n	8001336 <__libc_init_array+0x12>
 8001342:	f004 fa3b 	bl	80057bc <_init>
 8001346:	4d09      	ldr	r5, [pc, #36]	@ (800136c <__libc_init_array+0x48>)
 8001348:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <__libc_init_array+0x4c>)
 800134a:	1b5e      	subs	r6, r3, r5
 800134c:	42ab      	cmp	r3, r5
 800134e:	ea4f 06a6 	mov.w	r6, r6, asr #2
 8001352:	d006      	beq.n	8001362 <__libc_init_array+0x3e>
 8001354:	2400      	movs	r4, #0
 8001356:	f855 3b04 	ldr.w	r3, [r5], #4
 800135a:	3401      	adds	r4, #1
 800135c:	4798      	blx	r3
 800135e:	42a6      	cmp	r6, r4
 8001360:	d8f9      	bhi.n	8001356 <__libc_init_array+0x32>
 8001362:	bd70      	pop	{r4, r5, r6, pc}
 8001364:	080058c4 	.word	0x080058c4
 8001368:	080058c4 	.word	0x080058c4
 800136c:	080058c4 	.word	0x080058c4
 8001370:	080058c8 	.word	0x080058c8

08001374 <__retarget_lock_init>:
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop

08001378 <__retarget_lock_init_recursive>:
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop

0800137c <__retarget_lock_close>:
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop

08001380 <__retarget_lock_close_recursive>:
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop

08001384 <__retarget_lock_acquire>:
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop

08001388 <__retarget_lock_acquire_recursive>:
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop

0800138c <__retarget_lock_try_acquire>:
 800138c:	2001      	movs	r0, #1
 800138e:	4770      	bx	lr

08001390 <__retarget_lock_try_acquire_recursive>:
 8001390:	2001      	movs	r0, #1
 8001392:	4770      	bx	lr

08001394 <__retarget_lock_release>:
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop

08001398 <__retarget_lock_release_recursive>:
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop

0800139c <__assert_func>:
 800139c:	b500      	push	{lr}
 800139e:	4c0b      	ldr	r4, [pc, #44]	@ (80013cc <__assert_func+0x30>)
 80013a0:	6825      	ldr	r5, [r4, #0]
 80013a2:	4614      	mov	r4, r2
 80013a4:	68ee      	ldr	r6, [r5, #12]
 80013a6:	461a      	mov	r2, r3
 80013a8:	b085      	sub	sp, #20
 80013aa:	4603      	mov	r3, r0
 80013ac:	460d      	mov	r5, r1
 80013ae:	b14c      	cbz	r4, 80013c4 <__assert_func+0x28>
 80013b0:	4907      	ldr	r1, [pc, #28]	@ (80013d0 <__assert_func+0x34>)
 80013b2:	9500      	str	r5, [sp, #0]
 80013b4:	e9cd 1401 	strd	r1, r4, [sp, #4]
 80013b8:	4630      	mov	r0, r6
 80013ba:	4906      	ldr	r1, [pc, #24]	@ (80013d4 <__assert_func+0x38>)
 80013bc:	f000 f948 	bl	8001650 <fiprintf>
 80013c0:	f000 f95a 	bl	8001678 <abort>
 80013c4:	4904      	ldr	r1, [pc, #16]	@ (80013d8 <__assert_func+0x3c>)
 80013c6:	460c      	mov	r4, r1
 80013c8:	e7f3      	b.n	80013b2 <__assert_func+0x16>
 80013ca:	bf00      	nop
 80013cc:	2000001c 	.word	0x2000001c
 80013d0:	08005840 	.word	0x08005840
 80013d4:	08005850 	.word	0x08005850
 80013d8:	0800584c 	.word	0x0800584c

080013dc <__assert>:
 80013dc:	b508      	push	{r3, lr}
 80013de:	4613      	mov	r3, r2
 80013e0:	2200      	movs	r2, #0
 80013e2:	f7ff ffdb 	bl	800139c <__assert_func>
 80013e6:	bf00      	nop

080013e8 <_free_r>:
 80013e8:	2900      	cmp	r1, #0
 80013ea:	d050      	beq.n	800148e <_free_r+0xa6>
 80013ec:	b538      	push	{r3, r4, r5, lr}
 80013ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80013f2:	1f0c      	subs	r4, r1, #4
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	bfb8      	it	lt
 80013f8:	18e4      	addlt	r4, r4, r3
 80013fa:	4605      	mov	r5, r0
 80013fc:	f7ff fc42 	bl	8000c84 <__malloc_lock>
 8001400:	4a27      	ldr	r2, [pc, #156]	@ (80014a0 <_free_r+0xb8>)
 8001402:	6813      	ldr	r3, [r2, #0]
 8001404:	b12b      	cbz	r3, 8001412 <_free_r+0x2a>
 8001406:	42a3      	cmp	r3, r4
 8001408:	d90c      	bls.n	8001424 <_free_r+0x3c>
 800140a:	6821      	ldr	r1, [r4, #0]
 800140c:	1860      	adds	r0, r4, r1
 800140e:	4283      	cmp	r3, r0
 8001410:	d02c      	beq.n	800146c <_free_r+0x84>
 8001412:	6063      	str	r3, [r4, #4]
 8001414:	4628      	mov	r0, r5
 8001416:	6014      	str	r4, [r2, #0]
 8001418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800141c:	f7ff bc38 	b.w	8000c90 <__malloc_unlock>
 8001420:	42a3      	cmp	r3, r4
 8001422:	d80f      	bhi.n	8001444 <_free_r+0x5c>
 8001424:	461a      	mov	r2, r3
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f9      	bne.n	8001420 <_free_r+0x38>
 800142c:	6811      	ldr	r1, [r2, #0]
 800142e:	1850      	adds	r0, r2, r1
 8001430:	4284      	cmp	r4, r0
 8001432:	d017      	beq.n	8001464 <_free_r+0x7c>
 8001434:	d32c      	bcc.n	8001490 <_free_r+0xa8>
 8001436:	6063      	str	r3, [r4, #4]
 8001438:	6054      	str	r4, [r2, #4]
 800143a:	4628      	mov	r0, r5
 800143c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001440:	f7ff bc26 	b.w	8000c90 <__malloc_unlock>
 8001444:	6811      	ldr	r1, [r2, #0]
 8001446:	1850      	adds	r0, r2, r1
 8001448:	42a0      	cmp	r0, r4
 800144a:	d014      	beq.n	8001476 <_free_r+0x8e>
 800144c:	d820      	bhi.n	8001490 <_free_r+0xa8>
 800144e:	6821      	ldr	r1, [r4, #0]
 8001450:	1860      	adds	r0, r4, r1
 8001452:	4283      	cmp	r3, r0
 8001454:	d1ef      	bne.n	8001436 <_free_r+0x4e>
 8001456:	6818      	ldr	r0, [r3, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	4408      	add	r0, r1
 800145c:	e9c4 0300 	strd	r0, r3, [r4]
 8001460:	6054      	str	r4, [r2, #4]
 8001462:	e7ea      	b.n	800143a <_free_r+0x52>
 8001464:	6823      	ldr	r3, [r4, #0]
 8001466:	440b      	add	r3, r1
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e7e6      	b.n	800143a <_free_r+0x52>
 800146c:	6818      	ldr	r0, [r3, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4408      	add	r0, r1
 8001472:	6020      	str	r0, [r4, #0]
 8001474:	e7cd      	b.n	8001412 <_free_r+0x2a>
 8001476:	6820      	ldr	r0, [r4, #0]
 8001478:	4401      	add	r1, r0
 800147a:	1850      	adds	r0, r2, r1
 800147c:	4283      	cmp	r3, r0
 800147e:	6011      	str	r1, [r2, #0]
 8001480:	d1db      	bne.n	800143a <_free_r+0x52>
 8001482:	e9d3 0400 	ldrd	r0, r4, [r3]
 8001486:	4401      	add	r1, r0
 8001488:	e9c2 1400 	strd	r1, r4, [r2]
 800148c:	e7d5      	b.n	800143a <_free_r+0x52>
 800148e:	4770      	bx	lr
 8001490:	230c      	movs	r3, #12
 8001492:	602b      	str	r3, [r5, #0]
 8001494:	4628      	mov	r0, r5
 8001496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800149a:	f7ff bbf9 	b.w	8000c90 <__malloc_unlock>
 800149e:	bf00      	nop
 80014a0:	200001b4 	.word	0x200001b4

080014a4 <__sflush_r>:
 80014a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014a6:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80014aa:	4607      	mov	r7, r0
 80014ac:	0718      	lsls	r0, r3, #28
 80014ae:	460c      	mov	r4, r1
 80014b0:	d439      	bmi.n	8001526 <__sflush_r+0x82>
 80014b2:	684a      	ldr	r2, [r1, #4]
 80014b4:	2a00      	cmp	r2, #0
 80014b6:	dd53      	ble.n	8001560 <__sflush_r+0xbc>
 80014b8:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80014ba:	2d00      	cmp	r5, #0
 80014bc:	d031      	beq.n	8001522 <__sflush_r+0x7e>
 80014be:	2200      	movs	r2, #0
 80014c0:	683e      	ldr	r6, [r7, #0]
 80014c2:	603a      	str	r2, [r7, #0]
 80014c4:	f413 5280 	ands.w	r2, r3, #4096	@ 0x1000
 80014c8:	6a21      	ldr	r1, [r4, #32]
 80014ca:	d155      	bne.n	8001578 <__sflush_r+0xd4>
 80014cc:	2301      	movs	r3, #1
 80014ce:	4638      	mov	r0, r7
 80014d0:	47a8      	blx	r5
 80014d2:	1c41      	adds	r1, r0, #1
 80014d4:	4602      	mov	r2, r0
 80014d6:	d05e      	beq.n	8001596 <__sflush_r+0xf2>
 80014d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014dc:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80014de:	6a21      	ldr	r1, [r4, #32]
 80014e0:	075b      	lsls	r3, r3, #29
 80014e2:	d505      	bpl.n	80014f0 <__sflush_r+0x4c>
 80014e4:	6863      	ldr	r3, [r4, #4]
 80014e6:	1ad2      	subs	r2, r2, r3
 80014e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80014ea:	b10b      	cbz	r3, 80014f0 <__sflush_r+0x4c>
 80014ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80014ee:	1ad2      	subs	r2, r2, r3
 80014f0:	2300      	movs	r3, #0
 80014f2:	4638      	mov	r0, r7
 80014f4:	47a8      	blx	r5
 80014f6:	1c45      	adds	r5, r0, #1
 80014f8:	d040      	beq.n	800157c <__sflush_r+0xd8>
 80014fa:	2300      	movs	r3, #0
 80014fc:	6063      	str	r3, [r4, #4]
 80014fe:	6923      	ldr	r3, [r4, #16]
 8001500:	6023      	str	r3, [r4, #0]
 8001502:	89a3      	ldrh	r3, [r4, #12]
 8001504:	04d9      	lsls	r1, r3, #19
 8001506:	d500      	bpl.n	800150a <__sflush_r+0x66>
 8001508:	6560      	str	r0, [r4, #84]	@ 0x54
 800150a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800150c:	603e      	str	r6, [r7, #0]
 800150e:	b141      	cbz	r1, 8001522 <__sflush_r+0x7e>
 8001510:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001514:	4299      	cmp	r1, r3
 8001516:	d002      	beq.n	800151e <__sflush_r+0x7a>
 8001518:	4638      	mov	r0, r7
 800151a:	f7ff ff65 	bl	80013e8 <_free_r>
 800151e:	2300      	movs	r3, #0
 8001520:	6363      	str	r3, [r4, #52]	@ 0x34
 8001522:	2000      	movs	r0, #0
 8001524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001526:	690e      	ldr	r6, [r1, #16]
 8001528:	2e00      	cmp	r6, #0
 800152a:	d0fa      	beq.n	8001522 <__sflush_r+0x7e>
 800152c:	079b      	lsls	r3, r3, #30
 800152e:	680d      	ldr	r5, [r1, #0]
 8001530:	bf08      	it	eq
 8001532:	694b      	ldreq	r3, [r1, #20]
 8001534:	600e      	str	r6, [r1, #0]
 8001536:	bf18      	it	ne
 8001538:	2300      	movne	r3, #0
 800153a:	1bad      	subs	r5, r5, r6
 800153c:	608b      	str	r3, [r1, #8]
 800153e:	e00c      	b.n	800155a <__sflush_r+0xb6>
 8001540:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001544:	6a21      	ldr	r1, [r4, #32]
 8001546:	462b      	mov	r3, r5
 8001548:	4632      	mov	r2, r6
 800154a:	4638      	mov	r0, r7
 800154c:	47e0      	blx	ip
 800154e:	f1b0 0c00 	subs.w	ip, r0, #0
 8001552:	eba5 050c 	sub.w	r5, r5, ip
 8001556:	4466      	add	r6, ip
 8001558:	dd06      	ble.n	8001568 <__sflush_r+0xc4>
 800155a:	2d00      	cmp	r5, #0
 800155c:	dcf0      	bgt.n	8001540 <__sflush_r+0x9c>
 800155e:	e7e0      	b.n	8001522 <__sflush_r+0x7e>
 8001560:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8001562:	2a00      	cmp	r2, #0
 8001564:	dca8      	bgt.n	80014b8 <__sflush_r+0x14>
 8001566:	e7dc      	b.n	8001522 <__sflush_r+0x7e>
 8001568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800156c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001570:	81a3      	strh	r3, [r4, #12]
 8001572:	f04f 30ff 	mov.w	r0, #4294967295
 8001576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001578:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800157a:	e7b1      	b.n	80014e0 <__sflush_r+0x3c>
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001582:	b18a      	cbz	r2, 80015a8 <__sflush_r+0x104>
 8001584:	2a1d      	cmp	r2, #29
 8001586:	d001      	beq.n	800158c <__sflush_r+0xe8>
 8001588:	2a16      	cmp	r2, #22
 800158a:	d1ef      	bne.n	800156c <__sflush_r+0xc8>
 800158c:	6923      	ldr	r3, [r4, #16]
 800158e:	2200      	movs	r2, #0
 8001590:	e9c4 3200 	strd	r3, r2, [r4]
 8001594:	e7b9      	b.n	800150a <__sflush_r+0x66>
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d09d      	beq.n	80014d8 <__sflush_r+0x34>
 800159c:	2b1d      	cmp	r3, #29
 800159e:	d001      	beq.n	80015a4 <__sflush_r+0x100>
 80015a0:	2b16      	cmp	r3, #22
 80015a2:	d1e1      	bne.n	8001568 <__sflush_r+0xc4>
 80015a4:	603e      	str	r6, [r7, #0]
 80015a6:	e7bc      	b.n	8001522 <__sflush_r+0x7e>
 80015a8:	6062      	str	r2, [r4, #4]
 80015aa:	6922      	ldr	r2, [r4, #16]
 80015ac:	6022      	str	r2, [r4, #0]
 80015ae:	04da      	lsls	r2, r3, #19
 80015b0:	d4aa      	bmi.n	8001508 <__sflush_r+0x64>
 80015b2:	e7aa      	b.n	800150a <__sflush_r+0x66>

080015b4 <_fflush_r>:
 80015b4:	b538      	push	{r3, r4, r5, lr}
 80015b6:	690b      	ldr	r3, [r1, #16]
 80015b8:	b1cb      	cbz	r3, 80015ee <_fflush_r+0x3a>
 80015ba:	460c      	mov	r4, r1
 80015bc:	4605      	mov	r5, r0
 80015be:	b108      	cbz	r0, 80015c4 <_fflush_r+0x10>
 80015c0:	6a03      	ldr	r3, [r0, #32]
 80015c2:	b1bb      	cbz	r3, 80015f4 <_fflush_r+0x40>
 80015c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015c8:	b18b      	cbz	r3, 80015ee <_fflush_r+0x3a>
 80015ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80015cc:	07d0      	lsls	r0, r2, #31
 80015ce:	d401      	bmi.n	80015d4 <_fflush_r+0x20>
 80015d0:	0599      	lsls	r1, r3, #22
 80015d2:	d512      	bpl.n	80015fa <_fflush_r+0x46>
 80015d4:	4628      	mov	r0, r5
 80015d6:	4621      	mov	r1, r4
 80015d8:	f7ff ff64 	bl	80014a4 <__sflush_r>
 80015dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80015de:	07da      	lsls	r2, r3, #31
 80015e0:	4605      	mov	r5, r0
 80015e2:	d402      	bmi.n	80015ea <_fflush_r+0x36>
 80015e4:	89a3      	ldrh	r3, [r4, #12]
 80015e6:	059b      	lsls	r3, r3, #22
 80015e8:	d50b      	bpl.n	8001602 <_fflush_r+0x4e>
 80015ea:	4628      	mov	r0, r5
 80015ec:	bd38      	pop	{r3, r4, r5, pc}
 80015ee:	2500      	movs	r5, #0
 80015f0:	4628      	mov	r0, r5
 80015f2:	bd38      	pop	{r3, r4, r5, pc}
 80015f4:	f7ff fce8 	bl	8000fc8 <__sinit>
 80015f8:	e7e4      	b.n	80015c4 <_fflush_r+0x10>
 80015fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80015fc:	f7ff fec4 	bl	8001388 <__retarget_lock_acquire_recursive>
 8001600:	e7e8      	b.n	80015d4 <_fflush_r+0x20>
 8001602:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001604:	f7ff fec8 	bl	8001398 <__retarget_lock_release_recursive>
 8001608:	e7ef      	b.n	80015ea <_fflush_r+0x36>
 800160a:	bf00      	nop

0800160c <fflush>:
 800160c:	4601      	mov	r1, r0
 800160e:	b118      	cbz	r0, 8001618 <fflush+0xc>
 8001610:	4b04      	ldr	r3, [pc, #16]	@ (8001624 <fflush+0x18>)
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	f7ff bfce 	b.w	80015b4 <_fflush_r>
 8001618:	4a03      	ldr	r2, [pc, #12]	@ (8001628 <fflush+0x1c>)
 800161a:	4904      	ldr	r1, [pc, #16]	@ (800162c <fflush+0x20>)
 800161c:	4804      	ldr	r0, [pc, #16]	@ (8001630 <fflush+0x24>)
 800161e:	f7ff bd23 	b.w	8001068 <_fwalk_sglue>
 8001622:	bf00      	nop
 8001624:	2000001c 	.word	0x2000001c
 8001628:	20000010 	.word	0x20000010
 800162c:	080015b5 	.word	0x080015b5
 8001630:	20000020 	.word	0x20000020

08001634 <_fiprintf_r>:
 8001634:	b40c      	push	{r2, r3}
 8001636:	b500      	push	{lr}
 8001638:	b083      	sub	sp, #12
 800163a:	ab04      	add	r3, sp, #16
 800163c:	f853 2b04 	ldr.w	r2, [r3], #4
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	f000 f85d 	bl	8001700 <_vfiprintf_r>
 8001646:	b003      	add	sp, #12
 8001648:	f85d eb04 	ldr.w	lr, [sp], #4
 800164c:	b002      	add	sp, #8
 800164e:	4770      	bx	lr

08001650 <fiprintf>:
 8001650:	b40e      	push	{r1, r2, r3}
 8001652:	b510      	push	{r4, lr}
 8001654:	b083      	sub	sp, #12
 8001656:	ab05      	add	r3, sp, #20
 8001658:	4c06      	ldr	r4, [pc, #24]	@ (8001674 <fiprintf+0x24>)
 800165a:	f853 2b04 	ldr.w	r2, [r3], #4
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	4601      	mov	r1, r0
 8001662:	6820      	ldr	r0, [r4, #0]
 8001664:	f000 f84c 	bl	8001700 <_vfiprintf_r>
 8001668:	b003      	add	sp, #12
 800166a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800166e:	b003      	add	sp, #12
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	2000001c 	.word	0x2000001c

08001678 <abort>:
 8001678:	b508      	push	{r3, lr}
 800167a:	2006      	movs	r0, #6
 800167c:	f000 febe 	bl	80023fc <raise>
 8001680:	2001      	movs	r0, #1
 8001682:	f001 f995 	bl	80029b0 <_exit>
 8001686:	bf00      	nop

08001688 <__sfputc_r>:
 8001688:	6893      	ldr	r3, [r2, #8]
 800168a:	3b01      	subs	r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	6093      	str	r3, [r2, #8]
 8001690:	da05      	bge.n	800169e <__sfputc_r+0x16>
 8001692:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8001696:	4563      	cmp	r3, ip
 8001698:	db07      	blt.n	80016aa <__sfputc_r+0x22>
 800169a:	290a      	cmp	r1, #10
 800169c:	d005      	beq.n	80016aa <__sfputc_r+0x22>
 800169e:	6813      	ldr	r3, [r2, #0]
 80016a0:	1c58      	adds	r0, r3, #1
 80016a2:	6010      	str	r0, [r2, #0]
 80016a4:	7019      	strb	r1, [r3, #0]
 80016a6:	4608      	mov	r0, r1
 80016a8:	4770      	bx	lr
 80016aa:	f000 bce3 	b.w	8002074 <__swbuf_r>
 80016ae:	bf00      	nop

080016b0 <__sfputs_r>:
 80016b0:	b19b      	cbz	r3, 80016da <__sfputs_r+0x2a>
 80016b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016b4:	4413      	add	r3, r2
 80016b6:	4606      	mov	r6, r0
 80016b8:	460f      	mov	r7, r1
 80016ba:	1e54      	subs	r4, r2, #1
 80016bc:	1e5d      	subs	r5, r3, #1
 80016be:	e001      	b.n	80016c4 <__sfputs_r+0x14>
 80016c0:	42ac      	cmp	r4, r5
 80016c2:	d008      	beq.n	80016d6 <__sfputs_r+0x26>
 80016c4:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80016c8:	463a      	mov	r2, r7
 80016ca:	4630      	mov	r0, r6
 80016cc:	f7ff ffdc 	bl	8001688 <__sfputc_r>
 80016d0:	1c43      	adds	r3, r0, #1
 80016d2:	d1f5      	bne.n	80016c0 <__sfputs_r+0x10>
 80016d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016d6:	2000      	movs	r0, #0
 80016d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016da:	2000      	movs	r0, #0
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop

080016e0 <__sprint_r>:
 80016e0:	6893      	ldr	r3, [r2, #8]
 80016e2:	b510      	push	{r4, lr}
 80016e4:	4614      	mov	r4, r2
 80016e6:	b91b      	cbnz	r3, 80016f0 <__sprint_r+0x10>
 80016e8:	4618      	mov	r0, r3
 80016ea:	2300      	movs	r3, #0
 80016ec:	6063      	str	r3, [r4, #4]
 80016ee:	bd10      	pop	{r4, pc}
 80016f0:	f000 fb44 	bl	8001d7c <__sfvwrite_r>
 80016f4:	2300      	movs	r3, #0
 80016f6:	60a3      	str	r3, [r4, #8]
 80016f8:	2300      	movs	r3, #0
 80016fa:	6063      	str	r3, [r4, #4]
 80016fc:	bd10      	pop	{r4, pc}
 80016fe:	bf00      	nop

08001700 <_vfiprintf_r>:
 8001700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001704:	b0a1      	sub	sp, #132	@ 0x84
 8001706:	468b      	mov	fp, r1
 8001708:	4691      	mov	r9, r2
 800170a:	461c      	mov	r4, r3
 800170c:	9004      	str	r0, [sp, #16]
 800170e:	b118      	cbz	r0, 8001718 <_vfiprintf_r+0x18>
 8001710:	6a03      	ldr	r3, [r0, #32]
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 8147 	beq.w	80019a6 <_vfiprintf_r+0x2a6>
 8001718:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 800171c:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8001720:	07d2      	lsls	r2, r2, #31
 8001722:	d402      	bmi.n	800172a <_vfiprintf_r+0x2a>
 8001724:	059f      	lsls	r7, r3, #22
 8001726:	f140 8137 	bpl.w	8001998 <_vfiprintf_r+0x298>
 800172a:	071e      	lsls	r6, r3, #28
 800172c:	f140 809e 	bpl.w	800186c <_vfiprintf_r+0x16c>
 8001730:	f8db 3010 	ldr.w	r3, [fp, #16]
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 8099 	beq.w	800186c <_vfiprintf_r+0x16c>
 800173a:	2300      	movs	r3, #0
 800173c:	46ca      	mov	sl, r9
 800173e:	930d      	str	r3, [sp, #52]	@ 0x34
 8001740:	f243 0320 	movw	r3, #12320	@ 0x3020
 8001744:	f8ad 3039 	strh.w	r3, [sp, #57]	@ 0x39
 8001748:	f89a 3000 	ldrb.w	r3, [sl]
 800174c:	4e97      	ldr	r6, [pc, #604]	@ (80019ac <_vfiprintf_r+0x2ac>)
 800174e:	9407      	str	r4, [sp, #28]
 8001750:	2701      	movs	r7, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d07a      	beq.n	800184c <_vfiprintf_r+0x14c>
 8001756:	46d1      	mov	r9, sl
 8001758:	e004      	b.n	8001764 <_vfiprintf_r+0x64>
 800175a:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 809a 	beq.w	8001898 <_vfiprintf_r+0x198>
 8001764:	2b25      	cmp	r3, #37	@ 0x25
 8001766:	d1f8      	bne.n	800175a <_vfiprintf_r+0x5a>
 8001768:	ebb9 080a 	subs.w	r8, r9, sl
 800176c:	f040 8097 	bne.w	800189e <_vfiprintf_r+0x19e>
 8001770:	f899 3000 	ldrb.w	r3, [r9]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d069      	beq.n	800184c <_vfiprintf_r+0x14c>
 8001778:	2300      	movs	r3, #0
 800177a:	f04f 32ff 	mov.w	r2, #4294967295
 800177e:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
 8001782:	f109 0901 	add.w	r9, r9, #1
 8001786:	9308      	str	r3, [sp, #32]
 8001788:	930b      	str	r3, [sp, #44]	@ 0x2c
 800178a:	f88d 3063 	strb.w	r3, [sp, #99]	@ 0x63
 800178e:	931e      	str	r3, [sp, #120]	@ 0x78
 8001790:	e005      	b.n	800179e <_vfiprintf_r+0x9e>
 8001792:	9a08      	ldr	r2, [sp, #32]
 8001794:	fa07 f303 	lsl.w	r3, r7, r3
 8001798:	431a      	orrs	r2, r3
 800179a:	9208      	str	r2, [sp, #32]
 800179c:	46a1      	mov	r9, r4
 800179e:	464c      	mov	r4, r9
 80017a0:	2205      	movs	r2, #5
 80017a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017a6:	4630      	mov	r0, r6
 80017a8:	f000 fee2 	bl	8002570 <memchr>
 80017ac:	46a2      	mov	sl, r4
 80017ae:	1b83      	subs	r3, r0, r6
 80017b0:	2800      	cmp	r0, #0
 80017b2:	d1ee      	bne.n	8001792 <_vfiprintf_r+0x92>
 80017b4:	9b08      	ldr	r3, [sp, #32]
 80017b6:	06d8      	lsls	r0, r3, #27
 80017b8:	bf44      	itt	mi
 80017ba:	2220      	movmi	r2, #32
 80017bc:	f88d 2063 	strbmi.w	r2, [sp, #99]	@ 0x63
 80017c0:	0719      	lsls	r1, r3, #28
 80017c2:	f899 1000 	ldrb.w	r1, [r9]
 80017c6:	bf44      	itt	mi
 80017c8:	222b      	movmi	r2, #43	@ 0x2b
 80017ca:	f88d 2063 	strbmi.w	r2, [sp, #99]	@ 0x63
 80017ce:	292a      	cmp	r1, #42	@ 0x2a
 80017d0:	d17b      	bne.n	80018ca <_vfiprintf_r+0x1ca>
 80017d2:	9a07      	ldr	r2, [sp, #28]
 80017d4:	6811      	ldr	r1, [r2, #0]
 80017d6:	3204      	adds	r2, #4
 80017d8:	2900      	cmp	r1, #0
 80017da:	9207      	str	r2, [sp, #28]
 80017dc:	f2c0 80b0 	blt.w	8001940 <_vfiprintf_r+0x240>
 80017e0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80017e2:	f899 1001 	ldrb.w	r1, [r9, #1]
 80017e6:	292e      	cmp	r1, #46	@ 0x2e
 80017e8:	f000 8086 	beq.w	80018f8 <_vfiprintf_r+0x1f8>
 80017ec:	4c70      	ldr	r4, [pc, #448]	@ (80019b0 <_vfiprintf_r+0x2b0>)
 80017ee:	2203      	movs	r2, #3
 80017f0:	4620      	mov	r0, r4
 80017f2:	f000 febd 	bl	8002570 <memchr>
 80017f6:	b138      	cbz	r0, 8001808 <_vfiprintf_r+0x108>
 80017f8:	9b08      	ldr	r3, [sp, #32]
 80017fa:	1b00      	subs	r0, r0, r4
 80017fc:	2240      	movs	r2, #64	@ 0x40
 80017fe:	4082      	lsls	r2, r0
 8001800:	4313      	orrs	r3, r2
 8001802:	f10a 0a01 	add.w	sl, sl, #1
 8001806:	9308      	str	r3, [sp, #32]
 8001808:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800180c:	4869      	ldr	r0, [pc, #420]	@ (80019b4 <_vfiprintf_r+0x2b4>)
 800180e:	f88d 1038 	strb.w	r1, [sp, #56]	@ 0x38
 8001812:	2206      	movs	r2, #6
 8001814:	f000 feac 	bl	8002570 <memchr>
 8001818:	2800      	cmp	r0, #0
 800181a:	f000 8097 	beq.w	800194c <_vfiprintf_r+0x24c>
 800181e:	4b66      	ldr	r3, [pc, #408]	@ (80019b8 <_vfiprintf_r+0x2b8>)
 8001820:	2b00      	cmp	r3, #0
 8001822:	d07e      	beq.n	8001922 <_vfiprintf_r+0x222>
 8001824:	aa07      	add	r2, sp, #28
 8001826:	9200      	str	r2, [sp, #0]
 8001828:	4b64      	ldr	r3, [pc, #400]	@ (80019bc <_vfiprintf_r+0x2bc>)
 800182a:	9804      	ldr	r0, [sp, #16]
 800182c:	465a      	mov	r2, fp
 800182e:	a908      	add	r1, sp, #32
 8001830:	f3af 8000 	nop.w
 8001834:	9003      	str	r0, [sp, #12]
 8001836:	9b03      	ldr	r3, [sp, #12]
 8001838:	3301      	adds	r3, #1
 800183a:	d007      	beq.n	800184c <_vfiprintf_r+0x14c>
 800183c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800183e:	9a03      	ldr	r2, [sp, #12]
 8001840:	4413      	add	r3, r2
 8001842:	930d      	str	r3, [sp, #52]	@ 0x34
 8001844:	f89a 3000 	ldrb.w	r3, [sl]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d184      	bne.n	8001756 <_vfiprintf_r+0x56>
 800184c:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8001850:	f013 0f01 	tst.w	r3, #1
 8001854:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8001858:	d102      	bne.n	8001860 <_vfiprintf_r+0x160>
 800185a:	059a      	lsls	r2, r3, #22
 800185c:	f140 8095 	bpl.w	800198a <_vfiprintf_r+0x28a>
 8001860:	065b      	lsls	r3, r3, #25
 8001862:	d416      	bmi.n	8001892 <_vfiprintf_r+0x192>
 8001864:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8001866:	b021      	add	sp, #132	@ 0x84
 8001868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800186c:	9804      	ldr	r0, [sp, #16]
 800186e:	4659      	mov	r1, fp
 8001870:	f000 fc50 	bl	8002114 <__swsetup_r>
 8001874:	2800      	cmp	r0, #0
 8001876:	f43f af60 	beq.w	800173a <_vfiprintf_r+0x3a>
 800187a:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 800187e:	07dd      	lsls	r5, r3, #31
 8001880:	d407      	bmi.n	8001892 <_vfiprintf_r+0x192>
 8001882:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8001886:	059c      	lsls	r4, r3, #22
 8001888:	d403      	bmi.n	8001892 <_vfiprintf_r+0x192>
 800188a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 800188e:	f7ff fd83 	bl	8001398 <__retarget_lock_release_recursive>
 8001892:	f04f 30ff 	mov.w	r0, #4294967295
 8001896:	e7e6      	b.n	8001866 <_vfiprintf_r+0x166>
 8001898:	ebb9 080a 	subs.w	r8, r9, sl
 800189c:	d0d6      	beq.n	800184c <_vfiprintf_r+0x14c>
 800189e:	f10a 35ff 	add.w	r5, sl, #4294967295
 80018a2:	f8cd 9014 	str.w	r9, [sp, #20]
 80018a6:	46a9      	mov	r9, r5
 80018a8:	9d04      	ldr	r5, [sp, #16]
 80018aa:	e001      	b.n	80018b0 <_vfiprintf_r+0x1b0>
 80018ac:	45a0      	cmp	r8, r4
 80018ae:	d93f      	bls.n	8001930 <_vfiprintf_r+0x230>
 80018b0:	464c      	mov	r4, r9
 80018b2:	465a      	mov	r2, fp
 80018b4:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 80018b8:	4628      	mov	r0, r5
 80018ba:	f7ff fee5 	bl	8001688 <__sfputc_r>
 80018be:	3402      	adds	r4, #2
 80018c0:	3001      	adds	r0, #1
 80018c2:	eba4 040a 	sub.w	r4, r4, sl
 80018c6:	d1f1      	bne.n	80018ac <_vfiprintf_r+0x1ac>
 80018c8:	e7c0      	b.n	800184c <_vfiprintf_r+0x14c>
 80018ca:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80018ce:	2a09      	cmp	r2, #9
 80018d0:	bf88      	it	hi
 80018d2:	46ca      	movhi	sl, r9
 80018d4:	d887      	bhi.n	80017e6 <_vfiprintf_r+0xe6>
 80018d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80018d8:	e000      	b.n	80018dc <_vfiprintf_r+0x1dc>
 80018da:	3401      	adds	r4, #1
 80018dc:	7821      	ldrb	r1, [r4, #0]
 80018de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80018e2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80018e6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80018ea:	2a09      	cmp	r2, #9
 80018ec:	d9f5      	bls.n	80018da <_vfiprintf_r+0x1da>
 80018ee:	292e      	cmp	r1, #46	@ 0x2e
 80018f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80018f2:	46a2      	mov	sl, r4
 80018f4:	f47f af7a 	bne.w	80017ec <_vfiprintf_r+0xec>
 80018f8:	f89a 1001 	ldrb.w	r1, [sl, #1]
 80018fc:	292a      	cmp	r1, #42	@ 0x2a
 80018fe:	d12f      	bne.n	8001960 <_vfiprintf_r+0x260>
 8001900:	9b07      	ldr	r3, [sp, #28]
 8001902:	f89a 1002 	ldrb.w	r1, [sl, #2]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	9209      	str	r2, [sp, #36]	@ 0x24
 800190a:	3304      	adds	r3, #4
 800190c:	2a00      	cmp	r2, #0
 800190e:	f10a 0002 	add.w	r0, sl, #2
 8001912:	9307      	str	r3, [sp, #28]
 8001914:	bfb8      	it	lt
 8001916:	f04f 33ff 	movlt.w	r3, #4294967295
 800191a:	4682      	mov	sl, r0
 800191c:	bfb8      	it	lt
 800191e:	9309      	strlt	r3, [sp, #36]	@ 0x24
 8001920:	e764      	b.n	80017ec <_vfiprintf_r+0xec>
 8001922:	9b07      	ldr	r3, [sp, #28]
 8001924:	3307      	adds	r3, #7
 8001926:	f023 0307 	bic.w	r3, r3, #7
 800192a:	3308      	adds	r3, #8
 800192c:	9307      	str	r3, [sp, #28]
 800192e:	e785      	b.n	800183c <_vfiprintf_r+0x13c>
 8001930:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8001932:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8001936:	4441      	add	r1, r8
 8001938:	f899 3000 	ldrb.w	r3, [r9]
 800193c:	910d      	str	r1, [sp, #52]	@ 0x34
 800193e:	e719      	b.n	8001774 <_vfiprintf_r+0x74>
 8001940:	4249      	negs	r1, r1
 8001942:	f043 0302 	orr.w	r3, r3, #2
 8001946:	910b      	str	r1, [sp, #44]	@ 0x2c
 8001948:	9308      	str	r3, [sp, #32]
 800194a:	e74a      	b.n	80017e2 <_vfiprintf_r+0xe2>
 800194c:	aa07      	add	r2, sp, #28
 800194e:	9200      	str	r2, [sp, #0]
 8001950:	4b1a      	ldr	r3, [pc, #104]	@ (80019bc <_vfiprintf_r+0x2bc>)
 8001952:	9804      	ldr	r0, [sp, #16]
 8001954:	465a      	mov	r2, fp
 8001956:	a908      	add	r1, sp, #32
 8001958:	f000 f8d0 	bl	8001afc <_printf_i>
 800195c:	9003      	str	r0, [sp, #12]
 800195e:	e76a      	b.n	8001836 <_vfiprintf_r+0x136>
 8001960:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8001964:	2300      	movs	r3, #0
 8001966:	2a09      	cmp	r2, #9
 8001968:	9309      	str	r3, [sp, #36]	@ 0x24
 800196a:	f10a 0a01 	add.w	sl, sl, #1
 800196e:	f63f af3d 	bhi.w	80017ec <_vfiprintf_r+0xec>
 8001972:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8001976:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800197a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800197e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8001982:	2a09      	cmp	r2, #9
 8001984:	d9f5      	bls.n	8001972 <_vfiprintf_r+0x272>
 8001986:	9309      	str	r3, [sp, #36]	@ 0x24
 8001988:	e730      	b.n	80017ec <_vfiprintf_r+0xec>
 800198a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 800198e:	f7ff fd03 	bl	8001398 <__retarget_lock_release_recursive>
 8001992:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8001996:	e763      	b.n	8001860 <_vfiprintf_r+0x160>
 8001998:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 800199c:	f7ff fcf4 	bl	8001388 <__retarget_lock_acquire_recursive>
 80019a0:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 80019a4:	e6c1      	b.n	800172a <_vfiprintf_r+0x2a>
 80019a6:	f7ff fb0f 	bl	8000fc8 <__sinit>
 80019aa:	e6b5      	b.n	8001718 <_vfiprintf_r+0x18>
 80019ac:	08005880 	.word	0x08005880
 80019b0:	08005888 	.word	0x08005888
 80019b4:	0800588c 	.word	0x0800588c
 80019b8:	00000000 	.word	0x00000000
 80019bc:	080016b1 	.word	0x080016b1

080019c0 <vfiprintf>:
 80019c0:	b410      	push	{r4}
 80019c2:	4c04      	ldr	r4, [pc, #16]	@ (80019d4 <vfiprintf+0x14>)
 80019c4:	4684      	mov	ip, r0
 80019c6:	4613      	mov	r3, r2
 80019c8:	6820      	ldr	r0, [r4, #0]
 80019ca:	bc10      	pop	{r4}
 80019cc:	460a      	mov	r2, r1
 80019ce:	4661      	mov	r1, ip
 80019d0:	f7ff be96 	b.w	8001700 <_vfiprintf_r>
 80019d4:	2000001c 	.word	0x2000001c

080019d8 <_printf_common>:
 80019d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019dc:	4692      	mov	sl, r2
 80019de:	461f      	mov	r7, r3
 80019e0:	690a      	ldr	r2, [r1, #16]
 80019e2:	688b      	ldr	r3, [r1, #8]
 80019e4:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80019e8:	429a      	cmp	r2, r3
 80019ea:	bfb8      	it	lt
 80019ec:	461a      	movlt	r2, r3
 80019ee:	f8ca 2000 	str.w	r2, [sl]
 80019f2:	f891 3043 	ldrb.w	r3, [r1, #67]	@ 0x43
 80019f6:	460c      	mov	r4, r1
 80019f8:	4606      	mov	r6, r0
 80019fa:	b113      	cbz	r3, 8001a02 <_printf_common+0x2a>
 80019fc:	3201      	adds	r2, #1
 80019fe:	f8ca 2000 	str.w	r2, [sl]
 8001a02:	6822      	ldr	r2, [r4, #0]
 8001a04:	0691      	lsls	r1, r2, #26
 8001a06:	d55f      	bpl.n	8001ac8 <_printf_common+0xf0>
 8001a08:	f8da 3000 	ldr.w	r3, [sl]
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	f8ca 3000 	str.w	r3, [sl]
 8001a12:	6822      	ldr	r2, [r4, #0]
 8001a14:	f012 0f06 	tst.w	r2, #6
 8001a18:	4611      	mov	r1, r2
 8001a1a:	d11d      	bne.n	8001a58 <_printf_common+0x80>
 8001a1c:	68e1      	ldr	r1, [r4, #12]
 8001a1e:	4299      	cmp	r1, r3
 8001a20:	bfd8      	it	le
 8001a22:	4611      	movle	r1, r2
 8001a24:	dd18      	ble.n	8001a58 <_printf_common+0x80>
 8001a26:	f104 0b19 	add.w	fp, r4, #25
 8001a2a:	f04f 0800 	mov.w	r8, #0
 8001a2e:	e005      	b.n	8001a3c <_printf_common+0x64>
 8001a30:	68e5      	ldr	r5, [r4, #12]
 8001a32:	f8da 3000 	ldr.w	r3, [sl]
 8001a36:	1aed      	subs	r5, r5, r3
 8001a38:	4545      	cmp	r5, r8
 8001a3a:	dd0c      	ble.n	8001a56 <_printf_common+0x7e>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	465a      	mov	r2, fp
 8001a40:	4639      	mov	r1, r7
 8001a42:	4630      	mov	r0, r6
 8001a44:	47c8      	blx	r9
 8001a46:	3001      	adds	r0, #1
 8001a48:	f108 0801 	add.w	r8, r8, #1
 8001a4c:	d1f0      	bne.n	8001a30 <_printf_common+0x58>
 8001a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a56:	6821      	ldr	r1, [r4, #0]
 8001a58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001a5c:	3b00      	subs	r3, #0
 8001a5e:	bf18      	it	ne
 8001a60:	2301      	movne	r3, #1
 8001a62:	068a      	lsls	r2, r1, #26
 8001a64:	d50a      	bpl.n	8001a7c <_printf_common+0xa4>
 8001a66:	18e1      	adds	r1, r4, r3
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	2030      	movs	r0, #48	@ 0x30
 8001a6c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001a70:	4422      	add	r2, r4
 8001a72:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001a76:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001a80:	4639      	mov	r1, r7
 8001a82:	4630      	mov	r0, r6
 8001a84:	47c8      	blx	r9
 8001a86:	3001      	adds	r0, #1
 8001a88:	d0e1      	beq.n	8001a4e <_printf_common+0x76>
 8001a8a:	6823      	ldr	r3, [r4, #0]
 8001a8c:	f8da 5000 	ldr.w	r5, [sl]
 8001a90:	6921      	ldr	r1, [r4, #16]
 8001a92:	f003 0306 	and.w	r3, r3, #6
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8001a9c:	d01b      	beq.n	8001ad6 <_printf_common+0xfe>
 8001a9e:	428a      	cmp	r2, r1
 8001aa0:	dd20      	ble.n	8001ae4 <_printf_common+0x10c>
 8001aa2:	f04f 0800 	mov.w	r8, #0
 8001aa6:	1a52      	subs	r2, r2, r1
 8001aa8:	4490      	add	r8, r2
 8001aaa:	341a      	adds	r4, #26
 8001aac:	2500      	movs	r5, #0
 8001aae:	e001      	b.n	8001ab4 <_printf_common+0xdc>
 8001ab0:	4545      	cmp	r5, r8
 8001ab2:	da17      	bge.n	8001ae4 <_printf_common+0x10c>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	4622      	mov	r2, r4
 8001ab8:	4639      	mov	r1, r7
 8001aba:	4630      	mov	r0, r6
 8001abc:	47c8      	blx	r9
 8001abe:	3001      	adds	r0, #1
 8001ac0:	f105 0501 	add.w	r5, r5, #1
 8001ac4:	d1f4      	bne.n	8001ab0 <_printf_common+0xd8>
 8001ac6:	e7c2      	b.n	8001a4e <_printf_common+0x76>
 8001ac8:	f012 0f06 	tst.w	r2, #6
 8001acc:	d00d      	beq.n	8001aea <_printf_common+0x112>
 8001ace:	3b00      	subs	r3, #0
 8001ad0:	bf18      	it	ne
 8001ad2:	2301      	movne	r3, #1
 8001ad4:	e7d2      	b.n	8001a7c <_printf_common+0xa4>
 8001ad6:	1b40      	subs	r0, r0, r5
 8001ad8:	428a      	cmp	r2, r1
 8001ada:	ea20 78e0 	bic.w	r8, r0, r0, asr #31
 8001ade:	dce2      	bgt.n	8001aa6 <_printf_common+0xce>
 8001ae0:	2800      	cmp	r0, #0
 8001ae2:	dce2      	bgt.n	8001aaa <_printf_common+0xd2>
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001aea:	68e1      	ldr	r1, [r4, #12]
 8001aec:	f8da 3000 	ldr.w	r3, [sl]
 8001af0:	4299      	cmp	r1, r3
 8001af2:	bfd8      	it	le
 8001af4:	4611      	movle	r1, r2
 8001af6:	dc96      	bgt.n	8001a26 <_printf_common+0x4e>
 8001af8:	e7ae      	b.n	8001a58 <_printf_common+0x80>
 8001afa:	bf00      	nop

08001afc <_printf_i>:
 8001afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b00:	460c      	mov	r4, r1
 8001b02:	b084      	sub	sp, #16
 8001b04:	4617      	mov	r7, r2
 8001b06:	7e22      	ldrb	r2, [r4, #24]
 8001b08:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001b0a:	4606      	mov	r6, r0
 8001b0c:	4698      	mov	r8, r3
 8001b0e:	f104 0c43 	add.w	ip, r4, #67	@ 0x43
 8001b12:	2a00      	cmp	r2, #0
 8001b14:	d035      	beq.n	8001b82 <_printf_i+0x86>
 8001b16:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
 8001b1a:	b2d8      	uxtb	r0, r3
 8001b1c:	2820      	cmp	r0, #32
 8001b1e:	d869      	bhi.n	8001bf4 <_printf_i+0xf8>
 8001b20:	2b20      	cmp	r3, #32
 8001b22:	d867      	bhi.n	8001bf4 <_printf_i+0xf8>
 8001b24:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001b28:	006600e0 	.word	0x006600e0
 8001b2c:	00660066 	.word	0x00660066
 8001b30:	00660066 	.word	0x00660066
 8001b34:	00660066 	.word	0x00660066
 8001b38:	00660066 	.word	0x00660066
 8001b3c:	00940066 	.word	0x00940066
 8001b40:	00660070 	.word	0x00660070
 8001b44:	00660066 	.word	0x00660066
 8001b48:	00700066 	.word	0x00700066
 8001b4c:	00660066 	.word	0x00660066
 8001b50:	00660066 	.word	0x00660066
 8001b54:	00830021 	.word	0x00830021
 8001b58:	006600ae 	.word	0x006600ae
 8001b5c:	009e0066 	.word	0x009e0066
 8001b60:	00830066 	.word	0x00830066
 8001b64:	00660066 	.word	0x00660066
 8001b68:	00e6      	.short	0x00e6
 8001b6a:	680b      	ldr	r3, [r1, #0]
 8001b6c:	6822      	ldr	r2, [r4, #0]
 8001b6e:	6960      	ldr	r0, [r4, #20]
 8001b70:	1d1d      	adds	r5, r3, #4
 8001b72:	600d      	str	r5, [r1, #0]
 8001b74:	0611      	lsls	r1, r2, #24
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	d402      	bmi.n	8001b80 <_printf_i+0x84>
 8001b7a:	0652      	lsls	r2, r2, #25
 8001b7c:	f100 80dc 	bmi.w	8001d38 <_printf_i+0x23c>
 8001b80:	6018      	str	r0, [r3, #0]
 8001b82:	2300      	movs	r3, #0
 8001b84:	46e1      	mov	r9, ip
 8001b86:	6123      	str	r3, [r4, #16]
 8001b88:	f8cd 8000 	str.w	r8, [sp]
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	aa03      	add	r2, sp, #12
 8001b90:	4621      	mov	r1, r4
 8001b92:	4630      	mov	r0, r6
 8001b94:	f7ff ff20 	bl	80019d8 <_printf_common>
 8001b98:	3001      	adds	r0, #1
 8001b9a:	d020      	beq.n	8001bde <_printf_i+0xe2>
 8001b9c:	6923      	ldr	r3, [r4, #16]
 8001b9e:	464a      	mov	r2, r9
 8001ba0:	4639      	mov	r1, r7
 8001ba2:	4630      	mov	r0, r6
 8001ba4:	47c0      	blx	r8
 8001ba6:	3001      	adds	r0, #1
 8001ba8:	d019      	beq.n	8001bde <_printf_i+0xe2>
 8001baa:	6823      	ldr	r3, [r4, #0]
 8001bac:	68e0      	ldr	r0, [r4, #12]
 8001bae:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8001bb2:	079b      	lsls	r3, r3, #30
 8001bb4:	d518      	bpl.n	8001be8 <_printf_i+0xec>
 8001bb6:	4548      	cmp	r0, r9
 8001bb8:	dd16      	ble.n	8001be8 <_printf_i+0xec>
 8001bba:	f104 0a19 	add.w	sl, r4, #25
 8001bbe:	2500      	movs	r5, #0
 8001bc0:	e004      	b.n	8001bcc <_printf_i+0xd0>
 8001bc2:	68e0      	ldr	r0, [r4, #12]
 8001bc4:	eba0 0309 	sub.w	r3, r0, r9
 8001bc8:	42ab      	cmp	r3, r5
 8001bca:	dd0d      	ble.n	8001be8 <_printf_i+0xec>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	4652      	mov	r2, sl
 8001bd0:	4639      	mov	r1, r7
 8001bd2:	4630      	mov	r0, r6
 8001bd4:	47c0      	blx	r8
 8001bd6:	3001      	adds	r0, #1
 8001bd8:	f105 0501 	add.w	r5, r5, #1
 8001bdc:	d1f1      	bne.n	8001bc2 <_printf_i+0xc6>
 8001bde:	f04f 30ff 	mov.w	r0, #4294967295
 8001be2:	b004      	add	sp, #16
 8001be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001be8:	4548      	cmp	r0, r9
 8001bea:	bfb8      	it	lt
 8001bec:	4648      	movlt	r0, r9
 8001bee:	b004      	add	sp, #16
 8001bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bf4:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 8001bfe:	2300      	movs	r3, #0
 8001c00:	6120      	str	r0, [r4, #16]
 8001c02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001c06:	e7bf      	b.n	8001b88 <_printf_i+0x8c>
 8001c08:	680a      	ldr	r2, [r1, #0]
 8001c0a:	6823      	ldr	r3, [r4, #0]
 8001c0c:	1d10      	adds	r0, r2, #4
 8001c0e:	6008      	str	r0, [r1, #0]
 8001c10:	0618      	lsls	r0, r3, #24
 8001c12:	d402      	bmi.n	8001c1a <_printf_i+0x11e>
 8001c14:	0659      	lsls	r1, r3, #25
 8001c16:	f100 8093 	bmi.w	8001d40 <_printf_i+0x244>
 8001c1a:	6810      	ldr	r0, [r2, #0]
 8001c1c:	4601      	mov	r1, r0
 8001c1e:	2800      	cmp	r0, #0
 8001c20:	6862      	ldr	r2, [r4, #4]
 8001c22:	f2c0 8091 	blt.w	8001d48 <_printf_i+0x24c>
 8001c26:	4853      	ldr	r0, [pc, #332]	@ (8001d74 <_printf_i+0x278>)
 8001c28:	f04f 0e0a 	mov.w	lr, #10
 8001c2c:	e04a      	b.n	8001cc4 <_printf_i+0x1c8>
 8001c2e:	680b      	ldr	r3, [r1, #0]
 8001c30:	6820      	ldr	r0, [r4, #0]
 8001c32:	1d1d      	adds	r5, r3, #4
 8001c34:	600d      	str	r5, [r1, #0]
 8001c36:	0605      	lsls	r5, r0, #24
 8001c38:	d401      	bmi.n	8001c3e <_printf_i+0x142>
 8001c3a:	0641      	lsls	r1, r0, #25
 8001c3c:	d47e      	bmi.n	8001d3c <_printf_i+0x240>
 8001c3e:	6819      	ldr	r1, [r3, #0]
 8001c40:	484c      	ldr	r0, [pc, #304]	@ (8001d74 <_printf_i+0x278>)
 8001c42:	2a6f      	cmp	r2, #111	@ 0x6f
 8001c44:	bf14      	ite	ne
 8001c46:	f04f 0e0a 	movne.w	lr, #10
 8001c4a:	f04f 0e08 	moveq.w	lr, #8
 8001c4e:	e035      	b.n	8001cbc <_printf_i+0x1c0>
 8001c50:	680b      	ldr	r3, [r1, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	3304      	adds	r3, #4
 8001c56:	600b      	str	r3, [r1, #0]
 8001c58:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 8001c5c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 8001c60:	2001      	movs	r0, #1
 8001c62:	e7cc      	b.n	8001bfe <_printf_i+0x102>
 8001c64:	680b      	ldr	r3, [r1, #0]
 8001c66:	6862      	ldr	r2, [r4, #4]
 8001c68:	1d18      	adds	r0, r3, #4
 8001c6a:	6008      	str	r0, [r1, #0]
 8001c6c:	f8d3 9000 	ldr.w	r9, [r3]
 8001c70:	2100      	movs	r1, #0
 8001c72:	4648      	mov	r0, r9
 8001c74:	f000 fc7c 	bl	8002570 <memchr>
 8001c78:	2800      	cmp	r0, #0
 8001c7a:	d079      	beq.n	8001d70 <_printf_i+0x274>
 8001c7c:	eba0 0009 	sub.w	r0, r0, r9
 8001c80:	6060      	str	r0, [r4, #4]
 8001c82:	e7bc      	b.n	8001bfe <_printf_i+0x102>
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	f043 0320 	orr.w	r3, r3, #32
 8001c8a:	6023      	str	r3, [r4, #0]
 8001c8c:	2278      	movs	r2, #120	@ 0x78
 8001c8e:	483a      	ldr	r0, [pc, #232]	@ (8001d78 <_printf_i+0x27c>)
 8001c90:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 8001c94:	680a      	ldr	r2, [r1, #0]
 8001c96:	1d15      	adds	r5, r2, #4
 8001c98:	600d      	str	r5, [r1, #0]
 8001c9a:	061d      	lsls	r5, r3, #24
 8001c9c:	d44a      	bmi.n	8001d34 <_printf_i+0x238>
 8001c9e:	0659      	lsls	r1, r3, #25
 8001ca0:	d548      	bpl.n	8001d34 <_printf_i+0x238>
 8001ca2:	8811      	ldrh	r1, [r2, #0]
 8001ca4:	07dd      	lsls	r5, r3, #31
 8001ca6:	bf44      	itt	mi
 8001ca8:	f043 0320 	orrmi.w	r3, r3, #32
 8001cac:	6023      	strmi	r3, [r4, #0]
 8001cae:	b919      	cbnz	r1, 8001cb8 <_printf_i+0x1bc>
 8001cb0:	6823      	ldr	r3, [r4, #0]
 8001cb2:	f023 0320 	bic.w	r3, r3, #32
 8001cb6:	6023      	str	r3, [r4, #0]
 8001cb8:	f04f 0e10 	mov.w	lr, #16
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	6862      	ldr	r2, [r4, #4]
 8001cc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001cc4:	2a00      	cmp	r2, #0
 8001cc6:	60a2      	str	r2, [r4, #8]
 8001cc8:	db16      	blt.n	8001cf8 <_printf_i+0x1fc>
 8001cca:	6823      	ldr	r3, [r4, #0]
 8001ccc:	f023 0304 	bic.w	r3, r3, #4
 8001cd0:	6023      	str	r3, [r4, #0]
 8001cd2:	b989      	cbnz	r1, 8001cf8 <_printf_i+0x1fc>
 8001cd4:	2a00      	cmp	r2, #0
 8001cd6:	d145      	bne.n	8001d64 <_printf_i+0x268>
 8001cd8:	46e1      	mov	r9, ip
 8001cda:	f1be 0f08 	cmp.w	lr, #8
 8001cde:	d01c      	beq.n	8001d1a <_printf_i+0x21e>
 8001ce0:	ebac 0309 	sub.w	r3, ip, r9
 8001ce4:	6123      	str	r3, [r4, #16]
 8001ce6:	e74f      	b.n	8001b88 <_printf_i+0x8c>
 8001ce8:	2358      	movs	r3, #88	@ 0x58
 8001cea:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8001cee:	4821      	ldr	r0, [pc, #132]	@ (8001d74 <_printf_i+0x278>)
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	e7cf      	b.n	8001c94 <_printf_i+0x198>
 8001cf4:	6823      	ldr	r3, [r4, #0]
 8001cf6:	e7c9      	b.n	8001c8c <_printf_i+0x190>
 8001cf8:	4675      	mov	r5, lr
 8001cfa:	46e1      	mov	r9, ip
 8001cfc:	fbb1 f3f5 	udiv	r3, r1, r5
 8001d00:	fb05 1a13 	mls	sl, r5, r3, r1
 8001d04:	460a      	mov	r2, r1
 8001d06:	42aa      	cmp	r2, r5
 8001d08:	f810 100a 	ldrb.w	r1, [r0, sl]
 8001d0c:	f809 1d01 	strb.w	r1, [r9, #-1]!
 8001d10:	4619      	mov	r1, r3
 8001d12:	d2f3      	bcs.n	8001cfc <_printf_i+0x200>
 8001d14:	f1be 0f08 	cmp.w	lr, #8
 8001d18:	d1e2      	bne.n	8001ce0 <_printf_i+0x1e4>
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	07d8      	lsls	r0, r3, #31
 8001d1e:	d5df      	bpl.n	8001ce0 <_printf_i+0x1e4>
 8001d20:	6862      	ldr	r2, [r4, #4]
 8001d22:	6923      	ldr	r3, [r4, #16]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	dcdb      	bgt.n	8001ce0 <_printf_i+0x1e4>
 8001d28:	2330      	movs	r3, #48	@ 0x30
 8001d2a:	f809 3c01 	strb.w	r3, [r9, #-1]
 8001d2e:	f109 39ff 	add.w	r9, r9, #4294967295
 8001d32:	e7d5      	b.n	8001ce0 <_printf_i+0x1e4>
 8001d34:	6811      	ldr	r1, [r2, #0]
 8001d36:	e7b5      	b.n	8001ca4 <_printf_i+0x1a8>
 8001d38:	8018      	strh	r0, [r3, #0]
 8001d3a:	e722      	b.n	8001b82 <_printf_i+0x86>
 8001d3c:	8819      	ldrh	r1, [r3, #0]
 8001d3e:	e77f      	b.n	8001c40 <_printf_i+0x144>
 8001d40:	f9b2 1000 	ldrsh.w	r1, [r2]
 8001d44:	4608      	mov	r0, r1
 8001d46:	e76a      	b.n	8001c1e <_printf_i+0x122>
 8001d48:	202d      	movs	r0, #45	@ 0x2d
 8001d4a:	2a00      	cmp	r2, #0
 8001d4c:	60a2      	str	r2, [r4, #8]
 8001d4e:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
 8001d52:	db02      	blt.n	8001d5a <_printf_i+0x25e>
 8001d54:	f023 0304 	bic.w	r3, r3, #4
 8001d58:	6023      	str	r3, [r4, #0]
 8001d5a:	250a      	movs	r5, #10
 8001d5c:	4805      	ldr	r0, [pc, #20]	@ (8001d74 <_printf_i+0x278>)
 8001d5e:	4249      	negs	r1, r1
 8001d60:	46ae      	mov	lr, r5
 8001d62:	e7ca      	b.n	8001cfa <_printf_i+0x1fe>
 8001d64:	7803      	ldrb	r3, [r0, #0]
 8001d66:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001d6a:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 8001d6e:	e7b4      	b.n	8001cda <_printf_i+0x1de>
 8001d70:	6860      	ldr	r0, [r4, #4]
 8001d72:	e744      	b.n	8001bfe <_printf_i+0x102>
 8001d74:	08005894 	.word	0x08005894
 8001d78:	080058a8 	.word	0x080058a8

08001d7c <__sfvwrite_r>:
 8001d7c:	6893      	ldr	r3, [r2, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80f6 	beq.w	8001f70 <__sfvwrite_r+0x1f4>
 8001d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d88:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
 8001d8c:	f01c 0f08 	tst.w	ip, #8
 8001d90:	b083      	sub	sp, #12
 8001d92:	4690      	mov	r8, r2
 8001d94:	4681      	mov	r9, r0
 8001d96:	460c      	mov	r4, r1
 8001d98:	d031      	beq.n	8001dfe <__sfvwrite_r+0x82>
 8001d9a:	690b      	ldr	r3, [r1, #16]
 8001d9c:	b37b      	cbz	r3, 8001dfe <__sfvwrite_r+0x82>
 8001d9e:	f01c 0702 	ands.w	r7, ip, #2
 8001da2:	f8d8 6000 	ldr.w	r6, [r8]
 8001da6:	d038      	beq.n	8001e1a <__sfvwrite_r+0x9e>
 8001da8:	2700      	movs	r7, #0
 8001daa:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 8001dae:	6a21      	ldr	r1, [r4, #32]
 8001db0:	f8df a2bc 	ldr.w	sl, [pc, #700]	@ 8002070 <__sfvwrite_r+0x2f4>
 8001db4:	463d      	mov	r5, r7
 8001db6:	4555      	cmp	r5, sl
 8001db8:	462b      	mov	r3, r5
 8001dba:	463a      	mov	r2, r7
 8001dbc:	bf28      	it	cs
 8001dbe:	4653      	movcs	r3, sl
 8001dc0:	4648      	mov	r0, r9
 8001dc2:	b1c5      	cbz	r5, 8001df6 <__sfvwrite_r+0x7a>
 8001dc4:	47d8      	blx	fp
 8001dc6:	2800      	cmp	r0, #0
 8001dc8:	f340 80c8 	ble.w	8001f5c <__sfvwrite_r+0x1e0>
 8001dcc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001dd0:	1a1b      	subs	r3, r3, r0
 8001dd2:	4407      	add	r7, r0
 8001dd4:	1a2d      	subs	r5, r5, r0
 8001dd6:	f8c8 3008 	str.w	r3, [r8, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80b4 	beq.w	8001f48 <__sfvwrite_r+0x1cc>
 8001de0:	4555      	cmp	r5, sl
 8001de2:	462b      	mov	r3, r5
 8001de4:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 8001de8:	6a21      	ldr	r1, [r4, #32]
 8001dea:	bf28      	it	cs
 8001dec:	4653      	movcs	r3, sl
 8001dee:	463a      	mov	r2, r7
 8001df0:	4648      	mov	r0, r9
 8001df2:	2d00      	cmp	r5, #0
 8001df4:	d1e6      	bne.n	8001dc4 <__sfvwrite_r+0x48>
 8001df6:	e9d6 7500 	ldrd	r7, r5, [r6]
 8001dfa:	3608      	adds	r6, #8
 8001dfc:	e7db      	b.n	8001db6 <__sfvwrite_r+0x3a>
 8001dfe:	4621      	mov	r1, r4
 8001e00:	4648      	mov	r0, r9
 8001e02:	f000 f987 	bl	8002114 <__swsetup_r>
 8001e06:	2800      	cmp	r0, #0
 8001e08:	f040 80ad 	bne.w	8001f66 <__sfvwrite_r+0x1ea>
 8001e0c:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8001e10:	f8d8 6000 	ldr.w	r6, [r8]
 8001e14:	f01c 0702 	ands.w	r7, ip, #2
 8001e18:	d1c6      	bne.n	8001da8 <__sfvwrite_r+0x2c>
 8001e1a:	f01c 0a01 	ands.w	sl, ip, #1
 8001e1e:	d163      	bne.n	8001ee8 <__sfvwrite_r+0x16c>
 8001e20:	6823      	ldr	r3, [r4, #0]
 8001e22:	68a1      	ldr	r1, [r4, #8]
 8001e24:	4657      	mov	r7, sl
 8001e26:	4618      	mov	r0, r3
 8001e28:	468b      	mov	fp, r1
 8001e2a:	2f00      	cmp	r7, #0
 8001e2c:	d058      	beq.n	8001ee0 <__sfvwrite_r+0x164>
 8001e2e:	f41c 7f00 	tst.w	ip, #512	@ 0x200
 8001e32:	f000 80b1 	beq.w	8001f98 <__sfvwrite_r+0x21c>
 8001e36:	42b9      	cmp	r1, r7
 8001e38:	460a      	mov	r2, r1
 8001e3a:	f200 80dd 	bhi.w	8001ff8 <__sfvwrite_r+0x27c>
 8001e3e:	f41c 6f90 	tst.w	ip, #1152	@ 0x480
 8001e42:	d02f      	beq.n	8001ea4 <__sfvwrite_r+0x128>
 8001e44:	6921      	ldr	r1, [r4, #16]
 8001e46:	6962      	ldr	r2, [r4, #20]
 8001e48:	1a5d      	subs	r5, r3, r1
 8001e4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001e4e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8001e52:	1c6b      	adds	r3, r5, #1
 8001e54:	1052      	asrs	r2, r2, #1
 8001e56:	443b      	add	r3, r7
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	bf92      	itee	ls
 8001e5c:	4693      	movls	fp, r2
 8001e5e:	469b      	movhi	fp, r3
 8001e60:	461a      	movhi	r2, r3
 8001e62:	f41c 6f80 	tst.w	ip, #1024	@ 0x400
 8001e66:	f000 80e6 	beq.w	8002036 <__sfvwrite_r+0x2ba>
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4648      	mov	r0, r9
 8001e6e:	f7fe fe8d 	bl	8000b8c <_malloc_r>
 8001e72:	2800      	cmp	r0, #0
 8001e74:	f000 80f5 	beq.w	8002062 <__sfvwrite_r+0x2e6>
 8001e78:	462a      	mov	r2, r5
 8001e7a:	6921      	ldr	r1, [r4, #16]
 8001e7c:	9001      	str	r0, [sp, #4]
 8001e7e:	f000 fbc7 	bl	8002610 <memcpy>
 8001e82:	89a2      	ldrh	r2, [r4, #12]
 8001e84:	9b01      	ldr	r3, [sp, #4]
 8001e86:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8001e8a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e8e:	81a2      	strh	r2, [r4, #12]
 8001e90:	1958      	adds	r0, r3, r5
 8001e92:	ebab 0505 	sub.w	r5, fp, r5
 8001e96:	f8c4 b014 	str.w	fp, [r4, #20]
 8001e9a:	6123      	str	r3, [r4, #16]
 8001e9c:	60a5      	str	r5, [r4, #8]
 8001e9e:	6020      	str	r0, [r4, #0]
 8001ea0:	46bb      	mov	fp, r7
 8001ea2:	463a      	mov	r2, r7
 8001ea4:	4651      	mov	r1, sl
 8001ea6:	9201      	str	r2, [sp, #4]
 8001ea8:	f000 f994 	bl	80021d4 <memmove>
 8001eac:	68a1      	ldr	r1, [r4, #8]
 8001eae:	6823      	ldr	r3, [r4, #0]
 8001eb0:	9a01      	ldr	r2, [sp, #4]
 8001eb2:	eba1 010b 	sub.w	r1, r1, fp
 8001eb6:	441a      	add	r2, r3
 8001eb8:	463d      	mov	r5, r7
 8001eba:	60a1      	str	r1, [r4, #8]
 8001ebc:	6022      	str	r2, [r4, #0]
 8001ebe:	2700      	movs	r7, #0
 8001ec0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001ec4:	1b5b      	subs	r3, r3, r5
 8001ec6:	44aa      	add	sl, r5
 8001ec8:	f8c8 3008 	str.w	r3, [r8, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d03b      	beq.n	8001f48 <__sfvwrite_r+0x1cc>
 8001ed0:	6823      	ldr	r3, [r4, #0]
 8001ed2:	68a1      	ldr	r1, [r4, #8]
 8001ed4:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	468b      	mov	fp, r1
 8001edc:	2f00      	cmp	r7, #0
 8001ede:	d1a6      	bne.n	8001e2e <__sfvwrite_r+0xb2>
 8001ee0:	e9d6 a700 	ldrd	sl, r7, [r6]
 8001ee4:	3608      	adds	r6, #8
 8001ee6:	e79e      	b.n	8001e26 <__sfvwrite_r+0xaa>
 8001ee8:	4638      	mov	r0, r7
 8001eea:	46bb      	mov	fp, r7
 8001eec:	463d      	mov	r5, r7
 8001eee:	2d00      	cmp	r5, #0
 8001ef0:	d040      	beq.n	8001f74 <__sfvwrite_r+0x1f8>
 8001ef2:	2800      	cmp	r0, #0
 8001ef4:	d045      	beq.n	8001f82 <__sfvwrite_r+0x206>
 8001ef6:	463a      	mov	r2, r7
 8001ef8:	e9d4 c304 	ldrd	ip, r3, [r4, #16]
 8001efc:	6820      	ldr	r0, [r4, #0]
 8001efe:	68a1      	ldr	r1, [r4, #8]
 8001f00:	42aa      	cmp	r2, r5
 8001f02:	bf28      	it	cs
 8001f04:	462a      	movcs	r2, r5
 8001f06:	4560      	cmp	r0, ip
 8001f08:	d904      	bls.n	8001f14 <__sfvwrite_r+0x198>
 8001f0a:	eb01 0a03 	add.w	sl, r1, r3
 8001f0e:	4552      	cmp	r2, sl
 8001f10:	f300 8082 	bgt.w	8002018 <__sfvwrite_r+0x29c>
 8001f14:	4293      	cmp	r3, r2
 8001f16:	dc72      	bgt.n	8001ffe <__sfvwrite_r+0x282>
 8001f18:	6a21      	ldr	r1, [r4, #32]
 8001f1a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001f1e:	465a      	mov	r2, fp
 8001f20:	4648      	mov	r0, r9
 8001f22:	47e0      	blx	ip
 8001f24:	f1b0 0a00 	subs.w	sl, r0, #0
 8001f28:	dd18      	ble.n	8001f5c <__sfvwrite_r+0x1e0>
 8001f2a:	ebb7 070a 	subs.w	r7, r7, sl
 8001f2e:	d00f      	beq.n	8001f50 <__sfvwrite_r+0x1d4>
 8001f30:	2001      	movs	r0, #1
 8001f32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001f36:	eba3 030a 	sub.w	r3, r3, sl
 8001f3a:	44d3      	add	fp, sl
 8001f3c:	eba5 050a 	sub.w	r5, r5, sl
 8001f40:	f8c8 3008 	str.w	r3, [r8, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1d2      	bne.n	8001eee <__sfvwrite_r+0x172>
 8001f48:	2000      	movs	r0, #0
 8001f4a:	b003      	add	sp, #12
 8001f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f50:	4621      	mov	r1, r4
 8001f52:	4648      	mov	r0, r9
 8001f54:	f7ff fb2e 	bl	80015b4 <_fflush_r>
 8001f58:	2800      	cmp	r0, #0
 8001f5a:	d0ea      	beq.n	8001f32 <__sfvwrite_r+0x1b6>
 8001f5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f64:	81a3      	strh	r3, [r4, #12]
 8001f66:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6a:	b003      	add	sp, #12
 8001f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f70:	2000      	movs	r0, #0
 8001f72:	4770      	bx	lr
 8001f74:	6875      	ldr	r5, [r6, #4]
 8001f76:	4633      	mov	r3, r6
 8001f78:	3608      	adds	r6, #8
 8001f7a:	2d00      	cmp	r5, #0
 8001f7c:	d0fa      	beq.n	8001f74 <__sfvwrite_r+0x1f8>
 8001f7e:	f8d3 b000 	ldr.w	fp, [r3]
 8001f82:	462a      	mov	r2, r5
 8001f84:	210a      	movs	r1, #10
 8001f86:	4658      	mov	r0, fp
 8001f88:	f000 faf2 	bl	8002570 <memchr>
 8001f8c:	2800      	cmp	r0, #0
 8001f8e:	d065      	beq.n	800205c <__sfvwrite_r+0x2e0>
 8001f90:	3001      	adds	r0, #1
 8001f92:	eba0 070b 	sub.w	r7, r0, fp
 8001f96:	e7ae      	b.n	8001ef6 <__sfvwrite_r+0x17a>
 8001f98:	6922      	ldr	r2, [r4, #16]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d314      	bcc.n	8001fc8 <__sfvwrite_r+0x24c>
 8001f9e:	6962      	ldr	r2, [r4, #20]
 8001fa0:	42ba      	cmp	r2, r7
 8001fa2:	d811      	bhi.n	8001fc8 <__sfvwrite_r+0x24c>
 8001fa4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8001fa8:	42bb      	cmp	r3, r7
 8001faa:	bf28      	it	cs
 8001fac:	463b      	movcs	r3, r7
 8001fae:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8001fb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8001fb4:	6a21      	ldr	r1, [r4, #32]
 8001fb6:	fb02 f303 	mul.w	r3, r2, r3
 8001fba:	4648      	mov	r0, r9
 8001fbc:	4652      	mov	r2, sl
 8001fbe:	47a8      	blx	r5
 8001fc0:	1e05      	subs	r5, r0, #0
 8001fc2:	ddcb      	ble.n	8001f5c <__sfvwrite_r+0x1e0>
 8001fc4:	1b7f      	subs	r7, r7, r5
 8001fc6:	e77b      	b.n	8001ec0 <__sfvwrite_r+0x144>
 8001fc8:	42b9      	cmp	r1, r7
 8001fca:	bf28      	it	cs
 8001fcc:	4639      	movcs	r1, r7
 8001fce:	460d      	mov	r5, r1
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	460a      	mov	r2, r1
 8001fd4:	4651      	mov	r1, sl
 8001fd6:	f000 f8fd 	bl	80021d4 <memmove>
 8001fda:	68a1      	ldr	r1, [r4, #8]
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	1b49      	subs	r1, r1, r5
 8001fe0:	442b      	add	r3, r5
 8001fe2:	60a1      	str	r1, [r4, #8]
 8001fe4:	6023      	str	r3, [r4, #0]
 8001fe6:	2900      	cmp	r1, #0
 8001fe8:	d1ec      	bne.n	8001fc4 <__sfvwrite_r+0x248>
 8001fea:	4621      	mov	r1, r4
 8001fec:	4648      	mov	r0, r9
 8001fee:	f7ff fae1 	bl	80015b4 <_fflush_r>
 8001ff2:	2800      	cmp	r0, #0
 8001ff4:	d0e6      	beq.n	8001fc4 <__sfvwrite_r+0x248>
 8001ff6:	e7b1      	b.n	8001f5c <__sfvwrite_r+0x1e0>
 8001ff8:	46bb      	mov	fp, r7
 8001ffa:	463a      	mov	r2, r7
 8001ffc:	e752      	b.n	8001ea4 <__sfvwrite_r+0x128>
 8001ffe:	4659      	mov	r1, fp
 8002000:	9201      	str	r2, [sp, #4]
 8002002:	f000 f8e7 	bl	80021d4 <memmove>
 8002006:	9a01      	ldr	r2, [sp, #4]
 8002008:	68a3      	ldr	r3, [r4, #8]
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	60a3      	str	r3, [r4, #8]
 800200e:	6823      	ldr	r3, [r4, #0]
 8002010:	4413      	add	r3, r2
 8002012:	6023      	str	r3, [r4, #0]
 8002014:	4692      	mov	sl, r2
 8002016:	e788      	b.n	8001f2a <__sfvwrite_r+0x1ae>
 8002018:	4659      	mov	r1, fp
 800201a:	4652      	mov	r2, sl
 800201c:	f000 f8da 	bl	80021d4 <memmove>
 8002020:	6823      	ldr	r3, [r4, #0]
 8002022:	4453      	add	r3, sl
 8002024:	6023      	str	r3, [r4, #0]
 8002026:	4621      	mov	r1, r4
 8002028:	4648      	mov	r0, r9
 800202a:	f7ff fac3 	bl	80015b4 <_fflush_r>
 800202e:	2800      	cmp	r0, #0
 8002030:	f43f af7b 	beq.w	8001f2a <__sfvwrite_r+0x1ae>
 8002034:	e792      	b.n	8001f5c <__sfvwrite_r+0x1e0>
 8002036:	4648      	mov	r0, r9
 8002038:	f000 fb84 	bl	8002744 <_realloc_r>
 800203c:	4603      	mov	r3, r0
 800203e:	2800      	cmp	r0, #0
 8002040:	f47f af26 	bne.w	8001e90 <__sfvwrite_r+0x114>
 8002044:	6921      	ldr	r1, [r4, #16]
 8002046:	4648      	mov	r0, r9
 8002048:	f7ff f9ce 	bl	80013e8 <_free_r>
 800204c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002050:	220c      	movs	r2, #12
 8002052:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002056:	f8c9 2000 	str.w	r2, [r9]
 800205a:	e781      	b.n	8001f60 <__sfvwrite_r+0x1e4>
 800205c:	1c6a      	adds	r2, r5, #1
 800205e:	4617      	mov	r7, r2
 8002060:	e74a      	b.n	8001ef8 <__sfvwrite_r+0x17c>
 8002062:	220c      	movs	r2, #12
 8002064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002068:	f8c9 2000 	str.w	r2, [r9]
 800206c:	e778      	b.n	8001f60 <__sfvwrite_r+0x1e4>
 800206e:	bf00      	nop
 8002070:	7ffffc00 	.word	0x7ffffc00

08002074 <__swbuf_r>:
 8002074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002076:	460d      	mov	r5, r1
 8002078:	4614      	mov	r4, r2
 800207a:	4606      	mov	r6, r0
 800207c:	b110      	cbz	r0, 8002084 <__swbuf_r+0x10>
 800207e:	6a03      	ldr	r3, [r0, #32]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d037      	beq.n	80020f4 <__swbuf_r+0x80>
 8002084:	89a3      	ldrh	r3, [r4, #12]
 8002086:	69a2      	ldr	r2, [r4, #24]
 8002088:	60a2      	str	r2, [r4, #8]
 800208a:	071a      	lsls	r2, r3, #28
 800208c:	d519      	bpl.n	80020c2 <__swbuf_r+0x4e>
 800208e:	6923      	ldr	r3, [r4, #16]
 8002090:	b1bb      	cbz	r3, 80020c2 <__swbuf_r+0x4e>
 8002092:	6822      	ldr	r2, [r4, #0]
 8002094:	6961      	ldr	r1, [r4, #20]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	b2ed      	uxtb	r5, r5
 800209a:	4299      	cmp	r1, r3
 800209c:	462f      	mov	r7, r5
 800209e:	dd20      	ble.n	80020e2 <__swbuf_r+0x6e>
 80020a0:	3301      	adds	r3, #1
 80020a2:	68a1      	ldr	r1, [r4, #8]
 80020a4:	3901      	subs	r1, #1
 80020a6:	60a1      	str	r1, [r4, #8]
 80020a8:	1c51      	adds	r1, r2, #1
 80020aa:	6021      	str	r1, [r4, #0]
 80020ac:	7015      	strb	r5, [r2, #0]
 80020ae:	6962      	ldr	r2, [r4, #20]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d00d      	beq.n	80020d0 <__swbuf_r+0x5c>
 80020b4:	89a3      	ldrh	r3, [r4, #12]
 80020b6:	07db      	lsls	r3, r3, #31
 80020b8:	d501      	bpl.n	80020be <__swbuf_r+0x4a>
 80020ba:	2d0a      	cmp	r5, #10
 80020bc:	d008      	beq.n	80020d0 <__swbuf_r+0x5c>
 80020be:	4638      	mov	r0, r7
 80020c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020c2:	4621      	mov	r1, r4
 80020c4:	4630      	mov	r0, r6
 80020c6:	f000 f825 	bl	8002114 <__swsetup_r>
 80020ca:	b938      	cbnz	r0, 80020dc <__swbuf_r+0x68>
 80020cc:	6923      	ldr	r3, [r4, #16]
 80020ce:	e7e0      	b.n	8002092 <__swbuf_r+0x1e>
 80020d0:	4621      	mov	r1, r4
 80020d2:	4630      	mov	r0, r6
 80020d4:	f7ff fa6e 	bl	80015b4 <_fflush_r>
 80020d8:	2800      	cmp	r0, #0
 80020da:	d0f0      	beq.n	80020be <__swbuf_r+0x4a>
 80020dc:	f04f 37ff 	mov.w	r7, #4294967295
 80020e0:	e7ed      	b.n	80020be <__swbuf_r+0x4a>
 80020e2:	4621      	mov	r1, r4
 80020e4:	4630      	mov	r0, r6
 80020e6:	f7ff fa65 	bl	80015b4 <_fflush_r>
 80020ea:	2800      	cmp	r0, #0
 80020ec:	d1f6      	bne.n	80020dc <__swbuf_r+0x68>
 80020ee:	6822      	ldr	r2, [r4, #0]
 80020f0:	2301      	movs	r3, #1
 80020f2:	e7d6      	b.n	80020a2 <__swbuf_r+0x2e>
 80020f4:	f7fe ff68 	bl	8000fc8 <__sinit>
 80020f8:	e7c4      	b.n	8002084 <__swbuf_r+0x10>
 80020fa:	bf00      	nop

080020fc <__swbuf>:
 80020fc:	b410      	push	{r4}
 80020fe:	4c04      	ldr	r4, [pc, #16]	@ (8002110 <__swbuf+0x14>)
 8002100:	4603      	mov	r3, r0
 8002102:	460a      	mov	r2, r1
 8002104:	6820      	ldr	r0, [r4, #0]
 8002106:	bc10      	pop	{r4}
 8002108:	4619      	mov	r1, r3
 800210a:	f7ff bfb3 	b.w	8002074 <__swbuf_r>
 800210e:	bf00      	nop
 8002110:	2000001c 	.word	0x2000001c

08002114 <__swsetup_r>:
 8002114:	b538      	push	{r3, r4, r5, lr}
 8002116:	4b2e      	ldr	r3, [pc, #184]	@ (80021d0 <__swsetup_r+0xbc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4605      	mov	r5, r0
 800211c:	460c      	mov	r4, r1
 800211e:	b113      	cbz	r3, 8002126 <__swsetup_r+0x12>
 8002120:	6a1a      	ldr	r2, [r3, #32]
 8002122:	2a00      	cmp	r2, #0
 8002124:	d04b      	beq.n	80021be <__swsetup_r+0xaa>
 8002126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800212a:	0718      	lsls	r0, r3, #28
 800212c:	d51c      	bpl.n	8002168 <__swsetup_r+0x54>
 800212e:	6922      	ldr	r2, [r4, #16]
 8002130:	b322      	cbz	r2, 800217c <__swsetup_r+0x68>
 8002132:	f013 0101 	ands.w	r1, r3, #1
 8002136:	d007      	beq.n	8002148 <__swsetup_r+0x34>
 8002138:	6961      	ldr	r1, [r4, #20]
 800213a:	2000      	movs	r0, #0
 800213c:	4249      	negs	r1, r1
 800213e:	60a0      	str	r0, [r4, #8]
 8002140:	61a1      	str	r1, [r4, #24]
 8002142:	b13a      	cbz	r2, 8002154 <__swsetup_r+0x40>
 8002144:	2000      	movs	r0, #0
 8002146:	bd38      	pop	{r3, r4, r5, pc}
 8002148:	0798      	lsls	r0, r3, #30
 800214a:	bf58      	it	pl
 800214c:	6961      	ldrpl	r1, [r4, #20]
 800214e:	60a1      	str	r1, [r4, #8]
 8002150:	2a00      	cmp	r2, #0
 8002152:	d1f7      	bne.n	8002144 <__swsetup_r+0x30>
 8002154:	0619      	lsls	r1, r3, #24
 8002156:	bf58      	it	pl
 8002158:	4610      	movpl	r0, r2
 800215a:	d5f4      	bpl.n	8002146 <__swsetup_r+0x32>
 800215c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002160:	81a3      	strh	r3, [r4, #12]
 8002162:	f04f 30ff 	mov.w	r0, #4294967295
 8002166:	bd38      	pop	{r3, r4, r5, pc}
 8002168:	06d9      	lsls	r1, r3, #27
 800216a:	d52c      	bpl.n	80021c6 <__swsetup_r+0xb2>
 800216c:	075a      	lsls	r2, r3, #29
 800216e:	d412      	bmi.n	8002196 <__swsetup_r+0x82>
 8002170:	6922      	ldr	r2, [r4, #16]
 8002172:	f043 0308 	orr.w	r3, r3, #8
 8002176:	81a3      	strh	r3, [r4, #12]
 8002178:	2a00      	cmp	r2, #0
 800217a:	d1da      	bne.n	8002132 <__swsetup_r+0x1e>
 800217c:	f403 7120 	and.w	r1, r3, #640	@ 0x280
 8002180:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8002184:	d0d5      	beq.n	8002132 <__swsetup_r+0x1e>
 8002186:	4621      	mov	r1, r4
 8002188:	4628      	mov	r0, r5
 800218a:	f000 fb0f 	bl	80027ac <__smakebuf_r>
 800218e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002192:	6922      	ldr	r2, [r4, #16]
 8002194:	e7cd      	b.n	8002132 <__swsetup_r+0x1e>
 8002196:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002198:	b151      	cbz	r1, 80021b0 <__swsetup_r+0x9c>
 800219a:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800219e:	4291      	cmp	r1, r2
 80021a0:	d004      	beq.n	80021ac <__swsetup_r+0x98>
 80021a2:	4628      	mov	r0, r5
 80021a4:	f7ff f920 	bl	80013e8 <_free_r>
 80021a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	6362      	str	r2, [r4, #52]	@ 0x34
 80021b0:	6922      	ldr	r2, [r4, #16]
 80021b2:	2100      	movs	r1, #0
 80021b4:	e9c4 2100 	strd	r2, r1, [r4]
 80021b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80021bc:	e7d9      	b.n	8002172 <__swsetup_r+0x5e>
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe ff02 	bl	8000fc8 <__sinit>
 80021c4:	e7af      	b.n	8002126 <__swsetup_r+0x12>
 80021c6:	2209      	movs	r2, #9
 80021c8:	602a      	str	r2, [r5, #0]
 80021ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021ce:	e7c7      	b.n	8002160 <__swsetup_r+0x4c>
 80021d0:	2000001c 	.word	0x2000001c

080021d4 <memmove>:
 80021d4:	4288      	cmp	r0, r1
 80021d6:	d90e      	bls.n	80021f6 <memmove+0x22>
 80021d8:	188b      	adds	r3, r1, r2
 80021da:	4283      	cmp	r3, r0
 80021dc:	d90b      	bls.n	80021f6 <memmove+0x22>
 80021de:	eb00 0c02 	add.w	ip, r0, r2
 80021e2:	2a00      	cmp	r2, #0
 80021e4:	d06e      	beq.n	80022c4 <memmove+0xf0>
 80021e6:	4662      	mov	r2, ip
 80021e8:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 80021ec:	f802 cd01 	strb.w	ip, [r2, #-1]!
 80021f0:	4299      	cmp	r1, r3
 80021f2:	d1f9      	bne.n	80021e8 <memmove+0x14>
 80021f4:	4770      	bx	lr
 80021f6:	2a0f      	cmp	r2, #15
 80021f8:	d80f      	bhi.n	800221a <memmove+0x46>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f102 3cff 	add.w	ip, r2, #4294967295
 8002200:	2a00      	cmp	r2, #0
 8002202:	d05f      	beq.n	80022c4 <memmove+0xf0>
 8002204:	f10c 0c01 	add.w	ip, ip, #1
 8002208:	3b01      	subs	r3, #1
 800220a:	448c      	add	ip, r1
 800220c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002210:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002214:	4561      	cmp	r1, ip
 8002216:	d1f9      	bne.n	800220c <memmove+0x38>
 8002218:	4770      	bx	lr
 800221a:	ea40 0301 	orr.w	r3, r0, r1
 800221e:	079b      	lsls	r3, r3, #30
 8002220:	d151      	bne.n	80022c6 <memmove+0xf2>
 8002222:	f1a2 0310 	sub.w	r3, r2, #16
 8002226:	b570      	push	{r4, r5, r6, lr}
 8002228:	f101 0c20 	add.w	ip, r1, #32
 800222c:	f023 050f 	bic.w	r5, r3, #15
 8002230:	f101 0e10 	add.w	lr, r1, #16
 8002234:	f100 0410 	add.w	r4, r0, #16
 8002238:	44ac      	add	ip, r5
 800223a:	091b      	lsrs	r3, r3, #4
 800223c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 8002240:	f844 5c10 	str.w	r5, [r4, #-16]
 8002244:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 8002248:	f844 5c0c 	str.w	r5, [r4, #-12]
 800224c:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 8002250:	f844 5c08 	str.w	r5, [r4, #-8]
 8002254:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 8002258:	f844 5c04 	str.w	r5, [r4, #-4]
 800225c:	f10e 0e10 	add.w	lr, lr, #16
 8002260:	45e6      	cmp	lr, ip
 8002262:	f104 0410 	add.w	r4, r4, #16
 8002266:	d1e9      	bne.n	800223c <memmove+0x68>
 8002268:	3301      	adds	r3, #1
 800226a:	f012 0f0c 	tst.w	r2, #12
 800226e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8002272:	f002 040f 	and.w	r4, r2, #15
 8002276:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 800227a:	d028      	beq.n	80022ce <memmove+0xfa>
 800227c:	3c04      	subs	r4, #4
 800227e:	f024 0603 	bic.w	r6, r4, #3
 8002282:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 8002286:	441e      	add	r6, r3
 8002288:	1f1c      	subs	r4, r3, #4
 800228a:	468e      	mov	lr, r1
 800228c:	f85e 5b04 	ldr.w	r5, [lr], #4
 8002290:	f844 5f04 	str.w	r5, [r4, #4]!
 8002294:	42b4      	cmp	r4, r6
 8002296:	d1f9      	bne.n	800228c <memmove+0xb8>
 8002298:	f10c 0401 	add.w	r4, ip, #1
 800229c:	f002 0203 	and.w	r2, r2, #3
 80022a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80022a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80022a8:	f102 3cff 	add.w	ip, r2, #4294967295
 80022ac:	b14a      	cbz	r2, 80022c2 <memmove+0xee>
 80022ae:	f10c 0c01 	add.w	ip, ip, #1
 80022b2:	3b01      	subs	r3, #1
 80022b4:	448c      	add	ip, r1
 80022b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80022ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80022be:	4561      	cmp	r1, ip
 80022c0:	d1f9      	bne.n	80022b6 <memmove+0xe2>
 80022c2:	bd70      	pop	{r4, r5, r6, pc}
 80022c4:	4770      	bx	lr
 80022c6:	f102 3cff 	add.w	ip, r2, #4294967295
 80022ca:	4603      	mov	r3, r0
 80022cc:	e79a      	b.n	8002204 <memmove+0x30>
 80022ce:	4622      	mov	r2, r4
 80022d0:	e7ea      	b.n	80022a8 <memmove+0xd4>
 80022d2:	bf00      	nop

080022d4 <_init_signal_r>:
 80022d4:	b538      	push	{r3, r4, r5, lr}
 80022d6:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80022d8:	b10c      	cbz	r4, 80022de <_init_signal_r+0xa>
 80022da:	2000      	movs	r0, #0
 80022dc:	bd38      	pop	{r3, r4, r5, pc}
 80022de:	2180      	movs	r1, #128	@ 0x80
 80022e0:	4605      	mov	r5, r0
 80022e2:	f7fe fc53 	bl	8000b8c <_malloc_r>
 80022e6:	4602      	mov	r2, r0
 80022e8:	63e8      	str	r0, [r5, #60]	@ 0x3c
 80022ea:	b130      	cbz	r0, 80022fa <_init_signal_r+0x26>
 80022ec:	1f03      	subs	r3, r0, #4
 80022ee:	327c      	adds	r2, #124	@ 0x7c
 80022f0:	f843 4f04 	str.w	r4, [r3, #4]!
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d1fb      	bne.n	80022f0 <_init_signal_r+0x1c>
 80022f8:	e7ef      	b.n	80022da <_init_signal_r+0x6>
 80022fa:	f04f 30ff 	mov.w	r0, #4294967295
 80022fe:	bd38      	pop	{r3, r4, r5, pc}

08002300 <_signal_r>:
 8002300:	b530      	push	{r4, r5, lr}
 8002302:	291f      	cmp	r1, #31
 8002304:	b083      	sub	sp, #12
 8002306:	4605      	mov	r5, r0
 8002308:	d808      	bhi.n	800231c <_signal_r+0x1c>
 800230a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800230c:	460c      	mov	r4, r1
 800230e:	b153      	cbz	r3, 8002326 <_signal_r+0x26>
 8002310:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002314:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8002318:	b003      	add	sp, #12
 800231a:	bd30      	pop	{r4, r5, pc}
 800231c:	2316      	movs	r3, #22
 800231e:	6003      	str	r3, [r0, #0]
 8002320:	f04f 30ff 	mov.w	r0, #4294967295
 8002324:	e7f8      	b.n	8002318 <_signal_r+0x18>
 8002326:	2180      	movs	r1, #128	@ 0x80
 8002328:	9201      	str	r2, [sp, #4]
 800232a:	f7fe fc2f 	bl	8000b8c <_malloc_r>
 800232e:	9a01      	ldr	r2, [sp, #4]
 8002330:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8002332:	4603      	mov	r3, r0
 8002334:	2800      	cmp	r0, #0
 8002336:	d0f3      	beq.n	8002320 <_signal_r+0x20>
 8002338:	1f01      	subs	r1, r0, #4
 800233a:	f100 057c 	add.w	r5, r0, #124	@ 0x7c
 800233e:	2000      	movs	r0, #0
 8002340:	f841 0f04 	str.w	r0, [r1, #4]!
 8002344:	42a9      	cmp	r1, r5
 8002346:	d1fb      	bne.n	8002340 <_signal_r+0x40>
 8002348:	e7e2      	b.n	8002310 <_signal_r+0x10>
 800234a:	bf00      	nop

0800234c <_raise_r>:
 800234c:	291f      	cmp	r1, #31
 800234e:	b538      	push	{r3, r4, r5, lr}
 8002350:	4605      	mov	r5, r0
 8002352:	d81e      	bhi.n	8002392 <_raise_r+0x46>
 8002354:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002356:	460c      	mov	r4, r1
 8002358:	b16a      	cbz	r2, 8002376 <_raise_r+0x2a>
 800235a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800235e:	b153      	cbz	r3, 8002376 <_raise_r+0x2a>
 8002360:	2b01      	cmp	r3, #1
 8002362:	d006      	beq.n	8002372 <_raise_r+0x26>
 8002364:	1c59      	adds	r1, r3, #1
 8002366:	d010      	beq.n	800238a <_raise_r+0x3e>
 8002368:	2100      	movs	r1, #0
 800236a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800236e:	4620      	mov	r0, r4
 8002370:	4798      	blx	r3
 8002372:	2000      	movs	r0, #0
 8002374:	bd38      	pop	{r3, r4, r5, pc}
 8002376:	4628      	mov	r0, r5
 8002378:	f000 f8f2 	bl	8002560 <_getpid_r>
 800237c:	4622      	mov	r2, r4
 800237e:	4601      	mov	r1, r0
 8002380:	4628      	mov	r0, r5
 8002382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002386:	f000 b8d5 	b.w	8002534 <_kill_r>
 800238a:	2316      	movs	r3, #22
 800238c:	6003      	str	r3, [r0, #0]
 800238e:	2001      	movs	r0, #1
 8002390:	bd38      	pop	{r3, r4, r5, pc}
 8002392:	2316      	movs	r3, #22
 8002394:	6003      	str	r3, [r0, #0]
 8002396:	f04f 30ff 	mov.w	r0, #4294967295
 800239a:	bd38      	pop	{r3, r4, r5, pc}

0800239c <__sigtramp_r>:
 800239c:	291f      	cmp	r1, #31
 800239e:	d82a      	bhi.n	80023f6 <__sigtramp_r+0x5a>
 80023a0:	b538      	push	{r3, r4, r5, lr}
 80023a2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80023a4:	460c      	mov	r4, r1
 80023a6:	4605      	mov	r5, r0
 80023a8:	b1a3      	cbz	r3, 80023d4 <__sigtramp_r+0x38>
 80023aa:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 80023ae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80023b2:	b14a      	cbz	r2, 80023c8 <__sigtramp_r+0x2c>
 80023b4:	1c51      	adds	r1, r2, #1
 80023b6:	d00b      	beq.n	80023d0 <__sigtramp_r+0x34>
 80023b8:	2a01      	cmp	r2, #1
 80023ba:	d007      	beq.n	80023cc <__sigtramp_r+0x30>
 80023bc:	2500      	movs	r5, #0
 80023be:	4620      	mov	r0, r4
 80023c0:	601d      	str	r5, [r3, #0]
 80023c2:	4790      	blx	r2
 80023c4:	4628      	mov	r0, r5
 80023c6:	bd38      	pop	{r3, r4, r5, pc}
 80023c8:	2001      	movs	r0, #1
 80023ca:	bd38      	pop	{r3, r4, r5, pc}
 80023cc:	2003      	movs	r0, #3
 80023ce:	bd38      	pop	{r3, r4, r5, pc}
 80023d0:	2002      	movs	r0, #2
 80023d2:	bd38      	pop	{r3, r4, r5, pc}
 80023d4:	2180      	movs	r1, #128	@ 0x80
 80023d6:	f7fe fbd9 	bl	8000b8c <_malloc_r>
 80023da:	4603      	mov	r3, r0
 80023dc:	63e8      	str	r0, [r5, #60]	@ 0x3c
 80023de:	b138      	cbz	r0, 80023f0 <__sigtramp_r+0x54>
 80023e0:	1f02      	subs	r2, r0, #4
 80023e2:	2100      	movs	r1, #0
 80023e4:	307c      	adds	r0, #124	@ 0x7c
 80023e6:	f842 1f04 	str.w	r1, [r2, #4]!
 80023ea:	4290      	cmp	r0, r2
 80023ec:	d1fb      	bne.n	80023e6 <__sigtramp_r+0x4a>
 80023ee:	e7dc      	b.n	80023aa <__sigtramp_r+0xe>
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295
 80023f4:	bd38      	pop	{r3, r4, r5, pc}
 80023f6:	f04f 30ff 	mov.w	r0, #4294967295
 80023fa:	4770      	bx	lr

080023fc <raise>:
 80023fc:	b538      	push	{r3, r4, r5, lr}
 80023fe:	4b13      	ldr	r3, [pc, #76]	@ (800244c <raise+0x50>)
 8002400:	281f      	cmp	r0, #31
 8002402:	681d      	ldr	r5, [r3, #0]
 8002404:	d81d      	bhi.n	8002442 <raise+0x46>
 8002406:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8002408:	4604      	mov	r4, r0
 800240a:	b162      	cbz	r2, 8002426 <raise+0x2a>
 800240c:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8002410:	b14b      	cbz	r3, 8002426 <raise+0x2a>
 8002412:	2b01      	cmp	r3, #1
 8002414:	d005      	beq.n	8002422 <raise+0x26>
 8002416:	1c59      	adds	r1, r3, #1
 8002418:	d00f      	beq.n	800243a <raise+0x3e>
 800241a:	2100      	movs	r1, #0
 800241c:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 8002420:	4798      	blx	r3
 8002422:	2000      	movs	r0, #0
 8002424:	bd38      	pop	{r3, r4, r5, pc}
 8002426:	4628      	mov	r0, r5
 8002428:	f000 f89a 	bl	8002560 <_getpid_r>
 800242c:	4622      	mov	r2, r4
 800242e:	4601      	mov	r1, r0
 8002430:	4628      	mov	r0, r5
 8002432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002436:	f000 b87d 	b.w	8002534 <_kill_r>
 800243a:	2316      	movs	r3, #22
 800243c:	602b      	str	r3, [r5, #0]
 800243e:	2001      	movs	r0, #1
 8002440:	bd38      	pop	{r3, r4, r5, pc}
 8002442:	2316      	movs	r3, #22
 8002444:	602b      	str	r3, [r5, #0]
 8002446:	f04f 30ff 	mov.w	r0, #4294967295
 800244a:	bd38      	pop	{r3, r4, r5, pc}
 800244c:	2000001c 	.word	0x2000001c

08002450 <signal>:
 8002450:	4b11      	ldr	r3, [pc, #68]	@ (8002498 <signal+0x48>)
 8002452:	281f      	cmp	r0, #31
 8002454:	b570      	push	{r4, r5, r6, lr}
 8002456:	681e      	ldr	r6, [r3, #0]
 8002458:	d808      	bhi.n	800246c <signal+0x1c>
 800245a:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 800245c:	4604      	mov	r4, r0
 800245e:	460d      	mov	r5, r1
 8002460:	b14b      	cbz	r3, 8002476 <signal+0x26>
 8002462:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002466:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
 800246a:	bd70      	pop	{r4, r5, r6, pc}
 800246c:	2316      	movs	r3, #22
 800246e:	6033      	str	r3, [r6, #0]
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	bd70      	pop	{r4, r5, r6, pc}
 8002476:	2180      	movs	r1, #128	@ 0x80
 8002478:	4630      	mov	r0, r6
 800247a:	f7fe fb87 	bl	8000b8c <_malloc_r>
 800247e:	4603      	mov	r3, r0
 8002480:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8002482:	2800      	cmp	r0, #0
 8002484:	d0f4      	beq.n	8002470 <signal+0x20>
 8002486:	1f02      	subs	r2, r0, #4
 8002488:	2100      	movs	r1, #0
 800248a:	307c      	adds	r0, #124	@ 0x7c
 800248c:	f842 1f04 	str.w	r1, [r2, #4]!
 8002490:	4290      	cmp	r0, r2
 8002492:	d1fb      	bne.n	800248c <signal+0x3c>
 8002494:	e7e5      	b.n	8002462 <signal+0x12>
 8002496:	bf00      	nop
 8002498:	2000001c 	.word	0x2000001c

0800249c <_init_signal>:
 800249c:	b538      	push	{r3, r4, r5, lr}
 800249e:	4b0b      	ldr	r3, [pc, #44]	@ (80024cc <_init_signal+0x30>)
 80024a0:	681d      	ldr	r5, [r3, #0]
 80024a2:	6bec      	ldr	r4, [r5, #60]	@ 0x3c
 80024a4:	b10c      	cbz	r4, 80024aa <_init_signal+0xe>
 80024a6:	2000      	movs	r0, #0
 80024a8:	bd38      	pop	{r3, r4, r5, pc}
 80024aa:	2180      	movs	r1, #128	@ 0x80
 80024ac:	4628      	mov	r0, r5
 80024ae:	f7fe fb6d 	bl	8000b8c <_malloc_r>
 80024b2:	63e8      	str	r0, [r5, #60]	@ 0x3c
 80024b4:	b138      	cbz	r0, 80024c6 <_init_signal+0x2a>
 80024b6:	1f03      	subs	r3, r0, #4
 80024b8:	f100 027c 	add.w	r2, r0, #124	@ 0x7c
 80024bc:	f843 4f04 	str.w	r4, [r3, #4]!
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d1fb      	bne.n	80024bc <_init_signal+0x20>
 80024c4:	e7ef      	b.n	80024a6 <_init_signal+0xa>
 80024c6:	f04f 30ff 	mov.w	r0, #4294967295
 80024ca:	bd38      	pop	{r3, r4, r5, pc}
 80024cc:	2000001c 	.word	0x2000001c

080024d0 <__sigtramp>:
 80024d0:	b538      	push	{r3, r4, r5, lr}
 80024d2:	4b17      	ldr	r3, [pc, #92]	@ (8002530 <__sigtramp+0x60>)
 80024d4:	281f      	cmp	r0, #31
 80024d6:	681d      	ldr	r5, [r3, #0]
 80024d8:	d826      	bhi.n	8002528 <__sigtramp+0x58>
 80024da:	4604      	mov	r4, r0
 80024dc:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 80024de:	b1a0      	cbz	r0, 800250a <__sigtramp+0x3a>
 80024e0:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 80024e4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80024e8:	b14b      	cbz	r3, 80024fe <__sigtramp+0x2e>
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	d00b      	beq.n	8002506 <__sigtramp+0x36>
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d007      	beq.n	8002502 <__sigtramp+0x32>
 80024f2:	2500      	movs	r5, #0
 80024f4:	6005      	str	r5, [r0, #0]
 80024f6:	4620      	mov	r0, r4
 80024f8:	4798      	blx	r3
 80024fa:	4628      	mov	r0, r5
 80024fc:	bd38      	pop	{r3, r4, r5, pc}
 80024fe:	2001      	movs	r0, #1
 8002500:	bd38      	pop	{r3, r4, r5, pc}
 8002502:	2003      	movs	r0, #3
 8002504:	bd38      	pop	{r3, r4, r5, pc}
 8002506:	2002      	movs	r0, #2
 8002508:	bd38      	pop	{r3, r4, r5, pc}
 800250a:	2180      	movs	r1, #128	@ 0x80
 800250c:	4628      	mov	r0, r5
 800250e:	f7fe fb3d 	bl	8000b8c <_malloc_r>
 8002512:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8002514:	b140      	cbz	r0, 8002528 <__sigtramp+0x58>
 8002516:	1f03      	subs	r3, r0, #4
 8002518:	f100 017c 	add.w	r1, r0, #124	@ 0x7c
 800251c:	2200      	movs	r2, #0
 800251e:	f843 2f04 	str.w	r2, [r3, #4]!
 8002522:	4299      	cmp	r1, r3
 8002524:	d1fb      	bne.n	800251e <__sigtramp+0x4e>
 8002526:	e7db      	b.n	80024e0 <__sigtramp+0x10>
 8002528:	f04f 30ff 	mov.w	r0, #4294967295
 800252c:	bd38      	pop	{r3, r4, r5, pc}
 800252e:	bf00      	nop
 8002530:	2000001c 	.word	0x2000001c

08002534 <_kill_r>:
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	460c      	mov	r4, r1
 8002538:	4d08      	ldr	r5, [pc, #32]	@ (800255c <_kill_r+0x28>)
 800253a:	4603      	mov	r3, r0
 800253c:	2600      	movs	r6, #0
 800253e:	4620      	mov	r0, r4
 8002540:	4611      	mov	r1, r2
 8002542:	461c      	mov	r4, r3
 8002544:	602e      	str	r6, [r5, #0]
 8002546:	f000 fa13 	bl	8002970 <_kill>
 800254a:	1c43      	adds	r3, r0, #1
 800254c:	d000      	beq.n	8002550 <_kill_r+0x1c>
 800254e:	bd70      	pop	{r4, r5, r6, pc}
 8002550:	682b      	ldr	r3, [r5, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0fb      	beq.n	800254e <_kill_r+0x1a>
 8002556:	6023      	str	r3, [r4, #0]
 8002558:	bd70      	pop	{r4, r5, r6, pc}
 800255a:	bf00      	nop
 800255c:	200002f4 	.word	0x200002f4

08002560 <_getpid_r>:
 8002560:	f000 b9ee 	b.w	8002940 <_getpid>
 8002564:	0000      	movs	r0, r0
 8002566:	0000      	movs	r0, r0
 8002568:	0000      	movs	r0, r0
 800256a:	0000      	movs	r0, r0
 800256c:	0000      	movs	r0, r0
 800256e:	0000      	movs	r0, r0

08002570 <memchr>:
 8002570:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8002574:	2a10      	cmp	r2, #16
 8002576:	db2b      	blt.n	80025d0 <memchr+0x60>
 8002578:	f010 0f07 	tst.w	r0, #7
 800257c:	d008      	beq.n	8002590 <memchr+0x20>
 800257e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002582:	3a01      	subs	r2, #1
 8002584:	428b      	cmp	r3, r1
 8002586:	d02d      	beq.n	80025e4 <memchr+0x74>
 8002588:	f010 0f07 	tst.w	r0, #7
 800258c:	b342      	cbz	r2, 80025e0 <memchr+0x70>
 800258e:	d1f6      	bne.n	800257e <memchr+0xe>
 8002590:	b4f0      	push	{r4, r5, r6, r7}
 8002592:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002596:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800259a:	f022 0407 	bic.w	r4, r2, #7
 800259e:	f07f 0700 	mvns.w	r7, #0
 80025a2:	2300      	movs	r3, #0
 80025a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80025a8:	3c08      	subs	r4, #8
 80025aa:	ea85 0501 	eor.w	r5, r5, r1
 80025ae:	ea86 0601 	eor.w	r6, r6, r1
 80025b2:	fa85 f547 	uadd8	r5, r5, r7
 80025b6:	faa3 f587 	sel	r5, r3, r7
 80025ba:	fa86 f647 	uadd8	r6, r6, r7
 80025be:	faa5 f687 	sel	r6, r5, r7
 80025c2:	b98e      	cbnz	r6, 80025e8 <memchr+0x78>
 80025c4:	d1ee      	bne.n	80025a4 <memchr+0x34>
 80025c6:	bcf0      	pop	{r4, r5, r6, r7}
 80025c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80025cc:	f002 0207 	and.w	r2, r2, #7
 80025d0:	b132      	cbz	r2, 80025e0 <memchr+0x70>
 80025d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80025d6:	3a01      	subs	r2, #1
 80025d8:	ea83 0301 	eor.w	r3, r3, r1
 80025dc:	b113      	cbz	r3, 80025e4 <memchr+0x74>
 80025de:	d1f8      	bne.n	80025d2 <memchr+0x62>
 80025e0:	2000      	movs	r0, #0
 80025e2:	4770      	bx	lr
 80025e4:	3801      	subs	r0, #1
 80025e6:	4770      	bx	lr
 80025e8:	2d00      	cmp	r5, #0
 80025ea:	bf06      	itte	eq
 80025ec:	4635      	moveq	r5, r6
 80025ee:	3803      	subeq	r0, #3
 80025f0:	3807      	subne	r0, #7
 80025f2:	f015 0f01 	tst.w	r5, #1
 80025f6:	d107      	bne.n	8002608 <memchr+0x98>
 80025f8:	3001      	adds	r0, #1
 80025fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80025fe:	bf02      	ittt	eq
 8002600:	3001      	addeq	r0, #1
 8002602:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8002606:	3001      	addeq	r0, #1
 8002608:	bcf0      	pop	{r4, r5, r6, r7}
 800260a:	3801      	subs	r0, #1
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop

08002610 <memcpy>:
 8002610:	4684      	mov	ip, r0
 8002612:	ea41 0300 	orr.w	r3, r1, r0
 8002616:	f013 0303 	ands.w	r3, r3, #3
 800261a:	d16d      	bne.n	80026f8 <memcpy+0xe8>
 800261c:	3a40      	subs	r2, #64	@ 0x40
 800261e:	d341      	bcc.n	80026a4 <memcpy+0x94>
 8002620:	f851 3b04 	ldr.w	r3, [r1], #4
 8002624:	f840 3b04 	str.w	r3, [r0], #4
 8002628:	f851 3b04 	ldr.w	r3, [r1], #4
 800262c:	f840 3b04 	str.w	r3, [r0], #4
 8002630:	f851 3b04 	ldr.w	r3, [r1], #4
 8002634:	f840 3b04 	str.w	r3, [r0], #4
 8002638:	f851 3b04 	ldr.w	r3, [r1], #4
 800263c:	f840 3b04 	str.w	r3, [r0], #4
 8002640:	f851 3b04 	ldr.w	r3, [r1], #4
 8002644:	f840 3b04 	str.w	r3, [r0], #4
 8002648:	f851 3b04 	ldr.w	r3, [r1], #4
 800264c:	f840 3b04 	str.w	r3, [r0], #4
 8002650:	f851 3b04 	ldr.w	r3, [r1], #4
 8002654:	f840 3b04 	str.w	r3, [r0], #4
 8002658:	f851 3b04 	ldr.w	r3, [r1], #4
 800265c:	f840 3b04 	str.w	r3, [r0], #4
 8002660:	f851 3b04 	ldr.w	r3, [r1], #4
 8002664:	f840 3b04 	str.w	r3, [r0], #4
 8002668:	f851 3b04 	ldr.w	r3, [r1], #4
 800266c:	f840 3b04 	str.w	r3, [r0], #4
 8002670:	f851 3b04 	ldr.w	r3, [r1], #4
 8002674:	f840 3b04 	str.w	r3, [r0], #4
 8002678:	f851 3b04 	ldr.w	r3, [r1], #4
 800267c:	f840 3b04 	str.w	r3, [r0], #4
 8002680:	f851 3b04 	ldr.w	r3, [r1], #4
 8002684:	f840 3b04 	str.w	r3, [r0], #4
 8002688:	f851 3b04 	ldr.w	r3, [r1], #4
 800268c:	f840 3b04 	str.w	r3, [r0], #4
 8002690:	f851 3b04 	ldr.w	r3, [r1], #4
 8002694:	f840 3b04 	str.w	r3, [r0], #4
 8002698:	f851 3b04 	ldr.w	r3, [r1], #4
 800269c:	f840 3b04 	str.w	r3, [r0], #4
 80026a0:	3a40      	subs	r2, #64	@ 0x40
 80026a2:	d2bd      	bcs.n	8002620 <memcpy+0x10>
 80026a4:	3230      	adds	r2, #48	@ 0x30
 80026a6:	d311      	bcc.n	80026cc <memcpy+0xbc>
 80026a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80026ac:	f840 3b04 	str.w	r3, [r0], #4
 80026b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80026b4:	f840 3b04 	str.w	r3, [r0], #4
 80026b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80026bc:	f840 3b04 	str.w	r3, [r0], #4
 80026c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80026c4:	f840 3b04 	str.w	r3, [r0], #4
 80026c8:	3a10      	subs	r2, #16
 80026ca:	d2ed      	bcs.n	80026a8 <memcpy+0x98>
 80026cc:	320c      	adds	r2, #12
 80026ce:	d305      	bcc.n	80026dc <memcpy+0xcc>
 80026d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80026d4:	f840 3b04 	str.w	r3, [r0], #4
 80026d8:	3a04      	subs	r2, #4
 80026da:	d2f9      	bcs.n	80026d0 <memcpy+0xc0>
 80026dc:	3204      	adds	r2, #4
 80026de:	d008      	beq.n	80026f2 <memcpy+0xe2>
 80026e0:	07d2      	lsls	r2, r2, #31
 80026e2:	bf1c      	itt	ne
 80026e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80026e8:	f800 3b01 	strbne.w	r3, [r0], #1
 80026ec:	d301      	bcc.n	80026f2 <memcpy+0xe2>
 80026ee:	880b      	ldrh	r3, [r1, #0]
 80026f0:	8003      	strh	r3, [r0, #0]
 80026f2:	4660      	mov	r0, ip
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	2a08      	cmp	r2, #8
 80026fa:	d313      	bcc.n	8002724 <memcpy+0x114>
 80026fc:	078b      	lsls	r3, r1, #30
 80026fe:	d08d      	beq.n	800261c <memcpy+0xc>
 8002700:	f010 0303 	ands.w	r3, r0, #3
 8002704:	d08a      	beq.n	800261c <memcpy+0xc>
 8002706:	f1c3 0304 	rsb	r3, r3, #4
 800270a:	1ad2      	subs	r2, r2, r3
 800270c:	07db      	lsls	r3, r3, #31
 800270e:	bf1c      	itt	ne
 8002710:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8002714:	f800 3b01 	strbne.w	r3, [r0], #1
 8002718:	d380      	bcc.n	800261c <memcpy+0xc>
 800271a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800271e:	f820 3b02 	strh.w	r3, [r0], #2
 8002722:	e77b      	b.n	800261c <memcpy+0xc>
 8002724:	3a04      	subs	r2, #4
 8002726:	d3d9      	bcc.n	80026dc <memcpy+0xcc>
 8002728:	3a01      	subs	r2, #1
 800272a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800272e:	f800 3b01 	strb.w	r3, [r0], #1
 8002732:	d2f9      	bcs.n	8002728 <memcpy+0x118>
 8002734:	780b      	ldrb	r3, [r1, #0]
 8002736:	7003      	strb	r3, [r0, #0]
 8002738:	784b      	ldrb	r3, [r1, #1]
 800273a:	7043      	strb	r3, [r0, #1]
 800273c:	788b      	ldrb	r3, [r1, #2]
 800273e:	7083      	strb	r3, [r0, #2]
 8002740:	4660      	mov	r0, ip
 8002742:	4770      	bx	lr

08002744 <_realloc_r>:
 8002744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002748:	4614      	mov	r4, r2
 800274a:	b349      	cbz	r1, 80027a0 <_realloc_r+0x5c>
 800274c:	b1ea      	cbz	r2, 800278a <_realloc_r+0x46>
 800274e:	4606      	mov	r6, r0
 8002750:	460d      	mov	r5, r1
 8002752:	f000 f8dd 	bl	8002910 <_malloc_usable_size_r>
 8002756:	4284      	cmp	r4, r0
 8002758:	4607      	mov	r7, r0
 800275a:	d802      	bhi.n	8002762 <_realloc_r+0x1e>
 800275c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002760:	d81a      	bhi.n	8002798 <_realloc_r+0x54>
 8002762:	4621      	mov	r1, r4
 8002764:	4630      	mov	r0, r6
 8002766:	f7fe fa11 	bl	8000b8c <_malloc_r>
 800276a:	4680      	mov	r8, r0
 800276c:	b178      	cbz	r0, 800278e <_realloc_r+0x4a>
 800276e:	42bc      	cmp	r4, r7
 8002770:	4622      	mov	r2, r4
 8002772:	4629      	mov	r1, r5
 8002774:	bf28      	it	cs
 8002776:	463a      	movcs	r2, r7
 8002778:	f7ff ff4a 	bl	8002610 <memcpy>
 800277c:	4630      	mov	r0, r6
 800277e:	4629      	mov	r1, r5
 8002780:	f7fe fe32 	bl	80013e8 <_free_r>
 8002784:	4640      	mov	r0, r8
 8002786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800278a:	f7fe fe2d 	bl	80013e8 <_free_r>
 800278e:	f04f 0800 	mov.w	r8, #0
 8002792:	4640      	mov	r0, r8
 8002794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002798:	46a8      	mov	r8, r5
 800279a:	4640      	mov	r0, r8
 800279c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027a4:	4611      	mov	r1, r2
 80027a6:	f7fe b9f1 	b.w	8000b8c <_malloc_r>
 80027aa:	bf00      	nop

080027ac <__smakebuf_r>:
 80027ac:	b570      	push	{r4, r5, r6, lr}
 80027ae:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80027b2:	460c      	mov	r4, r1
 80027b4:	0799      	lsls	r1, r3, #30
 80027b6:	b096      	sub	sp, #88	@ 0x58
 80027b8:	d507      	bpl.n	80027ca <__smakebuf_r+0x1e>
 80027ba:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80027be:	2201      	movs	r2, #1
 80027c0:	e9c4 3204 	strd	r3, r2, [r4, #16]
 80027c4:	6023      	str	r3, [r4, #0]
 80027c6:	b016      	add	sp, #88	@ 0x58
 80027c8:	bd70      	pop	{r4, r5, r6, pc}
 80027ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027ce:	2900      	cmp	r1, #0
 80027d0:	4605      	mov	r5, r0
 80027d2:	db29      	blt.n	8002828 <__smakebuf_r+0x7c>
 80027d4:	466a      	mov	r2, sp
 80027d6:	f000 f873 	bl	80028c0 <_fstat_r>
 80027da:	2800      	cmp	r0, #0
 80027dc:	db22      	blt.n	8002824 <__smakebuf_r+0x78>
 80027de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80027e2:	4628      	mov	r0, r5
 80027e4:	9e01      	ldr	r6, [sp, #4]
 80027e6:	f7fe f9d1 	bl	8000b8c <_malloc_r>
 80027ea:	b388      	cbz	r0, 8002850 <__smakebuf_r+0xa4>
 80027ec:	89a3      	ldrh	r3, [r4, #12]
 80027ee:	6020      	str	r0, [r4, #0]
 80027f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027f4:	f406 4670 	and.w	r6, r6, #61440	@ 0xf000
 80027f8:	81a3      	strh	r3, [r4, #12]
 80027fa:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
 80027fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002802:	e9c4 0304 	strd	r0, r3, [r4, #16]
 8002806:	d1de      	bne.n	80027c6 <__smakebuf_r+0x1a>
 8002808:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800280c:	4628      	mov	r0, r5
 800280e:	f000 f86d 	bl	80028ec <_isatty_r>
 8002812:	2800      	cmp	r0, #0
 8002814:	d0d7      	beq.n	80027c6 <__smakebuf_r+0x1a>
 8002816:	89a3      	ldrh	r3, [r4, #12]
 8002818:	f023 0303 	bic.w	r3, r3, #3
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	81a3      	strh	r3, [r4, #12]
 8002822:	e7d0      	b.n	80027c6 <__smakebuf_r+0x1a>
 8002824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002828:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800282c:	bf14      	ite	ne
 800282e:	2640      	movne	r6, #64	@ 0x40
 8002830:	f44f 6680 	moveq.w	r6, #1024	@ 0x400
 8002834:	4631      	mov	r1, r6
 8002836:	4628      	mov	r0, r5
 8002838:	f7fe f9a8 	bl	8000b8c <_malloc_r>
 800283c:	b140      	cbz	r0, 8002850 <__smakebuf_r+0xa4>
 800283e:	89a3      	ldrh	r3, [r4, #12]
 8002840:	6020      	str	r0, [r4, #0]
 8002842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002846:	e9c4 0604 	strd	r0, r6, [r4, #16]
 800284a:	81a3      	strh	r3, [r4, #12]
 800284c:	b016      	add	sp, #88	@ 0x58
 800284e:	bd70      	pop	{r4, r5, r6, pc}
 8002850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002854:	059a      	lsls	r2, r3, #22
 8002856:	d4b6      	bmi.n	80027c6 <__smakebuf_r+0x1a>
 8002858:	f023 0303 	bic.w	r3, r3, #3
 800285c:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	2101      	movs	r1, #1
 8002866:	e9c4 2104 	strd	r2, r1, [r4, #16]
 800286a:	81a3      	strh	r3, [r4, #12]
 800286c:	6022      	str	r2, [r4, #0]
 800286e:	e7aa      	b.n	80027c6 <__smakebuf_r+0x1a>

08002870 <__swhatbuf_r>:
 8002870:	b570      	push	{r4, r5, r6, lr}
 8002872:	460c      	mov	r4, r1
 8002874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002878:	2900      	cmp	r1, #0
 800287a:	b096      	sub	sp, #88	@ 0x58
 800287c:	4615      	mov	r5, r2
 800287e:	461e      	mov	r6, r3
 8002880:	db0f      	blt.n	80028a2 <__swhatbuf_r+0x32>
 8002882:	466a      	mov	r2, sp
 8002884:	f000 f81c 	bl	80028c0 <_fstat_r>
 8002888:	2800      	cmp	r0, #0
 800288a:	db0a      	blt.n	80028a2 <__swhatbuf_r+0x32>
 800288c:	9b01      	ldr	r3, [sp, #4]
 800288e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002892:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8002896:	fab3 f383 	clz	r3, r3
 800289a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	e008      	b.n	80028b4 <__swhatbuf_r+0x44>
 80028a2:	89a2      	ldrh	r2, [r4, #12]
 80028a4:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	bf14      	ite	ne
 80028ae:	2240      	movne	r2, #64	@ 0x40
 80028b0:	f44f 6280 	moveq.w	r2, #1024	@ 0x400
 80028b4:	2000      	movs	r0, #0
 80028b6:	6033      	str	r3, [r6, #0]
 80028b8:	602a      	str	r2, [r5, #0]
 80028ba:	b016      	add	sp, #88	@ 0x58
 80028bc:	bd70      	pop	{r4, r5, r6, pc}
 80028be:	bf00      	nop

080028c0 <_fstat_r>:
 80028c0:	b570      	push	{r4, r5, r6, lr}
 80028c2:	460c      	mov	r4, r1
 80028c4:	4d08      	ldr	r5, [pc, #32]	@ (80028e8 <_fstat_r+0x28>)
 80028c6:	4603      	mov	r3, r0
 80028c8:	2600      	movs	r6, #0
 80028ca:	4620      	mov	r0, r4
 80028cc:	4611      	mov	r1, r2
 80028ce:	461c      	mov	r4, r3
 80028d0:	602e      	str	r6, [r5, #0]
 80028d2:	f000 f82d 	bl	8002930 <_fstat>
 80028d6:	1c43      	adds	r3, r0, #1
 80028d8:	d000      	beq.n	80028dc <_fstat_r+0x1c>
 80028da:	bd70      	pop	{r4, r5, r6, pc}
 80028dc:	682b      	ldr	r3, [r5, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0fb      	beq.n	80028da <_fstat_r+0x1a>
 80028e2:	6023      	str	r3, [r4, #0]
 80028e4:	bd70      	pop	{r4, r5, r6, pc}
 80028e6:	bf00      	nop
 80028e8:	200002f4 	.word	0x200002f4

080028ec <_isatty_r>:
 80028ec:	b538      	push	{r3, r4, r5, lr}
 80028ee:	4d07      	ldr	r5, [pc, #28]	@ (800290c <_isatty_r+0x20>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	4604      	mov	r4, r0
 80028f4:	4608      	mov	r0, r1
 80028f6:	602a      	str	r2, [r5, #0]
 80028f8:	f000 f832 	bl	8002960 <_isatty>
 80028fc:	1c43      	adds	r3, r0, #1
 80028fe:	d000      	beq.n	8002902 <_isatty_r+0x16>
 8002900:	bd38      	pop	{r3, r4, r5, pc}
 8002902:	682b      	ldr	r3, [r5, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0fb      	beq.n	8002900 <_isatty_r+0x14>
 8002908:	6023      	str	r3, [r4, #0]
 800290a:	bd38      	pop	{r3, r4, r5, pc}
 800290c:	200002f4 	.word	0x200002f4

08002910 <_malloc_usable_size_r>:
 8002910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002914:	1f18      	subs	r0, r3, #4
 8002916:	2b00      	cmp	r3, #0
 8002918:	bfbc      	itt	lt
 800291a:	580b      	ldrlt	r3, [r1, r0]
 800291c:	18c0      	addlt	r0, r0, r3
 800291e:	4770      	bx	lr

08002920 <_close>:
 8002920:	4b02      	ldr	r3, [pc, #8]	@ (800292c <_close+0xc>)
 8002922:	2258      	movs	r2, #88	@ 0x58
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	f04f 30ff 	mov.w	r0, #4294967295
 800292a:	4770      	bx	lr
 800292c:	200002f4 	.word	0x200002f4

08002930 <_fstat>:
 8002930:	4b02      	ldr	r3, [pc, #8]	@ (800293c <_fstat+0xc>)
 8002932:	2258      	movs	r2, #88	@ 0x58
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	f04f 30ff 	mov.w	r0, #4294967295
 800293a:	4770      	bx	lr
 800293c:	200002f4 	.word	0x200002f4

08002940 <_getpid>:
 8002940:	4b02      	ldr	r3, [pc, #8]	@ (800294c <_getpid+0xc>)
 8002942:	2258      	movs	r2, #88	@ 0x58
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	f04f 30ff 	mov.w	r0, #4294967295
 800294a:	4770      	bx	lr
 800294c:	200002f4 	.word	0x200002f4

08002950 <_gettimeofday>:
 8002950:	4b02      	ldr	r3, [pc, #8]	@ (800295c <_gettimeofday+0xc>)
 8002952:	2258      	movs	r2, #88	@ 0x58
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	f04f 30ff 	mov.w	r0, #4294967295
 800295a:	4770      	bx	lr
 800295c:	200002f4 	.word	0x200002f4

08002960 <_isatty>:
 8002960:	4b02      	ldr	r3, [pc, #8]	@ (800296c <_isatty+0xc>)
 8002962:	2258      	movs	r2, #88	@ 0x58
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	2000      	movs	r0, #0
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	200002f4 	.word	0x200002f4

08002970 <_kill>:
 8002970:	4b02      	ldr	r3, [pc, #8]	@ (800297c <_kill+0xc>)
 8002972:	2258      	movs	r2, #88	@ 0x58
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	f04f 30ff 	mov.w	r0, #4294967295
 800297a:	4770      	bx	lr
 800297c:	200002f4 	.word	0x200002f4

08002980 <_lseek>:
 8002980:	4b02      	ldr	r3, [pc, #8]	@ (800298c <_lseek+0xc>)
 8002982:	2258      	movs	r2, #88	@ 0x58
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	f04f 30ff 	mov.w	r0, #4294967295
 800298a:	4770      	bx	lr
 800298c:	200002f4 	.word	0x200002f4

08002990 <_read>:
 8002990:	4b02      	ldr	r3, [pc, #8]	@ (800299c <_read+0xc>)
 8002992:	2258      	movs	r2, #88	@ 0x58
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	f04f 30ff 	mov.w	r0, #4294967295
 800299a:	4770      	bx	lr
 800299c:	200002f4 	.word	0x200002f4

080029a0 <_write>:
 80029a0:	4b02      	ldr	r3, [pc, #8]	@ (80029ac <_write+0xc>)
 80029a2:	2258      	movs	r2, #88	@ 0x58
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	f04f 30ff 	mov.w	r0, #4294967295
 80029aa:	4770      	bx	lr
 80029ac:	200002f4 	.word	0x200002f4

080029b0 <_exit>:
 80029b0:	e7fe      	b.n	80029b0 <_exit>
 80029b2:	bf00      	nop

080029b4 <__do_global_dtors_aux>:
 80029b4:	b510      	push	{r4, lr}
 80029b6:	4c05      	ldr	r4, [pc, #20]	@ (80029cc <__do_global_dtors_aux+0x18>)
 80029b8:	7823      	ldrb	r3, [r4, #0]
 80029ba:	b933      	cbnz	r3, 80029ca <__do_global_dtors_aux+0x16>
 80029bc:	4b04      	ldr	r3, [pc, #16]	@ (80029d0 <__do_global_dtors_aux+0x1c>)
 80029be:	b113      	cbz	r3, 80029c6 <__do_global_dtors_aux+0x12>
 80029c0:	4804      	ldr	r0, [pc, #16]	@ (80029d4 <__do_global_dtors_aux+0x20>)
 80029c2:	f3af 8000 	nop.w
 80029c6:	2301      	movs	r3, #1
 80029c8:	7023      	strb	r3, [r4, #0]
 80029ca:	bd10      	pop	{r4, pc}
 80029cc:	20000315 	.word	0x20000315
 80029d0:	00000000 	.word	0x00000000
 80029d4:	080057bc 	.word	0x080057bc

080029d8 <frame_dummy>:
 80029d8:	b508      	push	{r3, lr}
 80029da:	4b03      	ldr	r3, [pc, #12]	@ (80029e8 <frame_dummy+0x10>)
 80029dc:	b11b      	cbz	r3, 80029e6 <frame_dummy+0xe>
 80029de:	4903      	ldr	r1, [pc, #12]	@ (80029ec <frame_dummy+0x14>)
 80029e0:	4803      	ldr	r0, [pc, #12]	@ (80029f0 <frame_dummy+0x18>)
 80029e2:	f3af 8000 	nop.w
 80029e6:	bd08      	pop	{r3, pc}
 80029e8:	00000000 	.word	0x00000000
 80029ec:	20000318 	.word	0x20000318
 80029f0:	080057bc 	.word	0x080057bc

080029f4 <handle>:
/// This function will handle the 'p' command send from the capture board.
/// It returns the squared version of the scmd given.
/// It does this in approximately equal time, which allows us to see clear
/// differences between different scmd values.
uint8_t handle(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 80029f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029f8:	b091      	sub	sp, #68	@ 0x44
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	603b      	str	r3, [r7, #0]
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
 8002a02:	460b      	mov	r3, r1
 8002a04:	71bb      	strb	r3, [r7, #6]
 8002a06:	4613      	mov	r3, r2
 8002a08:	717b      	strb	r3, [r7, #5]
 8002a0a:	466b      	mov	r3, sp
 8002a0c:	461e      	mov	r6, r3
  volatile uint8_t result = 0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  int arr[4] = {7,2,2};
 8002a14:	f107 0310 	add.w	r3, r7, #16
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	2307      	movs	r3, #7
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	2302      	movs	r3, #2
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	61bb      	str	r3, [r7, #24]
  int return_string_len =  ((arr[1] + 1) * arr[0]) + 1;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	3301      	adds	r3, #1
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	fb02 f303 	mul.w	r3, r2, r3
 8002a38:	3301      	adds	r3, #1
 8002a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  char string[return_string_len];
 8002a3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a3e:	1e4b      	subs	r3, r1, #1
 8002a40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a42:	460a      	mov	r2, r1
 8002a44:	2300      	movs	r3, #0
 8002a46:	4690      	mov	r8, r2
 8002a48:	4699      	mov	r9, r3
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a5e:	460a      	mov	r2, r1
 8002a60:	2300      	movs	r3, #0
 8002a62:	4614      	mov	r4, r2
 8002a64:	461d      	mov	r5, r3
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	00eb      	lsls	r3, r5, #3
 8002a70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a74:	00e2      	lsls	r2, r4, #3
 8002a76:	460b      	mov	r3, r1
 8002a78:	3307      	adds	r3, #7
 8002a7a:	08db      	lsrs	r3, r3, #3
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	ebad 0d03 	sub.w	sp, sp, r3
 8002a82:	466b      	mov	r3, sp
 8002a84:	3300      	adds	r3, #0
 8002a86:	627b      	str	r3, [r7, #36]	@ 0x24

  // expects an input of byte lenght, of number neurons in first layer#
  for(int x = 0; x < arr[0]; x++){
 8002a88:	2300      	movs	r3, #0
 8002a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a8c:	e011      	b.n	8002ab2 <handle+0xbe>
      net->layers[0].neurons[x].a = (unsigned char)(buf[x]);
 8002a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	18d1      	adds	r1, r2, r3
 8002a94:	4b50      	ldr	r3, [pc, #320]	@ (8002bd8 <handle+0x1e4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	6858      	ldr	r0, [r3, #4]
 8002a9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4403      	add	r3, r0
 8002aa8:	780a      	ldrb	r2, [r1, #0]
 8002aaa:	725a      	strb	r2, [r3, #9]
  for(int x = 0; x < arr[0]; x++){
 8002aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002aae:	3301      	adds	r3, #1
 8002ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	dbe9      	blt.n	8002a8e <handle+0x9a>
  }
  // char string[] = "Hello";
  for(int x = 0; x < arr[1]; x++){ // Crossing first layer (not input layer)
 8002aba:	2300      	movs	r3, #0
 8002abc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002abe:	e051      	b.n	8002b64 <handle+0x170>
      for(int y = 0;y<arr[0];y++){ // Choose each neuron from input layer, and save it's weight, and set weight of first weight to (x+1) * 10, in essence this is only for basic testing, and essentialy it sends back S1,S2,S3,S4,S5...0 where SX is weight of input X-th connection, of x-th neuron   
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ac4:	e033      	b.n	8002b2e <handle+0x13a>
          if(y == 0){
 8002ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d116      	bne.n	8002afa <handle+0x106>
              net->layers[0].neurons[y].weights[x] = (unsigned char)((x+1) * 10);
 8002acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ace:	3301      	adds	r3, #1
 8002ad0:	b2d8      	uxtb	r0, r3
 8002ad2:	4b41      	ldr	r3, [pc, #260]	@ (8002bd8 <handle+0x1e4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	6859      	ldr	r1, [r3, #4]
 8002ada:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002adc:	4613      	mov	r3, r2
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aea:	4413      	add	r3, r2
 8002aec:	4602      	mov	r2, r0
 8002aee:	4611      	mov	r1, r2
 8002af0:	0089      	lsls	r1, r1, #2
 8002af2:	440a      	add	r2, r1
 8002af4:	0052      	lsls	r2, r2, #1
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]
          }
          string[(x*(arr[0]+1)) + y] = net->layers[0].neurons[y].weights[x];
 8002afa:	4b37      	ldr	r3, [pc, #220]	@ (8002bd8 <handle+0x1e4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	6859      	ldr	r1, [r3, #4]
 8002b02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b04:	4613      	mov	r3, r2
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	4413      	add	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b12:	441a      	add	r2, r3
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	3301      	adds	r3, #1
 8002b18:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b1a:	fb03 f101 	mul.w	r1, r3, r1
 8002b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b20:	440b      	add	r3, r1
 8002b22:	7811      	ldrb	r1, [r2, #0]
 8002b24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b26:	54d1      	strb	r1, [r2, r3]
      for(int y = 0;y<arr[0];y++){ // Choose each neuron from input layer, and save it's weight, and set weight of first weight to (x+1) * 10, in essence this is only for basic testing, and essentialy it sends back S1,S2,S3,S4,S5...0 where SX is weight of input X-th connection, of x-th neuron   
 8002b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b32:	429a      	cmp	r2, r3
 8002b34:	dbc7      	blt.n	8002ac6 <handle+0xd2>
      }
      string[(x*(arr[0]+1)) + arr[0]] = net->layers[0].neurons[x].bias;
 8002b36:	4b28      	ldr	r3, [pc, #160]	@ (8002bd8 <handle+0x1e4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	6859      	ldr	r1, [r3, #4]
 8002b3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b40:	4613      	mov	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	18ca      	adds	r2, r1, r3
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b50:	fb03 f101 	mul.w	r1, r3, r1
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	440b      	add	r3, r1
 8002b58:	7a11      	ldrb	r1, [r2, #8]
 8002b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b5c:	54d1      	strb	r1, [r2, r3]
  for(int x = 0; x < arr[1]; x++){ // Crossing first layer (not input layer)
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b60:	3301      	adds	r3, #1
 8002b62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	dba9      	blt.n	8002ac0 <handle+0xcc>
  }
  string[return_string_len - 1] = 0;
 8002b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b72:	2100      	movs	r1, #0
 8002b74:	54d1      	strb	r1, [r2, r3]


  // Start measurement.
  trigger_high();
 8002b76:	f000 fe15 	bl	80037a4 <trigger_high>
  for(int x = 0;x<100;x++){
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b7e:	e003      	b.n	8002b88 <handle+0x194>
      __asm__("nop");
 8002b80:	bf00      	nop
  for(int x = 0;x<100;x++){
 8002b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b84:	3301      	adds	r3, #1
 8002b86:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8a:	2b63      	cmp	r3, #99	@ 0x63
 8002b8c:	ddf8      	ble.n	8002b80 <handle+0x18c>
  }

  forward(*net,0);
 8002b8e:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <handle+0x1e4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2200      	movs	r2, #0
 8002b94:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002b98:	f000 f94e 	bl	8002e38 <forward>
  //string[return_string_len - 1] = 0;
  // Stop measurement.
  //for(int x = 0;x<100;x++){
   //   __asm__("nop");
  //}
  trigger_low();
 8002b9c:	f000 fe0d 	bl	80037ba <trigger_low>

  // For now we can just return the result back to the user.
  result = scmd*scmd;
 8002ba0:	79ba      	ldrb	r2, [r7, #6]
 8002ba2:	79bb      	ldrb	r3, [r7, #6]
 8002ba4:	fb12 f303 	smulbb	r3, r2, r3
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t buff[1] = { result };
 8002bae:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	733b      	strb	r3, [r7, #12]
  uint8_t return_len = return_string_len;
 8002bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  simpleserial_put('r', return_len, string);
 8002bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	2072      	movs	r0, #114	@ 0x72
 8002bc6:	f000 fc7f 	bl	80034c8 <simpleserial_put>

  return 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	46b5      	mov	sp, r6
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3744      	adds	r7, #68	@ 0x44
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bd8:	2000006c 	.word	0x2000006c

08002bdc <main>:

int main(void) {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
    // Setup the specific chipset.
  platform_init();
 8002be2:	f000 fd11 	bl	8003608 <platform_init>
  // Setup serial communication line.
  init_uart();
 8002be6:	f000 fd61 	bl	80036ac <init_uart>
  // Setup measurement trigger.
  trigger_setup();
 8002bea:	f000 fdaf 	bl	800374c <trigger_setup>

  simpleserial_init();
 8002bee:	f000 fadf 	bl	80031b0 <simpleserial_init>

  // Insert your handlers here.
  simpleserial_addcmd('p', 16, handle);
 8002bf2:	4a0d      	ldr	r2, [pc, #52]	@ (8002c28 <main+0x4c>)
 8002bf4:	2110      	movs	r1, #16
 8002bf6:	2070      	movs	r0, #112	@ 0x70
 8002bf8:	f000 faec 	bl	80031d4 <simpleserial_addcmd>

  arr[0] = 7;
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002c2c <main+0x50>)
 8002bfe:	2207      	movs	r2, #7
 8002c00:	601a      	str	r2, [r3, #0]
  arr[1] = 2;
 8002c02:	4b0a      	ldr	r3, [pc, #40]	@ (8002c2c <main+0x50>)
 8002c04:	2202      	movs	r2, #2
 8002c06:	605a      	str	r2, [r3, #4]
  arr[2] = 2;
 8002c08:	4b08      	ldr	r3, [pc, #32]	@ (8002c2c <main+0x50>)
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	609a      	str	r2, [r3, #8]
  network ann = construct_quantized_network2(3,arr);
 8002c0e:	463b      	mov	r3, r7
 8002c10:	4a06      	ldr	r2, [pc, #24]	@ (8002c2c <main+0x50>)
 8002c12:	2103      	movs	r1, #3
 8002c14:	4618      	mov	r0, r3
 8002c16:	f000 f870 	bl	8002cfa <construct_quantized_network2>
  net = &ann;
 8002c1a:	4a05      	ldr	r2, [pc, #20]	@ (8002c30 <main+0x54>)
 8002c1c:	463b      	mov	r3, r7
 8002c1e:	6013      	str	r3, [r2, #0]
  // What for the capture board to send commands and handle them.
  while (1)
    simpleserial_get();
 8002c20:	f000 fb1e 	bl	8003260 <simpleserial_get>
 8002c24:	e7fc      	b.n	8002c20 <main+0x44>
 8002c26:	bf00      	nop
 8002c28:	080029f5 	.word	0x080029f5
 8002c2c:	20000000 	.word	0x20000000
 8002c30:	2000006c 	.word	0x2000006c

08002c34 <quantized_create_neuron>:

//Generating ANN functions
/**
 * Create quantized neuron (weights, biases and activation functions), while also filling random values to it's weight for NEXT LAYER connections
 */
neuron quantized_create_neuron(int num_out_weights){
 8002c34:	b590      	push	{r4, r7, lr}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
    neuron new_neuron;
    new_neuron.bias = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	743b      	strb	r3, [r7, #16]
    new_neuron.a = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	747b      	strb	r3, [r7, #17]
    new_neuron.weights = (unsigned char*) malloc(num_out_weights * sizeof(unsigned char));
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fd ff6b 	bl	8000b24 <malloc>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	60fb      	str	r3, [r7, #12]
    new_neuron.num_weights = num_out_weights;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	60bb      	str	r3, [r7, #8]

    for (int i=0; i<num_out_weights; i++){
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	e007      	b.n	8002c6c <quantized_create_neuron+0x38>
        //new_neuron.weights[i] = (unsigned char)(rand() / (RAND_MAX / ( QUANTIZED_MAX - QUANTIZED_MIN + 2)));
        //new_neuron.weights[i] = (unsigned char)(rand() % 256);
        new_neuron.weights[i] = 0;
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	4413      	add	r3, r2
 8002c62:	2200      	movs	r2, #0
 8002c64:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<num_out_weights; i++){
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	dbf3      	blt.n	8002c5c <quantized_create_neuron+0x28>
    }
    return new_neuron;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	461c      	mov	r4, r3
 8002c78:	f107 0308 	add.w	r3, r7, #8
 8002c7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	371c      	adds	r7, #28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd90      	pop	{r4, r7, pc}

08002c8c <create_layer>:
/**
 * Create layer, containing all neccesary nerons
 */
layer create_layer(int num_neurons){
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
    layer lay;
    lay.num_neurons = num_neurons;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	60bb      	str	r3, [r7, #8]
    lay.neurons = (neuron*) malloc(num_neurons * sizeof(neuron));
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fd ff3d 	bl	8000b24 <malloc>
 8002caa:	4603      	mov	r3, r0
 8002cac:	60fb      	str	r3, [r7, #12]
    return lay;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	f107 0308 	add.w	r3, r7, #8
 8002cb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002cba:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <create_network>:
/**
 * Create whole network, containing all neccesary layers
 */
network create_network(int num_layers){
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6039      	str	r1, [r7, #0]
    network net;
    net.num_layers = num_layers;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	60bb      	str	r3, [r7, #8]
    net.layers = (layer*) malloc(num_layers * sizeof(layer));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fd ff23 	bl	8000b24 <malloc>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	60fb      	str	r3, [r7, #12]
    return net;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	f107 0308 	add.w	r3, r7, #8
 8002cea:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002cee:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <construct_quantized_network2>:
/**
 * Initialize/allocate whole network
 */
network construct_quantized_network2(int num_layers, int *num_neurons) {
 8002cfa:	b590      	push	{r4, r7, lr}
 8002cfc:	b08b      	sub	sp, #44	@ 0x2c
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6178      	str	r0, [r7, #20]
 8002d02:	6139      	str	r1, [r7, #16]
 8002d04:	60fa      	str	r2, [r7, #12]
    srand(time(NULL)); 
 8002d06:	2000      	movs	r0, #0
 8002d08:	f7fe fa6e 	bl	80011e8 <time>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4613      	mov	r3, r2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fd ffc2 	bl	8000c9c <srand>
    network net = create_network(num_layers);
 8002d18:	f107 0318 	add.w	r3, r7, #24
 8002d1c:	6939      	ldr	r1, [r7, #16]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff ffd1 	bl	8002cc6 <create_network>
    int i, j;
    for (i=0; i<num_layers; i++){
 8002d24:	2300      	movs	r3, #0
 8002d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d28:	e015      	b.n	8002d56 <construct_quantized_network2+0x5c>
        net.layers[i] = create_layer(num_neurons[i]);
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4413      	add	r3, r2
 8002d32:	6819      	ldr	r1, [r3, #0]
 8002d34:	69fa      	ldr	r2, [r7, #28]
 8002d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	18d4      	adds	r4, r2, r3
 8002d3c:	463b      	mov	r3, r7
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff ffa4 	bl	8002c8c <create_layer>
 8002d44:	4622      	mov	r2, r4
 8002d46:	463b      	mov	r3, r7
 8002d48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d4c:	e882 0003 	stmia.w	r2, {r0, r1}
    for (i=0; i<num_layers; i++){
 8002d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d52:	3301      	adds	r3, #1
 8002d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	dbe5      	blt.n	8002d2a <construct_quantized_network2+0x30>
    }
    // For each layer create neurons with number of weights eqaual to the number of neurons in the following layer,
    // wherein the last layer is the output layer
    for (i=1; i<num_layers; i++){
 8002d5e:	2301      	movs	r3, #1
 8002d60:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d62:	e030      	b.n	8002dc6 <construct_quantized_network2+0xcc>
        for (j=0; j<net.layers[i - 1].num_neurons; j++){
 8002d64:	2300      	movs	r3, #0
 8002d66:	623b      	str	r3, [r7, #32]
 8002d68:	e01f      	b.n	8002daa <construct_quantized_network2+0xb0>
            net.layers[i - 1].neurons[j] = quantized_create_neuron(net.layers[i].num_neurons);
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4413      	add	r3, r2
 8002d72:	6818      	ldr	r0, [r3, #0]
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d78:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	6a3a      	ldr	r2, [r7, #32]
 8002d86:	4613      	mov	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	18cc      	adds	r4, r1, r3
 8002d90:	463b      	mov	r3, r7
 8002d92:	4601      	mov	r1, r0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff ff4d 	bl	8002c34 <quantized_create_neuron>
 8002d9a:	463b      	mov	r3, r7
 8002d9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002da0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        for (j=0; j<net.layers[i - 1].num_neurons; j++){
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	3301      	adds	r3, #1
 8002da8:	623b      	str	r3, [r7, #32]
 8002daa:	69fa      	ldr	r2, [r7, #28]
 8002dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dae:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8002db2:	3b01      	subs	r3, #1
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	4413      	add	r3, r2
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6a3a      	ldr	r2, [r7, #32]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	dbd4      	blt.n	8002d6a <construct_quantized_network2+0x70>
    for (i=1; i<num_layers; i++){
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	dbca      	blt.n	8002d64 <construct_quantized_network2+0x6a>
        }
    }
    for (j=0; j<net.layers[num_layers - 1].num_neurons; j++){// Create neurons for output layer, it's weight should be 0, as they connect to nothing
 8002dce:	2300      	movs	r3, #0
 8002dd0:	623b      	str	r3, [r7, #32]
 8002dd2:	e01a      	b.n	8002e0a <construct_quantized_network2+0x110>
            net.layers[num_layers - 1].neurons[j] = quantized_create_neuron(0);
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	6859      	ldr	r1, [r3, #4]
 8002de4:	6a3a      	ldr	r2, [r7, #32]
 8002de6:	4613      	mov	r3, r2
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	18cc      	adds	r4, r1, r3
 8002df0:	463b      	mov	r3, r7
 8002df2:	2100      	movs	r1, #0
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff1d 	bl	8002c34 <quantized_create_neuron>
 8002dfa:	463b      	mov	r3, r7
 8002dfc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    for (j=0; j<net.layers[num_layers - 1].num_neurons; j++){// Create neurons for output layer, it's weight should be 0, as they connect to nothing
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	3301      	adds	r3, #1
 8002e08:	623b      	str	r3, [r7, #32]
 8002e0a:	69fa      	ldr	r2, [r7, #28]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8002e12:	3b01      	subs	r3, #1
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4413      	add	r3, r2
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6a3a      	ldr	r2, [r7, #32]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	dbd9      	blt.n	8002dd4 <construct_quantized_network2+0xda>
    }
    return net;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	461a      	mov	r2, r3
 8002e24:	f107 0318 	add.w	r3, r7, #24
 8002e28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e2c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002e30:	6978      	ldr	r0, [r7, #20]
 8002e32:	372c      	adds	r7, #44	@ 0x2c
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd90      	pop	{r4, r7, pc}

08002e38 <forward>:
        free(&(net.layers[i].neurons));
    }
    free(&(net.layers));
}

void forward(network net, int dummy_operations){
 8002e38:	b590      	push	{r4, r7, lr}
 8002e3a:	b08d      	sub	sp, #52	@ 0x34
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	f107 0308 	add.w	r3, r7, #8
 8002e42:	e883 0003 	stmia.w	r3, {r0, r1}
 8002e46:	607a      	str	r2, [r7, #4]
    int i, j, k;
    uint8_t result, scmd = 16;
 8002e48:	2310      	movs	r3, #16
 8002e4a:	77fb      	strb	r3, [r7, #31]
    // for each layer
    for (i=1; i<net.num_layers; i++){
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e50:	e0cc      	b.n	8002fec <forward+0x1b4>
        
        // for each neuron in this layer
        for (j=0; j<net.layers[i].num_neurons; j++){   
 8002e52:	2300      	movs	r3, #0
 8002e54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e56:	e0a2      	b.n	8002f9e <forward+0x166>
            int z = net.layers[i].neurons[j].bias;
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	4413      	add	r3, r2
 8002e60:	6859      	ldr	r1, [r3, #4]
 8002e62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e64:	4613      	mov	r3, r2
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	7a1b      	ldrb	r3, [r3, #8]
 8002e70:	623b      	str	r3, [r7, #32]
            // for all neurons on the previous layer
            for (k=0; k<net.layers[i - 1].num_neurons; k++){
 8002e72:	2300      	movs	r3, #0
 8002e74:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e76:	e029      	b.n	8002ecc <forward+0x94>
                //int mult = (int)(net.layers[i-1].neurons[k].weights[j] * net.layers[i-1].neurons[k].a);
                z += (int)(net.layers[i-1].neurons[k].weights[j] * net.layers[i-1].neurons[k].a); // We are looking for THIS MULTIPLICATION
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e7c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8002e80:	3b01      	subs	r3, #1
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	6859      	ldr	r1, [r3, #4]
 8002e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e98:	4413      	add	r3, r2
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea2:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4413      	add	r3, r2
 8002eac:	6859      	ldr	r1, [r3, #4]
 8002eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	7a5b      	ldrb	r3, [r3, #9]
 8002ebc:	fb00 f303 	mul.w	r3, r0, r3
 8002ec0:	6a3a      	ldr	r2, [r7, #32]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	623b      	str	r3, [r7, #32]
            for (k=0; k<net.layers[i - 1].num_neurons; k++){
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	3301      	adds	r3, #1
 8002eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed0:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4413      	add	r3, r2
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	dbca      	blt.n	8002e78 <forward+0x40>
            }
            //get a values
            // REQUINTIZE net.layers[i].neurons[j].a = net.layers[i].neurons[j].z;
            //apply relu
            if(i < net.num_layers-1){ // if we are at last layer use relu AF (this should be to classification MLP)
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	da28      	bge.n	8002f3e <forward+0x106>
                if((z%(QUANTIZED_MAX+1)) > QUANTIZED_POS_MAX){// if the intermediate value is under the treshold (0), set final value of actiovation to 0
 8002eec:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	fb93 f1f2 	sdiv	r1, r3, r2
 8002ef8:	fb01 f202 	mul.w	r2, r1, r2
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	227f      	movs	r2, #127	@ 0x7f
 8002f00:	4293      	cmp	r3, r2
 8002f02:	dd0d      	ble.n	8002f20 <forward+0xe8>
                    net.layers[i].neurons[j].a = 0;
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	6859      	ldr	r1, [r3, #4]
 8002f0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f10:	4613      	mov	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4413      	add	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	725a      	strb	r2, [r3, #9]
 8002f1e:	e03b      	b.n	8002f98 <forward+0x160>
                }
                else{ //, otherwise let it as is
                    net.layers[i].neurons[j].a = (unsigned char)(z);
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	6859      	ldr	r1, [r3, #4]
 8002f2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4413      	add	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	6a3a      	ldr	r2, [r7, #32]
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	725a      	strb	r2, [r3, #9]
 8002f3c:	e02c      	b.n	8002f98 <forward+0x160>
                }
            }
            //apply sigmoid to the last layer
            else{ // if we are at last layer, apply sigmoid AF to all it's neurons results
                // Sigmoid for the output layer
                float sigmoid = 1.0f / (1.0f + expf(-z));
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	425b      	negs	r3, r3
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fd fb78 	bl	8000638 <__aeabi_i2f>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd f920 	bl	8000190 <expf>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fd faba 	bl	80004d0 <__addsf3>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	4619      	mov	r1, r3
 8002f60:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002f64:	f7fd fc70 	bl	8000848 <__aeabi_fdiv>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	61bb      	str	r3, [r7, #24]
                net.layers[i].neurons[j].a = (unsigned char)(sigmoid * 127); // Scale to fit in int8_t range
 8002f6c:	4924      	ldr	r1, [pc, #144]	@ (8003000 <forward+0x1c8>)
 8002f6e:	69b8      	ldr	r0, [r7, #24]
 8002f70:	f7fd fbb6 	bl	80006e0 <__aeabi_fmul>
 8002f74:	4603      	mov	r3, r0
 8002f76:	4618      	mov	r0, r3
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4413      	add	r3, r2
 8002f80:	6859      	ldr	r1, [r3, #4]
 8002f82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f84:	4613      	mov	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	18cc      	adds	r4, r1, r3
 8002f8e:	f7fd fda9 	bl	8000ae4 <__aeabi_f2uiz>
 8002f92:	4603      	mov	r3, r0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	7263      	strb	r3, [r4, #9]
        for (j=0; j<net.layers[i].num_neurons; j++){   
 8002f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002faa:	429a      	cmp	r2, r3
 8002fac:	f6ff af54 	blt.w	8002e58 <forward+0x20>
            }
        }
        //OPTIONAL DUMMY OPERATIONS
        if (dummy_operations > 0){ // Dummy opetaions to confuse attacker, it is aplied only, and only if expresly allowed
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	dd17      	ble.n	8002fe6 <forward+0x1ae>
            for (volatile int dummy_i = 0; dummy_i<10; dummy_i++) {
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	e011      	b.n	8002fe0 <forward+0x1a8>
                result = scmd *scmd;
 8002fbc:	7ffa      	ldrb	r2, [r7, #31]
 8002fbe:	7ffb      	ldrb	r3, [r7, #31]
 8002fc0:	fb12 f303 	smulbb	r3, r2, r3
 8002fc4:	77bb      	strb	r3, [r7, #30]
                result = scmd *scmd;
 8002fc6:	7ffa      	ldrb	r2, [r7, #31]
 8002fc8:	7ffb      	ldrb	r3, [r7, #31]
 8002fca:	fb12 f303 	smulbb	r3, r2, r3
 8002fce:	77bb      	strb	r3, [r7, #30]
                result = scmd *scmd;
 8002fd0:	7ffa      	ldrb	r2, [r7, #31]
 8002fd2:	7ffb      	ldrb	r3, [r7, #31]
 8002fd4:	fb12 f303 	smulbb	r3, r2, r3
 8002fd8:	77bb      	strb	r3, [r7, #30]
            for (volatile int dummy_i = 0; dummy_i<10; dummy_i++) {
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2b09      	cmp	r3, #9
 8002fe4:	ddea      	ble.n	8002fbc <forward+0x184>
    for (i=1; i<net.num_layers; i++){
 8002fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe8:	3301      	adds	r3, #1
 8002fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	f6ff af2e 	blt.w	8002e52 <forward+0x1a>
            }
        }
    }
}
 8002ff6:	bf00      	nop
 8002ff8:	bf00      	nop
 8002ffa:	3734      	adds	r7, #52	@ 0x34
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd90      	pop	{r4, r7, pc}
 8003000:	42fe0000 	.word	0x42fe0000

08003004 <ss_crc>:


// 0xA6 formerly 
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	70fb      	strb	r3, [r7, #3]
	unsigned int k = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]
	uint8_t crc = 0x00;
 8003014:	2300      	movs	r3, #0
 8003016:	72fb      	strb	r3, [r7, #11]
	while (len--) {
 8003018:	e01f      	b.n	800305a <ss_crc+0x56>
		crc ^= *buf++;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	781a      	ldrb	r2, [r3, #0]
 8003022:	7afb      	ldrb	r3, [r7, #11]
 8003024:	4053      	eors	r3, r2
 8003026:	72fb      	strb	r3, [r7, #11]
		for (k = 0; k < 8; k++) {
 8003028:	2300      	movs	r3, #0
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	e012      	b.n	8003054 <ss_crc+0x50>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 800302e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003032:	2b00      	cmp	r3, #0
 8003034:	da07      	bge.n	8003046 <ss_crc+0x42>
 8003036:	7afb      	ldrb	r3, [r7, #11]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	b25b      	sxtb	r3, r3
 800303c:	f083 034d 	eor.w	r3, r3, #77	@ 0x4d
 8003040:	b25b      	sxtb	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	e002      	b.n	800304c <ss_crc+0x48>
 8003046:	7afb      	ldrb	r3, [r7, #11]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	b2db      	uxtb	r3, r3
 800304c:	72fb      	strb	r3, [r7, #11]
		for (k = 0; k < 8; k++) {
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	3301      	adds	r3, #1
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b07      	cmp	r3, #7
 8003058:	d9e9      	bls.n	800302e <ss_crc+0x2a>
	while (len--) {
 800305a:	78fb      	ldrb	r3, [r7, #3]
 800305c:	1e5a      	subs	r2, r3, #1
 800305e:	70fa      	strb	r2, [r7, #3]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1da      	bne.n	800301a <ss_crc+0x16>
		}
	}
	return crc;
 8003064:	7afb      	ldrb	r3, [r7, #11]

}
 8003066:	4618      	mov	r0, r3
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <check_version>:
}

#define FRAME_BYTE 0x00

uint8_t check_version(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *data)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	4603      	mov	r3, r0
 800307a:	71fb      	strb	r3, [r7, #7]
 800307c:	460b      	mov	r3, r1
 800307e:	71bb      	strb	r3, [r7, #6]
 8003080:	4613      	mov	r3, r2
 8003082:	717b      	strb	r3, [r7, #5]
	uint8_t ver = SS_VER;
 8003084:	2303      	movs	r3, #3
 8003086:	73fb      	strb	r3, [r7, #15]
	simpleserial_put('r', 1, &ver);
 8003088:	f107 030f 	add.w	r3, r7, #15
 800308c:	461a      	mov	r2, r3
 800308e:	2101      	movs	r1, #1
 8003090:	2072      	movs	r0, #114	@ 0x72
 8003092:	f000 fa19 	bl	80034c8 <simpleserial_put>
	return SS_ERR_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <ss_get_commands>:

uint8_t ss_get_commands(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *data)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	603b      	str	r3, [r7, #0]
 80030a8:	4603      	mov	r3, r0
 80030aa:	71fb      	strb	r3, [r7, #7]
 80030ac:	460b      	mov	r3, r1
 80030ae:	71bb      	strb	r3, [r7, #6]
 80030b0:	4613      	mov	r3, r2
 80030b2:	717b      	strb	r3, [r7, #5]
    uint8_t cmd_chars[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80030b4:	2300      	movs	r3, #0
 80030b6:	77fb      	strb	r3, [r7, #31]
 80030b8:	e010      	b.n	80030dc <ss_get_commands+0x3c>
        cmd_chars[i] = commands[i].c;
 80030ba:	7ffa      	ldrb	r2, [r7, #31]
 80030bc:	7ff9      	ldrb	r1, [r7, #31]
 80030be:	4811      	ldr	r0, [pc, #68]	@ (8003104 <ss_get_commands+0x64>)
 80030c0:	4613      	mov	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4403      	add	r3, r0
 80030ca:	781a      	ldrb	r2, [r3, #0]
 80030cc:	f101 0320 	add.w	r3, r1, #32
 80030d0:	443b      	add	r3, r7
 80030d2:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80030d6:	7ffb      	ldrb	r3, [r7, #31]
 80030d8:	3301      	adds	r3, #1
 80030da:	77fb      	strb	r3, [r7, #31]
 80030dc:	7ffa      	ldrb	r2, [r7, #31]
 80030de:	4b0a      	ldr	r3, [pc, #40]	@ (8003108 <ss_get_commands+0x68>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	429a      	cmp	r2, r3
 80030e6:	dbe8      	blt.n	80030ba <ss_get_commands+0x1a>
    }

    simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 80030e8:	4b07      	ldr	r3, [pc, #28]	@ (8003108 <ss_get_commands+0x68>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	f107 020c 	add.w	r2, r7, #12
 80030f2:	4619      	mov	r1, r3
 80030f4:	2072      	movs	r0, #114	@ 0x72
 80030f6:	f000 f9e7 	bl	80034c8 <simpleserial_put>
    return 0x00;
 80030fa:	2300      	movs	r3, #0

}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20000074 	.word	0x20000074
 8003108:	20000070 	.word	0x20000070

0800310c <stuff_data>:

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 1;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
	uint8_t last = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	73bb      	strb	r3, [r7, #14]
	for (; i < len; i++) {
 8003120:	e012      	b.n	8003148 <stuff_data+0x3c>
		if (buf[i] == FRAME_BYTE) {
 8003122:	7bfb      	ldrb	r3, [r7, #15]
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	4413      	add	r3, r2
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <stuff_data+0x36>
			buf[last] = i - last;
 800312e:	7bbb      	ldrb	r3, [r7, #14]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	4413      	add	r3, r2
 8003134:	7bf9      	ldrb	r1, [r7, #15]
 8003136:	7bba      	ldrb	r2, [r7, #14]
 8003138:	1a8a      	subs	r2, r1, r2
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	701a      	strb	r2, [r3, #0]
			last = i;
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	73bb      	strb	r3, [r7, #14]
	for (; i < len; i++) {
 8003142:	7bfb      	ldrb	r3, [r7, #15]
 8003144:	3301      	adds	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
 8003148:	7bfa      	ldrb	r2, [r7, #15]
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	429a      	cmp	r2, r3
 800314e:	d3e8      	bcc.n	8003122 <stuff_data+0x16>
		}
	}
	return 0x00;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr

0800315c <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	70fb      	strb	r3, [r7, #3]
	uint8_t next = buf[0];
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	73fb      	strb	r3, [r7, #15]
	buf[0] = 0x00;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	701a      	strb	r2, [r3, #0]
	//len -= 1;
	uint8_t tmp = next;
 8003174:	7bfb      	ldrb	r3, [r7, #15]
 8003176:	73bb      	strb	r3, [r7, #14]
	while ((next < len) && tmp != 0) {
 8003178:	e00d      	b.n	8003196 <unstuff_data+0x3a>
		tmp = buf[next];
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	4413      	add	r3, r2
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	73bb      	strb	r3, [r7, #14]
		buf[next] = FRAME_BYTE;
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	2200      	movs	r2, #0
 800318c:	701a      	strb	r2, [r3, #0]
		next += tmp;
 800318e:	7bfa      	ldrb	r2, [r7, #15]
 8003190:	7bbb      	ldrb	r3, [r7, #14]
 8003192:	4413      	add	r3, r2
 8003194:	73fb      	strb	r3, [r7, #15]
	while ((next < len) && tmp != 0) {
 8003196:	7bfa      	ldrb	r2, [r7, #15]
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	429a      	cmp	r2, r3
 800319c:	d202      	bcs.n	80031a4 <unstuff_data+0x48>
 800319e:	7bbb      	ldrb	r3, [r7, #14]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1ea      	bne.n	800317a <unstuff_data+0x1e>
	}
	return next;
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr

080031b0 <simpleserial_init>:

// Set up the SimpleSerial module by preparing internal commands
// This just adds the "v" command for now...
void simpleserial_init()
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
	simpleserial_addcmd('v', 0, check_version);
 80031b4:	4a05      	ldr	r2, [pc, #20]	@ (80031cc <simpleserial_init+0x1c>)
 80031b6:	2100      	movs	r1, #0
 80031b8:	2076      	movs	r0, #118	@ 0x76
 80031ba:	f000 f80b 	bl	80031d4 <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 80031be:	4a04      	ldr	r2, [pc, #16]	@ (80031d0 <simpleserial_init+0x20>)
 80031c0:	2100      	movs	r1, #0
 80031c2:	2077      	movs	r0, #119	@ 0x77
 80031c4:	f000 f806 	bl	80031d4 <simpleserial_addcmd>
}
 80031c8:	bf00      	nop
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	08003071 	.word	0x08003071
 80031d0:	080030a1 	.word	0x080030a1

080031d4 <simpleserial_addcmd>:

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
 80031e0:	73fb      	strb	r3, [r7, #15]
	if(num_commands >= MAX_SS_CMDS) {
 80031e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003258 <simpleserial_addcmd+0x84>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b0f      	cmp	r3, #15
 80031e8:	dd04      	ble.n	80031f4 <simpleserial_addcmd+0x20>
		putch('a');
 80031ea:	2061      	movs	r0, #97	@ 0x61
 80031ec:	f000 fb0e 	bl	800380c <putch>
		return 1;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e02d      	b.n	8003250 <simpleserial_addcmd+0x7c>
	}

	if(len >= MAX_SS_LEN) {
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2bff      	cmp	r3, #255	@ 0xff
 80031f8:	d904      	bls.n	8003204 <simpleserial_addcmd+0x30>
		putch('b');
 80031fa:	2062      	movs	r0, #98	@ 0x62
 80031fc:	f000 fb06 	bl	800380c <putch>
		return 1;
 8003200:	2301      	movs	r3, #1
 8003202:	e025      	b.n	8003250 <simpleserial_addcmd+0x7c>
	}

	commands[num_commands].c   = c;
 8003204:	4b14      	ldr	r3, [pc, #80]	@ (8003258 <simpleserial_addcmd+0x84>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4914      	ldr	r1, [pc, #80]	@ (800325c <simpleserial_addcmd+0x88>)
 800320a:	4613      	mov	r3, r2
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	7bfa      	ldrb	r2, [r7, #15]
 8003216:	701a      	strb	r2, [r3, #0]
	commands[num_commands].len = len;
 8003218:	4b0f      	ldr	r3, [pc, #60]	@ (8003258 <simpleserial_addcmd+0x84>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	490f      	ldr	r1, [pc, #60]	@ (800325c <simpleserial_addcmd+0x88>)
 800321e:	4613      	mov	r3, r2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	3304      	adds	r3, #4
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	601a      	str	r2, [r3, #0]
	commands[num_commands].fp  = fp;
 800322e:	4b0a      	ldr	r3, [pc, #40]	@ (8003258 <simpleserial_addcmd+0x84>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	490a      	ldr	r1, [pc, #40]	@ (800325c <simpleserial_addcmd+0x88>)
 8003234:	4613      	mov	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	3308      	adds	r3, #8
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	601a      	str	r2, [r3, #0]
	num_commands++;
 8003244:	4b04      	ldr	r3, [pc, #16]	@ (8003258 <simpleserial_addcmd+0x84>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	3301      	adds	r3, #1
 800324a:	4a03      	ldr	r2, [pc, #12]	@ (8003258 <simpleserial_addcmd+0x84>)
 800324c:	6013      	str	r3, [r2, #0]

	return 0;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20000070 	.word	0x20000070
 800325c:	20000074 	.word	0x20000074

08003260 <simpleserial_get>:

void simpleserial_get(void)
{
 8003260:	b590      	push	{r4, r7, lr}
 8003262:	b0c7      	sub	sp, #284	@ 0x11c
 8003264:	af00      	add	r7, sp, #0
	uint8_t data_buf[MAX_SS_LEN];
	uint8_t err = 0;
 8003266:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800326a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800326e:	2200      	movs	r2, #0
 8003270:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 4; i++) {
 8003272:	2300      	movs	r3, #0
 8003274:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003278:	e022      	b.n	80032c0 <simpleserial_get+0x60>
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 800327a:	f000 faa9 	bl	80037d0 <getch>
 800327e:	4603      	mov	r3, r0
 8003280:	4619      	mov	r1, r3
 8003282:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003286:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 800328a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800328e:	4413      	add	r3, r2
 8003290:	460a      	mov	r2, r1
 8003292:	701a      	strb	r2, [r3, #0]
		if (data_buf[i] == FRAME_BYTE) {
 8003294:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003298:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 800329c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a0:	4413      	add	r3, r2
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d106      	bne.n	80032b6 <simpleserial_get+0x56>
			err = SS_ERR_FRAME_BYTE;
 80032a8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80032ac:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80032b0:	2205      	movs	r2, #5
 80032b2:	701a      	strb	r2, [r3, #0]
			goto ERROR;
 80032b4:	e0f9      	b.n	80034aa <simpleserial_get+0x24a>
	for (int i = 0; i < 4; i++) {
 80032b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ba:	3301      	adds	r3, #1
 80032bc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80032c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	ddd8      	ble.n	800327a <simpleserial_get+0x1a>
		}
	}
	uint8_t next_frame = unstuff_data(data_buf, 4);
 80032c8:	f107 0308 	add.w	r3, r7, #8
 80032cc:	2104      	movs	r1, #4
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff ff44 	bl	800315c <unstuff_data>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b

	// check for valid command
	uint8_t c = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
	for(c = 0; c < num_commands; c++)
 80032e0:	2300      	movs	r3, #0
 80032e2:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 80032e6:	e014      	b.n	8003312 <simpleserial_get+0xb2>
	{
		if(commands[c].c == data_buf[1])
 80032e8:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 80032ec:	4974      	ldr	r1, [pc, #464]	@ (80034c0 <simpleserial_get+0x260>)
 80032ee:	4613      	mov	r3, r2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	781a      	ldrb	r2, [r3, #0]
 80032fa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80032fe:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003302:	785b      	ldrb	r3, [r3, #1]
 8003304:	429a      	cmp	r2, r3
 8003306:	d00b      	beq.n	8003320 <simpleserial_get+0xc0>
	for(c = 0; c < num_commands; c++)
 8003308:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 800330c:	3301      	adds	r3, #1
 800330e:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 8003312:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 8003316:	4b6b      	ldr	r3, [pc, #428]	@ (80034c4 <simpleserial_get+0x264>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	dbe4      	blt.n	80032e8 <simpleserial_get+0x88>
 800331e:	e000      	b.n	8003322 <simpleserial_get+0xc2>
			break;
 8003320:	bf00      	nop
	}

	if (c == num_commands) {
 8003322:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 8003326:	4b67      	ldr	r3, [pc, #412]	@ (80034c4 <simpleserial_get+0x264>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d106      	bne.n	800333c <simpleserial_get+0xdc>
		err = SS_ERR_CMD;
 800332e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003332:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8003336:	2201      	movs	r2, #1
 8003338:	701a      	strb	r2, [r3, #0]
		goto ERROR;
 800333a:	e0b6      	b.n	80034aa <simpleserial_get+0x24a>
	}

	//check that next frame not beyond end of message
	// account for cmd, scmd, len, data, crc, end of frame
	if ((data_buf[3] + 5) < next_frame) {
 800333c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003340:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003344:	78db      	ldrb	r3, [r3, #3]
 8003346:	1d5a      	adds	r2, r3, #5
 8003348:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800334c:	429a      	cmp	r2, r3
 800334e:	da06      	bge.n	800335e <simpleserial_get+0xfe>
		err = SS_ERR_LEN;
 8003350:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003354:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8003358:	2204      	movs	r2, #4
 800335a:	701a      	strb	r2, [r3, #0]
		goto ERROR;
 800335c:	e0a5      	b.n	80034aa <simpleserial_get+0x24a>
	}

	// read in data
	// eq to len + crc + frame end
	int i = 4;
 800335e:	2304      	movs	r3, #4
 8003360:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	for (; i < data_buf[3] + 5; i++) {
 8003364:	e022      	b.n	80033ac <simpleserial_get+0x14c>
		data_buf[i] = getch();
 8003366:	f000 fa33 	bl	80037d0 <getch>
 800336a:	4603      	mov	r3, r0
 800336c:	4619      	mov	r1, r3
 800336e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003372:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8003376:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800337a:	4413      	add	r3, r2
 800337c:	460a      	mov	r2, r1
 800337e:	701a      	strb	r2, [r3, #0]
		if (data_buf[i] == FRAME_BYTE) {
 8003380:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003384:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8003388:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800338c:	4413      	add	r3, r2
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d106      	bne.n	80033a2 <simpleserial_get+0x142>
			err = SS_ERR_FRAME_BYTE;
 8003394:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003398:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800339c:	2205      	movs	r2, #5
 800339e:	701a      	strb	r2, [r3, #0]
			goto ERROR;
 80033a0:	e083      	b.n	80034aa <simpleserial_get+0x24a>
	for (; i < data_buf[3] + 5; i++) {
 80033a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033a6:	3301      	adds	r3, #1
 80033a8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80033ac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80033b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80033b4:	78db      	ldrb	r3, [r3, #3]
 80033b6:	3304      	adds	r3, #4
 80033b8:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80033bc:	429a      	cmp	r2, r3
 80033be:	ddd2      	ble.n	8003366 <simpleserial_get+0x106>
		}
	}

	//check that final byte is the FRAME_BYTE
	data_buf[i] = getch();
 80033c0:	f000 fa06 	bl	80037d0 <getch>
 80033c4:	4603      	mov	r3, r0
 80033c6:	4619      	mov	r1, r3
 80033c8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80033cc:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 80033d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033d4:	4413      	add	r3, r2
 80033d6:	460a      	mov	r2, r1
 80033d8:	701a      	strb	r2, [r3, #0]
	if (data_buf[i] != FRAME_BYTE) {
 80033da:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80033de:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 80033e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80033e6:	4413      	add	r3, r2
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d006      	beq.n	80033fc <simpleserial_get+0x19c>
		err = SS_ERR_LEN;
 80033ee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80033f2:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80033f6:	2204      	movs	r2, #4
 80033f8:	701a      	strb	r2, [r3, #0]
		goto ERROR;
 80033fa:	e056      	b.n	80034aa <simpleserial_get+0x24a>
	}

	//fully unstuff data now
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 80033fc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003400:	f107 0208 	add.w	r2, r7, #8
 8003404:	18d0      	adds	r0, r2, r3
 8003406:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800340a:	b2da      	uxtb	r2, r3
 800340c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	3301      	adds	r3, #1
 8003416:	b2db      	uxtb	r3, r3
 8003418:	4619      	mov	r1, r3
 800341a:	f7ff fe9f 	bl	800315c <unstuff_data>

	//calc crc excluding original frame offset and frame end and crc
	uint8_t crc = ss_crc(data_buf+1, i-2);
 800341e:	f107 0308 	add.w	r3, r7, #8
 8003422:	3301      	adds	r3, #1
 8003424:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	3a02      	subs	r2, #2
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	4611      	mov	r1, r2
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff fde7 	bl	8003004 <ss_crc>
 8003436:	4603      	mov	r3, r0
 8003438:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
	if (crc != data_buf[i-1]) {
 800343c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003440:	3b01      	subs	r3, #1
 8003442:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8003446:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800344a:	5cd3      	ldrb	r3, [r2, r3]
 800344c:	f897 210a 	ldrb.w	r2, [r7, #266]	@ 0x10a
 8003450:	429a      	cmp	r2, r3
 8003452:	d006      	beq.n	8003462 <simpleserial_get+0x202>
		err = SS_ERR_CRC;
 8003454:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003458:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800345c:	2202      	movs	r2, #2
 800345e:	701a      	strb	r2, [r3, #0]
		goto ERROR;
 8003460:	e023      	b.n	80034aa <simpleserial_get+0x24a>
	}

	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 8003462:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 8003466:	4916      	ldr	r1, [pc, #88]	@ (80034c0 <simpleserial_get+0x260>)
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	3308      	adds	r3, #8
 8003474:	681c      	ldr	r4, [r3, #0]
 8003476:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800347a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800347e:	7858      	ldrb	r0, [r3, #1]
 8003480:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003484:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003488:	7899      	ldrb	r1, [r3, #2]
 800348a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800348e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003492:	78da      	ldrb	r2, [r3, #3]
 8003494:	f107 0308 	add.w	r3, r7, #8
 8003498:	3304      	adds	r3, #4
 800349a:	47a0      	blx	r4
 800349c:	4603      	mov	r3, r0
 800349e:	461a      	mov	r2, r3
 80034a0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80034a4:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80034a8:	701a      	strb	r2, [r3, #0]

ERROR:
	simpleserial_put('e', 0x01, &err);
 80034aa:	1dfb      	adds	r3, r7, #7
 80034ac:	461a      	mov	r2, r3
 80034ae:	2101      	movs	r1, #1
 80034b0:	2065      	movs	r0, #101	@ 0x65
 80034b2:	f000 f809 	bl	80034c8 <simpleserial_put>
	return;
 80034b6:	bf00      	nop
}
 80034b8:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd90      	pop	{r4, r7, pc}
 80034c0:	20000074 	.word	0x20000074
 80034c4:	20000070 	.word	0x20000070

080034c8 <simpleserial_put>:

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 80034c8:	b590      	push	{r4, r7, lr}
 80034ca:	b0c5      	sub	sp, #276	@ 0x114
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80034d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80034dc:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80034e0:	4602      	mov	r2, r0
 80034e2:	701a      	strb	r2, [r3, #0]
 80034e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80034e8:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80034ec:	460a      	mov	r2, r1
 80034ee:	701a      	strb	r2, [r3, #0]
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 80034f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80034f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
	data_buf[1] = c;
 80034fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003500:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003504:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003508:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 800350c:	7812      	ldrb	r2, [r2, #0]
 800350e:	705a      	strb	r2, [r3, #1]
	data_buf[2] = size;
 8003510:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003518:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800351c:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8003520:	7812      	ldrb	r2, [r2, #0]
 8003522:	709a      	strb	r2, [r3, #2]
	int i = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	for (; i < size; i++) {
 800352a:	e015      	b.n	8003558 <simpleserial_put+0x90>
		data_buf[i + 3] = output[i];
 800352c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003530:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003534:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	441a      	add	r2, r3
 800353c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003540:	3303      	adds	r3, #3
 8003542:	7811      	ldrb	r1, [r2, #0]
 8003544:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003548:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800354c:	54d1      	strb	r1, [r2, r3]
	for (; i < size; i++) {
 800354e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003552:	3301      	adds	r3, #1
 8003554:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003558:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800355c:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8003566:	429a      	cmp	r2, r3
 8003568:	dbe0      	blt.n	800352c <simpleserial_put+0x64>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 800356a:	f107 0308 	add.w	r3, r7, #8
 800356e:	3301      	adds	r3, #1
 8003570:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003574:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8003578:	7812      	ldrb	r2, [r2, #0]
 800357a:	3202      	adds	r2, #2
 800357c:	b2d1      	uxtb	r1, r2
 800357e:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8003582:	1cd4      	adds	r4, r2, #3
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff fd3d 	bl	8003004 <ss_crc>
 800358a:	4603      	mov	r3, r0
 800358c:	461a      	mov	r2, r3
 800358e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003592:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003596:	551a      	strb	r2, [r3, r4]
	data_buf[i + 4] = 0x00;
 8003598:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800359c:	3304      	adds	r3, #4
 800359e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80035a2:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80035a6:	2100      	movs	r1, #0
 80035a8:	54d1      	strb	r1, [r2, r3]
	stuff_data(data_buf, i + 5);
 80035aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	3305      	adds	r3, #5
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	f107 0308 	add.w	r3, r7, #8
 80035b8:	4611      	mov	r1, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fda6 	bl	800310c <stuff_data>
	for (int i = 0; i < size + 5; i++) {
 80035c0:	2300      	movs	r3, #0
 80035c2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80035c6:	e00f      	b.n	80035e8 <simpleserial_put+0x120>
		putch(data_buf[i]);
 80035c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80035cc:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 80035d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80035d4:	4413      	add	r3, r2
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 f917 	bl	800380c <putch>
	for (int i = 0; i < size + 5; i++) {
 80035de:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80035e2:	3301      	adds	r3, #1
 80035e4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80035e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80035ec:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	3304      	adds	r3, #4
 80035f4:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80035f8:	429a      	cmp	r2, r3
 80035fa:	dde5      	ble.n	80035c8 <simpleserial_put+0x100>
	}
}
 80035fc:	bf00      	nop
 80035fe:	bf00      	nop
 8003600:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8003604:	46bd      	mov	sp, r7
 8003606:	bd90      	pop	{r4, r7, pc}

08003608 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b096      	sub	sp, #88	@ 0x58
 800360c:	af00      	add	r7, sp, #0
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 800360e:	2303      	movs	r3, #3
 8003610:	62fb      	str	r3, [r7, #44]	@ 0x2c
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8003612:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8003616:	633b      	str	r3, [r7, #48]	@ 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8003618:	2300      	movs	r3, #0
 800361a:	63fb      	str	r3, [r7, #60]	@ 0x3c
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 800361c:	2300      	movs	r3, #0
 800361e:	64fb      	str	r3, [r7, #76]	@ 0x4c
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003620:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003624:	4618      	mov	r0, r3
 8003626:	f000 f925 	bl	8003874 <HAL_RCC_OscConfig>

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800362a:	230f      	movs	r3, #15
 800362c:	61bb      	str	r3, [r7, #24]
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 800362e:	2301      	movs	r3, #1
 8003630:	61fb      	str	r3, [r7, #28]
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8003632:	2300      	movs	r3, #0
 8003634:	623b      	str	r3, [r7, #32]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003636:	2300      	movs	r3, #0
 8003638:	627b      	str	r3, [r7, #36]	@ 0x24
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800363a:	2300      	movs	r3, #0
 800363c:	62bb      	str	r3, [r7, #40]	@ 0x28
     uint32_t flash_latency = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	657b      	str	r3, [r7, #84]	@ 0x54
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8003642:	f107 0318 	add.w	r3, r7, #24
 8003646:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003648:	4618      	mov	r0, r3
 800364a:	f001 f929 	bl	80048a0 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800364e:	4b15      	ldr	r3, [pc, #84]	@ (80036a4 <platform_init+0x9c>)
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	4a14      	ldr	r2, [pc, #80]	@ (80036a4 <platform_init+0x9c>)
 8003654:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003658:	6153      	str	r3, [r2, #20]
 800365a:	4b12      	ldr	r3, [pc, #72]	@ (80036a4 <platform_init+0x9c>)
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003662:	603b      	str	r3, [r7, #0]
 8003664:	683b      	ldr	r3, [r7, #0]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8003666:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800366a:	607b      	str	r3, [r7, #4]
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800366c:	2301      	movs	r3, #1
 800366e:	60bb      	str	r3, [r7, #8]
  GpioInit.Pull      = GPIO_NOPULL;
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003674:	2303      	movs	r3, #3
 8003676:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8003678:	1d3b      	adds	r3, r7, #4
 800367a:	4619      	mov	r1, r3
 800367c:	480a      	ldr	r0, [pc, #40]	@ (80036a8 <platform_init+0xa0>)
 800367e:	f001 fa99 	bl	8004bb4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8003682:	2201      	movs	r2, #1
 8003684:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003688:	4807      	ldr	r0, [pc, #28]	@ (80036a8 <platform_init+0xa0>)
 800368a:	f001 fc11 	bl	8004eb0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 800368e:	2201      	movs	r2, #1
 8003690:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003694:	4804      	ldr	r0, [pc, #16]	@ (80036a8 <platform_init+0xa0>)
 8003696:	f001 fc0b 	bl	8004eb0 <HAL_GPIO_WritePin>
#endif
}
 800369a:	bf00      	nop
 800369c:	3758      	adds	r7, #88	@ 0x58
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40021000 	.word	0x40021000
 80036a8:	48000800 	.word	0x48000800

080036ac <init_uart>:

void init_uart(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 80036b2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80036b6:	60fb      	str	r3, [r7, #12]
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 80036b8:	2302      	movs	r3, #2
 80036ba:	613b      	str	r3, [r7, #16]
  GpioInit.Pull      = GPIO_PULLUP;
 80036bc:	2301      	movs	r3, #1
 80036be:	617b      	str	r3, [r7, #20]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80036c0:	2303      	movs	r3, #3
 80036c2:	61bb      	str	r3, [r7, #24]
  GpioInit.Alternate = GPIO_AF7_USART1;
 80036c4:	2307      	movs	r3, #7
 80036c6:	61fb      	str	r3, [r7, #28]
  __GPIOA_CLK_ENABLE();
 80036c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003740 <init_uart+0x94>)
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003740 <init_uart+0x94>)
 80036ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036d2:	6153      	str	r3, [r2, #20]
 80036d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003740 <init_uart+0x94>)
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	68bb      	ldr	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80036e0:	f107 030c 	add.w	r3, r7, #12
 80036e4:	4619      	mov	r1, r3
 80036e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80036ea:	f001 fa63 	bl	8004bb4 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 80036ee:	4b15      	ldr	r3, [pc, #84]	@ (8003744 <init_uart+0x98>)
 80036f0:	4a15      	ldr	r2, [pc, #84]	@ (8003748 <init_uart+0x9c>)
 80036f2:	601a      	str	r2, [r3, #0]
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 80036f4:	4b13      	ldr	r3, [pc, #76]	@ (8003744 <init_uart+0x98>)
 80036f6:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80036fa:	605a      	str	r2, [r3, #4]
  #else
  UartHandle.Init.BaudRate   = 38400;
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80036fc:	4b11      	ldr	r3, [pc, #68]	@ (8003744 <init_uart+0x98>)
 80036fe:	2200      	movs	r2, #0
 8003700:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8003702:	4b10      	ldr	r3, [pc, #64]	@ (8003744 <init_uart+0x98>)
 8003704:	2200      	movs	r2, #0
 8003706:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8003708:	4b0e      	ldr	r3, [pc, #56]	@ (8003744 <init_uart+0x98>)
 800370a:	2200      	movs	r2, #0
 800370c:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800370e:	4b0d      	ldr	r3, [pc, #52]	@ (8003744 <init_uart+0x98>)
 8003710:	2200      	movs	r2, #0
 8003712:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8003714:	4b0b      	ldr	r3, [pc, #44]	@ (8003744 <init_uart+0x98>)
 8003716:	220c      	movs	r2, #12
 8003718:	615a      	str	r2, [r3, #20]
  __USART1_CLK_ENABLE();
 800371a:	4b09      	ldr	r3, [pc, #36]	@ (8003740 <init_uart+0x94>)
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	4a08      	ldr	r2, [pc, #32]	@ (8003740 <init_uart+0x94>)
 8003720:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003724:	6193      	str	r3, [r2, #24]
 8003726:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <init_uart+0x94>)
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800372e:	607b      	str	r3, [r7, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
  HAL_UART_Init(&UartHandle);
 8003732:	4804      	ldr	r0, [pc, #16]	@ (8003744 <init_uart+0x98>)
 8003734:	f001 fe1d 	bl	8005372 <HAL_UART_Init>
}
 8003738:	bf00      	nop
 800373a:	3720      	adds	r7, #32
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40021000 	.word	0x40021000
 8003744:	20000134 	.word	0x20000134
 8003748:	40013800 	.word	0x40013800

0800374c <trigger_setup>:

void trigger_setup(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003752:	4b13      	ldr	r3, [pc, #76]	@ (80037a0 <trigger_setup+0x54>)
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	4a12      	ldr	r2, [pc, #72]	@ (80037a0 <trigger_setup+0x54>)
 8003758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800375c:	6153      	str	r3, [r2, #20]
 800375e:	4b10      	ldr	r3, [pc, #64]	@ (80037a0 <trigger_setup+0x54>)
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
 800376a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800376e:	607b      	str	r3, [r7, #4]
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8003770:	2301      	movs	r3, #1
 8003772:	60bb      	str	r3, [r7, #8]
  GpioInit.Pull      = GPIO_NOPULL;
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003778:	2303      	movs	r3, #3
 800377a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 800377c:	1d3b      	adds	r3, r7, #4
 800377e:	4619      	mov	r1, r3
 8003780:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003784:	f001 fa16 	bl	8004bb4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8003788:	2200      	movs	r2, #0
 800378a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800378e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003792:	f001 fb8d 	bl	8004eb0 <HAL_GPIO_WritePin>
}
 8003796:	bf00      	nop
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40021000 	.word	0x40021000

080037a4 <trigger_high>:

void trigger_high(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 80037a8:	2201      	movs	r2, #1
 80037aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80037ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037b2:	f001 fb7d 	bl	8004eb0 <HAL_GPIO_WritePin>
}
 80037b6:	bf00      	nop
 80037b8:	bd80      	pop	{r7, pc}

080037ba <trigger_low>:

void trigger_low(void)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 80037be:	2200      	movs	r2, #0
 80037c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80037c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037c8:	f001 fb72 	bl	8004eb0 <HAL_GPIO_WritePin>
}
 80037cc:	bf00      	nop
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <getch>:

char getch(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 80037d6:	e005      	b.n	80037e4 <getch+0x14>
    USART1->ICR |= (1 << 3);
 80037d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003804 <getch+0x34>)
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	4a09      	ldr	r2, [pc, #36]	@ (8003804 <getch+0x34>)
 80037de:	f043 0308 	orr.w	r3, r3, #8
 80037e2:	6213      	str	r3, [r2, #32]
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 80037e4:	1df9      	adds	r1, r7, #7
 80037e6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80037ea:	2201      	movs	r2, #1
 80037ec:	4806      	ldr	r0, [pc, #24]	@ (8003808 <getch+0x38>)
 80037ee:	f001 fedd 	bl	80055ac <HAL_UART_Receive>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1ef      	bne.n	80037d8 <getch+0x8>
  //putch(d);
  return d;
 80037f8:	79fb      	ldrb	r3, [r7, #7]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40013800 	.word	0x40013800
 8003808:	20000134 	.word	0x20000134

0800380c <putch>:

void putch(char c)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	71fb      	strb	r3, [r7, #7]
  uint8_t d  = c;
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 800381a:	f107 010f 	add.w	r1, r7, #15
 800381e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003822:	2201      	movs	r2, #1
 8003824:	4803      	ldr	r0, [pc, #12]	@ (8003834 <putch+0x28>)
 8003826:	f001 fe35 	bl	8005494 <HAL_UART_Transmit>
}
 800382a:	bf00      	nop
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000134 	.word	0x20000134

08003838 <HAL_GetTick>:
{
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
	return hal_sys_tick++;
 800383c:	4b04      	ldr	r3, [pc, #16]	@ (8003850 <HAL_GetTick+0x18>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	1c5a      	adds	r2, r3, #1
 8003842:	4903      	ldr	r1, [pc, #12]	@ (8003850 <HAL_GetTick+0x18>)
 8003844:	600a      	str	r2, [r1, #0]
}
 8003846:	4618      	mov	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	200001a4 	.word	0x200001a4

08003854 <HAL_RCC_GetSysClockFreq>:

#define UART_CR1_FIELDS  ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | \
                                     USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8)) /*!< UART or USART CR1 fields of parameters set by UART_SetConfig API */

uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
	return F_CPU;
 8003858:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
}
 800385c:	4618      	mov	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr

08003864 <HAL_RCC_GetPCLK1Freq>:

uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
	return F_CPU;
 8003868:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
}
 800386c:	4618      	mov	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr

08003874 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800387a:	af00      	add	r7, sp, #0
 800387c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003880:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003884:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800388c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003890:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 8180 	beq.w	8003ba2 <HAL_RCC_OscConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80038a2:	4bbe      	ldr	r3, [pc, #760]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 030c 	and.w	r3, r3, #12
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d00c      	beq.n	80038c8 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038ae:	4bbb      	ldr	r3, [pc, #748]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 030c 	and.w	r3, r3, #12
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d15d      	bne.n	8003976 <HAL_RCC_OscConfig+0x102>
 80038ba:	4bb8      	ldr	r3, [pc, #736]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038c6:	d156      	bne.n	8003976 <HAL_RCC_OscConfig+0x102>
 80038c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80038cc:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80038d4:	fa93 f3a3 	rbit	r3, r3
 80038d8:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80038dc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e0:	fab3 f383 	clz	r3, r3
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d102      	bne.n	80038fa <HAL_RCC_OscConfig+0x86>
 80038f4:	4ba9      	ldr	r3, [pc, #676]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	e015      	b.n	8003926 <HAL_RCC_OscConfig+0xb2>
 80038fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80038fe:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003902:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8003906:	fa93 f3a3 	rbit	r3, r3
 800390a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800390e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003912:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003916:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800391a:	fa93 f3a3 	rbit	r3, r3
 800391e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003922:	4b9e      	ldr	r3, [pc, #632]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 8003924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003926:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800392a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800392e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8003932:	fa92 f2a2 	rbit	r2, r2
 8003936:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return(result);
 800393a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800393e:	fab2 f282 	clz	r2, r2
 8003942:	b252      	sxtb	r2, r2
 8003944:	f042 0220 	orr.w	r2, r2, #32
 8003948:	b252      	sxtb	r2, r2
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	f002 021f 	and.w	r2, r2, #31
 8003950:	2101      	movs	r1, #1
 8003952:	fa01 f202 	lsl.w	r2, r1, r2
 8003956:	4013      	ands	r3, r2
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 8121 	beq.w	8003ba0 <HAL_RCC_OscConfig+0x32c>
 800395e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003962:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	f040 8118 	bne.w	8003ba0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	f000 bf8c 	b.w	800488e <HAL_RCC_OscConfig+0x101a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003976:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800397a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003986:	d106      	bne.n	8003996 <HAL_RCC_OscConfig+0x122>
 8003988:	4b84      	ldr	r3, [pc, #528]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a83      	ldr	r2, [pc, #524]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 800398e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	e036      	b.n	8003a04 <HAL_RCC_OscConfig+0x190>
 8003996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800399a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10c      	bne.n	80039c0 <HAL_RCC_OscConfig+0x14c>
 80039a6:	4b7d      	ldr	r3, [pc, #500]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a7c      	ldr	r2, [pc, #496]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 80039ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	4b7a      	ldr	r3, [pc, #488]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a79      	ldr	r2, [pc, #484]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 80039b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	e021      	b.n	8003a04 <HAL_RCC_OscConfig+0x190>
 80039c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0x178>
 80039d2:	4b72      	ldr	r3, [pc, #456]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a71      	ldr	r2, [pc, #452]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 80039d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b6f      	ldr	r3, [pc, #444]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a6e      	ldr	r2, [pc, #440]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e00b      	b.n	8003a04 <HAL_RCC_OscConfig+0x190>
 80039ec:	4b6b      	ldr	r3, [pc, #428]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a6a      	ldr	r2, [pc, #424]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 80039f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	4b68      	ldr	r3, [pc, #416]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a67      	ldr	r2, [pc, #412]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 80039fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a02:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a04:	4b65      	ldr	r3, [pc, #404]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 8003a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a08:	f023 020f 	bic.w	r2, r3, #15
 8003a0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4960      	ldr	r1, [pc, #384]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d05a      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x270>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2e:	f7ff ff03 	bl	8003838 <HAL_GetTick>
 8003a32:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a36:	e00a      	b.n	8003a4e <HAL_RCC_OscConfig+0x1da>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a38:	f7ff fefe 	bl	8003838 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b64      	cmp	r3, #100	@ 0x64
 8003a46:	d902      	bls.n	8003a4e <HAL_RCC_OscConfig+0x1da>
          {
            return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	f000 bf20 	b.w	800488e <HAL_RCC_OscConfig+0x101a>
 8003a4e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a52:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003a5a:	fa93 f3a3 	rbit	r3, r3
 8003a5e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return(result);
 8003a62:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a66:	fab3 f383 	clz	r3, r3
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	095b      	lsrs	r3, r3, #5
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d102      	bne.n	8003a80 <HAL_RCC_OscConfig+0x20c>
 8003a7a:	4b48      	ldr	r3, [pc, #288]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	e015      	b.n	8003aac <HAL_RCC_OscConfig+0x238>
 8003a80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a84:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a88:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003a8c:	fa93 f3a3 	rbit	r3, r3
 8003a90:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003a94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a98:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003a9c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003aa0:	fa93 f3a3 	rbit	r3, r3
 8003aa4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003aa8:	4b3c      	ldr	r3, [pc, #240]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003ab0:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8003ab4:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003ab8:	fa92 f2a2 	rbit	r2, r2
 8003abc:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return(result);
 8003ac0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003ac4:	fab2 f282 	clz	r2, r2
 8003ac8:	b252      	sxtb	r2, r2
 8003aca:	f042 0220 	orr.w	r2, r2, #32
 8003ace:	b252      	sxtb	r2, r2
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	f002 021f 	and.w	r2, r2, #31
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0aa      	beq.n	8003a38 <HAL_RCC_OscConfig+0x1c4>
 8003ae2:	e05e      	b.n	8003ba2 <HAL_RCC_OscConfig+0x32e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7ff fea8 	bl	8003838 <HAL_GetTick>
 8003ae8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aec:	e00a      	b.n	8003b04 <HAL_RCC_OscConfig+0x290>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aee:	f7ff fea3 	bl	8003838 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b64      	cmp	r3, #100	@ 0x64
 8003afc:	d902      	bls.n	8003b04 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	f000 bec5 	b.w	800488e <HAL_RCC_OscConfig+0x101a>
 8003b04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b08:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003b10:	fa93 f3a3 	rbit	r3, r3
 8003b14:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return(result);
 8003b18:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b1c:	fab3 f383 	clz	r3, r3
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d102      	bne.n	8003b36 <HAL_RCC_OscConfig+0x2c2>
 8003b30:	4b1a      	ldr	r3, [pc, #104]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	e015      	b.n	8003b62 <HAL_RCC_OscConfig+0x2ee>
 8003b36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b3a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003b42:	fa93 f3a3 	rbit	r3, r3
 8003b46:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003b4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b4e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003b52:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003b56:	fa93 f3a3 	rbit	r3, r3
 8003b5a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003b9c <HAL_RCC_OscConfig+0x328>)
 8003b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b62:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b66:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8003b6a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003b6e:	fa92 f2a2 	rbit	r2, r2
 8003b72:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return(result);
 8003b76:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003b7a:	fab2 f282 	clz	r2, r2
 8003b7e:	b252      	sxtb	r2, r2
 8003b80:	f042 0220 	orr.w	r2, r2, #32
 8003b84:	b252      	sxtb	r2, r2
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	f002 021f 	and.w	r2, r2, #31
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b92:	4013      	ands	r3, r2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1aa      	bne.n	8003aee <HAL_RCC_OscConfig+0x27a>
 8003b98:	e003      	b.n	8003ba2 <HAL_RCC_OscConfig+0x32e>
 8003b9a:	bf00      	nop
 8003b9c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ba6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 817e 	beq.w	8003eb4 <HAL_RCC_OscConfig+0x640>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003bb8:	4ba6      	ldr	r3, [pc, #664]	@ (8003e54 <HAL_RCC_OscConfig+0x5e0>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 030c 	and.w	r3, r3, #12
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00b      	beq.n	8003bdc <HAL_RCC_OscConfig+0x368>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003bc4:	4ba3      	ldr	r3, [pc, #652]	@ (8003e54 <HAL_RCC_OscConfig+0x5e0>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 030c 	and.w	r3, r3, #12
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d173      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x444>
 8003bd0:	4ba0      	ldr	r3, [pc, #640]	@ (8003e54 <HAL_RCC_OscConfig+0x5e0>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d16d      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x444>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003be6:	fa93 f3a3 	rbit	r3, r3
 8003bea:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return(result);
 8003bee:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bf2:	fab3 f383 	clz	r3, r3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d102      	bne.n	8003c0c <HAL_RCC_OscConfig+0x398>
 8003c06:	4b93      	ldr	r3, [pc, #588]	@ (8003e54 <HAL_RCC_OscConfig+0x5e0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	e013      	b.n	8003c34 <HAL_RCC_OscConfig+0x3c0>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c12:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003c16:	fa93 f3a3 	rbit	r3, r3
 8003c1a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003c1e:	2302      	movs	r3, #2
 8003c20:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003c24:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003c28:	fa93 f3a3 	rbit	r3, r3
 8003c2c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003c30:	4b88      	ldr	r3, [pc, #544]	@ (8003e54 <HAL_RCC_OscConfig+0x5e0>)
 8003c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c34:	2202      	movs	r2, #2
 8003c36:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8003c3a:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8003c3e:	fa92 f2a2 	rbit	r2, r2
 8003c42:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return(result);
 8003c46:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003c4a:	fab2 f282 	clz	r2, r2
 8003c4e:	b252      	sxtb	r2, r2
 8003c50:	f042 0220 	orr.w	r2, r2, #32
 8003c54:	b252      	sxtb	r2, r2
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	f002 021f 	and.w	r2, r2, #31
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <HAL_RCC_OscConfig+0x40a>
 8003c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d002      	beq.n	8003c7e <HAL_RCC_OscConfig+0x40a>
      {
        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	f000 be08 	b.w	800488e <HAL_RCC_OscConfig+0x101a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7e:	4b75      	ldr	r3, [pc, #468]	@ (8003e54 <HAL_RCC_OscConfig+0x5e0>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6959      	ldr	r1, [r3, #20]
 8003c92:	23f8      	movs	r3, #248	@ 0xf8
 8003c94:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c98:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8003c9c:	fa93 f3a3 	rbit	r3, r3
 8003ca0:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
  return(result);
 8003ca4:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8003ca8:	fab3 f383 	clz	r3, r3
 8003cac:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb0:	4968      	ldr	r1, [pc, #416]	@ (8003e54 <HAL_RCC_OscConfig+0x5e0>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb6:	e0fd      	b.n	8003eb4 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cbc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 8088 	beq.w	8003dda <HAL_RCC_OscConfig+0x566>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8003cd4:	fa93 f3a3 	rbit	r3, r3
 8003cd8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return(result);
 8003cdc:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce0:	fab3 f383 	clz	r3, r3
 8003ce4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ce8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	461a      	mov	r2, r3
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf4:	f7ff fda0 	bl	8003838 <HAL_GetTick>
 8003cf8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfc:	e00a      	b.n	8003d14 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cfe:	f7ff fd9b 	bl	8003838 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d902      	bls.n	8003d14 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	f000 bdbd 	b.w	800488e <HAL_RCC_OscConfig+0x101a>
 8003d14:	2302      	movs	r3, #2
 8003d16:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003d1e:	fa93 f3a3 	rbit	r3, r3
 8003d22:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return(result);
 8003d26:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2a:	fab3 f383 	clz	r3, r3
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	095b      	lsrs	r3, r3, #5
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d102      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4d0>
 8003d3e:	4b45      	ldr	r3, [pc, #276]	@ (8003e54 <HAL_RCC_OscConfig+0x5e0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	e013      	b.n	8003d6c <HAL_RCC_OscConfig+0x4f8>
 8003d44:	2302      	movs	r3, #2
 8003d46:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003d4e:	fa93 f3a3 	rbit	r3, r3
 8003d52:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003d56:	2302      	movs	r3, #2
 8003d58:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003d5c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003d60:	fa93 f3a3 	rbit	r3, r3
 8003d64:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003d68:	4b3a      	ldr	r3, [pc, #232]	@ (8003e54 <HAL_RCC_OscConfig+0x5e0>)
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003d72:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8003d76:	fa92 f2a2 	rbit	r2, r2
 8003d7a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return(result);
 8003d7e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003d82:	fab2 f282 	clz	r2, r2
 8003d86:	b252      	sxtb	r2, r2
 8003d88:	f042 0220 	orr.w	r2, r2, #32
 8003d8c:	b252      	sxtb	r2, r2
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	f002 021f 	and.w	r2, r2, #31
 8003d94:	2101      	movs	r1, #1
 8003d96:	fa01 f202 	lsl.w	r2, r1, r2
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0ae      	beq.n	8003cfe <HAL_RCC_OscConfig+0x48a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da0:	4b2c      	ldr	r3, [pc, #176]	@ (8003e54 <HAL_RCC_OscConfig+0x5e0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003da8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6959      	ldr	r1, [r3, #20]
 8003db4:	23f8      	movs	r3, #248	@ 0xf8
 8003db6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dba:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003dbe:	fa93 f3a3 	rbit	r3, r3
 8003dc2:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  return(result);
 8003dc6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003dca:	fab3 f383 	clz	r3, r3
 8003dce:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd2:	4920      	ldr	r1, [pc, #128]	@ (8003e54 <HAL_RCC_OscConfig+0x5e0>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	600b      	str	r3, [r1, #0]
 8003dd8:	e06c      	b.n	8003eb4 <HAL_RCC_OscConfig+0x640>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003de4:	fa93 f3a3 	rbit	r3, r3
 8003de8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return(result);
 8003dec:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df0:	fab3 f383 	clz	r3, r3
 8003df4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003df8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	461a      	mov	r2, r3
 8003e00:	2300      	movs	r3, #0
 8003e02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e04:	f7ff fd18 	bl	8003838 <HAL_GetTick>
 8003e08:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0c:	e00a      	b.n	8003e24 <HAL_RCC_OscConfig+0x5b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e0e:	f7ff fd13 	bl	8003838 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d902      	bls.n	8003e24 <HAL_RCC_OscConfig+0x5b0>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	f000 bd35 	b.w	800488e <HAL_RCC_OscConfig+0x101a>
 8003e24:	2302      	movs	r3, #2
 8003e26:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003e2e:	fa93 f3a3 	rbit	r3, r3
 8003e32:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return(result);
 8003e36:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e3a:	fab3 f383 	clz	r3, r3
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	095b      	lsrs	r3, r3, #5
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d104      	bne.n	8003e58 <HAL_RCC_OscConfig+0x5e4>
 8003e4e:	4b01      	ldr	r3, [pc, #4]	@ (8003e54 <HAL_RCC_OscConfig+0x5e0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	e015      	b.n	8003e80 <HAL_RCC_OscConfig+0x60c>
 8003e54:	40021000 	.word	0x40021000
 8003e58:	2302      	movs	r3, #2
 8003e5a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003e62:	fa93 f3a3 	rbit	r3, r3
 8003e66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003e70:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003e74:	fa93 f3a3 	rbit	r3, r3
 8003e78:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003e7c:	4bc5      	ldr	r3, [pc, #788]	@ (8004194 <HAL_RCC_OscConfig+0x920>)
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e80:	2202      	movs	r2, #2
 8003e82:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003e86:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8003e8a:	fa92 f2a2 	rbit	r2, r2
 8003e8e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return(result);
 8003e92:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003e96:	fab2 f282 	clz	r2, r2
 8003e9a:	b252      	sxtb	r2, r2
 8003e9c:	f042 0220 	orr.w	r2, r2, #32
 8003ea0:	b252      	sxtb	r2, r2
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	f002 021f 	and.w	r2, r2, #31
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8003eae:	4013      	ands	r3, r2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1ac      	bne.n	8003e0e <HAL_RCC_OscConfig+0x59a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 810a 	beq.w	80040de <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ece:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d073      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x74e>
 8003eda:	2301      	movs	r3, #1
 8003edc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee4:	fa93 f3a3 	rbit	r3, r3
 8003ee8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return(result);
 8003eec:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ef0:	fab3 f383 	clz	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4ba8      	ldr	r3, [pc, #672]	@ (8004198 <HAL_RCC_OscConfig+0x924>)
 8003ef8:	4413      	add	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	461a      	mov	r2, r3
 8003efe:	2301      	movs	r3, #1
 8003f00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f02:	f7ff fc99 	bl	8003838 <HAL_GetTick>
 8003f06:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0a:	e00a      	b.n	8003f22 <HAL_RCC_OscConfig+0x6ae>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f0c:	f7ff fc94 	bl	8003838 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d902      	bls.n	8003f22 <HAL_RCC_OscConfig+0x6ae>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	f000 bcb6 	b.w	800488e <HAL_RCC_OscConfig+0x101a>
 8003f22:	2302      	movs	r3, #2
 8003f24:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f2c:	fa93 f3a3 	rbit	r3, r3
 8003f30:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003f34:	2302      	movs	r3, #2
 8003f36:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f3e:	fa93 f2a3 	rbit	r2, r3
 8003f42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f46:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f54:	2202      	movs	r2, #2
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	fa93 f2a3 	rbit	r2, r3
 8003f66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f6e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f70:	4b88      	ldr	r3, [pc, #544]	@ (8004194 <HAL_RCC_OscConfig+0x920>)
 8003f72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f78:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003f7c:	2102      	movs	r1, #2
 8003f7e:	6019      	str	r1, [r3, #0]
 8003f80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f84:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	fa93 f1a3 	rbit	r1, r3
 8003f8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f92:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003f96:	6019      	str	r1, [r3, #0]
  return(result);
 8003f98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f9c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	fab3 f383 	clz	r3, r3
 8003fa6:	b25b      	sxtb	r3, r3
 8003fa8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003fac:	b25b      	sxtb	r3, r3
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f003 031f 	and.w	r3, r3, #31
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0a5      	beq.n	8003f0c <HAL_RCC_OscConfig+0x698>
 8003fc0:	e08d      	b.n	80040de <HAL_RCC_OscConfig+0x86a>
 8003fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fc6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003fca:	2201      	movs	r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fd2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	fa93 f2a3 	rbit	r2, r3
 8003fdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003fe4:	601a      	str	r2, [r3, #0]
  return(result);
 8003fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fea:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003fee:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff0:	fab3 f383 	clz	r3, r3
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4b68      	ldr	r3, [pc, #416]	@ (8004198 <HAL_RCC_OscConfig+0x924>)
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	2300      	movs	r3, #0
 8004000:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004002:	f7ff fc19 	bl	8003838 <HAL_GetTick>
 8004006:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800400a:	e00a      	b.n	8004022 <HAL_RCC_OscConfig+0x7ae>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800400c:	f7ff fc14 	bl	8003838 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d902      	bls.n	8004022 <HAL_RCC_OscConfig+0x7ae>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	f000 bc36 	b.w	800488e <HAL_RCC_OscConfig+0x101a>
 8004022:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004026:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800402a:	2202      	movs	r2, #2
 800402c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004032:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	fa93 f2a3 	rbit	r2, r3
 800403c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004040:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800404a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800404e:	2202      	movs	r2, #2
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004056:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	fa93 f2a3 	rbit	r2, r3
 8004060:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004064:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800406e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004072:	2202      	movs	r2, #2
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800407a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	fa93 f2a3 	rbit	r2, r3
 8004084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004088:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800408c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800408e:	4b41      	ldr	r3, [pc, #260]	@ (8004194 <HAL_RCC_OscConfig+0x920>)
 8004090:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004096:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800409a:	2102      	movs	r1, #2
 800409c:	6019      	str	r1, [r3, #0]
 800409e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	fa93 f1a3 	rbit	r1, r3
 80040ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040b0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80040b4:	6019      	str	r1, [r3, #0]
  return(result);
 80040b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ba:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	fab3 f383 	clz	r3, r3
 80040c4:	b25b      	sxtb	r3, r3
 80040c6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80040ca:	b25b      	sxtb	r3, r3
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	f003 031f 	and.w	r3, r3, #31
 80040d2:	2101      	movs	r1, #1
 80040d4:	fa01 f303 	lsl.w	r3, r1, r3
 80040d8:	4013      	ands	r3, r2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d196      	bne.n	800400c <HAL_RCC_OscConfig+0x798>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 81a4 	beq.w	800443c <HAL_RCC_OscConfig+0xbc8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040f4:	2300      	movs	r3, #0
 80040f6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040fa:	4b26      	ldr	r3, [pc, #152]	@ (8004194 <HAL_RCC_OscConfig+0x920>)
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d116      	bne.n	8004134 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004106:	4b23      	ldr	r3, [pc, #140]	@ (8004194 <HAL_RCC_OscConfig+0x920>)
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	4a22      	ldr	r2, [pc, #136]	@ (8004194 <HAL_RCC_OscConfig+0x920>)
 800410c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004110:	61d3      	str	r3, [r2, #28]
 8004112:	4b20      	ldr	r3, [pc, #128]	@ (8004194 <HAL_RCC_OscConfig+0x920>)
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800411a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800411e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004128:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800412c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800412e:	2301      	movs	r3, #1
 8004130:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004134:	4b19      	ldr	r3, [pc, #100]	@ (800419c <HAL_RCC_OscConfig+0x928>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800413c:	2b00      	cmp	r3, #0
 800413e:	d11a      	bne.n	8004176 <HAL_RCC_OscConfig+0x902>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004140:	4b16      	ldr	r3, [pc, #88]	@ (800419c <HAL_RCC_OscConfig+0x928>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a15      	ldr	r2, [pc, #84]	@ (800419c <HAL_RCC_OscConfig+0x928>)
 8004146:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800414a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800414c:	f7ff fb74 	bl	8003838 <HAL_GetTick>
 8004150:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004154:	e009      	b.n	800416a <HAL_RCC_OscConfig+0x8f6>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004156:	f7ff fb6f 	bl	8003838 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b64      	cmp	r3, #100	@ 0x64
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x8f6>
        {
          return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e391      	b.n	800488e <HAL_RCC_OscConfig+0x101a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416a:	4b0c      	ldr	r3, [pc, #48]	@ (800419c <HAL_RCC_OscConfig+0x928>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0ef      	beq.n	8004156 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800417a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d10c      	bne.n	80041a0 <HAL_RCC_OscConfig+0x92c>
 8004186:	4b03      	ldr	r3, [pc, #12]	@ (8004194 <HAL_RCC_OscConfig+0x920>)
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	4a02      	ldr	r2, [pc, #8]	@ (8004194 <HAL_RCC_OscConfig+0x920>)
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	6213      	str	r3, [r2, #32]
 8004192:	e03b      	b.n	800420c <HAL_RCC_OscConfig+0x998>
 8004194:	40021000 	.word	0x40021000
 8004198:	10908120 	.word	0x10908120
 800419c:	40007000 	.word	0x40007000
 80041a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10c      	bne.n	80041ca <HAL_RCC_OscConfig+0x956>
 80041b0:	4b7f      	ldr	r3, [pc, #508]	@ (80043b0 <HAL_RCC_OscConfig+0xb3c>)
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	4a7e      	ldr	r2, [pc, #504]	@ (80043b0 <HAL_RCC_OscConfig+0xb3c>)
 80041b6:	f023 0301 	bic.w	r3, r3, #1
 80041ba:	6213      	str	r3, [r2, #32]
 80041bc:	4b7c      	ldr	r3, [pc, #496]	@ (80043b0 <HAL_RCC_OscConfig+0xb3c>)
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	4a7b      	ldr	r2, [pc, #492]	@ (80043b0 <HAL_RCC_OscConfig+0xb3c>)
 80041c2:	f023 0304 	bic.w	r3, r3, #4
 80041c6:	6213      	str	r3, [r2, #32]
 80041c8:	e020      	b.n	800420c <HAL_RCC_OscConfig+0x998>
 80041ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	2b05      	cmp	r3, #5
 80041d8:	d10c      	bne.n	80041f4 <HAL_RCC_OscConfig+0x980>
 80041da:	4b75      	ldr	r3, [pc, #468]	@ (80043b0 <HAL_RCC_OscConfig+0xb3c>)
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	4a74      	ldr	r2, [pc, #464]	@ (80043b0 <HAL_RCC_OscConfig+0xb3c>)
 80041e0:	f043 0304 	orr.w	r3, r3, #4
 80041e4:	6213      	str	r3, [r2, #32]
 80041e6:	4b72      	ldr	r3, [pc, #456]	@ (80043b0 <HAL_RCC_OscConfig+0xb3c>)
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	4a71      	ldr	r2, [pc, #452]	@ (80043b0 <HAL_RCC_OscConfig+0xb3c>)
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	6213      	str	r3, [r2, #32]
 80041f2:	e00b      	b.n	800420c <HAL_RCC_OscConfig+0x998>
 80041f4:	4b6e      	ldr	r3, [pc, #440]	@ (80043b0 <HAL_RCC_OscConfig+0xb3c>)
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	4a6d      	ldr	r2, [pc, #436]	@ (80043b0 <HAL_RCC_OscConfig+0xb3c>)
 80041fa:	f023 0301 	bic.w	r3, r3, #1
 80041fe:	6213      	str	r3, [r2, #32]
 8004200:	4b6b      	ldr	r3, [pc, #428]	@ (80043b0 <HAL_RCC_OscConfig+0xb3c>)
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	4a6a      	ldr	r2, [pc, #424]	@ (80043b0 <HAL_RCC_OscConfig+0xb3c>)
 8004206:	f023 0304 	bic.w	r3, r3, #4
 800420a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800420c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004210:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 8082 	beq.w	8004322 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800421e:	f7ff fb0b 	bl	8003838 <HAL_GetTick>
 8004222:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004226:	e00b      	b.n	8004240 <HAL_RCC_OscConfig+0x9cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004228:	f7ff fb06 	bl	8003838 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004238:	4293      	cmp	r3, r2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x9cc>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e326      	b.n	800488e <HAL_RCC_OscConfig+0x101a>
 8004240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004244:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004248:	2202      	movs	r2, #2
 800424a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004250:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	fa93 f2a3 	rbit	r2, r3
 800425a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800425e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004268:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800426c:	2202      	movs	r2, #2
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004274:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	fa93 f2a3 	rbit	r2, r3
 800427e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004282:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004286:	601a      	str	r2, [r3, #0]
  return(result);
 8004288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800428c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004290:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004292:	fab3 f383 	clz	r3, r3
 8004296:	b2db      	uxtb	r3, r3
 8004298:	095b      	lsrs	r3, r3, #5
 800429a:	b2db      	uxtb	r3, r3
 800429c:	f043 0302 	orr.w	r3, r3, #2
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d102      	bne.n	80042ac <HAL_RCC_OscConfig+0xa38>
 80042a6:	4b42      	ldr	r3, [pc, #264]	@ (80043b0 <HAL_RCC_OscConfig+0xb3c>)
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	e013      	b.n	80042d4 <HAL_RCC_OscConfig+0xa60>
 80042ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042b0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80042b4:	2202      	movs	r2, #2
 80042b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042bc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	fa93 f2a3 	rbit	r2, r3
 80042c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ca:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	4b37      	ldr	r3, [pc, #220]	@ (80043b0 <HAL_RCC_OscConfig+0xb3c>)
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042d8:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 80042dc:	2102      	movs	r1, #2
 80042de:	6011      	str	r1, [r2, #0]
 80042e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042e4:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	fa92 f1a2 	rbit	r1, r2
 80042ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042f2:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80042f6:	6011      	str	r1, [r2, #0]
  return(result);
 80042f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80042fc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004300:	6812      	ldr	r2, [r2, #0]
 8004302:	fab2 f282 	clz	r2, r2
 8004306:	b252      	sxtb	r2, r2
 8004308:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800430c:	b252      	sxtb	r2, r2
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	f002 021f 	and.w	r2, r2, #31
 8004314:	2101      	movs	r1, #1
 8004316:	fa01 f202 	lsl.w	r2, r1, r2
 800431a:	4013      	ands	r3, r2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d083      	beq.n	8004228 <HAL_RCC_OscConfig+0x9b4>
 8004320:	e082      	b.n	8004428 <HAL_RCC_OscConfig+0xbb4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004322:	f7ff fa89 	bl	8003838 <HAL_GetTick>
 8004326:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800432a:	e00b      	b.n	8004344 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800432c:	f7ff fa84 	bl	8003838 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	f241 3288 	movw	r2, #5000	@ 0x1388
 800433c:	4293      	cmp	r3, r2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e2a4      	b.n	800488e <HAL_RCC_OscConfig+0x101a>
 8004344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004348:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800434c:	2202      	movs	r2, #2
 800434e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004354:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	fa93 f2a3 	rbit	r2, r3
 800435e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004362:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800436c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004370:	2202      	movs	r2, #2
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004378:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	fa93 f2a3 	rbit	r2, r3
 8004382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004386:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800438a:	601a      	str	r2, [r3, #0]
  return(result);
 800438c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004390:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004394:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004396:	fab3 f383 	clz	r3, r3
 800439a:	b2db      	uxtb	r3, r3
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	f043 0302 	orr.w	r3, r3, #2
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d104      	bne.n	80043b4 <HAL_RCC_OscConfig+0xb40>
 80043aa:	4b01      	ldr	r3, [pc, #4]	@ (80043b0 <HAL_RCC_OscConfig+0xb3c>)
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	e015      	b.n	80043dc <HAL_RCC_OscConfig+0xb68>
 80043b0:	40021000 	.word	0x40021000
 80043b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043b8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80043bc:	2202      	movs	r2, #2
 80043be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043c4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	fa93 f2a3 	rbit	r2, r3
 80043ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043d2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	4bad      	ldr	r3, [pc, #692]	@ (8004690 <HAL_RCC_OscConfig+0xe1c>)
 80043da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043e0:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 80043e4:	2102      	movs	r1, #2
 80043e6:	6011      	str	r1, [r2, #0]
 80043e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043ec:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 80043f0:	6812      	ldr	r2, [r2, #0]
 80043f2:	fa92 f1a2 	rbit	r1, r2
 80043f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80043fa:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80043fe:	6011      	str	r1, [r2, #0]
  return(result);
 8004400:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004404:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004408:	6812      	ldr	r2, [r2, #0]
 800440a:	fab2 f282 	clz	r2, r2
 800440e:	b252      	sxtb	r2, r2
 8004410:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004414:	b252      	sxtb	r2, r2
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	f002 021f 	and.w	r2, r2, #31
 800441c:	2101      	movs	r1, #1
 800441e:	fa01 f202 	lsl.w	r2, r1, r2
 8004422:	4013      	ands	r3, r2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d181      	bne.n	800432c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004428:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800442c:	2b01      	cmp	r3, #1
 800442e:	d105      	bne.n	800443c <HAL_RCC_OscConfig+0xbc8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004430:	4b97      	ldr	r3, [pc, #604]	@ (8004690 <HAL_RCC_OscConfig+0xe1c>)
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	4a96      	ldr	r2, [pc, #600]	@ (8004690 <HAL_RCC_OscConfig+0xe1c>)
 8004436:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800443a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800443c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004440:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 821f 	beq.w	800488c <HAL_RCC_OscConfig+0x1018>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800444e:	4b90      	ldr	r3, [pc, #576]	@ (8004690 <HAL_RCC_OscConfig+0xe1c>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	2b08      	cmp	r3, #8
 8004458:	f000 8216 	beq.w	8004888 <HAL_RCC_OscConfig+0x1014>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800445c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004460:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	2b02      	cmp	r3, #2
 800446a:	f040 8166 	bne.w	800473a <HAL_RCC_OscConfig+0xec6>
 800446e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004472:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8004476:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800447a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004480:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	fa93 f2a3 	rbit	r2, r3
 800448a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800448e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004492:	601a      	str	r2, [r3, #0]
  return(result);
 8004494:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004498:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800449c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800449e:	fab3 f383 	clz	r3, r3
 80044a2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80044a6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	461a      	mov	r2, r3
 80044ae:	2300      	movs	r3, #0
 80044b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b2:	f7ff f9c1 	bl	8003838 <HAL_GetTick>
 80044b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ba:	e00a      	b.n	80044d2 <HAL_RCC_OscConfig+0xc5e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044bc:	f7ff f9bc 	bl	8003838 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	4a72      	ldr	r2, [pc, #456]	@ (8004694 <HAL_RCC_OscConfig+0xe20>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0xc5e>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e1dd      	b.n	800488e <HAL_RCC_OscConfig+0x101a>
 80044d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044d6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80044da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044e4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	fa93 f2a3 	rbit	r2, r3
 80044ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044f2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80044f6:	601a      	str	r2, [r3, #0]
  return(result);
 80044f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044fc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004500:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004502:	fab3 f383 	clz	r3, r3
 8004506:	b2db      	uxtb	r3, r3
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	b2db      	uxtb	r3, r3
 800450c:	f043 0301 	orr.w	r3, r3, #1
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b01      	cmp	r3, #1
 8004514:	d102      	bne.n	800451c <HAL_RCC_OscConfig+0xca8>
 8004516:	4b5e      	ldr	r3, [pc, #376]	@ (8004690 <HAL_RCC_OscConfig+0xe1c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	e027      	b.n	800456c <HAL_RCC_OscConfig+0xcf8>
 800451c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004520:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004524:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004528:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800452e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	fa93 f2a3 	rbit	r2, r3
 8004538:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800453c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004546:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800454a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004554:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	fa93 f2a3 	rbit	r2, r3
 800455e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004562:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	4b49      	ldr	r3, [pc, #292]	@ (8004690 <HAL_RCC_OscConfig+0xe1c>)
 800456a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004570:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 8004574:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004578:	6011      	str	r1, [r2, #0]
 800457a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800457e:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 8004582:	6812      	ldr	r2, [r2, #0]
 8004584:	fa92 f1a2 	rbit	r1, r2
 8004588:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800458c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004590:	6011      	str	r1, [r2, #0]
  return(result);
 8004592:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004596:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	fab2 f282 	clz	r2, r2
 80045a0:	b252      	sxtb	r2, r2
 80045a2:	f042 0220 	orr.w	r2, r2, #32
 80045a6:	b252      	sxtb	r2, r2
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	f002 021f 	and.w	r2, r2, #31
 80045ae:	2101      	movs	r1, #1
 80045b0:	fa01 f202 	lsl.w	r2, r1, r2
 80045b4:	4013      	ands	r3, r2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d180      	bne.n	80044bc <HAL_RCC_OscConfig+0xc48>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045ba:	4b35      	ldr	r3, [pc, #212]	@ (8004690 <HAL_RCC_OscConfig+0xe1c>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80045c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80045ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	430b      	orrs	r3, r1
 80045dc:	492c      	ldr	r1, [pc, #176]	@ (8004690 <HAL_RCC_OscConfig+0xe1c>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	604b      	str	r3, [r1, #4]
 80045e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045e6:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80045ea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80045ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045f4:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	fa93 f2a3 	rbit	r2, r3
 80045fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004602:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004606:	601a      	str	r2, [r3, #0]
  return(result);
 8004608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800460c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004610:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004612:	fab3 f383 	clz	r3, r3
 8004616:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800461a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	461a      	mov	r2, r3
 8004622:	2301      	movs	r3, #1
 8004624:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004626:	f7ff f907 	bl	8003838 <HAL_GetTick>
 800462a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800462e:	e00a      	b.n	8004646 <HAL_RCC_OscConfig+0xdd2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004630:	f7ff f902 	bl	8003838 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	4a15      	ldr	r2, [pc, #84]	@ (8004694 <HAL_RCC_OscConfig+0xe20>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0xdd2>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e123      	b.n	800488e <HAL_RCC_OscConfig+0x101a>
 8004646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800464a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800464e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004652:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004658:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	fa93 f2a3 	rbit	r2, r3
 8004662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004666:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800466a:	601a      	str	r2, [r3, #0]
  return(result);
 800466c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004670:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004674:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004676:	fab3 f383 	clz	r3, r3
 800467a:	b2db      	uxtb	r3, r3
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	b2db      	uxtb	r3, r3
 8004680:	f043 0301 	orr.w	r3, r3, #1
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b01      	cmp	r3, #1
 8004688:	d106      	bne.n	8004698 <HAL_RCC_OscConfig+0xe24>
 800468a:	4b01      	ldr	r3, [pc, #4]	@ (8004690 <HAL_RCC_OscConfig+0xe1c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	e02b      	b.n	80046e8 <HAL_RCC_OscConfig+0xe74>
 8004690:	40021000 	.word	0x40021000
 8004694:	00030d40 	.word	0x00030d40
 8004698:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800469c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80046a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046aa:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	fa93 f2a3 	rbit	r2, r3
 80046b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046b8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046c2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80046c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046d0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	fa93 f2a3 	rbit	r2, r3
 80046da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046de:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	4b6c      	ldr	r3, [pc, #432]	@ (8004898 <HAL_RCC_OscConfig+0x1024>)
 80046e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046ec:	f5a2 72e2 	sub.w	r2, r2, #452	@ 0x1c4
 80046f0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80046f4:	6011      	str	r1, [r2, #0]
 80046f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046fa:	f5a2 72e2 	sub.w	r2, r2, #452	@ 0x1c4
 80046fe:	6812      	ldr	r2, [r2, #0]
 8004700:	fa92 f1a2 	rbit	r1, r2
 8004704:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004708:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800470c:	6011      	str	r1, [r2, #0]
  return(result);
 800470e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004712:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004716:	6812      	ldr	r2, [r2, #0]
 8004718:	fab2 f282 	clz	r2, r2
 800471c:	b252      	sxtb	r2, r2
 800471e:	f042 0220 	orr.w	r2, r2, #32
 8004722:	b252      	sxtb	r2, r2
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	f002 021f 	and.w	r2, r2, #31
 800472a:	2101      	movs	r1, #1
 800472c:	fa01 f202 	lsl.w	r2, r1, r2
 8004730:	4013      	ands	r3, r2
 8004732:	2b00      	cmp	r3, #0
 8004734:	f43f af7c 	beq.w	8004630 <HAL_RCC_OscConfig+0xdbc>
 8004738:	e0a8      	b.n	800488c <HAL_RCC_OscConfig+0x1018>
 800473a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800473e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004742:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004746:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800474c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	fa93 f2a3 	rbit	r2, r3
 8004756:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800475a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800475e:	601a      	str	r2, [r3, #0]
  return(result);
 8004760:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004764:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004768:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800476a:	fab3 f383 	clz	r3, r3
 800476e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004772:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	461a      	mov	r2, r3
 800477a:	2300      	movs	r3, #0
 800477c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477e:	f7ff f85b 	bl	8003838 <HAL_GetTick>
 8004782:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004786:	e00a      	b.n	800479e <HAL_RCC_OscConfig+0xf2a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004788:	f7ff f856 	bl	8003838 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	4a41      	ldr	r2, [pc, #260]	@ (800489c <HAL_RCC_OscConfig+0x1028>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0xf2a>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e077      	b.n	800488e <HAL_RCC_OscConfig+0x101a>
 800479e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047a2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80047a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047b0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	fa93 f2a3 	rbit	r2, r3
 80047ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047be:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80047c2:	601a      	str	r2, [r3, #0]
  return(result);
 80047c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047c8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80047cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047ce:	fab3 f383 	clz	r3, r3
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	095b      	lsrs	r3, r3, #5
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d102      	bne.n	80047e8 <HAL_RCC_OscConfig+0xf74>
 80047e2:	4b2d      	ldr	r3, [pc, #180]	@ (8004898 <HAL_RCC_OscConfig+0x1024>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	e027      	b.n	8004838 <HAL_RCC_OscConfig+0xfc4>
 80047e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ec:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80047f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047fa:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	fa93 f2a3 	rbit	r2, r3
 8004804:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004808:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004812:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004816:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004820:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	fa93 f2a3 	rbit	r2, r3
 800482a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800482e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	4b18      	ldr	r3, [pc, #96]	@ (8004898 <HAL_RCC_OscConfig+0x1024>)
 8004836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004838:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800483c:	f5a2 72f6 	sub.w	r2, r2, #492	@ 0x1ec
 8004840:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004844:	6011      	str	r1, [r2, #0]
 8004846:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800484a:	f5a2 72f6 	sub.w	r2, r2, #492	@ 0x1ec
 800484e:	6812      	ldr	r2, [r2, #0]
 8004850:	fa92 f1a2 	rbit	r1, r2
 8004854:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004858:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800485c:	6011      	str	r1, [r2, #0]
  return(result);
 800485e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004862:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	fab2 f282 	clz	r2, r2
 800486c:	b252      	sxtb	r2, r2
 800486e:	f042 0220 	orr.w	r2, r2, #32
 8004872:	b252      	sxtb	r2, r2
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	f002 021f 	and.w	r2, r2, #31
 800487a:	2101      	movs	r1, #1
 800487c:	fa01 f202 	lsl.w	r2, r1, r2
 8004880:	4013      	ands	r3, r2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d180      	bne.n	8004788 <HAL_RCC_OscConfig+0xf14>
 8004886:	e001      	b.n	800488c <HAL_RCC_OscConfig+0x1018>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e000      	b.n	800488e <HAL_RCC_OscConfig+0x101a>
    }
  }
  
  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	40021000 	.word	0x40021000
 800489c:	00030d40 	.word	0x00030d40

080048a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b09c      	sub	sp, #112	@ 0x70
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80048ae:	4b98      	ldr	r3, [pc, #608]	@ (8004b10 <HAL_RCC_ClockConfig+0x270>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d910      	bls.n	80048de <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048bc:	4b94      	ldr	r3, [pc, #592]	@ (8004b10 <HAL_RCC_ClockConfig+0x270>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f023 0207 	bic.w	r2, r3, #7
 80048c4:	4992      	ldr	r1, [pc, #584]	@ (8004b10 <HAL_RCC_ClockConfig+0x270>)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80048cc:	4b90      	ldr	r3, [pc, #576]	@ (8004b10 <HAL_RCC_ClockConfig+0x270>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d001      	beq.n	80048de <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e15a      	b.n	8004b94 <HAL_RCC_ClockConfig+0x2f4>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d008      	beq.n	80048fc <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ea:	4b8a      	ldr	r3, [pc, #552]	@ (8004b14 <HAL_RCC_ClockConfig+0x274>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	4987      	ldr	r1, [pc, #540]	@ (8004b14 <HAL_RCC_ClockConfig+0x274>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 810d 	beq.w	8004b24 <HAL_RCC_ClockConfig+0x284>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d13d      	bne.n	800498e <HAL_RCC_ClockConfig+0xee>
 8004912:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004916:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004918:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800491a:	fa93 f3a3 	rbit	r3, r3
 800491e:	667b      	str	r3, [r7, #100]	@ 0x64
  return(result);
 8004920:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004922:	fab3 f383 	clz	r3, r3
 8004926:	b2db      	uxtb	r3, r3
 8004928:	095b      	lsrs	r3, r3, #5
 800492a:	b2db      	uxtb	r3, r3
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b01      	cmp	r3, #1
 8004934:	d102      	bne.n	800493c <HAL_RCC_ClockConfig+0x9c>
 8004936:	4b77      	ldr	r3, [pc, #476]	@ (8004b14 <HAL_RCC_ClockConfig+0x274>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	e00f      	b.n	800495c <HAL_RCC_ClockConfig+0xbc>
 800493c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004940:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004942:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004944:	fa93 f3a3 	rbit	r3, r3
 8004948:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800494a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800494e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004950:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004952:	fa93 f3a3 	rbit	r3, r3
 8004956:	657b      	str	r3, [r7, #84]	@ 0x54
 8004958:	4b6e      	ldr	r3, [pc, #440]	@ (8004b14 <HAL_RCC_ClockConfig+0x274>)
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004960:	653a      	str	r2, [r7, #80]	@ 0x50
 8004962:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004964:	fa92 f2a2 	rbit	r2, r2
 8004968:	64fa      	str	r2, [r7, #76]	@ 0x4c
  return(result);
 800496a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800496c:	fab2 f282 	clz	r2, r2
 8004970:	b252      	sxtb	r2, r2
 8004972:	f042 0220 	orr.w	r2, r2, #32
 8004976:	b252      	sxtb	r2, r2
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	f002 021f 	and.w	r2, r2, #31
 800497e:	2101      	movs	r1, #1
 8004980:	fa01 f202 	lsl.w	r2, r1, r2
 8004984:	4013      	ands	r3, r2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d17d      	bne.n	8004a86 <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e102      	b.n	8004b94 <HAL_RCC_ClockConfig+0x2f4>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d13d      	bne.n	8004a12 <HAL_RCC_ClockConfig+0x172>
 8004996:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800499a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800499e:	fa93 f3a3 	rbit	r3, r3
 80049a2:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 80049a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049a6:	fab3 f383 	clz	r3, r3
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	095b      	lsrs	r3, r3, #5
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	f043 0301 	orr.w	r3, r3, #1
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d102      	bne.n	80049c0 <HAL_RCC_ClockConfig+0x120>
 80049ba:	4b56      	ldr	r3, [pc, #344]	@ (8004b14 <HAL_RCC_ClockConfig+0x274>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	e00f      	b.n	80049e0 <HAL_RCC_ClockConfig+0x140>
 80049c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049c8:	fa93 f3a3 	rbit	r3, r3
 80049cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d6:	fa93 f3a3 	rbit	r3, r3
 80049da:	637b      	str	r3, [r7, #52]	@ 0x34
 80049dc:	4b4d      	ldr	r3, [pc, #308]	@ (8004b14 <HAL_RCC_ClockConfig+0x274>)
 80049de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80049e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80049e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049e8:	fa92 f2a2 	rbit	r2, r2
 80049ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
  return(result);
 80049ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049f0:	fab2 f282 	clz	r2, r2
 80049f4:	b252      	sxtb	r2, r2
 80049f6:	f042 0220 	orr.w	r2, r2, #32
 80049fa:	b252      	sxtb	r2, r2
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	f002 021f 	and.w	r2, r2, #31
 8004a02:	2101      	movs	r1, #1
 8004a04:	fa01 f202 	lsl.w	r2, r1, r2
 8004a08:	4013      	ands	r3, r2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d13b      	bne.n	8004a86 <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e0c0      	b.n	8004b94 <HAL_RCC_ClockConfig+0x2f4>
 8004a12:	2302      	movs	r3, #2
 8004a14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a18:	fa93 f3a3 	rbit	r3, r3
 8004a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a20:	fab3 f383 	clz	r3, r3
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	095b      	lsrs	r3, r3, #5
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	f043 0301 	orr.w	r3, r3, #1
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d102      	bne.n	8004a3a <HAL_RCC_ClockConfig+0x19a>
 8004a34:	4b37      	ldr	r3, [pc, #220]	@ (8004b14 <HAL_RCC_ClockConfig+0x274>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	e00d      	b.n	8004a56 <HAL_RCC_ClockConfig+0x1b6>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	fa93 f3a3 	rbit	r3, r3
 8004a44:	61fb      	str	r3, [r7, #28]
 8004a46:	2302      	movs	r3, #2
 8004a48:	61bb      	str	r3, [r7, #24]
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	fa93 f3a3 	rbit	r3, r3
 8004a50:	617b      	str	r3, [r7, #20]
 8004a52:	4b30      	ldr	r3, [pc, #192]	@ (8004b14 <HAL_RCC_ClockConfig+0x274>)
 8004a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a56:	2202      	movs	r2, #2
 8004a58:	613a      	str	r2, [r7, #16]
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	fa92 f2a2 	rbit	r2, r2
 8004a60:	60fa      	str	r2, [r7, #12]
  return(result);
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	fab2 f282 	clz	r2, r2
 8004a68:	b252      	sxtb	r2, r2
 8004a6a:	f042 0220 	orr.w	r2, r2, #32
 8004a6e:	b252      	sxtb	r2, r2
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	f002 021f 	and.w	r2, r2, #31
 8004a76:	2101      	movs	r1, #1
 8004a78:	fa01 f202 	lsl.w	r2, r1, r2
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e086      	b.n	8004b94 <HAL_RCC_ClockConfig+0x2f4>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a86:	4b23      	ldr	r3, [pc, #140]	@ (8004b14 <HAL_RCC_ClockConfig+0x274>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f023 0203 	bic.w	r2, r3, #3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	4920      	ldr	r1, [pc, #128]	@ (8004b14 <HAL_RCC_ClockConfig+0x274>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a98:	f7fe fece 	bl	8003838 <HAL_GetTick>
 8004a9c:	66f8      	str	r0, [r7, #108]	@ 0x6c
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d112      	bne.n	8004acc <HAL_RCC_ClockConfig+0x22c>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004aa6:	e00a      	b.n	8004abe <HAL_RCC_ClockConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa8:	f7fe fec6 	bl	8003838 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_ClockConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e06a      	b.n	8004b94 <HAL_RCC_ClockConfig+0x2f4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004abe:	4b15      	ldr	r3, [pc, #84]	@ (8004b14 <HAL_RCC_ClockConfig+0x274>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f003 030c 	and.w	r3, r3, #12
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d1ee      	bne.n	8004aa8 <HAL_RCC_ClockConfig+0x208>
 8004aca:	e02b      	b.n	8004b24 <HAL_RCC_ClockConfig+0x284>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d121      	bne.n	8004b18 <HAL_RCC_ClockConfig+0x278>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ad4:	e00a      	b.n	8004aec <HAL_RCC_ClockConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad6:	f7fe feaf 	bl	8003838 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_ClockConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e053      	b.n	8004b94 <HAL_RCC_ClockConfig+0x2f4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aec:	4b09      	ldr	r3, [pc, #36]	@ (8004b14 <HAL_RCC_ClockConfig+0x274>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f003 030c 	and.w	r3, r3, #12
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d1ee      	bne.n	8004ad6 <HAL_RCC_ClockConfig+0x236>
 8004af8:	e014      	b.n	8004b24 <HAL_RCC_ClockConfig+0x284>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004afa:	f7fe fe9d 	bl	8003838 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d905      	bls.n	8004b18 <HAL_RCC_ClockConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e041      	b.n	8004b94 <HAL_RCC_ClockConfig+0x2f4>
 8004b10:	40022000 	.word	0x40022000
 8004b14:	40021000 	.word	0x40021000
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b18:	4b20      	ldr	r3, [pc, #128]	@ (8004b9c <HAL_RCC_ClockConfig+0x2fc>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 030c 	and.w	r3, r3, #12
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1ea      	bne.n	8004afa <HAL_RCC_ClockConfig+0x25a>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004b24:	4b1e      	ldr	r3, [pc, #120]	@ (8004ba0 <HAL_RCC_ClockConfig+0x300>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d210      	bcs.n	8004b54 <HAL_RCC_ClockConfig+0x2b4>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b32:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba0 <HAL_RCC_ClockConfig+0x300>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f023 0207 	bic.w	r2, r3, #7
 8004b3a:	4919      	ldr	r1, [pc, #100]	@ (8004ba0 <HAL_RCC_ClockConfig+0x300>)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b42:	4b17      	ldr	r3, [pc, #92]	@ (8004ba0 <HAL_RCC_ClockConfig+0x300>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d001      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x2b4>
    {
      return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e01f      	b.n	8004b94 <HAL_RCC_ClockConfig+0x2f4>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d008      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x2d2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b60:	4b0e      	ldr	r3, [pc, #56]	@ (8004b9c <HAL_RCC_ClockConfig+0x2fc>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	490b      	ldr	r1, [pc, #44]	@ (8004b9c <HAL_RCC_ClockConfig+0x2fc>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0308 	and.w	r3, r3, #8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d009      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b7e:	4b07      	ldr	r3, [pc, #28]	@ (8004b9c <HAL_RCC_ClockConfig+0x2fc>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	4903      	ldr	r1, [pc, #12]	@ (8004b9c <HAL_RCC_ClockConfig+0x2fc>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	604b      	str	r3, [r1, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3770      	adds	r7, #112	@ 0x70
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	40022000 	.word	0x40022000

08004ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  //return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
  return F_CPU;
 8004ba8:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8004bca:	e154      	b.n	8004e76 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd8:	4013      	ands	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 8146 	beq.w	8004e70 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d003      	beq.n	8004bf4 <HAL_GPIO_Init+0x40>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2b12      	cmp	r3, #18
 8004bf2:	d123      	bne.n	8004c3c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	08da      	lsrs	r2, r3, #3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3208      	adds	r2, #8
 8004bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c00:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	220f      	movs	r2, #15
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	43db      	mvns	r3, r3
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4013      	ands	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	691a      	ldr	r2, [r3, #16]
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	08da      	lsrs	r2, r3, #3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3208      	adds	r2, #8
 8004c36:	6939      	ldr	r1, [r7, #16]
 8004c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	2203      	movs	r2, #3
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	43db      	mvns	r3, r3
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4013      	ands	r3, r2
 8004c52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f003 0203 	and.w	r2, r3, #3
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d00b      	beq.n	8004c90 <HAL_GPIO_Init+0xdc>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d007      	beq.n	8004c90 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c84:	2b11      	cmp	r3, #17
 8004c86:	d003      	beq.n	8004c90 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b12      	cmp	r3, #18
 8004c8e:	d130      	bne.n	8004cf2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	2203      	movs	r2, #3
 8004c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca0:	43db      	mvns	r3, r3
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	fa02 f303 	lsl.w	r3, r2, r3
 8004cce:	43db      	mvns	r3, r3
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	091b      	lsrs	r3, r3, #4
 8004cdc:	f003 0201 	and.w	r2, r3, #1
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43db      	mvns	r3, r3
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4013      	ands	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 80a0 	beq.w	8004e70 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d30:	4b58      	ldr	r3, [pc, #352]	@ (8004e94 <HAL_GPIO_Init+0x2e0>)
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	4a57      	ldr	r2, [pc, #348]	@ (8004e94 <HAL_GPIO_Init+0x2e0>)
 8004d36:	f043 0301 	orr.w	r3, r3, #1
 8004d3a:	6193      	str	r3, [r2, #24]
 8004d3c:	4b55      	ldr	r3, [pc, #340]	@ (8004e94 <HAL_GPIO_Init+0x2e0>)
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	60bb      	str	r3, [r7, #8]
 8004d46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8004d48:	4a53      	ldr	r2, [pc, #332]	@ (8004e98 <HAL_GPIO_Init+0x2e4>)
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	089b      	lsrs	r3, r3, #2
 8004d4e:	3302      	adds	r3, #2
 8004d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d54:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f003 0303 	and.w	r3, r3, #3
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	220f      	movs	r2, #15
 8004d60:	fa02 f303 	lsl.w	r3, r2, r3
 8004d64:	43db      	mvns	r3, r3
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004d72:	d019      	beq.n	8004da8 <HAL_GPIO_Init+0x1f4>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a49      	ldr	r2, [pc, #292]	@ (8004e9c <HAL_GPIO_Init+0x2e8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d013      	beq.n	8004da4 <HAL_GPIO_Init+0x1f0>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a48      	ldr	r2, [pc, #288]	@ (8004ea0 <HAL_GPIO_Init+0x2ec>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00d      	beq.n	8004da0 <HAL_GPIO_Init+0x1ec>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a47      	ldr	r2, [pc, #284]	@ (8004ea4 <HAL_GPIO_Init+0x2f0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d007      	beq.n	8004d9c <HAL_GPIO_Init+0x1e8>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a46      	ldr	r2, [pc, #280]	@ (8004ea8 <HAL_GPIO_Init+0x2f4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d101      	bne.n	8004d98 <HAL_GPIO_Init+0x1e4>
 8004d94:	2304      	movs	r3, #4
 8004d96:	e008      	b.n	8004daa <HAL_GPIO_Init+0x1f6>
 8004d98:	2305      	movs	r3, #5
 8004d9a:	e006      	b.n	8004daa <HAL_GPIO_Init+0x1f6>
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e004      	b.n	8004daa <HAL_GPIO_Init+0x1f6>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e002      	b.n	8004daa <HAL_GPIO_Init+0x1f6>
 8004da4:	2301      	movs	r3, #1
 8004da6:	e000      	b.n	8004daa <HAL_GPIO_Init+0x1f6>
 8004da8:	2300      	movs	r3, #0
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	f002 0203 	and.w	r2, r2, #3
 8004db0:	0092      	lsls	r2, r2, #2
 8004db2:	4093      	lsls	r3, r2
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004dba:	4937      	ldr	r1, [pc, #220]	@ (8004e98 <HAL_GPIO_Init+0x2e4>)
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	089b      	lsrs	r3, r3, #2
 8004dc0:	3302      	adds	r3, #2
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dc8:	4b38      	ldr	r3, [pc, #224]	@ (8004eac <HAL_GPIO_Init+0x2f8>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004dec:	4a2f      	ldr	r2, [pc, #188]	@ (8004eac <HAL_GPIO_Init+0x2f8>)
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004df2:	4b2e      	ldr	r3, [pc, #184]	@ (8004eac <HAL_GPIO_Init+0x2f8>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	43db      	mvns	r3, r3
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004e16:	4a25      	ldr	r2, [pc, #148]	@ (8004eac <HAL_GPIO_Init+0x2f8>)
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e1c:	4b23      	ldr	r3, [pc, #140]	@ (8004eac <HAL_GPIO_Init+0x2f8>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	43db      	mvns	r3, r3
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d003      	beq.n	8004e40 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004e40:	4a1a      	ldr	r2, [pc, #104]	@ (8004eac <HAL_GPIO_Init+0x2f8>)
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e46:	4b19      	ldr	r3, [pc, #100]	@ (8004eac <HAL_GPIO_Init+0x2f8>)
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	43db      	mvns	r3, r3
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	4013      	ands	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004e6a:	4a10      	ldr	r2, [pc, #64]	@ (8004eac <HAL_GPIO_Init+0x2f8>)
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	3301      	adds	r3, #1
 8004e74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f47f aea3 	bne.w	8004bcc <HAL_GPIO_Init+0x18>
  }
}
 8004e86:	bf00      	nop
 8004e88:	bf00      	nop
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bc80      	pop	{r7}
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40021000 	.word	0x40021000
 8004e98:	40010000 	.word	0x40010000
 8004e9c:	48000400 	.word	0x48000400
 8004ea0:	48000800 	.word	0x48000800
 8004ea4:	48000c00 	.word	0x48000c00
 8004ea8:	48001000 	.word	0x48001000
 8004eac:	40010400 	.word	0x40010400

08004eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	807b      	strh	r3, [r7, #2]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ec0:	787b      	ldrb	r3, [r7, #1]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ec6:	887a      	ldrh	r2, [r7, #2]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ecc:	e002      	b.n	8004ed4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ece:	887a      	ldrh	r2, [r7, #2]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bc80      	pop	{r7}
 8004edc:	4770      	bx	lr
 8004ede:	0000      	movs	r0, r0

08004ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8004eec:	2310      	movs	r3, #16
 8004eee:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004f1e:	f023 030c 	bic.w	r3, r3, #12
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6812      	ldr	r2, [r2, #0]
 8004f26:	68f9      	ldr	r1, [r7, #12]
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4aa1      	ldr	r2, [pc, #644]	@ (80051ec <UART_SetConfig+0x30c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d120      	bne.n	8004fae <UART_SetConfig+0xce>
 8004f6c:	4ba0      	ldr	r3, [pc, #640]	@ (80051f0 <UART_SetConfig+0x310>)
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f70:	f003 0303 	and.w	r3, r3, #3
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d817      	bhi.n	8004fa8 <UART_SetConfig+0xc8>
 8004f78:	a201      	add	r2, pc, #4	@ (adr r2, 8004f80 <UART_SetConfig+0xa0>)
 8004f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7e:	bf00      	nop
 8004f80:	08004f91 	.word	0x08004f91
 8004f84:	08004f9d 	.word	0x08004f9d
 8004f88:	08004fa3 	.word	0x08004fa3
 8004f8c:	08004f97 	.word	0x08004f97
 8004f90:	2301      	movs	r3, #1
 8004f92:	75fb      	strb	r3, [r7, #23]
 8004f94:	e0b5      	b.n	8005102 <UART_SetConfig+0x222>
 8004f96:	2302      	movs	r3, #2
 8004f98:	75fb      	strb	r3, [r7, #23]
 8004f9a:	e0b2      	b.n	8005102 <UART_SetConfig+0x222>
 8004f9c:	2304      	movs	r3, #4
 8004f9e:	75fb      	strb	r3, [r7, #23]
 8004fa0:	e0af      	b.n	8005102 <UART_SetConfig+0x222>
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	75fb      	strb	r3, [r7, #23]
 8004fa6:	e0ac      	b.n	8005102 <UART_SetConfig+0x222>
 8004fa8:	2310      	movs	r3, #16
 8004faa:	75fb      	strb	r3, [r7, #23]
 8004fac:	e0a9      	b.n	8005102 <UART_SetConfig+0x222>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a90      	ldr	r2, [pc, #576]	@ (80051f4 <UART_SetConfig+0x314>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d124      	bne.n	8005002 <UART_SetConfig+0x122>
 8004fb8:	4b8d      	ldr	r3, [pc, #564]	@ (80051f0 <UART_SetConfig+0x310>)
 8004fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004fc0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004fc4:	d011      	beq.n	8004fea <UART_SetConfig+0x10a>
 8004fc6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004fca:	d817      	bhi.n	8004ffc <UART_SetConfig+0x11c>
 8004fcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fd0:	d011      	beq.n	8004ff6 <UART_SetConfig+0x116>
 8004fd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004fd6:	d811      	bhi.n	8004ffc <UART_SetConfig+0x11c>
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <UART_SetConfig+0x104>
 8004fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fe0:	d006      	beq.n	8004ff0 <UART_SetConfig+0x110>
 8004fe2:	e00b      	b.n	8004ffc <UART_SetConfig+0x11c>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	75fb      	strb	r3, [r7, #23]
 8004fe8:	e08b      	b.n	8005102 <UART_SetConfig+0x222>
 8004fea:	2302      	movs	r3, #2
 8004fec:	75fb      	strb	r3, [r7, #23]
 8004fee:	e088      	b.n	8005102 <UART_SetConfig+0x222>
 8004ff0:	2304      	movs	r3, #4
 8004ff2:	75fb      	strb	r3, [r7, #23]
 8004ff4:	e085      	b.n	8005102 <UART_SetConfig+0x222>
 8004ff6:	2308      	movs	r3, #8
 8004ff8:	75fb      	strb	r3, [r7, #23]
 8004ffa:	e082      	b.n	8005102 <UART_SetConfig+0x222>
 8004ffc:	2310      	movs	r3, #16
 8004ffe:	75fb      	strb	r3, [r7, #23]
 8005000:	e07f      	b.n	8005102 <UART_SetConfig+0x222>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a7c      	ldr	r2, [pc, #496]	@ (80051f8 <UART_SetConfig+0x318>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d124      	bne.n	8005056 <UART_SetConfig+0x176>
 800500c:	4b78      	ldr	r3, [pc, #480]	@ (80051f0 <UART_SetConfig+0x310>)
 800500e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005010:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005014:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005018:	d011      	beq.n	800503e <UART_SetConfig+0x15e>
 800501a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800501e:	d817      	bhi.n	8005050 <UART_SetConfig+0x170>
 8005020:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005024:	d011      	beq.n	800504a <UART_SetConfig+0x16a>
 8005026:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800502a:	d811      	bhi.n	8005050 <UART_SetConfig+0x170>
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <UART_SetConfig+0x158>
 8005030:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005034:	d006      	beq.n	8005044 <UART_SetConfig+0x164>
 8005036:	e00b      	b.n	8005050 <UART_SetConfig+0x170>
 8005038:	2300      	movs	r3, #0
 800503a:	75fb      	strb	r3, [r7, #23]
 800503c:	e061      	b.n	8005102 <UART_SetConfig+0x222>
 800503e:	2302      	movs	r3, #2
 8005040:	75fb      	strb	r3, [r7, #23]
 8005042:	e05e      	b.n	8005102 <UART_SetConfig+0x222>
 8005044:	2304      	movs	r3, #4
 8005046:	75fb      	strb	r3, [r7, #23]
 8005048:	e05b      	b.n	8005102 <UART_SetConfig+0x222>
 800504a:	2308      	movs	r3, #8
 800504c:	75fb      	strb	r3, [r7, #23]
 800504e:	e058      	b.n	8005102 <UART_SetConfig+0x222>
 8005050:	2310      	movs	r3, #16
 8005052:	75fb      	strb	r3, [r7, #23]
 8005054:	e055      	b.n	8005102 <UART_SetConfig+0x222>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a68      	ldr	r2, [pc, #416]	@ (80051fc <UART_SetConfig+0x31c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d124      	bne.n	80050aa <UART_SetConfig+0x1ca>
 8005060:	4b63      	ldr	r3, [pc, #396]	@ (80051f0 <UART_SetConfig+0x310>)
 8005062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005064:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005068:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800506c:	d011      	beq.n	8005092 <UART_SetConfig+0x1b2>
 800506e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005072:	d817      	bhi.n	80050a4 <UART_SetConfig+0x1c4>
 8005074:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005078:	d011      	beq.n	800509e <UART_SetConfig+0x1be>
 800507a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800507e:	d811      	bhi.n	80050a4 <UART_SetConfig+0x1c4>
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <UART_SetConfig+0x1ac>
 8005084:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005088:	d006      	beq.n	8005098 <UART_SetConfig+0x1b8>
 800508a:	e00b      	b.n	80050a4 <UART_SetConfig+0x1c4>
 800508c:	2300      	movs	r3, #0
 800508e:	75fb      	strb	r3, [r7, #23]
 8005090:	e037      	b.n	8005102 <UART_SetConfig+0x222>
 8005092:	2302      	movs	r3, #2
 8005094:	75fb      	strb	r3, [r7, #23]
 8005096:	e034      	b.n	8005102 <UART_SetConfig+0x222>
 8005098:	2304      	movs	r3, #4
 800509a:	75fb      	strb	r3, [r7, #23]
 800509c:	e031      	b.n	8005102 <UART_SetConfig+0x222>
 800509e:	2308      	movs	r3, #8
 80050a0:	75fb      	strb	r3, [r7, #23]
 80050a2:	e02e      	b.n	8005102 <UART_SetConfig+0x222>
 80050a4:	2310      	movs	r3, #16
 80050a6:	75fb      	strb	r3, [r7, #23]
 80050a8:	e02b      	b.n	8005102 <UART_SetConfig+0x222>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a54      	ldr	r2, [pc, #336]	@ (8005200 <UART_SetConfig+0x320>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d124      	bne.n	80050fe <UART_SetConfig+0x21e>
 80050b4:	4b4e      	ldr	r3, [pc, #312]	@ (80051f0 <UART_SetConfig+0x310>)
 80050b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80050bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80050c0:	d011      	beq.n	80050e6 <UART_SetConfig+0x206>
 80050c2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80050c6:	d817      	bhi.n	80050f8 <UART_SetConfig+0x218>
 80050c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050cc:	d011      	beq.n	80050f2 <UART_SetConfig+0x212>
 80050ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80050d2:	d811      	bhi.n	80050f8 <UART_SetConfig+0x218>
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <UART_SetConfig+0x200>
 80050d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050dc:	d006      	beq.n	80050ec <UART_SetConfig+0x20c>
 80050de:	e00b      	b.n	80050f8 <UART_SetConfig+0x218>
 80050e0:	2300      	movs	r3, #0
 80050e2:	75fb      	strb	r3, [r7, #23]
 80050e4:	e00d      	b.n	8005102 <UART_SetConfig+0x222>
 80050e6:	2302      	movs	r3, #2
 80050e8:	75fb      	strb	r3, [r7, #23]
 80050ea:	e00a      	b.n	8005102 <UART_SetConfig+0x222>
 80050ec:	2304      	movs	r3, #4
 80050ee:	75fb      	strb	r3, [r7, #23]
 80050f0:	e007      	b.n	8005102 <UART_SetConfig+0x222>
 80050f2:	2308      	movs	r3, #8
 80050f4:	75fb      	strb	r3, [r7, #23]
 80050f6:	e004      	b.n	8005102 <UART_SetConfig+0x222>
 80050f8:	2310      	movs	r3, #16
 80050fa:	75fb      	strb	r3, [r7, #23]
 80050fc:	e001      	b.n	8005102 <UART_SetConfig+0x222>
 80050fe:	2310      	movs	r3, #16
 8005100:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800510a:	d17b      	bne.n	8005204 <UART_SetConfig+0x324>
  {
    switch (clocksource)
 800510c:	7dfb      	ldrb	r3, [r7, #23]
 800510e:	2b08      	cmp	r3, #8
 8005110:	d856      	bhi.n	80051c0 <UART_SetConfig+0x2e0>
 8005112:	a201      	add	r2, pc, #4	@ (adr r2, 8005118 <UART_SetConfig+0x238>)
 8005114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005118:	0800513d 	.word	0x0800513d
 800511c:	08005159 	.word	0x08005159
 8005120:	08005175 	.word	0x08005175
 8005124:	080051c1 	.word	0x080051c1
 8005128:	0800518f 	.word	0x0800518f
 800512c:	080051c1 	.word	0x080051c1
 8005130:	080051c1 	.word	0x080051c1
 8005134:	080051c1 	.word	0x080051c1
 8005138:	080051ab 	.word	0x080051ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800513c:	f7fe fb92 	bl	8003864 <HAL_RCC_GetPCLK1Freq>
 8005140:	4603      	mov	r3, r0
 8005142:	005a      	lsls	r2, r3, #1
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	085b      	lsrs	r3, r3, #1
 800514a:	441a      	add	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	fbb2 f3f3 	udiv	r3, r2, r3
 8005154:	82bb      	strh	r3, [r7, #20]
        break;
 8005156:	e036      	b.n	80051c6 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005158:	f7ff fd24 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 800515c:	4603      	mov	r3, r0
 800515e:	005a      	lsls	r2, r3, #1
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	085b      	lsrs	r3, r3, #1
 8005166:	441a      	add	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005170:	82bb      	strh	r3, [r7, #20]
        break;
 8005172:	e028      	b.n	80051c6 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	085b      	lsrs	r3, r3, #1
 800517a:	f103 73f4 	add.w	r3, r3, #31981568	@ 0x1e80000
 800517e:	f503 4390 	add.w	r3, r3, #18432	@ 0x4800
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6852      	ldr	r2, [r2, #4]
 8005186:	fbb3 f3f2 	udiv	r3, r3, r2
 800518a:	82bb      	strh	r3, [r7, #20]
        break;
 800518c:	e01b      	b.n	80051c6 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800518e:	f7fe fb61 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8005192:	4603      	mov	r3, r0
 8005194:	005a      	lsls	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	085b      	lsrs	r3, r3, #1
 800519c:	441a      	add	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a6:	82bb      	strh	r3, [r7, #20]
        break;
 80051a8:	e00d      	b.n	80051c6 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	085b      	lsrs	r3, r3, #1
 80051b0:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051bc:	82bb      	strh	r3, [r7, #20]
        break;
 80051be:	e002      	b.n	80051c6 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	74fb      	strb	r3, [r7, #19]
        break;
 80051c4:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80051c6:	8abb      	ldrh	r3, [r7, #20]
 80051c8:	f023 030f 	bic.w	r3, r3, #15
 80051cc:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051ce:	8abb      	ldrh	r3, [r7, #20]
 80051d0:	105b      	asrs	r3, r3, #1
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	b29a      	uxth	r2, r3
 80051da:	897b      	ldrh	r3, [r7, #10]
 80051dc:	4313      	orrs	r3, r2
 80051de:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	897a      	ldrh	r2, [r7, #10]
 80051e6:	60da      	str	r2, [r3, #12]
 80051e8:	e075      	b.n	80052d6 <UART_SetConfig+0x3f6>
 80051ea:	bf00      	nop
 80051ec:	40013800 	.word	0x40013800
 80051f0:	40021000 	.word	0x40021000
 80051f4:	40004400 	.word	0x40004400
 80051f8:	40004800 	.word	0x40004800
 80051fc:	40004c00 	.word	0x40004c00
 8005200:	40005000 	.word	0x40005000
  }
  else
  {
    switch (clocksource)
 8005204:	7dfb      	ldrb	r3, [r7, #23]
 8005206:	2b08      	cmp	r3, #8
 8005208:	d862      	bhi.n	80052d0 <UART_SetConfig+0x3f0>
 800520a:	a201      	add	r2, pc, #4	@ (adr r2, 8005210 <UART_SetConfig+0x330>)
 800520c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005210:	08005235 	.word	0x08005235
 8005214:	08005255 	.word	0x08005255
 8005218:	08005275 	.word	0x08005275
 800521c:	080052d1 	.word	0x080052d1
 8005220:	08005295 	.word	0x08005295
 8005224:	080052d1 	.word	0x080052d1
 8005228:	080052d1 	.word	0x080052d1
 800522c:	080052d1 	.word	0x080052d1
 8005230:	080052b5 	.word	0x080052b5
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005234:	f7fe fb16 	bl	8003864 <HAL_RCC_GetPCLK1Freq>
 8005238:	4602      	mov	r2, r0
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	085b      	lsrs	r3, r3, #1
 8005240:	441a      	add	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	fbb2 f3f3 	udiv	r3, r2, r3
 800524a:	b29a      	uxth	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	60da      	str	r2, [r3, #12]
        break;
 8005252:	e040      	b.n	80052d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005254:	f7ff fca6 	bl	8004ba4 <HAL_RCC_GetPCLK2Freq>
 8005258:	4602      	mov	r2, r0
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	085b      	lsrs	r3, r3, #1
 8005260:	441a      	add	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	fbb2 f3f3 	udiv	r3, r2, r3
 800526a:	b29a      	uxth	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	60da      	str	r2, [r3, #12]
        break;
 8005272:	e030      	b.n	80052d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	085b      	lsrs	r3, r3, #1
 800527a:	f503 0374 	add.w	r3, r3, #15990784	@ 0xf40000
 800527e:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6852      	ldr	r2, [r2, #4]
 8005286:	fbb3 f3f2 	udiv	r3, r3, r2
 800528a:	b29a      	uxth	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	60da      	str	r2, [r3, #12]
        break;
 8005292:	e020      	b.n	80052d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005294:	f7fe fade 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8005298:	4602      	mov	r2, r0
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	085b      	lsrs	r3, r3, #1
 80052a0:	441a      	add	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	60da      	str	r2, [r3, #12]
        break;
 80052b2:	e010      	b.n	80052d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	085b      	lsrs	r3, r3, #1
 80052ba:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	60da      	str	r2, [r3, #12]
        break;
 80052ce:	e002      	b.n	80052d6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	74fb      	strb	r3, [r7, #19]
        break;
 80052d4:	bf00      	nop
    }
  }

  return ret;
 80052d6:	7cfb      	ldrb	r3, [r7, #19]

}
 80052d8:	4618      	mov	r0, r3
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af02      	add	r7, sp, #8
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80052f2:	f7fe faa1 	bl	8003838 <HAL_GetTick>
 80052f6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b08      	cmp	r3, #8
 8005304:	d10e      	bne.n	8005324 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005306:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f873 	bl	8005400 <UART_WaitOnFlagUntilTimeout>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e022      	b.n	800536a <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	2b04      	cmp	r3, #4
 8005330:	d10e      	bne.n	8005350 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005332:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f85d 	bl	8005400 <UART_WaitOnFlagUntilTimeout>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e00c      	b.n	800536a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2220      	movs	r2, #32
 8005354:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2220      	movs	r2, #32
 800535c:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b082      	sub	sp, #8
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e039      	b.n	80053f8 <HAL_UART_Init+0x86>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d103      	bne.n	8005398 <HAL_UART_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    //HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2224      	movs	r2, #36	@ 0x24
 800539c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0201 	bic.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7ff fd95 	bl	8004ee0 <UART_SetConfig>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e01b      	b.n	80053f8 <HAL_UART_Init+0x86>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053de:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0201 	orr.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return UART_CheckIdleState(huart);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff ff75 	bl	80052e0 <UART_CheckIdleState>
 80053f6:	4603      	mov	r3, r0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	4613      	mov	r3, r2
 800540e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005410:	e02c      	b.n	800546c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005418:	d028      	beq.n	800546c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d007      	beq.n	8005430 <UART_WaitOnFlagUntilTimeout+0x30>
 8005420:	f7fe fa0a 	bl	8003838 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	429a      	cmp	r2, r3
 800542e:	d21d      	bcs.n	800546c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800543e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0201 	bic.w	r2, r2, #1
 800544e:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2220      	movs	r2, #32
 800545c:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e00f      	b.n	800548c <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	69da      	ldr	r2, [r3, #28]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	4013      	ands	r3, r2
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	429a      	cmp	r2, r3
 800547a:	bf0c      	ite	eq
 800547c:	2301      	moveq	r3, #1
 800547e:	2300      	movne	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	461a      	mov	r2, r3
 8005484:	79fb      	ldrb	r3, [r7, #7]
 8005486:	429a      	cmp	r2, r3
 8005488:	d0c3      	beq.n	8005412 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af02      	add	r7, sp, #8
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	603b      	str	r3, [r7, #0]
 80054a0:	4613      	mov	r3, r2
 80054a2:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80054a4:	2300      	movs	r3, #0
 80054a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b20      	cmp	r3, #32
 80054b2:	d176      	bne.n	80055a2 <HAL_UART_Transmit+0x10e>
  {
    if((pData == NULL ) || (Size == 0U))
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <HAL_UART_Transmit+0x2c>
 80054ba:	88fb      	ldrh	r3, [r7, #6]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e06f      	b.n	80055a4 <HAL_UART_Transmit+0x110>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d101      	bne.n	80054d2 <HAL_UART_Transmit+0x3e>
 80054ce:	2302      	movs	r3, #2
 80054d0:	e068      	b.n	80055a4 <HAL_UART_Transmit+0x110>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2221      	movs	r2, #33	@ 0x21
 80054e4:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80054e8:	f7fe f9a6 	bl	8003838 <HAL_GetTick>
 80054ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	88fa      	ldrh	r2, [r7, #6]
 80054f2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	88fa      	ldrh	r2, [r7, #6]
 80054fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while(huart->TxXferCount > 0U)
 80054fe:	e033      	b.n	8005568 <HAL_UART_Transmit+0xd4>
    {
      huart->TxXferCount--;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005506:	b29b      	uxth	r3, r3
 8005508:	3b01      	subs	r3, #1
 800550a:	b29a      	uxth	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2200      	movs	r2, #0
 800551a:	2180      	movs	r1, #128	@ 0x80
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f7ff ff6f 	bl	8005400 <UART_WaitOnFlagUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e03b      	b.n	80055a4 <HAL_UART_Transmit+0x110>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005534:	d111      	bne.n	800555a <HAL_UART_Transmit+0xc6>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10d      	bne.n	800555a <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	881a      	ldrh	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800554e:	b292      	uxth	r2, r2
 8005550:	851a      	strh	r2, [r3, #40]	@ 0x28
        pData += 2U;
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	3302      	adds	r3, #2
 8005556:	60bb      	str	r3, [r7, #8]
 8005558:	e006      	b.n	8005568 <HAL_UART_Transmit+0xd4>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	60ba      	str	r2, [r7, #8]
 8005560:	781a      	ldrb	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	851a      	strh	r2, [r3, #40]	@ 0x28
    while(huart->TxXferCount > 0U)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800556e:	b29b      	uxth	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1c5      	bne.n	8005500 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	2200      	movs	r2, #0
 800557c:	2140      	movs	r1, #64	@ 0x40
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f7ff ff3e 	bl	8005400 <UART_WaitOnFlagUntilTimeout>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <HAL_UART_Transmit+0xfa>
    {
      return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e00a      	b.n	80055a4 <HAL_UART_Transmit+0x110>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2220      	movs	r2, #32
 8005592:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    return HAL_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	e000      	b.n	80055a4 <HAL_UART_Transmit+0x110>
  }
  else
  {
    return HAL_BUSY;
 80055a2:	2302      	movs	r3, #2
  }
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08a      	sub	sp, #40	@ 0x28
 80055b0:	af02      	add	r7, sp, #8
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	603b      	str	r3, [r7, #0]
 80055b8:	4613      	mov	r3, r2
 80055ba:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b20      	cmp	r3, #32
 80055ca:	f040 809f 	bne.w	800570c <HAL_UART_Receive+0x160>
  {
    if((pData == NULL ) || (Size == 0U))
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d002      	beq.n	80055da <HAL_UART_Receive+0x2e>
 80055d4:	88fb      	ldrh	r3, [r7, #6]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e097      	b.n	800570e <HAL_UART_Receive+0x162>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_UART_Receive+0x40>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e090      	b.n	800570e <HAL_UART_Receive+0x162>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f04f 32ff 	mov.w	r2, #4294967295
 80055fc:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2222      	movs	r2, #34	@ 0x22
 8005608:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800560c:	f7fe f914 	bl	8003838 <HAL_GetTick>
 8005610:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize = Size;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	88fa      	ldrh	r2, [r7, #6]
 8005616:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	88fa      	ldrh	r2, [r7, #6]
 800561e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800562a:	d10e      	bne.n	800564a <HAL_UART_Receive+0x9e>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d105      	bne.n	8005640 <HAL_UART_Receive+0x94>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800563a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800563e:	e015      	b.n	800566c <HAL_UART_Receive+0xc0>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	22ff      	movs	r2, #255	@ 0xff
 8005644:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005648:	e010      	b.n	800566c <HAL_UART_Receive+0xc0>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10c      	bne.n	800566c <HAL_UART_Receive+0xc0>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d104      	bne.n	8005664 <HAL_UART_Receive+0xb8>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	22ff      	movs	r2, #255	@ 0xff
 800565e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005662:	e003      	b.n	800566c <HAL_UART_Receive+0xc0>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	227f      	movs	r2, #127	@ 0x7f
 8005668:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005672:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8005674:	e03a      	b.n	80056ec <HAL_UART_Receive+0x140>
    {
      huart->RxXferCount--;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800567c:	b29b      	uxth	r3, r3
 800567e:	3b01      	subs	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	2200      	movs	r2, #0
 8005690:	2120      	movs	r1, #32
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f7ff feb4 	bl	8005400 <UART_WaitOnFlagUntilTimeout>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <HAL_UART_Receive+0xf6>
      {
        return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e035      	b.n	800570e <HAL_UART_Receive+0x162>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056aa:	d112      	bne.n	80056d2 <HAL_UART_Receive+0x126>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10e      	bne.n	80056d2 <HAL_UART_Receive+0x126>
      {
        tmp = (uint16_t*) pData ;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80056be:	b29a      	uxth	r2, r3
 80056c0:	8b7b      	ldrh	r3, [r7, #26]
 80056c2:	4013      	ands	r3, r2
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	3302      	adds	r3, #2
 80056ce:	60bb      	str	r3, [r7, #8]
 80056d0:	e00c      	b.n	80056ec <HAL_UART_Receive+0x140>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80056d8:	b29b      	uxth	r3, r3
 80056da:	b2d9      	uxtb	r1, r3
 80056dc:	8b7b      	ldrh	r3, [r7, #26]
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	1c58      	adds	r0, r3, #1
 80056e4:	60b8      	str	r0, [r7, #8]
 80056e6:	400a      	ands	r2, r1
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1be      	bne.n	8005676 <HAL_UART_Receive+0xca>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    return HAL_OK;
 8005708:	2300      	movs	r3, #0
 800570a:	e000      	b.n	800570e <HAL_UART_Receive+0x162>
  }
  else
  {
    return HAL_BUSY;
 800570c:	2302      	movs	r3, #2
  }
}
 800570e:	4618      	mov	r0, r3
 8005710:	3720      	adds	r7, #32
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	0000      	movs	r0, r0

08005718 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
char *_sbrk(int incr)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005720:	4b11      	ldr	r3, [pc, #68]	@ (8005768 <_sbrk+0x50>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d102      	bne.n	800572e <_sbrk+0x16>
		heap_end = &end;
 8005728:	4b0f      	ldr	r3, [pc, #60]	@ (8005768 <_sbrk+0x50>)
 800572a:	4a10      	ldr	r2, [pc, #64]	@ (800576c <_sbrk+0x54>)
 800572c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800572e:	4b0e      	ldr	r3, [pc, #56]	@ (8005768 <_sbrk+0x50>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005734:	4b0c      	ldr	r3, [pc, #48]	@ (8005768 <_sbrk+0x50>)
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4413      	add	r3, r2
 800573c:	466a      	mov	r2, sp
 800573e:	4293      	cmp	r3, r2
 8005740:	d907      	bls.n	8005752 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005742:	f7fb fde9 	bl	8001318 <__errno>
 8005746:	4603      	mov	r3, r0
 8005748:	220c      	movs	r2, #12
 800574a:	601a      	str	r2, [r3, #0]
		return (char *) -1;
 800574c:	f04f 33ff 	mov.w	r3, #4294967295
 8005750:	e006      	b.n	8005760 <_sbrk+0x48>
	}

	heap_end += incr;
 8005752:	4b05      	ldr	r3, [pc, #20]	@ (8005768 <_sbrk+0x50>)
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4413      	add	r3, r2
 800575a:	4a03      	ldr	r2, [pc, #12]	@ (8005768 <_sbrk+0x50>)
 800575c:	6013      	str	r3, [r2, #0]

	return (char *) prev_heap_end;
 800575e:	68fb      	ldr	r3, [r7, #12]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	200001ac 	.word	0x200001ac
 800576c:	20000330 	.word	0x20000330

08005770 <Reset_Handler>:
 8005770:	2100      	movs	r1, #0
 8005772:	e003      	b.n	800577c <LoopCopyDataInit>

08005774 <CopyDataInit>:
 8005774:	4b0b      	ldr	r3, [pc, #44]	@ (80057a4 <LoopForever+0x2>)
 8005776:	585b      	ldr	r3, [r3, r1]
 8005778:	5043      	str	r3, [r0, r1]
 800577a:	3104      	adds	r1, #4

0800577c <LoopCopyDataInit>:
 800577c:	480a      	ldr	r0, [pc, #40]	@ (80057a8 <LoopForever+0x6>)
 800577e:	4b0b      	ldr	r3, [pc, #44]	@ (80057ac <LoopForever+0xa>)
 8005780:	1842      	adds	r2, r0, r1
 8005782:	429a      	cmp	r2, r3
 8005784:	d3f6      	bcc.n	8005774 <CopyDataInit>
 8005786:	4a0a      	ldr	r2, [pc, #40]	@ (80057b0 <LoopForever+0xe>)
 8005788:	e002      	b.n	8005790 <LoopFillZerobss>

0800578a <FillZerobss>:
 800578a:	2300      	movs	r3, #0
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	3204      	adds	r2, #4

08005790 <LoopFillZerobss>:
 8005790:	4b08      	ldr	r3, [pc, #32]	@ (80057b4 <LoopForever+0x12>)
 8005792:	429a      	cmp	r2, r3
 8005794:	d3f9      	bcc.n	800578a <FillZerobss>
 8005796:	f3af 8000 	nop.w
 800579a:	f7fb fdc3 	bl	8001324 <__libc_init_array>
 800579e:	f7fd fa1d 	bl	8002bdc <main>

080057a2 <LoopForever>:
 80057a2:	e7fe      	b.n	80057a2 <LoopForever>
 80057a4:	080058cc 	.word	0x080058cc
 80057a8:	20000000 	.word	0x20000000
 80057ac:	2000006c 	.word	0x2000006c
 80057b0:	2000006c 	.word	0x2000006c
 80057b4:	20000330 	.word	0x20000330

080057b8 <BusFault_Handler>:
 80057b8:	e7fe      	b.n	80057b8 <BusFault_Handler>
 80057ba:	0000      	movs	r0, r0

080057bc <_init>:
 80057bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057be:	bf00      	nop
 80057c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057c2:	bc08      	pop	{r3}
 80057c4:	469e      	mov	lr, r3
 80057c6:	4770      	bx	lr

080057c8 <_fini>:
 80057c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ca:	bf00      	nop
 80057cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ce:	bc08      	pop	{r3}
 80057d0:	469e      	mov	lr, r3
 80057d2:	4770      	bx	lr
