
simpleserial-target-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ae0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08005c70  08005c70  00006c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d80  08005d80  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d80  08005d80  00006d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d88  08005d88  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d88  08005d88  00006d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d8c  08005d8c  00006d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005d90  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  2000006c  08005dfc  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000330  08005dfc  00007330  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f56  00000000  00000000  00007096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051ce  00000000  00000000  0001dfec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000012a6  00000000  00000000  000231ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  00024460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000210  00000000  00000000  00024c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000917b  00000000  00000000  00024e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000030a9  00000000  00000000  0002dfd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000012  00000000  00000000  0003107c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019b8  00000000  00000000  00031090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  00032a48  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000070  00000000  00000000  00032b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loclists 0000307d  00000000  00000000  00032bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_rnglists 000002b3  00000000  00000000  00035c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 00000140  00000000  00000000  00035f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <exp>:
 8000190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000192:	4604      	mov	r4, r0
 8000194:	460d      	mov	r5, r1
 8000196:	f000 f83b 	bl	8000210 <__ieee754_exp>
 800019a:	4606      	mov	r6, r0
 800019c:	460f      	mov	r7, r1
 800019e:	4620      	mov	r0, r4
 80001a0:	4629      	mov	r1, r5
 80001a2:	f000 f82f 	bl	8000204 <finite>
 80001a6:	b178      	cbz	r0, 80001c8 <exp+0x38>
 80001a8:	a311      	add	r3, pc, #68	@ (adr r3, 80001f0 <exp+0x60>)
 80001aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80001ae:	4620      	mov	r0, r4
 80001b0:	4629      	mov	r1, r5
 80001b2:	f000 febd 	bl	8000f30 <__aeabi_dcmpgt>
 80001b6:	b950      	cbnz	r0, 80001ce <exp+0x3e>
 80001b8:	a30f      	add	r3, pc, #60	@ (adr r3, 80001f8 <exp+0x68>)
 80001ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80001be:	4620      	mov	r0, r4
 80001c0:	4629      	mov	r1, r5
 80001c2:	f000 fe97 	bl	8000ef4 <__aeabi_dcmplt>
 80001c6:	b958      	cbnz	r0, 80001e0 <exp+0x50>
 80001c8:	4630      	mov	r0, r6
 80001ca:	4639      	mov	r1, r7
 80001cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80001ce:	f001 fadf 	bl	8001790 <__errno>
 80001d2:	4f0b      	ldr	r7, [pc, #44]	@ (8000200 <exp+0x70>)
 80001d4:	2322      	movs	r3, #34	@ 0x22
 80001d6:	2600      	movs	r6, #0
 80001d8:	6003      	str	r3, [r0, #0]
 80001da:	4639      	mov	r1, r7
 80001dc:	4630      	mov	r0, r6
 80001de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80001e0:	f001 fad6 	bl	8001790 <__errno>
 80001e4:	2322      	movs	r3, #34	@ 0x22
 80001e6:	6003      	str	r3, [r0, #0]
 80001e8:	2600      	movs	r6, #0
 80001ea:	2700      	movs	r7, #0
 80001ec:	e7ec      	b.n	80001c8 <exp+0x38>
 80001ee:	bf00      	nop
 80001f0:	fefa39ef 	.word	0xfefa39ef
 80001f4:	40862e42 	.word	0x40862e42
 80001f8:	d52d3051 	.word	0xd52d3051
 80001fc:	c0874910 	.word	0xc0874910
 8000200:	7ff00000 	.word	0x7ff00000

08000204 <finite>:
 8000204:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8000208:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800020c:	0fc0      	lsrs	r0, r0, #31
 800020e:	4770      	bx	lr

08000210 <__ieee754_exp>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	4dce      	ldr	r5, [pc, #824]	@ (8000550 <__ieee754_exp+0x340>)
 8000216:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800021a:	42aa      	cmp	r2, r5
 800021c:	b084      	sub	sp, #16
 800021e:	4606      	mov	r6, r0
 8000220:	460f      	mov	r7, r1
 8000222:	ea4f 74d1 	mov.w	r4, r1, lsr #31
 8000226:	d90d      	bls.n	8000244 <__ieee754_exp+0x34>
 8000228:	4dca      	ldr	r5, [pc, #808]	@ (8000554 <__ieee754_exp+0x344>)
 800022a:	42aa      	cmp	r2, r5
 800022c:	d96d      	bls.n	800030a <__ieee754_exp+0xfa>
 800022e:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8000232:	4303      	orrs	r3, r0
 8000234:	4602      	mov	r2, r0
 8000236:	f040 8140 	bne.w	80004ba <__ieee754_exp+0x2aa>
 800023a:	2c00      	cmp	r4, #0
 800023c:	d062      	beq.n	8000304 <__ieee754_exp+0xf4>
 800023e:	2000      	movs	r0, #0
 8000240:	2100      	movs	r1, #0
 8000242:	e05f      	b.n	8000304 <__ieee754_exp+0xf4>
 8000244:	4bc4      	ldr	r3, [pc, #784]	@ (8000558 <__ieee754_exp+0x348>)
 8000246:	429a      	cmp	r2, r3
 8000248:	f200 8121 	bhi.w	800048e <__ieee754_exp+0x27e>
 800024c:	4bc3      	ldr	r3, [pc, #780]	@ (800055c <__ieee754_exp+0x34c>)
 800024e:	429a      	cmp	r2, r3
 8000250:	f240 810a 	bls.w	8000468 <__ieee754_exp+0x258>
 8000254:	4632      	mov	r2, r6
 8000256:	463b      	mov	r3, r7
 8000258:	4630      	mov	r0, r6
 800025a:	4639      	mov	r1, r7
 800025c:	f000 fbd8 	bl	8000a10 <__aeabi_dmul>
 8000260:	a3a5      	add	r3, pc, #660	@ (adr r3, 80004f8 <__ieee754_exp+0x2e8>)
 8000262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000266:	4604      	mov	r4, r0
 8000268:	460d      	mov	r5, r1
 800026a:	f000 fbd1 	bl	8000a10 <__aeabi_dmul>
 800026e:	a3a4      	add	r3, pc, #656	@ (adr r3, 8000500 <__ieee754_exp+0x2f0>)
 8000270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000274:	f000 fa14 	bl	80006a0 <__aeabi_dsub>
 8000278:	4622      	mov	r2, r4
 800027a:	462b      	mov	r3, r5
 800027c:	f000 fbc8 	bl	8000a10 <__aeabi_dmul>
 8000280:	a3a1      	add	r3, pc, #644	@ (adr r3, 8000508 <__ieee754_exp+0x2f8>)
 8000282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000286:	f000 fa0d 	bl	80006a4 <__adddf3>
 800028a:	4622      	mov	r2, r4
 800028c:	462b      	mov	r3, r5
 800028e:	f000 fbbf 	bl	8000a10 <__aeabi_dmul>
 8000292:	a39f      	add	r3, pc, #636	@ (adr r3, 8000510 <__ieee754_exp+0x300>)
 8000294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000298:	f000 fa02 	bl	80006a0 <__aeabi_dsub>
 800029c:	4622      	mov	r2, r4
 800029e:	462b      	mov	r3, r5
 80002a0:	f000 fbb6 	bl	8000a10 <__aeabi_dmul>
 80002a4:	a39c      	add	r3, pc, #624	@ (adr r3, 8000518 <__ieee754_exp+0x308>)
 80002a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002aa:	f000 f9fb 	bl	80006a4 <__adddf3>
 80002ae:	4622      	mov	r2, r4
 80002b0:	462b      	mov	r3, r5
 80002b2:	f000 fbad 	bl	8000a10 <__aeabi_dmul>
 80002b6:	4602      	mov	r2, r0
 80002b8:	460b      	mov	r3, r1
 80002ba:	4630      	mov	r0, r6
 80002bc:	4639      	mov	r1, r7
 80002be:	f000 f9ef 	bl	80006a0 <__aeabi_dsub>
 80002c2:	4602      	mov	r2, r0
 80002c4:	460b      	mov	r3, r1
 80002c6:	4630      	mov	r0, r6
 80002c8:	4639      	mov	r1, r7
 80002ca:	4690      	mov	r8, r2
 80002cc:	4699      	mov	r9, r3
 80002ce:	f000 fb9f 	bl	8000a10 <__aeabi_dmul>
 80002d2:	2200      	movs	r2, #0
 80002d4:	4604      	mov	r4, r0
 80002d6:	460d      	mov	r5, r1
 80002d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002dc:	4640      	mov	r0, r8
 80002de:	4649      	mov	r1, r9
 80002e0:	f000 f9de 	bl	80006a0 <__aeabi_dsub>
 80002e4:	4602      	mov	r2, r0
 80002e6:	460b      	mov	r3, r1
 80002e8:	4620      	mov	r0, r4
 80002ea:	4629      	mov	r1, r5
 80002ec:	f000 fcba 	bl	8000c64 <__aeabi_ddiv>
 80002f0:	4632      	mov	r2, r6
 80002f2:	463b      	mov	r3, r7
 80002f4:	f000 f9d4 	bl	80006a0 <__aeabi_dsub>
 80002f8:	4602      	mov	r2, r0
 80002fa:	460b      	mov	r3, r1
 80002fc:	2000      	movs	r0, #0
 80002fe:	4998      	ldr	r1, [pc, #608]	@ (8000560 <__ieee754_exp+0x350>)
 8000300:	f000 f9ce 	bl	80006a0 <__aeabi_dsub>
 8000304:	b004      	add	sp, #16
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	a385      	add	r3, pc, #532	@ (adr r3, 8000520 <__ieee754_exp+0x310>)
 800030c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000310:	f000 fe0e 	bl	8000f30 <__aeabi_dcmpgt>
 8000314:	4605      	mov	r5, r0
 8000316:	2800      	cmp	r0, #0
 8000318:	f040 80d5 	bne.w	80004c6 <__ieee754_exp+0x2b6>
 800031c:	a382      	add	r3, pc, #520	@ (adr r3, 8000528 <__ieee754_exp+0x318>)
 800031e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000322:	4630      	mov	r0, r6
 8000324:	4639      	mov	r1, r7
 8000326:	f000 fde5 	bl	8000ef4 <__aeabi_dcmplt>
 800032a:	2800      	cmp	r0, #0
 800032c:	f040 80dd 	bne.w	80004ea <__ieee754_exp+0x2da>
 8000330:	4b8c      	ldr	r3, [pc, #560]	@ (8000564 <__ieee754_exp+0x354>)
 8000332:	4630      	mov	r0, r6
 8000334:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8000338:	4639      	mov	r1, r7
 800033a:	a37d      	add	r3, pc, #500	@ (adr r3, 8000530 <__ieee754_exp+0x320>)
 800033c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000340:	f000 fb66 	bl	8000a10 <__aeabi_dmul>
 8000344:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8000348:	f000 f9ac 	bl	80006a4 <__adddf3>
 800034c:	f000 fe10 	bl	8000f70 <__aeabi_d2iz>
 8000350:	4682      	mov	sl, r0
 8000352:	f000 faf3 	bl	800093c <__aeabi_i2d>
 8000356:	a378      	add	r3, pc, #480	@ (adr r3, 8000538 <__ieee754_exp+0x328>)
 8000358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800035c:	4604      	mov	r4, r0
 800035e:	460d      	mov	r5, r1
 8000360:	f000 fb56 	bl	8000a10 <__aeabi_dmul>
 8000364:	4602      	mov	r2, r0
 8000366:	460b      	mov	r3, r1
 8000368:	4630      	mov	r0, r6
 800036a:	4639      	mov	r1, r7
 800036c:	f000 f998 	bl	80006a0 <__aeabi_dsub>
 8000370:	a373      	add	r3, pc, #460	@ (adr r3, 8000540 <__ieee754_exp+0x330>)
 8000372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000376:	4680      	mov	r8, r0
 8000378:	4689      	mov	r9, r1
 800037a:	4620      	mov	r0, r4
 800037c:	4629      	mov	r1, r5
 800037e:	f000 fb47 	bl	8000a10 <__aeabi_dmul>
 8000382:	e9cd 0100 	strd	r0, r1, [sp]
 8000386:	e9dd 2300 	ldrd	r2, r3, [sp]
 800038a:	4640      	mov	r0, r8
 800038c:	4649      	mov	r1, r9
 800038e:	f000 f987 	bl	80006a0 <__aeabi_dsub>
 8000392:	4602      	mov	r2, r0
 8000394:	460b      	mov	r3, r1
 8000396:	4606      	mov	r6, r0
 8000398:	460f      	mov	r7, r1
 800039a:	f000 fb39 	bl	8000a10 <__aeabi_dmul>
 800039e:	a356      	add	r3, pc, #344	@ (adr r3, 80004f8 <__ieee754_exp+0x2e8>)
 80003a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003a4:	4604      	mov	r4, r0
 80003a6:	460d      	mov	r5, r1
 80003a8:	f000 fb32 	bl	8000a10 <__aeabi_dmul>
 80003ac:	a354      	add	r3, pc, #336	@ (adr r3, 8000500 <__ieee754_exp+0x2f0>)
 80003ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003b2:	f000 f975 	bl	80006a0 <__aeabi_dsub>
 80003b6:	4622      	mov	r2, r4
 80003b8:	462b      	mov	r3, r5
 80003ba:	f000 fb29 	bl	8000a10 <__aeabi_dmul>
 80003be:	a352      	add	r3, pc, #328	@ (adr r3, 8000508 <__ieee754_exp+0x2f8>)
 80003c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003c4:	f000 f96e 	bl	80006a4 <__adddf3>
 80003c8:	4622      	mov	r2, r4
 80003ca:	462b      	mov	r3, r5
 80003cc:	f000 fb20 	bl	8000a10 <__aeabi_dmul>
 80003d0:	a34f      	add	r3, pc, #316	@ (adr r3, 8000510 <__ieee754_exp+0x300>)
 80003d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003d6:	f000 f963 	bl	80006a0 <__aeabi_dsub>
 80003da:	4622      	mov	r2, r4
 80003dc:	462b      	mov	r3, r5
 80003de:	f000 fb17 	bl	8000a10 <__aeabi_dmul>
 80003e2:	a34d      	add	r3, pc, #308	@ (adr r3, 8000518 <__ieee754_exp+0x308>)
 80003e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003e8:	f000 f95c 	bl	80006a4 <__adddf3>
 80003ec:	4622      	mov	r2, r4
 80003ee:	462b      	mov	r3, r5
 80003f0:	f000 fb0e 	bl	8000a10 <__aeabi_dmul>
 80003f4:	4602      	mov	r2, r0
 80003f6:	460b      	mov	r3, r1
 80003f8:	4630      	mov	r0, r6
 80003fa:	4639      	mov	r1, r7
 80003fc:	f000 f950 	bl	80006a0 <__aeabi_dsub>
 8000400:	4602      	mov	r2, r0
 8000402:	460b      	mov	r3, r1
 8000404:	4604      	mov	r4, r0
 8000406:	460d      	mov	r5, r1
 8000408:	4630      	mov	r0, r6
 800040a:	4639      	mov	r1, r7
 800040c:	f000 fb00 	bl	8000a10 <__aeabi_dmul>
 8000410:	4622      	mov	r2, r4
 8000412:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000416:	462b      	mov	r3, r5
 8000418:	f1ba 0f00 	cmp.w	sl, #0
 800041c:	f43f af53 	beq.w	80002c6 <__ieee754_exp+0xb6>
 8000420:	2000      	movs	r0, #0
 8000422:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000426:	f000 f93b 	bl	80006a0 <__aeabi_dsub>
 800042a:	4602      	mov	r2, r0
 800042c:	460b      	mov	r3, r1
 800042e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000432:	f000 fc17 	bl	8000c64 <__aeabi_ddiv>
 8000436:	4602      	mov	r2, r0
 8000438:	460b      	mov	r3, r1
 800043a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800043e:	f000 f92f 	bl	80006a0 <__aeabi_dsub>
 8000442:	4642      	mov	r2, r8
 8000444:	464b      	mov	r3, r9
 8000446:	f000 f92b 	bl	80006a0 <__aeabi_dsub>
 800044a:	4602      	mov	r2, r0
 800044c:	460b      	mov	r3, r1
 800044e:	2000      	movs	r0, #0
 8000450:	4943      	ldr	r1, [pc, #268]	@ (8000560 <__ieee754_exp+0x350>)
 8000452:	f000 f925 	bl	80006a0 <__aeabi_dsub>
 8000456:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 800045a:	4592      	cmp	sl, r2
 800045c:	db39      	blt.n	80004d2 <__ieee754_exp+0x2c2>
 800045e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8000462:	b004      	add	sp, #16
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	a337      	add	r3, pc, #220	@ (adr r3, 8000548 <__ieee754_exp+0x338>)
 800046a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800046e:	f000 f919 	bl	80006a4 <__adddf3>
 8000472:	4b3b      	ldr	r3, [pc, #236]	@ (8000560 <__ieee754_exp+0x350>)
 8000474:	2200      	movs	r2, #0
 8000476:	f000 fd5b 	bl	8000f30 <__aeabi_dcmpgt>
 800047a:	2800      	cmp	r0, #0
 800047c:	f43f aeea 	beq.w	8000254 <__ieee754_exp+0x44>
 8000480:	4b37      	ldr	r3, [pc, #220]	@ (8000560 <__ieee754_exp+0x350>)
 8000482:	2200      	movs	r2, #0
 8000484:	4630      	mov	r0, r6
 8000486:	4639      	mov	r1, r7
 8000488:	f000 f90c 	bl	80006a4 <__adddf3>
 800048c:	e73a      	b.n	8000304 <__ieee754_exp+0xf4>
 800048e:	4b36      	ldr	r3, [pc, #216]	@ (8000568 <__ieee754_exp+0x358>)
 8000490:	429a      	cmp	r2, r3
 8000492:	f63f af4d 	bhi.w	8000330 <__ieee754_exp+0x120>
 8000496:	4d33      	ldr	r5, [pc, #204]	@ (8000564 <__ieee754_exp+0x354>)
 8000498:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800049c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80004a0:	f000 f8fe 	bl	80006a0 <__aeabi_dsub>
 80004a4:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80004a8:	f1c4 0a01 	rsb	sl, r4, #1
 80004ac:	e9cd 2300 	strd	r2, r3, [sp]
 80004b0:	4680      	mov	r8, r0
 80004b2:	4689      	mov	r9, r1
 80004b4:	ebaa 0a04 	sub.w	sl, sl, r4
 80004b8:	e765      	b.n	8000386 <__ieee754_exp+0x176>
 80004ba:	460b      	mov	r3, r1
 80004bc:	f000 f8f2 	bl	80006a4 <__adddf3>
 80004c0:	b004      	add	sp, #16
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	2000      	movs	r0, #0
 80004c8:	b004      	add	sp, #16
 80004ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004ce:	f000 b877 	b.w	80005c0 <__math_oflow>
 80004d2:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 80004d6:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80004da:	2200      	movs	r2, #0
 80004dc:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 80004e0:	f000 fa96 	bl	8000a10 <__aeabi_dmul>
 80004e4:	b004      	add	sp, #16
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	4628      	mov	r0, r5
 80004ec:	b004      	add	sp, #16
 80004ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004f2:	f000 b85b 	b.w	80005ac <__math_uflow>
 80004f6:	bf00      	nop
 80004f8:	72bea4d0 	.word	0x72bea4d0
 80004fc:	3e663769 	.word	0x3e663769
 8000500:	c5d26bf1 	.word	0xc5d26bf1
 8000504:	3ebbbd41 	.word	0x3ebbbd41
 8000508:	af25de2c 	.word	0xaf25de2c
 800050c:	3f11566a 	.word	0x3f11566a
 8000510:	16bebd93 	.word	0x16bebd93
 8000514:	3f66c16c 	.word	0x3f66c16c
 8000518:	5555553e 	.word	0x5555553e
 800051c:	3fc55555 	.word	0x3fc55555
 8000520:	fefa39ef 	.word	0xfefa39ef
 8000524:	40862e42 	.word	0x40862e42
 8000528:	d52d3051 	.word	0xd52d3051
 800052c:	c0874910 	.word	0xc0874910
 8000530:	652b82fe 	.word	0x652b82fe
 8000534:	3ff71547 	.word	0x3ff71547
 8000538:	fee00000 	.word	0xfee00000
 800053c:	3fe62e42 	.word	0x3fe62e42
 8000540:	35793c76 	.word	0x35793c76
 8000544:	3dea39ef 	.word	0x3dea39ef
 8000548:	8800759c 	.word	0x8800759c
 800054c:	7e37e43c 	.word	0x7e37e43c
 8000550:	40862e41 	.word	0x40862e41
 8000554:	7fefffff 	.word	0x7fefffff
 8000558:	3fd62e42 	.word	0x3fd62e42
 800055c:	3defffff 	.word	0x3defffff
 8000560:	3ff00000 	.word	0x3ff00000
 8000564:	08005c80 	.word	0x08005c80
 8000568:	3ff0a2b1 	.word	0x3ff0a2b1

0800056c <with_errno>:
 800056c:	b5d0      	push	{r4, r6, r7, lr}
 800056e:	4606      	mov	r6, r0
 8000570:	460f      	mov	r7, r1
 8000572:	4614      	mov	r4, r2
 8000574:	f001 f90c 	bl	8001790 <__errno>
 8000578:	4603      	mov	r3, r0
 800057a:	4639      	mov	r1, r7
 800057c:	4630      	mov	r0, r6
 800057e:	601c      	str	r4, [r3, #0]
 8000580:	bdd0      	pop	{r4, r6, r7, pc}
 8000582:	bf00      	nop

08000584 <xflow>:
 8000584:	b510      	push	{r4, lr}
 8000586:	4604      	mov	r4, r0
 8000588:	b082      	sub	sp, #8
 800058a:	4610      	mov	r0, r2
 800058c:	4619      	mov	r1, r3
 800058e:	b10c      	cbz	r4, 8000594 <xflow+0x10>
 8000590:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000594:	e9cd 2300 	strd	r2, r3, [sp]
 8000598:	e9dd 2300 	ldrd	r2, r3, [sp]
 800059c:	f000 fa38 	bl	8000a10 <__aeabi_dmul>
 80005a0:	2222      	movs	r2, #34	@ 0x22
 80005a2:	b002      	add	sp, #8
 80005a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005a8:	e7e0      	b.n	800056c <with_errno>
 80005aa:	bf00      	nop

080005ac <__math_uflow>:
 80005ac:	2200      	movs	r2, #0
 80005ae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80005b2:	e7e7      	b.n	8000584 <xflow>

080005b4 <__math_may_uflow>:
 80005b4:	4b01      	ldr	r3, [pc, #4]	@ (80005bc <__math_may_uflow+0x8>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	e7e4      	b.n	8000584 <xflow>
 80005ba:	bf00      	nop
 80005bc:	1e580000 	.word	0x1e580000

080005c0 <__math_oflow>:
 80005c0:	2200      	movs	r2, #0
 80005c2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80005c6:	e7dd      	b.n	8000584 <xflow>

080005c8 <__math_divzero>:
 80005c8:	b500      	push	{lr}
 80005ca:	2200      	movs	r2, #0
 80005cc:	b083      	sub	sp, #12
 80005ce:	b168      	cbz	r0, 80005ec <__math_divzero+0x24>
 80005d0:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <__math_divzero+0x28>)
 80005d2:	e9cd 2300 	strd	r2, r3, [sp]
 80005d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80005da:	2200      	movs	r2, #0
 80005dc:	2300      	movs	r3, #0
 80005de:	f000 fb41 	bl	8000c64 <__aeabi_ddiv>
 80005e2:	2222      	movs	r2, #34	@ 0x22
 80005e4:	b003      	add	sp, #12
 80005e6:	f85d eb04 	ldr.w	lr, [sp], #4
 80005ea:	e7bf      	b.n	800056c <with_errno>
 80005ec:	4b01      	ldr	r3, [pc, #4]	@ (80005f4 <__math_divzero+0x2c>)
 80005ee:	e7f0      	b.n	80005d2 <__math_divzero+0xa>
 80005f0:	bff00000 	.word	0xbff00000
 80005f4:	3ff00000 	.word	0x3ff00000

080005f8 <__math_invalid>:
 80005f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fa:	4602      	mov	r2, r0
 80005fc:	460b      	mov	r3, r1
 80005fe:	4604      	mov	r4, r0
 8000600:	460d      	mov	r5, r1
 8000602:	f000 f84d 	bl	80006a0 <__aeabi_dsub>
 8000606:	4602      	mov	r2, r0
 8000608:	460b      	mov	r3, r1
 800060a:	f000 fb2b 	bl	8000c64 <__aeabi_ddiv>
 800060e:	4622      	mov	r2, r4
 8000610:	4606      	mov	r6, r0
 8000612:	460f      	mov	r7, r1
 8000614:	462b      	mov	r3, r5
 8000616:	4620      	mov	r0, r4
 8000618:	4629      	mov	r1, r5
 800061a:	f000 fc93 	bl	8000f44 <__aeabi_dcmpun>
 800061e:	b928      	cbnz	r0, 800062c <__math_invalid+0x34>
 8000620:	4630      	mov	r0, r6
 8000622:	4639      	mov	r1, r7
 8000624:	2221      	movs	r2, #33	@ 0x21
 8000626:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800062a:	e79f      	b.n	800056c <with_errno>
 800062c:	4630      	mov	r0, r6
 800062e:	4639      	mov	r1, r7
 8000630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000632:	bf00      	nop

08000634 <__math_check_uflow>:
 8000634:	b538      	push	{r3, r4, r5, lr}
 8000636:	2200      	movs	r2, #0
 8000638:	2300      	movs	r3, #0
 800063a:	4604      	mov	r4, r0
 800063c:	460d      	mov	r5, r1
 800063e:	f000 fc4f 	bl	8000ee0 <__aeabi_dcmpeq>
 8000642:	b910      	cbnz	r0, 800064a <__math_check_uflow+0x16>
 8000644:	4620      	mov	r0, r4
 8000646:	4629      	mov	r1, r5
 8000648:	bd38      	pop	{r3, r4, r5, pc}
 800064a:	4620      	mov	r0, r4
 800064c:	4629      	mov	r1, r5
 800064e:	2222      	movs	r2, #34	@ 0x22
 8000650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000654:	e78a      	b.n	800056c <with_errno>
 8000656:	bf00      	nop

08000658 <__math_check_oflow>:
 8000658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800065a:	f021 4700 	bic.w	r7, r1, #2147483648	@ 0x80000000
 800065e:	460d      	mov	r5, r1
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <__math_check_oflow+0x3c>)
 8000662:	f04f 32ff 	mov.w	r2, #4294967295
 8000666:	4639      	mov	r1, r7
 8000668:	4604      	mov	r4, r0
 800066a:	f000 fc6b 	bl	8000f44 <__aeabi_dcmpun>
 800066e:	b938      	cbnz	r0, 8000680 <__math_check_oflow+0x28>
 8000670:	4b08      	ldr	r3, [pc, #32]	@ (8000694 <__math_check_oflow+0x3c>)
 8000672:	4620      	mov	r0, r4
 8000674:	4639      	mov	r1, r7
 8000676:	f04f 32ff 	mov.w	r2, #4294967295
 800067a:	f000 fc45 	bl	8000f08 <__aeabi_dcmple>
 800067e:	b110      	cbz	r0, 8000686 <__math_check_oflow+0x2e>
 8000680:	4620      	mov	r0, r4
 8000682:	4629      	mov	r1, r5
 8000684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000686:	4620      	mov	r0, r4
 8000688:	4629      	mov	r1, r5
 800068a:	2222      	movs	r2, #34	@ 0x22
 800068c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000690:	e76c      	b.n	800056c <with_errno>
 8000692:	bf00      	nop
 8000694:	7fefffff 	.word	0x7fefffff

08000698 <__aeabi_drsub>:
 8000698:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	e002      	b.n	80006a4 <__adddf3>
 800069e:	bf00      	nop

080006a0 <__aeabi_dsub>:
 80006a0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080006a4 <__adddf3>:
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80006aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80006ae:	ea94 0f05 	teq	r4, r5
 80006b2:	bf08      	it	eq
 80006b4:	ea90 0f02 	teqeq	r0, r2
 80006b8:	bf1f      	itttt	ne
 80006ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 80006be:	ea55 0c02 	orrsne.w	ip, r5, r2
 80006c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80006c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006ca:	f000 80e2 	beq.w	8000892 <__adddf3+0x1ee>
 80006ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80006d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80006d6:	bfb8      	it	lt
 80006d8:	426d      	neglt	r5, r5
 80006da:	dd0c      	ble.n	80006f6 <__adddf3+0x52>
 80006dc:	442c      	add	r4, r5
 80006de:	ea80 0202 	eor.w	r2, r0, r2
 80006e2:	ea81 0303 	eor.w	r3, r1, r3
 80006e6:	ea82 0000 	eor.w	r0, r2, r0
 80006ea:	ea83 0101 	eor.w	r1, r3, r1
 80006ee:	ea80 0202 	eor.w	r2, r0, r2
 80006f2:	ea81 0303 	eor.w	r3, r1, r3
 80006f6:	2d36      	cmp	r5, #54	@ 0x36
 80006f8:	bf88      	it	hi
 80006fa:	bd30      	pophi	{r4, r5, pc}
 80006fc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000700:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000704:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000708:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800070c:	d002      	beq.n	8000714 <__adddf3+0x70>
 800070e:	4240      	negs	r0, r0
 8000710:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000714:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000718:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800071c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000720:	d002      	beq.n	8000728 <__adddf3+0x84>
 8000722:	4252      	negs	r2, r2
 8000724:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000728:	ea94 0f05 	teq	r4, r5
 800072c:	f000 80a7 	beq.w	800087e <__adddf3+0x1da>
 8000730:	f1a4 0401 	sub.w	r4, r4, #1
 8000734:	f1d5 0e20 	rsbs	lr, r5, #32
 8000738:	db0d      	blt.n	8000756 <__adddf3+0xb2>
 800073a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800073e:	fa22 f205 	lsr.w	r2, r2, r5
 8000742:	1880      	adds	r0, r0, r2
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	fa03 f20e 	lsl.w	r2, r3, lr
 800074c:	1880      	adds	r0, r0, r2
 800074e:	fa43 f305 	asr.w	r3, r3, r5
 8000752:	4159      	adcs	r1, r3
 8000754:	e00e      	b.n	8000774 <__adddf3+0xd0>
 8000756:	f1a5 0520 	sub.w	r5, r5, #32
 800075a:	f10e 0e20 	add.w	lr, lr, #32
 800075e:	2a01      	cmp	r2, #1
 8000760:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000764:	bf28      	it	cs
 8000766:	f04c 0c02 	orrcs.w	ip, ip, #2
 800076a:	fa43 f305 	asr.w	r3, r3, r5
 800076e:	18c0      	adds	r0, r0, r3
 8000770:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000774:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000778:	d507      	bpl.n	800078a <__adddf3+0xe6>
 800077a:	f04f 0e00 	mov.w	lr, #0
 800077e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000782:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000786:	eb6e 0101 	sbc.w	r1, lr, r1
 800078a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800078e:	d31b      	bcc.n	80007c8 <__adddf3+0x124>
 8000790:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000794:	d30c      	bcc.n	80007b0 <__adddf3+0x10c>
 8000796:	0849      	lsrs	r1, r1, #1
 8000798:	ea5f 0030 	movs.w	r0, r0, rrx
 800079c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80007a0:	f104 0401 	add.w	r4, r4, #1
 80007a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80007a8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80007ac:	f080 809a 	bcs.w	80008e4 <__adddf3+0x240>
 80007b0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80007b4:	bf08      	it	eq
 80007b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80007ba:	f150 0000 	adcs.w	r0, r0, #0
 80007be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007c2:	ea41 0105 	orr.w	r1, r1, r5
 80007c6:	bd30      	pop	{r4, r5, pc}
 80007c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80007cc:	4140      	adcs	r0, r0
 80007ce:	eb41 0101 	adc.w	r1, r1, r1
 80007d2:	3c01      	subs	r4, #1
 80007d4:	bf28      	it	cs
 80007d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80007da:	d2e9      	bcs.n	80007b0 <__adddf3+0x10c>
 80007dc:	f091 0f00 	teq	r1, #0
 80007e0:	bf04      	itt	eq
 80007e2:	4601      	moveq	r1, r0
 80007e4:	2000      	moveq	r0, #0
 80007e6:	fab1 f381 	clz	r3, r1
 80007ea:	bf08      	it	eq
 80007ec:	3320      	addeq	r3, #32
 80007ee:	f1a3 030b 	sub.w	r3, r3, #11
 80007f2:	f1b3 0220 	subs.w	r2, r3, #32
 80007f6:	da0c      	bge.n	8000812 <__adddf3+0x16e>
 80007f8:	320c      	adds	r2, #12
 80007fa:	dd08      	ble.n	800080e <__adddf3+0x16a>
 80007fc:	f102 0c14 	add.w	ip, r2, #20
 8000800:	f1c2 020c 	rsb	r2, r2, #12
 8000804:	fa01 f00c 	lsl.w	r0, r1, ip
 8000808:	fa21 f102 	lsr.w	r1, r1, r2
 800080c:	e00c      	b.n	8000828 <__adddf3+0x184>
 800080e:	f102 0214 	add.w	r2, r2, #20
 8000812:	bfd8      	it	le
 8000814:	f1c2 0c20 	rsble	ip, r2, #32
 8000818:	fa01 f102 	lsl.w	r1, r1, r2
 800081c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000820:	bfdc      	itt	le
 8000822:	ea41 010c 	orrle.w	r1, r1, ip
 8000826:	4090      	lslle	r0, r2
 8000828:	1ae4      	subs	r4, r4, r3
 800082a:	bfa2      	ittt	ge
 800082c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000830:	4329      	orrge	r1, r5
 8000832:	bd30      	popge	{r4, r5, pc}
 8000834:	ea6f 0404 	mvn.w	r4, r4
 8000838:	3c1f      	subs	r4, #31
 800083a:	da1c      	bge.n	8000876 <__adddf3+0x1d2>
 800083c:	340c      	adds	r4, #12
 800083e:	dc0e      	bgt.n	800085e <__adddf3+0x1ba>
 8000840:	f104 0414 	add.w	r4, r4, #20
 8000844:	f1c4 0220 	rsb	r2, r4, #32
 8000848:	fa20 f004 	lsr.w	r0, r0, r4
 800084c:	fa01 f302 	lsl.w	r3, r1, r2
 8000850:	ea40 0003 	orr.w	r0, r0, r3
 8000854:	fa21 f304 	lsr.w	r3, r1, r4
 8000858:	ea45 0103 	orr.w	r1, r5, r3
 800085c:	bd30      	pop	{r4, r5, pc}
 800085e:	f1c4 040c 	rsb	r4, r4, #12
 8000862:	f1c4 0220 	rsb	r2, r4, #32
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 f304 	lsl.w	r3, r1, r4
 800086e:	ea40 0003 	orr.w	r0, r0, r3
 8000872:	4629      	mov	r1, r5
 8000874:	bd30      	pop	{r4, r5, pc}
 8000876:	fa21 f004 	lsr.w	r0, r1, r4
 800087a:	4629      	mov	r1, r5
 800087c:	bd30      	pop	{r4, r5, pc}
 800087e:	f094 0f00 	teq	r4, #0
 8000882:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000886:	bf06      	itte	eq
 8000888:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800088c:	3401      	addeq	r4, #1
 800088e:	3d01      	subne	r5, #1
 8000890:	e74e      	b.n	8000730 <__adddf3+0x8c>
 8000892:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000896:	bf18      	it	ne
 8000898:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800089c:	d029      	beq.n	80008f2 <__adddf3+0x24e>
 800089e:	ea94 0f05 	teq	r4, r5
 80008a2:	bf08      	it	eq
 80008a4:	ea90 0f02 	teqeq	r0, r2
 80008a8:	d005      	beq.n	80008b6 <__adddf3+0x212>
 80008aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80008ae:	bf04      	itt	eq
 80008b0:	4619      	moveq	r1, r3
 80008b2:	4610      	moveq	r0, r2
 80008b4:	bd30      	pop	{r4, r5, pc}
 80008b6:	ea91 0f03 	teq	r1, r3
 80008ba:	bf1e      	ittt	ne
 80008bc:	2100      	movne	r1, #0
 80008be:	2000      	movne	r0, #0
 80008c0:	bd30      	popne	{r4, r5, pc}
 80008c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80008c6:	d105      	bne.n	80008d4 <__adddf3+0x230>
 80008c8:	0040      	lsls	r0, r0, #1
 80008ca:	4149      	adcs	r1, r1
 80008cc:	bf28      	it	cs
 80008ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80008d2:	bd30      	pop	{r4, r5, pc}
 80008d4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80008d8:	bf3c      	itt	cc
 80008da:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80008de:	bd30      	popcc	{r4, r5, pc}
 80008e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80008e4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd30      	pop	{r4, r5, pc}
 80008f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80008f6:	bf1a      	itte	ne
 80008f8:	4619      	movne	r1, r3
 80008fa:	4610      	movne	r0, r2
 80008fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000900:	bf1c      	itt	ne
 8000902:	460b      	movne	r3, r1
 8000904:	4602      	movne	r2, r0
 8000906:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800090a:	bf06      	itte	eq
 800090c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000910:	ea91 0f03 	teqeq	r1, r3
 8000914:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000918:	bd30      	pop	{r4, r5, pc}
 800091a:	bf00      	nop

0800091c <__aeabi_ui2d>:
 800091c:	f090 0f00 	teq	r0, #0
 8000920:	bf04      	itt	eq
 8000922:	2100      	moveq	r1, #0
 8000924:	4770      	bxeq	lr
 8000926:	b530      	push	{r4, r5, lr}
 8000928:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800092c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000930:	f04f 0500 	mov.w	r5, #0
 8000934:	f04f 0100 	mov.w	r1, #0
 8000938:	e750      	b.n	80007dc <__adddf3+0x138>
 800093a:	bf00      	nop

0800093c <__aeabi_i2d>:
 800093c:	f090 0f00 	teq	r0, #0
 8000940:	bf04      	itt	eq
 8000942:	2100      	moveq	r1, #0
 8000944:	4770      	bxeq	lr
 8000946:	b530      	push	{r4, r5, lr}
 8000948:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800094c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000950:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000954:	bf48      	it	mi
 8000956:	4240      	negmi	r0, r0
 8000958:	f04f 0100 	mov.w	r1, #0
 800095c:	e73e      	b.n	80007dc <__adddf3+0x138>
 800095e:	bf00      	nop

08000960 <__aeabi_f2d>:
 8000960:	0042      	lsls	r2, r0, #1
 8000962:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000966:	ea4f 0131 	mov.w	r1, r1, rrx
 800096a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800096e:	bf1f      	itttt	ne
 8000970:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000974:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000978:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800097c:	4770      	bxne	lr
 800097e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000982:	bf08      	it	eq
 8000984:	4770      	bxeq	lr
 8000986:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800098a:	bf04      	itt	eq
 800098c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000990:	4770      	bxeq	lr
 8000992:	b530      	push	{r4, r5, lr}
 8000994:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000998:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800099c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80009a0:	e71c      	b.n	80007dc <__adddf3+0x138>
 80009a2:	bf00      	nop

080009a4 <__aeabi_ul2d>:
 80009a4:	ea50 0201 	orrs.w	r2, r0, r1
 80009a8:	bf08      	it	eq
 80009aa:	4770      	bxeq	lr
 80009ac:	b530      	push	{r4, r5, lr}
 80009ae:	f04f 0500 	mov.w	r5, #0
 80009b2:	e00a      	b.n	80009ca <__aeabi_l2d+0x16>

080009b4 <__aeabi_l2d>:
 80009b4:	ea50 0201 	orrs.w	r2, r0, r1
 80009b8:	bf08      	it	eq
 80009ba:	4770      	bxeq	lr
 80009bc:	b530      	push	{r4, r5, lr}
 80009be:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80009c2:	d502      	bpl.n	80009ca <__aeabi_l2d+0x16>
 80009c4:	4240      	negs	r0, r0
 80009c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009ca:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80009ce:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80009d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80009d6:	f43f aed8 	beq.w	800078a <__adddf3+0xe6>
 80009da:	f04f 0203 	mov.w	r2, #3
 80009de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80009e2:	bf18      	it	ne
 80009e4:	3203      	addne	r2, #3
 80009e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80009ea:	bf18      	it	ne
 80009ec:	3203      	addne	r2, #3
 80009ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80009f2:	f1c2 0320 	rsb	r3, r2, #32
 80009f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000a02:	ea40 000e 	orr.w	r0, r0, lr
 8000a06:	fa21 f102 	lsr.w	r1, r1, r2
 8000a0a:	4414      	add	r4, r2
 8000a0c:	e6bd      	b.n	800078a <__adddf3+0xe6>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_dmul>:
 8000a10:	b570      	push	{r4, r5, r6, lr}
 8000a12:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000a16:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000a1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000a1e:	bf1d      	ittte	ne
 8000a20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000a24:	ea94 0f0c 	teqne	r4, ip
 8000a28:	ea95 0f0c 	teqne	r5, ip
 8000a2c:	f000 f8de 	bleq	8000bec <__aeabi_dmul+0x1dc>
 8000a30:	442c      	add	r4, r5
 8000a32:	ea81 0603 	eor.w	r6, r1, r3
 8000a36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000a3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000a3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000a42:	bf18      	it	ne
 8000a44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000a48:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000a50:	d038      	beq.n	8000ac4 <__aeabi_dmul+0xb4>
 8000a52:	fba0 ce02 	umull	ip, lr, r0, r2
 8000a56:	f04f 0500 	mov.w	r5, #0
 8000a5a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000a5e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000a62:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000a66:	f04f 0600 	mov.w	r6, #0
 8000a6a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000a6e:	f09c 0f00 	teq	ip, #0
 8000a72:	bf18      	it	ne
 8000a74:	f04e 0e01 	orrne.w	lr, lr, #1
 8000a78:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000a7c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000a80:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000a84:	d204      	bcs.n	8000a90 <__aeabi_dmul+0x80>
 8000a86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000a8a:	416d      	adcs	r5, r5
 8000a8c:	eb46 0606 	adc.w	r6, r6, r6
 8000a90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000a94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000a98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000a9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000aa0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000aa4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000aa8:	bf88      	it	hi
 8000aaa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000aae:	d81e      	bhi.n	8000aee <__aeabi_dmul+0xde>
 8000ab0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000aba:	f150 0000 	adcs.w	r0, r0, #0
 8000abe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
 8000ac4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000ac8:	ea46 0101 	orr.w	r1, r6, r1
 8000acc:	ea40 0002 	orr.w	r0, r0, r2
 8000ad0:	ea81 0103 	eor.w	r1, r1, r3
 8000ad4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000ad8:	bfc2      	ittt	gt
 8000ada:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ade:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ae2:	bd70      	popgt	{r4, r5, r6, pc}
 8000ae4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae8:	f04f 0e00 	mov.w	lr, #0
 8000aec:	3c01      	subs	r4, #1
 8000aee:	f300 80ab 	bgt.w	8000c48 <__aeabi_dmul+0x238>
 8000af2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000af6:	bfde      	ittt	le
 8000af8:	2000      	movle	r0, #0
 8000afa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000afe:	bd70      	pople	{r4, r5, r6, pc}
 8000b00:	f1c4 0400 	rsb	r4, r4, #0
 8000b04:	3c20      	subs	r4, #32
 8000b06:	da35      	bge.n	8000b74 <__aeabi_dmul+0x164>
 8000b08:	340c      	adds	r4, #12
 8000b0a:	dc1b      	bgt.n	8000b44 <__aeabi_dmul+0x134>
 8000b0c:	f104 0414 	add.w	r4, r4, #20
 8000b10:	f1c4 0520 	rsb	r5, r4, #32
 8000b14:	fa00 f305 	lsl.w	r3, r0, r5
 8000b18:	fa20 f004 	lsr.w	r0, r0, r4
 8000b1c:	fa01 f205 	lsl.w	r2, r1, r5
 8000b20:	ea40 0002 	orr.w	r0, r0, r2
 8000b24:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000b28:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000b2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000b30:	fa21 f604 	lsr.w	r6, r1, r4
 8000b34:	eb42 0106 	adc.w	r1, r2, r6
 8000b38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000b3c:	bf08      	it	eq
 8000b3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000b42:	bd70      	pop	{r4, r5, r6, pc}
 8000b44:	f1c4 040c 	rsb	r4, r4, #12
 8000b48:	f1c4 0520 	rsb	r5, r4, #32
 8000b4c:	fa00 f304 	lsl.w	r3, r0, r4
 8000b50:	fa20 f005 	lsr.w	r0, r0, r5
 8000b54:	fa01 f204 	lsl.w	r2, r1, r4
 8000b58:	ea40 0002 	orr.w	r0, r0, r2
 8000b5c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000b60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000b64:	f141 0100 	adc.w	r1, r1, #0
 8000b68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000b6c:	bf08      	it	eq
 8000b6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000b72:	bd70      	pop	{r4, r5, r6, pc}
 8000b74:	f1c4 0520 	rsb	r5, r4, #32
 8000b78:	fa00 f205 	lsl.w	r2, r0, r5
 8000b7c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000b80:	fa20 f304 	lsr.w	r3, r0, r4
 8000b84:	fa01 f205 	lsl.w	r2, r1, r5
 8000b88:	ea43 0302 	orr.w	r3, r3, r2
 8000b8c:	fa21 f004 	lsr.w	r0, r1, r4
 8000b90:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000b94:	fa21 f204 	lsr.w	r2, r1, r4
 8000b98:	ea20 0002 	bic.w	r0, r0, r2
 8000b9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000ba0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000ba4:	bf08      	it	eq
 8000ba6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000baa:	bd70      	pop	{r4, r5, r6, pc}
 8000bac:	f094 0f00 	teq	r4, #0
 8000bb0:	d10f      	bne.n	8000bd2 <__aeabi_dmul+0x1c2>
 8000bb2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000bb6:	0040      	lsls	r0, r0, #1
 8000bb8:	eb41 0101 	adc.w	r1, r1, r1
 8000bbc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000bc0:	bf08      	it	eq
 8000bc2:	3c01      	subeq	r4, #1
 8000bc4:	d0f7      	beq.n	8000bb6 <__aeabi_dmul+0x1a6>
 8000bc6:	ea41 0106 	orr.w	r1, r1, r6
 8000bca:	f095 0f00 	teq	r5, #0
 8000bce:	bf18      	it	ne
 8000bd0:	4770      	bxne	lr
 8000bd2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000bd6:	0052      	lsls	r2, r2, #1
 8000bd8:	eb43 0303 	adc.w	r3, r3, r3
 8000bdc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000be0:	bf08      	it	eq
 8000be2:	3d01      	subeq	r5, #1
 8000be4:	d0f7      	beq.n	8000bd6 <__aeabi_dmul+0x1c6>
 8000be6:	ea43 0306 	orr.w	r3, r3, r6
 8000bea:	4770      	bx	lr
 8000bec:	ea94 0f0c 	teq	r4, ip
 8000bf0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000bf4:	bf18      	it	ne
 8000bf6:	ea95 0f0c 	teqne	r5, ip
 8000bfa:	d00c      	beq.n	8000c16 <__aeabi_dmul+0x206>
 8000bfc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c00:	bf18      	it	ne
 8000c02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c06:	d1d1      	bne.n	8000bac <__aeabi_dmul+0x19c>
 8000c08:	ea81 0103 	eor.w	r1, r1, r3
 8000c0c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	bd70      	pop	{r4, r5, r6, pc}
 8000c16:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c1a:	bf06      	itte	eq
 8000c1c:	4610      	moveq	r0, r2
 8000c1e:	4619      	moveq	r1, r3
 8000c20:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c24:	d019      	beq.n	8000c5a <__aeabi_dmul+0x24a>
 8000c26:	ea94 0f0c 	teq	r4, ip
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_dmul+0x222>
 8000c2c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000c30:	d113      	bne.n	8000c5a <__aeabi_dmul+0x24a>
 8000c32:	ea95 0f0c 	teq	r5, ip
 8000c36:	d105      	bne.n	8000c44 <__aeabi_dmul+0x234>
 8000c38:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000c3c:	bf1c      	itt	ne
 8000c3e:	4610      	movne	r0, r2
 8000c40:	4619      	movne	r1, r3
 8000c42:	d10a      	bne.n	8000c5a <__aeabi_dmul+0x24a>
 8000c44:	ea81 0103 	eor.w	r1, r1, r3
 8000c48:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000c4c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000c50:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000c54:	f04f 0000 	mov.w	r0, #0
 8000c58:	bd70      	pop	{r4, r5, r6, pc}
 8000c5a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000c5e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000c62:	bd70      	pop	{r4, r5, r6, pc}

08000c64 <__aeabi_ddiv>:
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c6a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000c6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000c72:	bf1d      	ittte	ne
 8000c74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000c78:	ea94 0f0c 	teqne	r4, ip
 8000c7c:	ea95 0f0c 	teqne	r5, ip
 8000c80:	f000 f8a7 	bleq	8000dd2 <__aeabi_ddiv+0x16e>
 8000c84:	eba4 0405 	sub.w	r4, r4, r5
 8000c88:	ea81 0e03 	eor.w	lr, r1, r3
 8000c8c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c90:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000c94:	f000 8088 	beq.w	8000da8 <__aeabi_ddiv+0x144>
 8000c98:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000c9c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000ca0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000ca4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000ca8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000cac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000cb0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000cb4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000cb8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000cbc:	429d      	cmp	r5, r3
 8000cbe:	bf08      	it	eq
 8000cc0:	4296      	cmpeq	r6, r2
 8000cc2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000cc6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000cca:	d202      	bcs.n	8000cd2 <__aeabi_ddiv+0x6e>
 8000ccc:	085b      	lsrs	r3, r3, #1
 8000cce:	ea4f 0232 	mov.w	r2, r2, rrx
 8000cd2:	1ab6      	subs	r6, r6, r2
 8000cd4:	eb65 0503 	sbc.w	r5, r5, r3
 8000cd8:	085b      	lsrs	r3, r3, #1
 8000cda:	ea4f 0232 	mov.w	r2, r2, rrx
 8000cde:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000ce2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000ce6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000cea:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000cee:	bf22      	ittt	cs
 8000cf0:	1ab6      	subcs	r6, r6, r2
 8000cf2:	4675      	movcs	r5, lr
 8000cf4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000cf8:	085b      	lsrs	r3, r3, #1
 8000cfa:	ea4f 0232 	mov.w	r2, r2, rrx
 8000cfe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d06:	bf22      	ittt	cs
 8000d08:	1ab6      	subcs	r6, r6, r2
 8000d0a:	4675      	movcs	r5, lr
 8000d0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d10:	085b      	lsrs	r3, r3, #1
 8000d12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d1e:	bf22      	ittt	cs
 8000d20:	1ab6      	subcs	r6, r6, r2
 8000d22:	4675      	movcs	r5, lr
 8000d24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d28:	085b      	lsrs	r3, r3, #1
 8000d2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000d2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000d32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000d36:	bf22      	ittt	cs
 8000d38:	1ab6      	subcs	r6, r6, r2
 8000d3a:	4675      	movcs	r5, lr
 8000d3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d40:	ea55 0e06 	orrs.w	lr, r5, r6
 8000d44:	d018      	beq.n	8000d78 <__aeabi_ddiv+0x114>
 8000d46:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000d4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000d4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000d52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000d56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000d5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000d5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000d62:	d1c0      	bne.n	8000ce6 <__aeabi_ddiv+0x82>
 8000d64:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000d68:	d10b      	bne.n	8000d82 <__aeabi_ddiv+0x11e>
 8000d6a:	ea41 0100 	orr.w	r1, r1, r0
 8000d6e:	f04f 0000 	mov.w	r0, #0
 8000d72:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000d76:	e7b6      	b.n	8000ce6 <__aeabi_ddiv+0x82>
 8000d78:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000d7c:	bf04      	itt	eq
 8000d7e:	4301      	orreq	r1, r0
 8000d80:	2000      	moveq	r0, #0
 8000d82:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000d86:	bf88      	it	hi
 8000d88:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000d8c:	f63f aeaf 	bhi.w	8000aee <__aeabi_dmul+0xde>
 8000d90:	ebb5 0c03 	subs.w	ip, r5, r3
 8000d94:	bf04      	itt	eq
 8000d96:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000d9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000d9e:	f150 0000 	adcs.w	r0, r0, #0
 8000da2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000da6:	bd70      	pop	{r4, r5, r6, pc}
 8000da8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000dac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000db0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000db4:	bfc2      	ittt	gt
 8000db6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000dba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000dbe:	bd70      	popgt	{r4, r5, r6, pc}
 8000dc0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000dc4:	f04f 0e00 	mov.w	lr, #0
 8000dc8:	3c01      	subs	r4, #1
 8000dca:	e690      	b.n	8000aee <__aeabi_dmul+0xde>
 8000dcc:	ea45 0e06 	orr.w	lr, r5, r6
 8000dd0:	e68d      	b.n	8000aee <__aeabi_dmul+0xde>
 8000dd2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000dd6:	ea94 0f0c 	teq	r4, ip
 8000dda:	bf08      	it	eq
 8000ddc:	ea95 0f0c 	teqeq	r5, ip
 8000de0:	f43f af3b 	beq.w	8000c5a <__aeabi_dmul+0x24a>
 8000de4:	ea94 0f0c 	teq	r4, ip
 8000de8:	d10a      	bne.n	8000e00 <__aeabi_ddiv+0x19c>
 8000dea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000dee:	f47f af34 	bne.w	8000c5a <__aeabi_dmul+0x24a>
 8000df2:	ea95 0f0c 	teq	r5, ip
 8000df6:	f47f af25 	bne.w	8000c44 <__aeabi_dmul+0x234>
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	e72c      	b.n	8000c5a <__aeabi_dmul+0x24a>
 8000e00:	ea95 0f0c 	teq	r5, ip
 8000e04:	d106      	bne.n	8000e14 <__aeabi_ddiv+0x1b0>
 8000e06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000e0a:	f43f aefd 	beq.w	8000c08 <__aeabi_dmul+0x1f8>
 8000e0e:	4610      	mov	r0, r2
 8000e10:	4619      	mov	r1, r3
 8000e12:	e722      	b.n	8000c5a <__aeabi_dmul+0x24a>
 8000e14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000e18:	bf18      	it	ne
 8000e1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000e1e:	f47f aec5 	bne.w	8000bac <__aeabi_dmul+0x19c>
 8000e22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000e26:	f47f af0d 	bne.w	8000c44 <__aeabi_dmul+0x234>
 8000e2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000e2e:	f47f aeeb 	bne.w	8000c08 <__aeabi_dmul+0x1f8>
 8000e32:	e712      	b.n	8000c5a <__aeabi_dmul+0x24a>

08000e34 <__gedf2>:
 8000e34:	f04f 3cff 	mov.w	ip, #4294967295
 8000e38:	e006      	b.n	8000e48 <__cmpdf2+0x4>
 8000e3a:	bf00      	nop

08000e3c <__ledf2>:
 8000e3c:	f04f 0c01 	mov.w	ip, #1
 8000e40:	e002      	b.n	8000e48 <__cmpdf2+0x4>
 8000e42:	bf00      	nop

08000e44 <__cmpdf2>:
 8000e44:	f04f 0c01 	mov.w	ip, #1
 8000e48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e58:	bf18      	it	ne
 8000e5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000e5e:	d01b      	beq.n	8000e98 <__cmpdf2+0x54>
 8000e60:	b001      	add	sp, #4
 8000e62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000e66:	bf0c      	ite	eq
 8000e68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000e6c:	ea91 0f03 	teqne	r1, r3
 8000e70:	bf02      	ittt	eq
 8000e72:	ea90 0f02 	teqeq	r0, r2
 8000e76:	2000      	moveq	r0, #0
 8000e78:	4770      	bxeq	lr
 8000e7a:	f110 0f00 	cmn.w	r0, #0
 8000e7e:	ea91 0f03 	teq	r1, r3
 8000e82:	bf58      	it	pl
 8000e84:	4299      	cmppl	r1, r3
 8000e86:	bf08      	it	eq
 8000e88:	4290      	cmpeq	r0, r2
 8000e8a:	bf2c      	ite	cs
 8000e8c:	17d8      	asrcs	r0, r3, #31
 8000e8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000e92:	f040 0001 	orr.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ea0:	d102      	bne.n	8000ea8 <__cmpdf2+0x64>
 8000ea2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ea6:	d107      	bne.n	8000eb8 <__cmpdf2+0x74>
 8000ea8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000eac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000eb0:	d1d6      	bne.n	8000e60 <__cmpdf2+0x1c>
 8000eb2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000eb6:	d0d3      	beq.n	8000e60 <__cmpdf2+0x1c>
 8000eb8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <__aeabi_cdrcmple>:
 8000ec0:	4684      	mov	ip, r0
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	4662      	mov	r2, ip
 8000ec6:	468c      	mov	ip, r1
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4663      	mov	r3, ip
 8000ecc:	e000      	b.n	8000ed0 <__aeabi_cdcmpeq>
 8000ece:	bf00      	nop

08000ed0 <__aeabi_cdcmpeq>:
 8000ed0:	b501      	push	{r0, lr}
 8000ed2:	f7ff ffb7 	bl	8000e44 <__cmpdf2>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	bf48      	it	mi
 8000eda:	f110 0f00 	cmnmi.w	r0, #0
 8000ede:	bd01      	pop	{r0, pc}

08000ee0 <__aeabi_dcmpeq>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff fff4 	bl	8000ed0 <__aeabi_cdcmpeq>
 8000ee8:	bf0c      	ite	eq
 8000eea:	2001      	moveq	r0, #1
 8000eec:	2000      	movne	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_dcmplt>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffea 	bl	8000ed0 <__aeabi_cdcmpeq>
 8000efc:	bf34      	ite	cc
 8000efe:	2001      	movcc	r0, #1
 8000f00:	2000      	movcs	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_dcmple>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffe0 	bl	8000ed0 <__aeabi_cdcmpeq>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_dcmpge>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffce 	bl	8000ec0 <__aeabi_cdrcmple>
 8000f24:	bf94      	ite	ls
 8000f26:	2001      	movls	r0, #1
 8000f28:	2000      	movhi	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_dcmpgt>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff ffc4 	bl	8000ec0 <__aeabi_cdrcmple>
 8000f38:	bf34      	ite	cc
 8000f3a:	2001      	movcc	r0, #1
 8000f3c:	2000      	movcs	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_dcmpun>:
 8000f44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000f48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000f4c:	d102      	bne.n	8000f54 <__aeabi_dcmpun+0x10>
 8000f4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000f52:	d10a      	bne.n	8000f6a <__aeabi_dcmpun+0x26>
 8000f54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000f58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000f5c:	d102      	bne.n	8000f64 <__aeabi_dcmpun+0x20>
 8000f5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000f62:	d102      	bne.n	8000f6a <__aeabi_dcmpun+0x26>
 8000f64:	f04f 0000 	mov.w	r0, #0
 8000f68:	4770      	bx	lr
 8000f6a:	f04f 0001 	mov.w	r0, #1
 8000f6e:	4770      	bx	lr

08000f70 <__aeabi_d2iz>:
 8000f70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000f74:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000f78:	d215      	bcs.n	8000fa6 <__aeabi_d2iz+0x36>
 8000f7a:	d511      	bpl.n	8000fa0 <__aeabi_d2iz+0x30>
 8000f7c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000f80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f84:	d912      	bls.n	8000fac <__aeabi_d2iz+0x3c>
 8000f86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f92:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000f96:	fa23 f002 	lsr.w	r0, r3, r2
 8000f9a:	bf18      	it	ne
 8000f9c:	4240      	negne	r0, r0
 8000f9e:	4770      	bx	lr
 8000fa0:	f04f 0000 	mov.w	r0, #0
 8000fa4:	4770      	bx	lr
 8000fa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000faa:	d105      	bne.n	8000fb8 <__aeabi_d2iz+0x48>
 8000fac:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000fb0:	bf08      	it	eq
 8000fb2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000fb6:	4770      	bx	lr
 8000fb8:	f04f 0000 	mov.w	r0, #0
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <__aeabi_d2uiz>:
 8000fc0:	004a      	lsls	r2, r1, #1
 8000fc2:	d211      	bcs.n	8000fe8 <__aeabi_d2uiz+0x28>
 8000fc4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000fc8:	d211      	bcs.n	8000fee <__aeabi_d2uiz+0x2e>
 8000fca:	d50d      	bpl.n	8000fe8 <__aeabi_d2uiz+0x28>
 8000fcc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000fd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fd4:	d40e      	bmi.n	8000ff4 <__aeabi_d2uiz+0x34>
 8000fd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fe2:	fa23 f002 	lsr.w	r0, r3, r2
 8000fe6:	4770      	bx	lr
 8000fe8:	f04f 0000 	mov.w	r0, #0
 8000fec:	4770      	bx	lr
 8000fee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ff2:	d102      	bne.n	8000ffa <__aeabi_d2uiz+0x3a>
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	4770      	bx	lr
 8000ffa:	f04f 0000 	mov.w	r0, #0
 8000ffe:	4770      	bx	lr

08001000 <malloc>:
 8001000:	4b02      	ldr	r3, [pc, #8]	@ (800100c <malloc+0xc>)
 8001002:	4601      	mov	r1, r0
 8001004:	6818      	ldr	r0, [r3, #0]
 8001006:	f000 b82f 	b.w	8001068 <_malloc_r>
 800100a:	bf00      	nop
 800100c:	2000001c 	.word	0x2000001c

08001010 <free>:
 8001010:	4b02      	ldr	r3, [pc, #8]	@ (800101c <free+0xc>)
 8001012:	4601      	mov	r1, r0
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	f000 bc23 	b.w	8001860 <_free_r>
 800101a:	bf00      	nop
 800101c:	2000001c 	.word	0x2000001c

08001020 <sbrk_aligned>:
 8001020:	b570      	push	{r4, r5, r6, lr}
 8001022:	4e10      	ldr	r6, [pc, #64]	@ (8001064 <sbrk_aligned+0x44>)
 8001024:	6833      	ldr	r3, [r6, #0]
 8001026:	4605      	mov	r5, r0
 8001028:	460c      	mov	r4, r1
 800102a:	b1b3      	cbz	r3, 800105a <sbrk_aligned+0x3a>
 800102c:	4621      	mov	r1, r4
 800102e:	4628      	mov	r0, r5
 8001030:	f000 fb86 	bl	8001740 <_sbrk_r>
 8001034:	1c43      	adds	r3, r0, #1
 8001036:	d00c      	beq.n	8001052 <sbrk_aligned+0x32>
 8001038:	1cc4      	adds	r4, r0, #3
 800103a:	f024 0403 	bic.w	r4, r4, #3
 800103e:	42a0      	cmp	r0, r4
 8001040:	d005      	beq.n	800104e <sbrk_aligned+0x2e>
 8001042:	1a21      	subs	r1, r4, r0
 8001044:	4628      	mov	r0, r5
 8001046:	f000 fb7b 	bl	8001740 <_sbrk_r>
 800104a:	3001      	adds	r0, #1
 800104c:	d001      	beq.n	8001052 <sbrk_aligned+0x32>
 800104e:	4620      	mov	r0, r4
 8001050:	bd70      	pop	{r4, r5, r6, pc}
 8001052:	f04f 34ff 	mov.w	r4, #4294967295
 8001056:	4620      	mov	r0, r4
 8001058:	bd70      	pop	{r4, r5, r6, pc}
 800105a:	4619      	mov	r1, r3
 800105c:	f000 fb70 	bl	8001740 <_sbrk_r>
 8001060:	6030      	str	r0, [r6, #0]
 8001062:	e7e3      	b.n	800102c <sbrk_aligned+0xc>
 8001064:	200001b0 	.word	0x200001b0

08001068 <_malloc_r>:
 8001068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800106c:	1ccd      	adds	r5, r1, #3
 800106e:	f025 0503 	bic.w	r5, r5, #3
 8001072:	3508      	adds	r5, #8
 8001074:	2d0c      	cmp	r5, #12
 8001076:	bf38      	it	cc
 8001078:	250c      	movcc	r5, #12
 800107a:	2d00      	cmp	r5, #0
 800107c:	b082      	sub	sp, #8
 800107e:	4606      	mov	r6, r0
 8001080:	db16      	blt.n	80010b0 <_malloc_r+0x48>
 8001082:	42a9      	cmp	r1, r5
 8001084:	d814      	bhi.n	80010b0 <_malloc_r+0x48>
 8001086:	4f35      	ldr	r7, [pc, #212]	@ (800115c <_malloc_r+0xf4>)
 8001088:	f000 f86a 	bl	8001160 <__malloc_lock>
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	b1aa      	cbz	r2, 80010bc <_malloc_r+0x54>
 8001090:	4614      	mov	r4, r2
 8001092:	e003      	b.n	800109c <_malloc_r+0x34>
 8001094:	6863      	ldr	r3, [r4, #4]
 8001096:	4622      	mov	r2, r4
 8001098:	b183      	cbz	r3, 80010bc <_malloc_r+0x54>
 800109a:	461c      	mov	r4, r3
 800109c:	6823      	ldr	r3, [r4, #0]
 800109e:	1b5b      	subs	r3, r3, r5
 80010a0:	d4f8      	bmi.n	8001094 <_malloc_r+0x2c>
 80010a2:	2b0b      	cmp	r3, #11
 80010a4:	d821      	bhi.n	80010ea <_malloc_r+0x82>
 80010a6:	42a2      	cmp	r2, r4
 80010a8:	6863      	ldr	r3, [r4, #4]
 80010aa:	d055      	beq.n	8001158 <_malloc_r+0xf0>
 80010ac:	6053      	str	r3, [r2, #4]
 80010ae:	e00d      	b.n	80010cc <_malloc_r+0x64>
 80010b0:	230c      	movs	r3, #12
 80010b2:	6033      	str	r3, [r6, #0]
 80010b4:	2000      	movs	r0, #0
 80010b6:	b002      	add	sp, #8
 80010b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010bc:	4629      	mov	r1, r5
 80010be:	4630      	mov	r0, r6
 80010c0:	f7ff ffae 	bl	8001020 <sbrk_aligned>
 80010c4:	1c43      	adds	r3, r0, #1
 80010c6:	4604      	mov	r4, r0
 80010c8:	d019      	beq.n	80010fe <_malloc_r+0x96>
 80010ca:	6005      	str	r5, [r0, #0]
 80010cc:	4630      	mov	r0, r6
 80010ce:	f000 f84d 	bl	800116c <__malloc_unlock>
 80010d2:	f104 000b 	add.w	r0, r4, #11
 80010d6:	1d23      	adds	r3, r4, #4
 80010d8:	f020 0007 	bic.w	r0, r0, #7
 80010dc:	1ac2      	subs	r2, r0, r3
 80010de:	bf1c      	itt	ne
 80010e0:	1a1b      	subne	r3, r3, r0
 80010e2:	50a3      	strne	r3, [r4, r2]
 80010e4:	b002      	add	sp, #8
 80010e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010ea:	1961      	adds	r1, r4, r5
 80010ec:	42a2      	cmp	r2, r4
 80010ee:	6025      	str	r5, [r4, #0]
 80010f0:	bf14      	ite	ne
 80010f2:	6051      	strne	r1, [r2, #4]
 80010f4:	6079      	streq	r1, [r7, #4]
 80010f6:	5163      	str	r3, [r4, r5]
 80010f8:	6863      	ldr	r3, [r4, #4]
 80010fa:	604b      	str	r3, [r1, #4]
 80010fc:	e7e6      	b.n	80010cc <_malloc_r+0x64>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	b323      	cbz	r3, 800114c <_malloc_r+0xe4>
 8001102:	461c      	mov	r4, r3
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1fb      	bne.n	8001102 <_malloc_r+0x9a>
 800110a:	6822      	ldr	r2, [r4, #0]
 800110c:	9301      	str	r3, [sp, #4]
 800110e:	4619      	mov	r1, r3
 8001110:	4630      	mov	r0, r6
 8001112:	eb04 0802 	add.w	r8, r4, r2
 8001116:	f000 fb13 	bl	8001740 <_sbrk_r>
 800111a:	4580      	cmp	r8, r0
 800111c:	d116      	bne.n	800114c <_malloc_r+0xe4>
 800111e:	6822      	ldr	r2, [r4, #0]
 8001120:	1aad      	subs	r5, r5, r2
 8001122:	4629      	mov	r1, r5
 8001124:	4630      	mov	r0, r6
 8001126:	f7ff ff7b 	bl	8001020 <sbrk_aligned>
 800112a:	3001      	adds	r0, #1
 800112c:	d00e      	beq.n	800114c <_malloc_r+0xe4>
 800112e:	6822      	ldr	r2, [r4, #0]
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	9b01      	ldr	r3, [sp, #4]
 8001134:	442a      	add	r2, r5
 8001136:	6022      	str	r2, [r4, #0]
 8001138:	6842      	ldr	r2, [r0, #4]
 800113a:	b912      	cbnz	r2, 8001142 <_malloc_r+0xda>
 800113c:	e00c      	b.n	8001158 <_malloc_r+0xf0>
 800113e:	4610      	mov	r0, r2
 8001140:	6852      	ldr	r2, [r2, #4]
 8001142:	42a2      	cmp	r2, r4
 8001144:	d1fb      	bne.n	800113e <_malloc_r+0xd6>
 8001146:	2300      	movs	r3, #0
 8001148:	6043      	str	r3, [r0, #4]
 800114a:	e7bf      	b.n	80010cc <_malloc_r+0x64>
 800114c:	230c      	movs	r3, #12
 800114e:	6033      	str	r3, [r6, #0]
 8001150:	4630      	mov	r0, r6
 8001152:	f000 f80b 	bl	800116c <__malloc_unlock>
 8001156:	e7ad      	b.n	80010b4 <_malloc_r+0x4c>
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	e7b7      	b.n	80010cc <_malloc_r+0x64>
 800115c:	200001b0 	.word	0x200001b0

08001160 <__malloc_lock>:
 8001160:	4801      	ldr	r0, [pc, #4]	@ (8001168 <__malloc_lock+0x8>)
 8001162:	f000 bb4d 	b.w	8001800 <__retarget_lock_acquire_recursive>
 8001166:	bf00      	nop
 8001168:	20000308 	.word	0x20000308

0800116c <__malloc_unlock>:
 800116c:	4801      	ldr	r0, [pc, #4]	@ (8001174 <__malloc_unlock+0x8>)
 800116e:	f000 bb4f 	b.w	8001810 <__retarget_lock_release_recursive>
 8001172:	bf00      	nop
 8001174:	20000308 	.word	0x20000308

08001178 <srand>:
 8001178:	b538      	push	{r3, r4, r5, lr}
 800117a:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <srand+0x4c>)
 800117c:	681d      	ldr	r5, [r3, #0]
 800117e:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8001180:	4604      	mov	r4, r0
 8001182:	b11a      	cbz	r2, 800118c <srand+0x14>
 8001184:	2300      	movs	r3, #0
 8001186:	e9c2 4304 	strd	r4, r3, [r2, #16]
 800118a:	bd38      	pop	{r3, r4, r5, pc}
 800118c:	2018      	movs	r0, #24
 800118e:	f7ff ff37 	bl	8001000 <malloc>
 8001192:	4602      	mov	r2, r0
 8001194:	6328      	str	r0, [r5, #48]	@ 0x30
 8001196:	b178      	cbz	r0, 80011b8 <srand+0x40>
 8001198:	2001      	movs	r0, #1
 800119a:	2100      	movs	r1, #0
 800119c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80011a0:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <srand+0x50>)
 80011a2:	480a      	ldr	r0, [pc, #40]	@ (80011cc <srand+0x54>)
 80011a4:	490a      	ldr	r1, [pc, #40]	@ (80011d0 <srand+0x58>)
 80011a6:	6091      	str	r1, [r2, #8]
 80011a8:	e9c2 0300 	strd	r0, r3, [r2]
 80011ac:	230b      	movs	r3, #11
 80011ae:	8193      	strh	r3, [r2, #12]
 80011b0:	2300      	movs	r3, #0
 80011b2:	e9c2 4304 	strd	r4, r3, [r2, #16]
 80011b6:	bd38      	pop	{r3, r4, r5, pc}
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <srand+0x5c>)
 80011ba:	4807      	ldr	r0, [pc, #28]	@ (80011d8 <srand+0x60>)
 80011bc:	2146      	movs	r1, #70	@ 0x46
 80011be:	f000 fb29 	bl	8001814 <__assert_func>
 80011c2:	bf00      	nop
 80011c4:	2000001c 	.word	0x2000001c
 80011c8:	e66d1234 	.word	0xe66d1234
 80011cc:	abcd330e 	.word	0xabcd330e
 80011d0:	0005deec 	.word	0x0005deec
 80011d4:	08005cb0 	.word	0x08005cb0
 80011d8:	08005cc8 	.word	0x08005cc8

080011dc <rand>:
 80011dc:	b538      	push	{r3, r4, r5, lr}
 80011de:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <rand+0x68>)
 80011e0:	681c      	ldr	r4, [r3, #0]
 80011e2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80011e4:	b18a      	cbz	r2, 800120a <rand+0x2e>
 80011e6:	6913      	ldr	r3, [r2, #16]
 80011e8:	4917      	ldr	r1, [pc, #92]	@ (8001248 <rand+0x6c>)
 80011ea:	6954      	ldr	r4, [r2, #20]
 80011ec:	4817      	ldr	r0, [pc, #92]	@ (800124c <rand+0x70>)
 80011ee:	fb03 f101 	mul.w	r1, r3, r1
 80011f2:	fb00 1104 	mla	r1, r0, r4, r1
 80011f6:	fba3 3000 	umull	r3, r0, r3, r0
 80011fa:	3301      	adds	r3, #1
 80011fc:	eb41 0100 	adc.w	r1, r1, r0
 8001200:	e9c2 3104 	strd	r3, r1, [r2, #16]
 8001204:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 8001208:	bd38      	pop	{r3, r4, r5, pc}
 800120a:	2018      	movs	r0, #24
 800120c:	f7ff fef8 	bl	8001000 <malloc>
 8001210:	4602      	mov	r2, r0
 8001212:	6320      	str	r0, [r4, #48]	@ 0x30
 8001214:	b188      	cbz	r0, 800123a <rand+0x5e>
 8001216:	2401      	movs	r4, #1
 8001218:	2500      	movs	r5, #0
 800121a:	e9c2 4504 	strd	r4, r5, [r2, #16]
 800121e:	4b0c      	ldr	r3, [pc, #48]	@ (8001250 <rand+0x74>)
 8001220:	4c0c      	ldr	r4, [pc, #48]	@ (8001254 <rand+0x78>)
 8001222:	4809      	ldr	r0, [pc, #36]	@ (8001248 <rand+0x6c>)
 8001224:	490c      	ldr	r1, [pc, #48]	@ (8001258 <rand+0x7c>)
 8001226:	6091      	str	r1, [r2, #8]
 8001228:	e9c2 4300 	strd	r4, r3, [r2]
 800122c:	230b      	movs	r3, #11
 800122e:	8193      	strh	r3, [r2, #12]
 8001230:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <rand+0x80>)
 8001232:	4601      	mov	r1, r0
 8001234:	e9c2 3104 	strd	r3, r1, [r2, #16]
 8001238:	bd38      	pop	{r3, r4, r5, pc}
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <rand+0x84>)
 800123c:	4809      	ldr	r0, [pc, #36]	@ (8001264 <rand+0x88>)
 800123e:	2152      	movs	r1, #82	@ 0x52
 8001240:	f000 fae8 	bl	8001814 <__assert_func>
 8001244:	2000001c 	.word	0x2000001c
 8001248:	5851f42d 	.word	0x5851f42d
 800124c:	4c957f2d 	.word	0x4c957f2d
 8001250:	e66d1234 	.word	0xe66d1234
 8001254:	abcd330e 	.word	0xabcd330e
 8001258:	0005deec 	.word	0x0005deec
 800125c:	4c957f2e 	.word	0x4c957f2e
 8001260:	08005cb0 	.word	0x08005cb0
 8001264:	08005cc8 	.word	0x08005cc8

08001268 <stdio_exit_handler>:
 8001268:	4a02      	ldr	r2, [pc, #8]	@ (8001274 <stdio_exit_handler+0xc>)
 800126a:	4903      	ldr	r1, [pc, #12]	@ (8001278 <stdio_exit_handler+0x10>)
 800126c:	4803      	ldr	r0, [pc, #12]	@ (800127c <stdio_exit_handler+0x14>)
 800126e:	f000 b969 	b.w	8001544 <_fwalk_sglue>
 8001272:	bf00      	nop
 8001274:	20000010 	.word	0x20000010
 8001278:	08001a2d 	.word	0x08001a2d
 800127c:	20000020 	.word	0x20000020

08001280 <cleanup_stdio>:
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <cleanup_stdio+0x34>)
 8001282:	6841      	ldr	r1, [r0, #4]
 8001284:	4299      	cmp	r1, r3
 8001286:	b510      	push	{r4, lr}
 8001288:	4604      	mov	r4, r0
 800128a:	d001      	beq.n	8001290 <cleanup_stdio+0x10>
 800128c:	f000 fbce 	bl	8001a2c <_fflush_r>
 8001290:	68a1      	ldr	r1, [r4, #8]
 8001292:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <cleanup_stdio+0x38>)
 8001294:	4299      	cmp	r1, r3
 8001296:	d002      	beq.n	800129e <cleanup_stdio+0x1e>
 8001298:	4620      	mov	r0, r4
 800129a:	f000 fbc7 	bl	8001a2c <_fflush_r>
 800129e:	68e1      	ldr	r1, [r4, #12]
 80012a0:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <cleanup_stdio+0x3c>)
 80012a2:	4299      	cmp	r1, r3
 80012a4:	d004      	beq.n	80012b0 <cleanup_stdio+0x30>
 80012a6:	4620      	mov	r0, r4
 80012a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012ac:	f000 bbbe 	b.w	8001a2c <_fflush_r>
 80012b0:	bd10      	pop	{r4, pc}
 80012b2:	bf00      	nop
 80012b4:	200001b8 	.word	0x200001b8
 80012b8:	20000220 	.word	0x20000220
 80012bc:	20000288 	.word	0x20000288

080012c0 <__fp_lock>:
 80012c0:	b508      	push	{r3, lr}
 80012c2:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80012c4:	07da      	lsls	r2, r3, #31
 80012c6:	d402      	bmi.n	80012ce <__fp_lock+0xe>
 80012c8:	898b      	ldrh	r3, [r1, #12]
 80012ca:	059b      	lsls	r3, r3, #22
 80012cc:	d501      	bpl.n	80012d2 <__fp_lock+0x12>
 80012ce:	2000      	movs	r0, #0
 80012d0:	bd08      	pop	{r3, pc}
 80012d2:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 80012d4:	f000 fa94 	bl	8001800 <__retarget_lock_acquire_recursive>
 80012d8:	2000      	movs	r0, #0
 80012da:	bd08      	pop	{r3, pc}

080012dc <__fp_unlock>:
 80012dc:	b508      	push	{r3, lr}
 80012de:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80012e0:	07da      	lsls	r2, r3, #31
 80012e2:	d402      	bmi.n	80012ea <__fp_unlock+0xe>
 80012e4:	898b      	ldrh	r3, [r1, #12]
 80012e6:	059b      	lsls	r3, r3, #22
 80012e8:	d501      	bpl.n	80012ee <__fp_unlock+0x12>
 80012ea:	2000      	movs	r0, #0
 80012ec:	bd08      	pop	{r3, pc}
 80012ee:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 80012f0:	f000 fa8e 	bl	8001810 <__retarget_lock_release_recursive>
 80012f4:	2000      	movs	r0, #0
 80012f6:	bd08      	pop	{r3, pc}

080012f8 <global_stdio_init.part.0>:
 80012f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012fc:	4c31      	ldr	r4, [pc, #196]	@ (80013c4 <global_stdio_init.part.0+0xcc>)
 80012fe:	4b32      	ldr	r3, [pc, #200]	@ (80013c8 <global_stdio_init.part.0+0xd0>)
 8001300:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 80013cc <global_stdio_init.part.0+0xd4>
 8001304:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 80013d0 <global_stdio_init.part.0+0xd8>
 8001308:	4f32      	ldr	r7, [pc, #200]	@ (80013d4 <global_stdio_init.part.0+0xdc>)
 800130a:	f8c4 3138 	str.w	r3, [r4, #312]	@ 0x138
 800130e:	2500      	movs	r5, #0
 8001310:	4629      	mov	r1, r5
 8001312:	2304      	movs	r3, #4
 8001314:	2208      	movs	r2, #8
 8001316:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 800131a:	4e2f      	ldr	r6, [pc, #188]	@ (80013d8 <global_stdio_init.part.0+0xe0>)
 800131c:	60e3      	str	r3, [r4, #12]
 800131e:	e9c4 5500 	strd	r5, r5, [r4]
 8001322:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001326:	60a5      	str	r5, [r4, #8]
 8001328:	6665      	str	r5, [r4, #100]	@ 0x64
 800132a:	61a5      	str	r5, [r4, #24]
 800132c:	f000 f978 	bl	8001620 <memset>
 8001330:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001334:	e9c4 4908 	strd	r4, r9, [r4, #32]
 8001338:	e9c4 870a 	strd	r8, r7, [r4, #40]	@ 0x28
 800133c:	6326      	str	r6, [r4, #48]	@ 0x30
 800133e:	f000 fa57 	bl	80017f0 <__retarget_lock_init_recursive>
 8001342:	4629      	mov	r1, r5
 8001344:	4b25      	ldr	r3, [pc, #148]	@ (80013dc <global_stdio_init.part.0+0xe4>)
 8001346:	6763      	str	r3, [r4, #116]	@ 0x74
 8001348:	2208      	movs	r2, #8
 800134a:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4
 800134e:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 8001352:	e9c4 551e 	strd	r5, r5, [r4, #120]	@ 0x78
 8001356:	6725      	str	r5, [r4, #112]	@ 0x70
 8001358:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
 800135c:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
 8001360:	f000 f95e 	bl	8001620 <memset>
 8001364:	f104 0368 	add.w	r3, r4, #104	@ 0x68
 8001368:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 800136c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 8001370:	e9c4 9823 	strd	r9, r8, [r4, #140]	@ 0x8c
 8001374:	e9c4 7625 	strd	r7, r6, [r4, #148]	@ 0x94
 8001378:	f000 fa3a 	bl	80017f0 <__retarget_lock_init_recursive>
 800137c:	4b18      	ldr	r3, [pc, #96]	@ (80013e0 <global_stdio_init.part.0+0xe8>)
 800137e:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
 8001382:	4629      	mov	r1, r5
 8001384:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
 8001388:	2208      	movs	r2, #8
 800138a:	e9c4 5534 	strd	r5, r5, [r4, #208]	@ 0xd0
 800138e:	e9c4 5538 	strd	r5, r5, [r4, #224]	@ 0xe0
 8001392:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
 8001396:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 800139a:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
 800139e:	f000 f93f 	bl	8001620 <memset>
 80013a2:	f104 03d0 	add.w	r3, r4, #208	@ 0xd0
 80013a6:	e9c4 873e 	strd	r8, r7, [r4, #248]	@ 0xf8
 80013aa:	f8c4 90f4 	str.w	r9, [r4, #244]	@ 0xf4
 80013ae:	f504 7094 	add.w	r0, r4, #296	@ 0x128
 80013b2:	f8c4 6100 	str.w	r6, [r4, #256]	@ 0x100
 80013b6:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
 80013ba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013be:	f000 ba17 	b.w	80017f0 <__retarget_lock_init_recursive>
 80013c2:	bf00      	nop
 80013c4:	200001b8 	.word	0x200001b8
 80013c8:	08001269 	.word	0x08001269
 80013cc:	0800158d 	.word	0x0800158d
 80013d0:	080015b5 	.word	0x080015b5
 80013d4:	080015f5 	.word	0x080015f5
 80013d8:	08001619 	.word	0x08001619
 80013dc:	00010009 	.word	0x00010009
 80013e0:	00020012 	.word	0x00020012

080013e4 <__sfp>:
 80013e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013e6:	4606      	mov	r6, r0
 80013e8:	482a      	ldr	r0, [pc, #168]	@ (8001494 <__sfp+0xb0>)
 80013ea:	f000 fa09 	bl	8001800 <__retarget_lock_acquire_recursive>
 80013ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001498 <__sfp+0xb4>)
 80013f0:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d043      	beq.n	8001480 <__sfp+0x9c>
 80013f8:	4f28      	ldr	r7, [pc, #160]	@ (800149c <__sfp+0xb8>)
 80013fa:	e9d7 3401 	ldrd	r3, r4, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	d504      	bpl.n	800140c <__sfp+0x28>
 8001402:	e024      	b.n	800144e <__sfp+0x6a>
 8001404:	1c5a      	adds	r2, r3, #1
 8001406:	f104 0468 	add.w	r4, r4, #104	@ 0x68
 800140a:	d020      	beq.n	800144e <__sfp+0x6a>
 800140c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001410:	3b01      	subs	r3, #1
 8001412:	2d00      	cmp	r5, #0
 8001414:	d1f6      	bne.n	8001404 <__sfp+0x20>
 8001416:	4b22      	ldr	r3, [pc, #136]	@ (80014a0 <__sfp+0xbc>)
 8001418:	60e3      	str	r3, [r4, #12]
 800141a:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800141e:	6665      	str	r5, [r4, #100]	@ 0x64
 8001420:	f000 f9e6 	bl	80017f0 <__retarget_lock_init_recursive>
 8001424:	481b      	ldr	r0, [pc, #108]	@ (8001494 <__sfp+0xb0>)
 8001426:	f000 f9f3 	bl	8001810 <__retarget_lock_release_recursive>
 800142a:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800142e:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001432:	6025      	str	r5, [r4, #0]
 8001434:	61a5      	str	r5, [r4, #24]
 8001436:	2208      	movs	r2, #8
 8001438:	4629      	mov	r1, r5
 800143a:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 800143e:	f000 f8ef 	bl	8001620 <memset>
 8001442:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8001446:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 800144a:	4620      	mov	r0, r4
 800144c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800144e:	683d      	ldr	r5, [r7, #0]
 8001450:	b10d      	cbz	r5, 8001456 <__sfp+0x72>
 8001452:	462f      	mov	r7, r5
 8001454:	e7d1      	b.n	80013fa <__sfp+0x16>
 8001456:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800145a:	4630      	mov	r0, r6
 800145c:	f7ff fe04 	bl	8001068 <_malloc_r>
 8001460:	4604      	mov	r4, r0
 8001462:	b180      	cbz	r0, 8001486 <__sfp+0xa2>
 8001464:	2304      	movs	r3, #4
 8001466:	6005      	str	r5, [r0, #0]
 8001468:	6043      	str	r3, [r0, #4]
 800146a:	300c      	adds	r0, #12
 800146c:	4629      	mov	r1, r5
 800146e:	60a0      	str	r0, [r4, #8]
 8001470:	4625      	mov	r5, r4
 8001472:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8001476:	f000 f8d3 	bl	8001620 <memset>
 800147a:	603c      	str	r4, [r7, #0]
 800147c:	462f      	mov	r7, r5
 800147e:	e7bc      	b.n	80013fa <__sfp+0x16>
 8001480:	f7ff ff3a 	bl	80012f8 <global_stdio_init.part.0>
 8001484:	e7b8      	b.n	80013f8 <__sfp+0x14>
 8001486:	4803      	ldr	r0, [pc, #12]	@ (8001494 <__sfp+0xb0>)
 8001488:	603c      	str	r4, [r7, #0]
 800148a:	f000 f9c1 	bl	8001810 <__retarget_lock_release_recursive>
 800148e:	230c      	movs	r3, #12
 8001490:	6033      	str	r3, [r6, #0]
 8001492:	e7da      	b.n	800144a <__sfp+0x66>
 8001494:	20000314 	.word	0x20000314
 8001498:	200001b8 	.word	0x200001b8
 800149c:	20000010 	.word	0x20000010
 80014a0:	ffff0001 	.word	0xffff0001

080014a4 <__sinit>:
 80014a4:	b510      	push	{r4, lr}
 80014a6:	4604      	mov	r4, r0
 80014a8:	480b      	ldr	r0, [pc, #44]	@ (80014d8 <__sinit+0x34>)
 80014aa:	f000 f9a9 	bl	8001800 <__retarget_lock_acquire_recursive>
 80014ae:	6a23      	ldr	r3, [r4, #32]
 80014b0:	b92b      	cbnz	r3, 80014be <__sinit+0x1a>
 80014b2:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <__sinit+0x38>)
 80014b4:	4a0a      	ldr	r2, [pc, #40]	@ (80014e0 <__sinit+0x3c>)
 80014b6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80014ba:	6222      	str	r2, [r4, #32]
 80014bc:	b123      	cbz	r3, 80014c8 <__sinit+0x24>
 80014be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014c2:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <__sinit+0x34>)
 80014c4:	f000 b9a4 	b.w	8001810 <__retarget_lock_release_recursive>
 80014c8:	f7ff ff16 	bl	80012f8 <global_stdio_init.part.0>
 80014cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014d0:	4801      	ldr	r0, [pc, #4]	@ (80014d8 <__sinit+0x34>)
 80014d2:	f000 b99d 	b.w	8001810 <__retarget_lock_release_recursive>
 80014d6:	bf00      	nop
 80014d8:	20000314 	.word	0x20000314
 80014dc:	200001b8 	.word	0x200001b8
 80014e0:	08001281 	.word	0x08001281

080014e4 <__sfp_lock_acquire>:
 80014e4:	4801      	ldr	r0, [pc, #4]	@ (80014ec <__sfp_lock_acquire+0x8>)
 80014e6:	f000 b98b 	b.w	8001800 <__retarget_lock_acquire_recursive>
 80014ea:	bf00      	nop
 80014ec:	20000314 	.word	0x20000314

080014f0 <__sfp_lock_release>:
 80014f0:	4801      	ldr	r0, [pc, #4]	@ (80014f8 <__sfp_lock_release+0x8>)
 80014f2:	f000 b98d 	b.w	8001810 <__retarget_lock_release_recursive>
 80014f6:	bf00      	nop
 80014f8:	20000314 	.word	0x20000314

080014fc <__fp_lock_all>:
 80014fc:	b508      	push	{r3, lr}
 80014fe:	4805      	ldr	r0, [pc, #20]	@ (8001514 <__fp_lock_all+0x18>)
 8001500:	f000 f97e 	bl	8001800 <__retarget_lock_acquire_recursive>
 8001504:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001508:	4a03      	ldr	r2, [pc, #12]	@ (8001518 <__fp_lock_all+0x1c>)
 800150a:	4904      	ldr	r1, [pc, #16]	@ (800151c <__fp_lock_all+0x20>)
 800150c:	2000      	movs	r0, #0
 800150e:	f000 b819 	b.w	8001544 <_fwalk_sglue>
 8001512:	bf00      	nop
 8001514:	20000314 	.word	0x20000314
 8001518:	20000010 	.word	0x20000010
 800151c:	080012c1 	.word	0x080012c1

08001520 <__fp_unlock_all>:
 8001520:	b508      	push	{r3, lr}
 8001522:	4a05      	ldr	r2, [pc, #20]	@ (8001538 <__fp_unlock_all+0x18>)
 8001524:	4905      	ldr	r1, [pc, #20]	@ (800153c <__fp_unlock_all+0x1c>)
 8001526:	2000      	movs	r0, #0
 8001528:	f000 f80c 	bl	8001544 <_fwalk_sglue>
 800152c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001530:	4803      	ldr	r0, [pc, #12]	@ (8001540 <__fp_unlock_all+0x20>)
 8001532:	f000 b96d 	b.w	8001810 <__retarget_lock_release_recursive>
 8001536:	bf00      	nop
 8001538:	20000010 	.word	0x20000010
 800153c:	080012dd 	.word	0x080012dd
 8001540:	20000314 	.word	0x20000314

08001544 <_fwalk_sglue>:
 8001544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001548:	4680      	mov	r8, r0
 800154a:	460f      	mov	r7, r1
 800154c:	4616      	mov	r6, r2
 800154e:	f04f 0900 	mov.w	r9, #0
 8001552:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 8001556:	3d01      	subs	r5, #1
 8001558:	d411      	bmi.n	800157e <_fwalk_sglue+0x3a>
 800155a:	89a3      	ldrh	r3, [r4, #12]
 800155c:	2b01      	cmp	r3, #1
 800155e:	f105 35ff 	add.w	r5, r5, #4294967295
 8001562:	d908      	bls.n	8001576 <_fwalk_sglue+0x32>
 8001564:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8001568:	3301      	adds	r3, #1
 800156a:	4621      	mov	r1, r4
 800156c:	d003      	beq.n	8001576 <_fwalk_sglue+0x32>
 800156e:	4640      	mov	r0, r8
 8001570:	47b8      	blx	r7
 8001572:	ea49 0900 	orr.w	r9, r9, r0
 8001576:	1c6b      	adds	r3, r5, #1
 8001578:	f104 0468 	add.w	r4, r4, #104	@ 0x68
 800157c:	d1ed      	bne.n	800155a <_fwalk_sglue+0x16>
 800157e:	6836      	ldr	r6, [r6, #0]
 8001580:	2e00      	cmp	r6, #0
 8001582:	d1e6      	bne.n	8001552 <_fwalk_sglue+0xe>
 8001584:	4648      	mov	r0, r9
 8001586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800158a:	bf00      	nop

0800158c <__sread>:
 800158c:	b510      	push	{r4, lr}
 800158e:	460c      	mov	r4, r1
 8001590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001594:	f000 f8be 	bl	8001714 <_read_r>
 8001598:	2800      	cmp	r0, #0
 800159a:	db03      	blt.n	80015a4 <__sread+0x18>
 800159c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800159e:	4403      	add	r3, r0
 80015a0:	6563      	str	r3, [r4, #84]	@ 0x54
 80015a2:	bd10      	pop	{r4, pc}
 80015a4:	89a3      	ldrh	r3, [r4, #12]
 80015a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80015aa:	81a3      	strh	r3, [r4, #12]
 80015ac:	bd10      	pop	{r4, pc}
 80015ae:	bf00      	nop

080015b0 <__seofread>:
 80015b0:	2000      	movs	r0, #0
 80015b2:	4770      	bx	lr

080015b4 <__swrite>:
 80015b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015b8:	460c      	mov	r4, r1
 80015ba:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 80015be:	461f      	mov	r7, r3
 80015c0:	05cb      	lsls	r3, r1, #23
 80015c2:	4605      	mov	r5, r0
 80015c4:	4616      	mov	r6, r2
 80015c6:	d40b      	bmi.n	80015e0 <__swrite+0x2c>
 80015c8:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 80015cc:	81a1      	strh	r1, [r4, #12]
 80015ce:	463b      	mov	r3, r7
 80015d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015d4:	4632      	mov	r2, r6
 80015d6:	4628      	mov	r0, r5
 80015d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80015dc:	f000 b8c2 	b.w	8001764 <_write_r>
 80015e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015e4:	2302      	movs	r3, #2
 80015e6:	2200      	movs	r2, #0
 80015e8:	f000 f87e 	bl	80016e8 <_lseek_r>
 80015ec:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80015f0:	e7ea      	b.n	80015c8 <__swrite+0x14>
 80015f2:	bf00      	nop

080015f4 <__sseek>:
 80015f4:	b510      	push	{r4, lr}
 80015f6:	460c      	mov	r4, r1
 80015f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015fc:	f000 f874 	bl	80016e8 <_lseek_r>
 8001600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001604:	1c42      	adds	r2, r0, #1
 8001606:	bf0e      	itee	eq
 8001608:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800160c:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001610:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001612:	81a3      	strh	r3, [r4, #12]
 8001614:	bd10      	pop	{r4, pc}
 8001616:	bf00      	nop

08001618 <__sclose>:
 8001618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800161c:	f000 b852 	b.w	80016c4 <_close_r>

08001620 <memset>:
 8001620:	0783      	lsls	r3, r0, #30
 8001622:	b530      	push	{r4, r5, lr}
 8001624:	d047      	beq.n	80016b6 <memset+0x96>
 8001626:	1e54      	subs	r4, r2, #1
 8001628:	2a00      	cmp	r2, #0
 800162a:	d03e      	beq.n	80016aa <memset+0x8a>
 800162c:	b2ca      	uxtb	r2, r1
 800162e:	4603      	mov	r3, r0
 8001630:	e001      	b.n	8001636 <memset+0x16>
 8001632:	3c01      	subs	r4, #1
 8001634:	d339      	bcc.n	80016aa <memset+0x8a>
 8001636:	f803 2b01 	strb.w	r2, [r3], #1
 800163a:	079d      	lsls	r5, r3, #30
 800163c:	d1f9      	bne.n	8001632 <memset+0x12>
 800163e:	2c03      	cmp	r4, #3
 8001640:	d92c      	bls.n	800169c <memset+0x7c>
 8001642:	b2cd      	uxtb	r5, r1
 8001644:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 8001648:	2c0f      	cmp	r4, #15
 800164a:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 800164e:	d935      	bls.n	80016bc <memset+0x9c>
 8001650:	f1a4 0210 	sub.w	r2, r4, #16
 8001654:	f022 0c0f 	bic.w	ip, r2, #15
 8001658:	f103 0e10 	add.w	lr, r3, #16
 800165c:	44e6      	add	lr, ip
 800165e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 8001662:	461a      	mov	r2, r3
 8001664:	6015      	str	r5, [r2, #0]
 8001666:	6055      	str	r5, [r2, #4]
 8001668:	6095      	str	r5, [r2, #8]
 800166a:	60d5      	str	r5, [r2, #12]
 800166c:	3210      	adds	r2, #16
 800166e:	4572      	cmp	r2, lr
 8001670:	d1f8      	bne.n	8001664 <memset+0x44>
 8001672:	f10c 0201 	add.w	r2, ip, #1
 8001676:	f014 0f0c 	tst.w	r4, #12
 800167a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800167e:	f004 0c0f 	and.w	ip, r4, #15
 8001682:	d013      	beq.n	80016ac <memset+0x8c>
 8001684:	f1ac 0304 	sub.w	r3, ip, #4
 8001688:	f023 0303 	bic.w	r3, r3, #3
 800168c:	3304      	adds	r3, #4
 800168e:	4413      	add	r3, r2
 8001690:	f842 5b04 	str.w	r5, [r2], #4
 8001694:	429a      	cmp	r2, r3
 8001696:	d1fb      	bne.n	8001690 <memset+0x70>
 8001698:	f00c 0403 	and.w	r4, ip, #3
 800169c:	b12c      	cbz	r4, 80016aa <memset+0x8a>
 800169e:	b2c9      	uxtb	r1, r1
 80016a0:	441c      	add	r4, r3
 80016a2:	f803 1b01 	strb.w	r1, [r3], #1
 80016a6:	429c      	cmp	r4, r3
 80016a8:	d1fb      	bne.n	80016a2 <memset+0x82>
 80016aa:	bd30      	pop	{r4, r5, pc}
 80016ac:	4664      	mov	r4, ip
 80016ae:	4613      	mov	r3, r2
 80016b0:	2c00      	cmp	r4, #0
 80016b2:	d1f4      	bne.n	800169e <memset+0x7e>
 80016b4:	e7f9      	b.n	80016aa <memset+0x8a>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4614      	mov	r4, r2
 80016ba:	e7c0      	b.n	800163e <memset+0x1e>
 80016bc:	461a      	mov	r2, r3
 80016be:	46a4      	mov	ip, r4
 80016c0:	e7e0      	b.n	8001684 <memset+0x64>
 80016c2:	bf00      	nop

080016c4 <_close_r>:
 80016c4:	b538      	push	{r3, r4, r5, lr}
 80016c6:	4d07      	ldr	r5, [pc, #28]	@ (80016e4 <_close_r+0x20>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	4604      	mov	r4, r0
 80016cc:	4608      	mov	r0, r1
 80016ce:	602a      	str	r2, [r5, #0]
 80016d0:	f001 fb5e 	bl	8002d90 <_close>
 80016d4:	1c43      	adds	r3, r0, #1
 80016d6:	d000      	beq.n	80016da <_close_r+0x16>
 80016d8:	bd38      	pop	{r3, r4, r5, pc}
 80016da:	682b      	ldr	r3, [r5, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0fb      	beq.n	80016d8 <_close_r+0x14>
 80016e0:	6023      	str	r3, [r4, #0]
 80016e2:	bd38      	pop	{r3, r4, r5, pc}
 80016e4:	200002f4 	.word	0x200002f4

080016e8 <_lseek_r>:
 80016e8:	b538      	push	{r3, r4, r5, lr}
 80016ea:	460c      	mov	r4, r1
 80016ec:	4d08      	ldr	r5, [pc, #32]	@ (8001710 <_lseek_r+0x28>)
 80016ee:	4684      	mov	ip, r0
 80016f0:	4611      	mov	r1, r2
 80016f2:	4620      	mov	r0, r4
 80016f4:	461a      	mov	r2, r3
 80016f6:	2300      	movs	r3, #0
 80016f8:	602b      	str	r3, [r5, #0]
 80016fa:	4664      	mov	r4, ip
 80016fc:	f001 fb70 	bl	8002de0 <_lseek>
 8001700:	1c43      	adds	r3, r0, #1
 8001702:	d000      	beq.n	8001706 <_lseek_r+0x1e>
 8001704:	bd38      	pop	{r3, r4, r5, pc}
 8001706:	682b      	ldr	r3, [r5, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0fb      	beq.n	8001704 <_lseek_r+0x1c>
 800170c:	6023      	str	r3, [r4, #0]
 800170e:	bd38      	pop	{r3, r4, r5, pc}
 8001710:	200002f4 	.word	0x200002f4

08001714 <_read_r>:
 8001714:	b538      	push	{r3, r4, r5, lr}
 8001716:	460c      	mov	r4, r1
 8001718:	4d08      	ldr	r5, [pc, #32]	@ (800173c <_read_r+0x28>)
 800171a:	4684      	mov	ip, r0
 800171c:	4611      	mov	r1, r2
 800171e:	4620      	mov	r0, r4
 8001720:	461a      	mov	r2, r3
 8001722:	2300      	movs	r3, #0
 8001724:	602b      	str	r3, [r5, #0]
 8001726:	4664      	mov	r4, ip
 8001728:	f001 fb62 	bl	8002df0 <_read>
 800172c:	1c43      	adds	r3, r0, #1
 800172e:	d000      	beq.n	8001732 <_read_r+0x1e>
 8001730:	bd38      	pop	{r3, r4, r5, pc}
 8001732:	682b      	ldr	r3, [r5, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0fb      	beq.n	8001730 <_read_r+0x1c>
 8001738:	6023      	str	r3, [r4, #0]
 800173a:	bd38      	pop	{r3, r4, r5, pc}
 800173c:	200002f4 	.word	0x200002f4

08001740 <_sbrk_r>:
 8001740:	b538      	push	{r3, r4, r5, lr}
 8001742:	4d07      	ldr	r5, [pc, #28]	@ (8001760 <_sbrk_r+0x20>)
 8001744:	2200      	movs	r2, #0
 8001746:	4604      	mov	r4, r0
 8001748:	4608      	mov	r0, r1
 800174a:	602a      	str	r2, [r5, #0]
 800174c:	f004 fa32 	bl	8005bb4 <_sbrk>
 8001750:	1c43      	adds	r3, r0, #1
 8001752:	d000      	beq.n	8001756 <_sbrk_r+0x16>
 8001754:	bd38      	pop	{r3, r4, r5, pc}
 8001756:	682b      	ldr	r3, [r5, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0fb      	beq.n	8001754 <_sbrk_r+0x14>
 800175c:	6023      	str	r3, [r4, #0]
 800175e:	bd38      	pop	{r3, r4, r5, pc}
 8001760:	200002f4 	.word	0x200002f4

08001764 <_write_r>:
 8001764:	b538      	push	{r3, r4, r5, lr}
 8001766:	460c      	mov	r4, r1
 8001768:	4d08      	ldr	r5, [pc, #32]	@ (800178c <_write_r+0x28>)
 800176a:	4684      	mov	ip, r0
 800176c:	4611      	mov	r1, r2
 800176e:	4620      	mov	r0, r4
 8001770:	461a      	mov	r2, r3
 8001772:	2300      	movs	r3, #0
 8001774:	602b      	str	r3, [r5, #0]
 8001776:	4664      	mov	r4, ip
 8001778:	f001 fb42 	bl	8002e00 <_write>
 800177c:	1c43      	adds	r3, r0, #1
 800177e:	d000      	beq.n	8001782 <_write_r+0x1e>
 8001780:	bd38      	pop	{r3, r4, r5, pc}
 8001782:	682b      	ldr	r3, [r5, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0fb      	beq.n	8001780 <_write_r+0x1c>
 8001788:	6023      	str	r3, [r4, #0]
 800178a:	bd38      	pop	{r3, r4, r5, pc}
 800178c:	200002f4 	.word	0x200002f4

08001790 <__errno>:
 8001790:	4b01      	ldr	r3, [pc, #4]	@ (8001798 <__errno+0x8>)
 8001792:	6818      	ldr	r0, [r3, #0]
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	2000001c 	.word	0x2000001c

0800179c <__libc_init_array>:
 800179c:	b570      	push	{r4, r5, r6, lr}
 800179e:	4b0f      	ldr	r3, [pc, #60]	@ (80017dc <__libc_init_array+0x40>)
 80017a0:	4d0f      	ldr	r5, [pc, #60]	@ (80017e0 <__libc_init_array+0x44>)
 80017a2:	42ab      	cmp	r3, r5
 80017a4:	eba3 0605 	sub.w	r6, r3, r5
 80017a8:	d007      	beq.n	80017ba <__libc_init_array+0x1e>
 80017aa:	10b6      	asrs	r6, r6, #2
 80017ac:	2400      	movs	r4, #0
 80017ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80017b2:	3401      	adds	r4, #1
 80017b4:	4798      	blx	r3
 80017b6:	42a6      	cmp	r6, r4
 80017b8:	d8f9      	bhi.n	80017ae <__libc_init_array+0x12>
 80017ba:	f004 fa4d 	bl	8005c58 <_init>
 80017be:	4d09      	ldr	r5, [pc, #36]	@ (80017e4 <__libc_init_array+0x48>)
 80017c0:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <__libc_init_array+0x4c>)
 80017c2:	1b5e      	subs	r6, r3, r5
 80017c4:	42ab      	cmp	r3, r5
 80017c6:	ea4f 06a6 	mov.w	r6, r6, asr #2
 80017ca:	d006      	beq.n	80017da <__libc_init_array+0x3e>
 80017cc:	2400      	movs	r4, #0
 80017ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80017d2:	3401      	adds	r4, #1
 80017d4:	4798      	blx	r3
 80017d6:	42a6      	cmp	r6, r4
 80017d8:	d8f9      	bhi.n	80017ce <__libc_init_array+0x32>
 80017da:	bd70      	pop	{r4, r5, r6, pc}
 80017dc:	08005d88 	.word	0x08005d88
 80017e0:	08005d88 	.word	0x08005d88
 80017e4:	08005d88 	.word	0x08005d88
 80017e8:	08005d8c 	.word	0x08005d8c

080017ec <__retarget_lock_init>:
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop

080017f0 <__retarget_lock_init_recursive>:
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop

080017f4 <__retarget_lock_close>:
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop

080017f8 <__retarget_lock_close_recursive>:
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop

080017fc <__retarget_lock_acquire>:
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop

08001800 <__retarget_lock_acquire_recursive>:
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop

08001804 <__retarget_lock_try_acquire>:
 8001804:	2001      	movs	r0, #1
 8001806:	4770      	bx	lr

08001808 <__retarget_lock_try_acquire_recursive>:
 8001808:	2001      	movs	r0, #1
 800180a:	4770      	bx	lr

0800180c <__retarget_lock_release>:
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop

08001810 <__retarget_lock_release_recursive>:
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop

08001814 <__assert_func>:
 8001814:	b500      	push	{lr}
 8001816:	4c0b      	ldr	r4, [pc, #44]	@ (8001844 <__assert_func+0x30>)
 8001818:	6825      	ldr	r5, [r4, #0]
 800181a:	4614      	mov	r4, r2
 800181c:	68ee      	ldr	r6, [r5, #12]
 800181e:	461a      	mov	r2, r3
 8001820:	b085      	sub	sp, #20
 8001822:	4603      	mov	r3, r0
 8001824:	460d      	mov	r5, r1
 8001826:	b14c      	cbz	r4, 800183c <__assert_func+0x28>
 8001828:	4907      	ldr	r1, [pc, #28]	@ (8001848 <__assert_func+0x34>)
 800182a:	9500      	str	r5, [sp, #0]
 800182c:	e9cd 1401 	strd	r1, r4, [sp, #4]
 8001830:	4630      	mov	r0, r6
 8001832:	4906      	ldr	r1, [pc, #24]	@ (800184c <__assert_func+0x38>)
 8001834:	f000 f948 	bl	8001ac8 <fiprintf>
 8001838:	f000 f95a 	bl	8001af0 <abort>
 800183c:	4904      	ldr	r1, [pc, #16]	@ (8001850 <__assert_func+0x3c>)
 800183e:	460c      	mov	r4, r1
 8001840:	e7f3      	b.n	800182a <__assert_func+0x16>
 8001842:	bf00      	nop
 8001844:	2000001c 	.word	0x2000001c
 8001848:	08005d04 	.word	0x08005d04
 800184c:	08005d14 	.word	0x08005d14
 8001850:	08005d10 	.word	0x08005d10

08001854 <__assert>:
 8001854:	b508      	push	{r3, lr}
 8001856:	4613      	mov	r3, r2
 8001858:	2200      	movs	r2, #0
 800185a:	f7ff ffdb 	bl	8001814 <__assert_func>
 800185e:	bf00      	nop

08001860 <_free_r>:
 8001860:	2900      	cmp	r1, #0
 8001862:	d050      	beq.n	8001906 <_free_r+0xa6>
 8001864:	b538      	push	{r3, r4, r5, lr}
 8001866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800186a:	1f0c      	subs	r4, r1, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	bfb8      	it	lt
 8001870:	18e4      	addlt	r4, r4, r3
 8001872:	4605      	mov	r5, r0
 8001874:	f7ff fc74 	bl	8001160 <__malloc_lock>
 8001878:	4a27      	ldr	r2, [pc, #156]	@ (8001918 <_free_r+0xb8>)
 800187a:	6813      	ldr	r3, [r2, #0]
 800187c:	b12b      	cbz	r3, 800188a <_free_r+0x2a>
 800187e:	42a3      	cmp	r3, r4
 8001880:	d90c      	bls.n	800189c <_free_r+0x3c>
 8001882:	6821      	ldr	r1, [r4, #0]
 8001884:	1860      	adds	r0, r4, r1
 8001886:	4283      	cmp	r3, r0
 8001888:	d02c      	beq.n	80018e4 <_free_r+0x84>
 800188a:	6063      	str	r3, [r4, #4]
 800188c:	4628      	mov	r0, r5
 800188e:	6014      	str	r4, [r2, #0]
 8001890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001894:	f7ff bc6a 	b.w	800116c <__malloc_unlock>
 8001898:	42a3      	cmp	r3, r4
 800189a:	d80f      	bhi.n	80018bc <_free_r+0x5c>
 800189c:	461a      	mov	r2, r3
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f9      	bne.n	8001898 <_free_r+0x38>
 80018a4:	6811      	ldr	r1, [r2, #0]
 80018a6:	1850      	adds	r0, r2, r1
 80018a8:	4284      	cmp	r4, r0
 80018aa:	d017      	beq.n	80018dc <_free_r+0x7c>
 80018ac:	d32c      	bcc.n	8001908 <_free_r+0xa8>
 80018ae:	6063      	str	r3, [r4, #4]
 80018b0:	6054      	str	r4, [r2, #4]
 80018b2:	4628      	mov	r0, r5
 80018b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018b8:	f7ff bc58 	b.w	800116c <__malloc_unlock>
 80018bc:	6811      	ldr	r1, [r2, #0]
 80018be:	1850      	adds	r0, r2, r1
 80018c0:	42a0      	cmp	r0, r4
 80018c2:	d014      	beq.n	80018ee <_free_r+0x8e>
 80018c4:	d820      	bhi.n	8001908 <_free_r+0xa8>
 80018c6:	6821      	ldr	r1, [r4, #0]
 80018c8:	1860      	adds	r0, r4, r1
 80018ca:	4283      	cmp	r3, r0
 80018cc:	d1ef      	bne.n	80018ae <_free_r+0x4e>
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4408      	add	r0, r1
 80018d4:	e9c4 0300 	strd	r0, r3, [r4]
 80018d8:	6054      	str	r4, [r2, #4]
 80018da:	e7ea      	b.n	80018b2 <_free_r+0x52>
 80018dc:	6823      	ldr	r3, [r4, #0]
 80018de:	440b      	add	r3, r1
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	e7e6      	b.n	80018b2 <_free_r+0x52>
 80018e4:	6818      	ldr	r0, [r3, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	4408      	add	r0, r1
 80018ea:	6020      	str	r0, [r4, #0]
 80018ec:	e7cd      	b.n	800188a <_free_r+0x2a>
 80018ee:	6820      	ldr	r0, [r4, #0]
 80018f0:	4401      	add	r1, r0
 80018f2:	1850      	adds	r0, r2, r1
 80018f4:	4283      	cmp	r3, r0
 80018f6:	6011      	str	r1, [r2, #0]
 80018f8:	d1db      	bne.n	80018b2 <_free_r+0x52>
 80018fa:	e9d3 0400 	ldrd	r0, r4, [r3]
 80018fe:	4401      	add	r1, r0
 8001900:	e9c2 1400 	strd	r1, r4, [r2]
 8001904:	e7d5      	b.n	80018b2 <_free_r+0x52>
 8001906:	4770      	bx	lr
 8001908:	230c      	movs	r3, #12
 800190a:	602b      	str	r3, [r5, #0]
 800190c:	4628      	mov	r0, r5
 800190e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001912:	f7ff bc2b 	b.w	800116c <__malloc_unlock>
 8001916:	bf00      	nop
 8001918:	200001b4 	.word	0x200001b4

0800191c <__sflush_r>:
 800191c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800191e:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8001922:	4607      	mov	r7, r0
 8001924:	0718      	lsls	r0, r3, #28
 8001926:	460c      	mov	r4, r1
 8001928:	d439      	bmi.n	800199e <__sflush_r+0x82>
 800192a:	684a      	ldr	r2, [r1, #4]
 800192c:	2a00      	cmp	r2, #0
 800192e:	dd53      	ble.n	80019d8 <__sflush_r+0xbc>
 8001930:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8001932:	2d00      	cmp	r5, #0
 8001934:	d031      	beq.n	800199a <__sflush_r+0x7e>
 8001936:	2200      	movs	r2, #0
 8001938:	683e      	ldr	r6, [r7, #0]
 800193a:	603a      	str	r2, [r7, #0]
 800193c:	f413 5280 	ands.w	r2, r3, #4096	@ 0x1000
 8001940:	6a21      	ldr	r1, [r4, #32]
 8001942:	d155      	bne.n	80019f0 <__sflush_r+0xd4>
 8001944:	2301      	movs	r3, #1
 8001946:	4638      	mov	r0, r7
 8001948:	47a8      	blx	r5
 800194a:	1c41      	adds	r1, r0, #1
 800194c:	4602      	mov	r2, r0
 800194e:	d05e      	beq.n	8001a0e <__sflush_r+0xf2>
 8001950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001954:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8001956:	6a21      	ldr	r1, [r4, #32]
 8001958:	075b      	lsls	r3, r3, #29
 800195a:	d505      	bpl.n	8001968 <__sflush_r+0x4c>
 800195c:	6863      	ldr	r3, [r4, #4]
 800195e:	1ad2      	subs	r2, r2, r3
 8001960:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001962:	b10b      	cbz	r3, 8001968 <__sflush_r+0x4c>
 8001964:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001966:	1ad2      	subs	r2, r2, r3
 8001968:	2300      	movs	r3, #0
 800196a:	4638      	mov	r0, r7
 800196c:	47a8      	blx	r5
 800196e:	1c45      	adds	r5, r0, #1
 8001970:	d040      	beq.n	80019f4 <__sflush_r+0xd8>
 8001972:	2300      	movs	r3, #0
 8001974:	6063      	str	r3, [r4, #4]
 8001976:	6923      	ldr	r3, [r4, #16]
 8001978:	6023      	str	r3, [r4, #0]
 800197a:	89a3      	ldrh	r3, [r4, #12]
 800197c:	04d9      	lsls	r1, r3, #19
 800197e:	d500      	bpl.n	8001982 <__sflush_r+0x66>
 8001980:	6560      	str	r0, [r4, #84]	@ 0x54
 8001982:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001984:	603e      	str	r6, [r7, #0]
 8001986:	b141      	cbz	r1, 800199a <__sflush_r+0x7e>
 8001988:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800198c:	4299      	cmp	r1, r3
 800198e:	d002      	beq.n	8001996 <__sflush_r+0x7a>
 8001990:	4638      	mov	r0, r7
 8001992:	f7ff ff65 	bl	8001860 <_free_r>
 8001996:	2300      	movs	r3, #0
 8001998:	6363      	str	r3, [r4, #52]	@ 0x34
 800199a:	2000      	movs	r0, #0
 800199c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800199e:	690e      	ldr	r6, [r1, #16]
 80019a0:	2e00      	cmp	r6, #0
 80019a2:	d0fa      	beq.n	800199a <__sflush_r+0x7e>
 80019a4:	079b      	lsls	r3, r3, #30
 80019a6:	680d      	ldr	r5, [r1, #0]
 80019a8:	bf08      	it	eq
 80019aa:	694b      	ldreq	r3, [r1, #20]
 80019ac:	600e      	str	r6, [r1, #0]
 80019ae:	bf18      	it	ne
 80019b0:	2300      	movne	r3, #0
 80019b2:	1bad      	subs	r5, r5, r6
 80019b4:	608b      	str	r3, [r1, #8]
 80019b6:	e00c      	b.n	80019d2 <__sflush_r+0xb6>
 80019b8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80019bc:	6a21      	ldr	r1, [r4, #32]
 80019be:	462b      	mov	r3, r5
 80019c0:	4632      	mov	r2, r6
 80019c2:	4638      	mov	r0, r7
 80019c4:	47e0      	blx	ip
 80019c6:	f1b0 0c00 	subs.w	ip, r0, #0
 80019ca:	eba5 050c 	sub.w	r5, r5, ip
 80019ce:	4466      	add	r6, ip
 80019d0:	dd06      	ble.n	80019e0 <__sflush_r+0xc4>
 80019d2:	2d00      	cmp	r5, #0
 80019d4:	dcf0      	bgt.n	80019b8 <__sflush_r+0x9c>
 80019d6:	e7e0      	b.n	800199a <__sflush_r+0x7e>
 80019d8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80019da:	2a00      	cmp	r2, #0
 80019dc:	dca8      	bgt.n	8001930 <__sflush_r+0x14>
 80019de:	e7dc      	b.n	800199a <__sflush_r+0x7e>
 80019e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019e8:	81a3      	strh	r3, [r4, #12]
 80019ea:	f04f 30ff 	mov.w	r0, #4294967295
 80019ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80019f2:	e7b1      	b.n	8001958 <__sflush_r+0x3c>
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019fa:	b18a      	cbz	r2, 8001a20 <__sflush_r+0x104>
 80019fc:	2a1d      	cmp	r2, #29
 80019fe:	d001      	beq.n	8001a04 <__sflush_r+0xe8>
 8001a00:	2a16      	cmp	r2, #22
 8001a02:	d1ef      	bne.n	80019e4 <__sflush_r+0xc8>
 8001a04:	6923      	ldr	r3, [r4, #16]
 8001a06:	2200      	movs	r2, #0
 8001a08:	e9c4 3200 	strd	r3, r2, [r4]
 8001a0c:	e7b9      	b.n	8001982 <__sflush_r+0x66>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d09d      	beq.n	8001950 <__sflush_r+0x34>
 8001a14:	2b1d      	cmp	r3, #29
 8001a16:	d001      	beq.n	8001a1c <__sflush_r+0x100>
 8001a18:	2b16      	cmp	r3, #22
 8001a1a:	d1e1      	bne.n	80019e0 <__sflush_r+0xc4>
 8001a1c:	603e      	str	r6, [r7, #0]
 8001a1e:	e7bc      	b.n	800199a <__sflush_r+0x7e>
 8001a20:	6062      	str	r2, [r4, #4]
 8001a22:	6922      	ldr	r2, [r4, #16]
 8001a24:	6022      	str	r2, [r4, #0]
 8001a26:	04da      	lsls	r2, r3, #19
 8001a28:	d4aa      	bmi.n	8001980 <__sflush_r+0x64>
 8001a2a:	e7aa      	b.n	8001982 <__sflush_r+0x66>

08001a2c <_fflush_r>:
 8001a2c:	b538      	push	{r3, r4, r5, lr}
 8001a2e:	690b      	ldr	r3, [r1, #16]
 8001a30:	b1cb      	cbz	r3, 8001a66 <_fflush_r+0x3a>
 8001a32:	460c      	mov	r4, r1
 8001a34:	4605      	mov	r5, r0
 8001a36:	b108      	cbz	r0, 8001a3c <_fflush_r+0x10>
 8001a38:	6a03      	ldr	r3, [r0, #32]
 8001a3a:	b1bb      	cbz	r3, 8001a6c <_fflush_r+0x40>
 8001a3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a40:	b18b      	cbz	r3, 8001a66 <_fflush_r+0x3a>
 8001a42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001a44:	07d0      	lsls	r0, r2, #31
 8001a46:	d401      	bmi.n	8001a4c <_fflush_r+0x20>
 8001a48:	0599      	lsls	r1, r3, #22
 8001a4a:	d512      	bpl.n	8001a72 <_fflush_r+0x46>
 8001a4c:	4628      	mov	r0, r5
 8001a4e:	4621      	mov	r1, r4
 8001a50:	f7ff ff64 	bl	800191c <__sflush_r>
 8001a54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001a56:	07da      	lsls	r2, r3, #31
 8001a58:	4605      	mov	r5, r0
 8001a5a:	d402      	bmi.n	8001a62 <_fflush_r+0x36>
 8001a5c:	89a3      	ldrh	r3, [r4, #12]
 8001a5e:	059b      	lsls	r3, r3, #22
 8001a60:	d50b      	bpl.n	8001a7a <_fflush_r+0x4e>
 8001a62:	4628      	mov	r0, r5
 8001a64:	bd38      	pop	{r3, r4, r5, pc}
 8001a66:	2500      	movs	r5, #0
 8001a68:	4628      	mov	r0, r5
 8001a6a:	bd38      	pop	{r3, r4, r5, pc}
 8001a6c:	f7ff fd1a 	bl	80014a4 <__sinit>
 8001a70:	e7e4      	b.n	8001a3c <_fflush_r+0x10>
 8001a72:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001a74:	f7ff fec4 	bl	8001800 <__retarget_lock_acquire_recursive>
 8001a78:	e7e8      	b.n	8001a4c <_fflush_r+0x20>
 8001a7a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001a7c:	f7ff fec8 	bl	8001810 <__retarget_lock_release_recursive>
 8001a80:	e7ef      	b.n	8001a62 <_fflush_r+0x36>
 8001a82:	bf00      	nop

08001a84 <fflush>:
 8001a84:	4601      	mov	r1, r0
 8001a86:	b118      	cbz	r0, 8001a90 <fflush+0xc>
 8001a88:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <fflush+0x18>)
 8001a8a:	6818      	ldr	r0, [r3, #0]
 8001a8c:	f7ff bfce 	b.w	8001a2c <_fflush_r>
 8001a90:	4a03      	ldr	r2, [pc, #12]	@ (8001aa0 <fflush+0x1c>)
 8001a92:	4904      	ldr	r1, [pc, #16]	@ (8001aa4 <fflush+0x20>)
 8001a94:	4804      	ldr	r0, [pc, #16]	@ (8001aa8 <fflush+0x24>)
 8001a96:	f7ff bd55 	b.w	8001544 <_fwalk_sglue>
 8001a9a:	bf00      	nop
 8001a9c:	2000001c 	.word	0x2000001c
 8001aa0:	20000010 	.word	0x20000010
 8001aa4:	08001a2d 	.word	0x08001a2d
 8001aa8:	20000020 	.word	0x20000020

08001aac <_fiprintf_r>:
 8001aac:	b40c      	push	{r2, r3}
 8001aae:	b500      	push	{lr}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	ab04      	add	r3, sp, #16
 8001ab4:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	f000 f85d 	bl	8001b78 <_vfiprintf_r>
 8001abe:	b003      	add	sp, #12
 8001ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ac4:	b002      	add	sp, #8
 8001ac6:	4770      	bx	lr

08001ac8 <fiprintf>:
 8001ac8:	b40e      	push	{r1, r2, r3}
 8001aca:	b510      	push	{r4, lr}
 8001acc:	b083      	sub	sp, #12
 8001ace:	ab05      	add	r3, sp, #20
 8001ad0:	4c06      	ldr	r4, [pc, #24]	@ (8001aec <fiprintf+0x24>)
 8001ad2:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	4601      	mov	r1, r0
 8001ada:	6820      	ldr	r0, [r4, #0]
 8001adc:	f000 f84c 	bl	8001b78 <_vfiprintf_r>
 8001ae0:	b003      	add	sp, #12
 8001ae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ae6:	b003      	add	sp, #12
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	2000001c 	.word	0x2000001c

08001af0 <abort>:
 8001af0:	b508      	push	{r3, lr}
 8001af2:	2006      	movs	r0, #6
 8001af4:	f000 febe 	bl	8002874 <raise>
 8001af8:	2001      	movs	r0, #1
 8001afa:	f001 f989 	bl	8002e10 <_exit>
 8001afe:	bf00      	nop

08001b00 <__sfputc_r>:
 8001b00:	6893      	ldr	r3, [r2, #8]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	6093      	str	r3, [r2, #8]
 8001b08:	da05      	bge.n	8001b16 <__sfputc_r+0x16>
 8001b0a:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8001b0e:	4563      	cmp	r3, ip
 8001b10:	db07      	blt.n	8001b22 <__sfputc_r+0x22>
 8001b12:	290a      	cmp	r1, #10
 8001b14:	d005      	beq.n	8001b22 <__sfputc_r+0x22>
 8001b16:	6813      	ldr	r3, [r2, #0]
 8001b18:	1c58      	adds	r0, r3, #1
 8001b1a:	6010      	str	r0, [r2, #0]
 8001b1c:	7019      	strb	r1, [r3, #0]
 8001b1e:	4608      	mov	r0, r1
 8001b20:	4770      	bx	lr
 8001b22:	f000 bce3 	b.w	80024ec <__swbuf_r>
 8001b26:	bf00      	nop

08001b28 <__sfputs_r>:
 8001b28:	b19b      	cbz	r3, 8001b52 <__sfputs_r+0x2a>
 8001b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4606      	mov	r6, r0
 8001b30:	460f      	mov	r7, r1
 8001b32:	1e54      	subs	r4, r2, #1
 8001b34:	1e5d      	subs	r5, r3, #1
 8001b36:	e001      	b.n	8001b3c <__sfputs_r+0x14>
 8001b38:	42ac      	cmp	r4, r5
 8001b3a:	d008      	beq.n	8001b4e <__sfputs_r+0x26>
 8001b3c:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8001b40:	463a      	mov	r2, r7
 8001b42:	4630      	mov	r0, r6
 8001b44:	f7ff ffdc 	bl	8001b00 <__sfputc_r>
 8001b48:	1c43      	adds	r3, r0, #1
 8001b4a:	d1f5      	bne.n	8001b38 <__sfputs_r+0x10>
 8001b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b4e:	2000      	movs	r0, #0
 8001b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b52:	2000      	movs	r0, #0
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop

08001b58 <__sprint_r>:
 8001b58:	6893      	ldr	r3, [r2, #8]
 8001b5a:	b510      	push	{r4, lr}
 8001b5c:	4614      	mov	r4, r2
 8001b5e:	b91b      	cbnz	r3, 8001b68 <__sprint_r+0x10>
 8001b60:	4618      	mov	r0, r3
 8001b62:	2300      	movs	r3, #0
 8001b64:	6063      	str	r3, [r4, #4]
 8001b66:	bd10      	pop	{r4, pc}
 8001b68:	f000 fb44 	bl	80021f4 <__sfvwrite_r>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60a3      	str	r3, [r4, #8]
 8001b70:	2300      	movs	r3, #0
 8001b72:	6063      	str	r3, [r4, #4]
 8001b74:	bd10      	pop	{r4, pc}
 8001b76:	bf00      	nop

08001b78 <_vfiprintf_r>:
 8001b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b7c:	b0a1      	sub	sp, #132	@ 0x84
 8001b7e:	468b      	mov	fp, r1
 8001b80:	4691      	mov	r9, r2
 8001b82:	461c      	mov	r4, r3
 8001b84:	9004      	str	r0, [sp, #16]
 8001b86:	b118      	cbz	r0, 8001b90 <_vfiprintf_r+0x18>
 8001b88:	6a03      	ldr	r3, [r0, #32]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 8147 	beq.w	8001e1e <_vfiprintf_r+0x2a6>
 8001b90:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 8001b94:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8001b98:	07d2      	lsls	r2, r2, #31
 8001b9a:	d402      	bmi.n	8001ba2 <_vfiprintf_r+0x2a>
 8001b9c:	059f      	lsls	r7, r3, #22
 8001b9e:	f140 8137 	bpl.w	8001e10 <_vfiprintf_r+0x298>
 8001ba2:	071e      	lsls	r6, r3, #28
 8001ba4:	f140 809e 	bpl.w	8001ce4 <_vfiprintf_r+0x16c>
 8001ba8:	f8db 3010 	ldr.w	r3, [fp, #16]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 8099 	beq.w	8001ce4 <_vfiprintf_r+0x16c>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	46ca      	mov	sl, r9
 8001bb6:	930d      	str	r3, [sp, #52]	@ 0x34
 8001bb8:	f243 0320 	movw	r3, #12320	@ 0x3020
 8001bbc:	f8ad 3039 	strh.w	r3, [sp, #57]	@ 0x39
 8001bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8001bc4:	4e97      	ldr	r6, [pc, #604]	@ (8001e24 <_vfiprintf_r+0x2ac>)
 8001bc6:	9407      	str	r4, [sp, #28]
 8001bc8:	2701      	movs	r7, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d07a      	beq.n	8001cc4 <_vfiprintf_r+0x14c>
 8001bce:	46d1      	mov	r9, sl
 8001bd0:	e004      	b.n	8001bdc <_vfiprintf_r+0x64>
 8001bd2:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 809a 	beq.w	8001d10 <_vfiprintf_r+0x198>
 8001bdc:	2b25      	cmp	r3, #37	@ 0x25
 8001bde:	d1f8      	bne.n	8001bd2 <_vfiprintf_r+0x5a>
 8001be0:	ebb9 080a 	subs.w	r8, r9, sl
 8001be4:	f040 8097 	bne.w	8001d16 <_vfiprintf_r+0x19e>
 8001be8:	f899 3000 	ldrb.w	r3, [r9]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d069      	beq.n	8001cc4 <_vfiprintf_r+0x14c>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf6:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
 8001bfa:	f109 0901 	add.w	r9, r9, #1
 8001bfe:	9308      	str	r3, [sp, #32]
 8001c00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001c02:	f88d 3063 	strb.w	r3, [sp, #99]	@ 0x63
 8001c06:	931e      	str	r3, [sp, #120]	@ 0x78
 8001c08:	e005      	b.n	8001c16 <_vfiprintf_r+0x9e>
 8001c0a:	9a08      	ldr	r2, [sp, #32]
 8001c0c:	fa07 f303 	lsl.w	r3, r7, r3
 8001c10:	431a      	orrs	r2, r3
 8001c12:	9208      	str	r2, [sp, #32]
 8001c14:	46a1      	mov	r9, r4
 8001c16:	464c      	mov	r4, r9
 8001c18:	2205      	movs	r2, #5
 8001c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c1e:	4630      	mov	r0, r6
 8001c20:	f000 fede 	bl	80029e0 <memchr>
 8001c24:	46a2      	mov	sl, r4
 8001c26:	1b83      	subs	r3, r0, r6
 8001c28:	2800      	cmp	r0, #0
 8001c2a:	d1ee      	bne.n	8001c0a <_vfiprintf_r+0x92>
 8001c2c:	9b08      	ldr	r3, [sp, #32]
 8001c2e:	06d8      	lsls	r0, r3, #27
 8001c30:	bf44      	itt	mi
 8001c32:	2220      	movmi	r2, #32
 8001c34:	f88d 2063 	strbmi.w	r2, [sp, #99]	@ 0x63
 8001c38:	0719      	lsls	r1, r3, #28
 8001c3a:	f899 1000 	ldrb.w	r1, [r9]
 8001c3e:	bf44      	itt	mi
 8001c40:	222b      	movmi	r2, #43	@ 0x2b
 8001c42:	f88d 2063 	strbmi.w	r2, [sp, #99]	@ 0x63
 8001c46:	292a      	cmp	r1, #42	@ 0x2a
 8001c48:	d17b      	bne.n	8001d42 <_vfiprintf_r+0x1ca>
 8001c4a:	9a07      	ldr	r2, [sp, #28]
 8001c4c:	6811      	ldr	r1, [r2, #0]
 8001c4e:	3204      	adds	r2, #4
 8001c50:	2900      	cmp	r1, #0
 8001c52:	9207      	str	r2, [sp, #28]
 8001c54:	f2c0 80b0 	blt.w	8001db8 <_vfiprintf_r+0x240>
 8001c58:	910b      	str	r1, [sp, #44]	@ 0x2c
 8001c5a:	f899 1001 	ldrb.w	r1, [r9, #1]
 8001c5e:	292e      	cmp	r1, #46	@ 0x2e
 8001c60:	f000 8086 	beq.w	8001d70 <_vfiprintf_r+0x1f8>
 8001c64:	4c70      	ldr	r4, [pc, #448]	@ (8001e28 <_vfiprintf_r+0x2b0>)
 8001c66:	2203      	movs	r2, #3
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f000 feb9 	bl	80029e0 <memchr>
 8001c6e:	b138      	cbz	r0, 8001c80 <_vfiprintf_r+0x108>
 8001c70:	9b08      	ldr	r3, [sp, #32]
 8001c72:	1b00      	subs	r0, r0, r4
 8001c74:	2240      	movs	r2, #64	@ 0x40
 8001c76:	4082      	lsls	r2, r0
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	f10a 0a01 	add.w	sl, sl, #1
 8001c7e:	9308      	str	r3, [sp, #32]
 8001c80:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8001c84:	4869      	ldr	r0, [pc, #420]	@ (8001e2c <_vfiprintf_r+0x2b4>)
 8001c86:	f88d 1038 	strb.w	r1, [sp, #56]	@ 0x38
 8001c8a:	2206      	movs	r2, #6
 8001c8c:	f000 fea8 	bl	80029e0 <memchr>
 8001c90:	2800      	cmp	r0, #0
 8001c92:	f000 8097 	beq.w	8001dc4 <_vfiprintf_r+0x24c>
 8001c96:	4b66      	ldr	r3, [pc, #408]	@ (8001e30 <_vfiprintf_r+0x2b8>)
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d07e      	beq.n	8001d9a <_vfiprintf_r+0x222>
 8001c9c:	aa07      	add	r2, sp, #28
 8001c9e:	9200      	str	r2, [sp, #0]
 8001ca0:	4b64      	ldr	r3, [pc, #400]	@ (8001e34 <_vfiprintf_r+0x2bc>)
 8001ca2:	9804      	ldr	r0, [sp, #16]
 8001ca4:	465a      	mov	r2, fp
 8001ca6:	a908      	add	r1, sp, #32
 8001ca8:	f3af 8000 	nop.w
 8001cac:	9003      	str	r0, [sp, #12]
 8001cae:	9b03      	ldr	r3, [sp, #12]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	d007      	beq.n	8001cc4 <_vfiprintf_r+0x14c>
 8001cb4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8001cb6:	9a03      	ldr	r2, [sp, #12]
 8001cb8:	4413      	add	r3, r2
 8001cba:	930d      	str	r3, [sp, #52]	@ 0x34
 8001cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d184      	bne.n	8001bce <_vfiprintf_r+0x56>
 8001cc4:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8001cc8:	f013 0f01 	tst.w	r3, #1
 8001ccc:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8001cd0:	d102      	bne.n	8001cd8 <_vfiprintf_r+0x160>
 8001cd2:	059a      	lsls	r2, r3, #22
 8001cd4:	f140 8095 	bpl.w	8001e02 <_vfiprintf_r+0x28a>
 8001cd8:	065b      	lsls	r3, r3, #25
 8001cda:	d416      	bmi.n	8001d0a <_vfiprintf_r+0x192>
 8001cdc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8001cde:	b021      	add	sp, #132	@ 0x84
 8001ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ce4:	9804      	ldr	r0, [sp, #16]
 8001ce6:	4659      	mov	r1, fp
 8001ce8:	f000 fc50 	bl	800258c <__swsetup_r>
 8001cec:	2800      	cmp	r0, #0
 8001cee:	f43f af60 	beq.w	8001bb2 <_vfiprintf_r+0x3a>
 8001cf2:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8001cf6:	07dd      	lsls	r5, r3, #31
 8001cf8:	d407      	bmi.n	8001d0a <_vfiprintf_r+0x192>
 8001cfa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8001cfe:	059c      	lsls	r4, r3, #22
 8001d00:	d403      	bmi.n	8001d0a <_vfiprintf_r+0x192>
 8001d02:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8001d06:	f7ff fd83 	bl	8001810 <__retarget_lock_release_recursive>
 8001d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0e:	e7e6      	b.n	8001cde <_vfiprintf_r+0x166>
 8001d10:	ebb9 080a 	subs.w	r8, r9, sl
 8001d14:	d0d6      	beq.n	8001cc4 <_vfiprintf_r+0x14c>
 8001d16:	f10a 35ff 	add.w	r5, sl, #4294967295
 8001d1a:	f8cd 9014 	str.w	r9, [sp, #20]
 8001d1e:	46a9      	mov	r9, r5
 8001d20:	9d04      	ldr	r5, [sp, #16]
 8001d22:	e001      	b.n	8001d28 <_vfiprintf_r+0x1b0>
 8001d24:	45a0      	cmp	r8, r4
 8001d26:	d93f      	bls.n	8001da8 <_vfiprintf_r+0x230>
 8001d28:	464c      	mov	r4, r9
 8001d2a:	465a      	mov	r2, fp
 8001d2c:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8001d30:	4628      	mov	r0, r5
 8001d32:	f7ff fee5 	bl	8001b00 <__sfputc_r>
 8001d36:	3402      	adds	r4, #2
 8001d38:	3001      	adds	r0, #1
 8001d3a:	eba4 040a 	sub.w	r4, r4, sl
 8001d3e:	d1f1      	bne.n	8001d24 <_vfiprintf_r+0x1ac>
 8001d40:	e7c0      	b.n	8001cc4 <_vfiprintf_r+0x14c>
 8001d42:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8001d46:	2a09      	cmp	r2, #9
 8001d48:	bf88      	it	hi
 8001d4a:	46ca      	movhi	sl, r9
 8001d4c:	d887      	bhi.n	8001c5e <_vfiprintf_r+0xe6>
 8001d4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8001d50:	e000      	b.n	8001d54 <_vfiprintf_r+0x1dc>
 8001d52:	3401      	adds	r4, #1
 8001d54:	7821      	ldrb	r1, [r4, #0]
 8001d56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001d5a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001d5e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8001d62:	2a09      	cmp	r2, #9
 8001d64:	d9f5      	bls.n	8001d52 <_vfiprintf_r+0x1da>
 8001d66:	292e      	cmp	r1, #46	@ 0x2e
 8001d68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001d6a:	46a2      	mov	sl, r4
 8001d6c:	f47f af7a 	bne.w	8001c64 <_vfiprintf_r+0xec>
 8001d70:	f89a 1001 	ldrb.w	r1, [sl, #1]
 8001d74:	292a      	cmp	r1, #42	@ 0x2a
 8001d76:	d12f      	bne.n	8001dd8 <_vfiprintf_r+0x260>
 8001d78:	9b07      	ldr	r3, [sp, #28]
 8001d7a:	f89a 1002 	ldrb.w	r1, [sl, #2]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	9209      	str	r2, [sp, #36]	@ 0x24
 8001d82:	3304      	adds	r3, #4
 8001d84:	2a00      	cmp	r2, #0
 8001d86:	f10a 0002 	add.w	r0, sl, #2
 8001d8a:	9307      	str	r3, [sp, #28]
 8001d8c:	bfb8      	it	lt
 8001d8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001d92:	4682      	mov	sl, r0
 8001d94:	bfb8      	it	lt
 8001d96:	9309      	strlt	r3, [sp, #36]	@ 0x24
 8001d98:	e764      	b.n	8001c64 <_vfiprintf_r+0xec>
 8001d9a:	9b07      	ldr	r3, [sp, #28]
 8001d9c:	3307      	adds	r3, #7
 8001d9e:	f023 0307 	bic.w	r3, r3, #7
 8001da2:	3308      	adds	r3, #8
 8001da4:	9307      	str	r3, [sp, #28]
 8001da6:	e785      	b.n	8001cb4 <_vfiprintf_r+0x13c>
 8001da8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8001daa:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8001dae:	4441      	add	r1, r8
 8001db0:	f899 3000 	ldrb.w	r3, [r9]
 8001db4:	910d      	str	r1, [sp, #52]	@ 0x34
 8001db6:	e719      	b.n	8001bec <_vfiprintf_r+0x74>
 8001db8:	4249      	negs	r1, r1
 8001dba:	f043 0302 	orr.w	r3, r3, #2
 8001dbe:	910b      	str	r1, [sp, #44]	@ 0x2c
 8001dc0:	9308      	str	r3, [sp, #32]
 8001dc2:	e74a      	b.n	8001c5a <_vfiprintf_r+0xe2>
 8001dc4:	aa07      	add	r2, sp, #28
 8001dc6:	9200      	str	r2, [sp, #0]
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e34 <_vfiprintf_r+0x2bc>)
 8001dca:	9804      	ldr	r0, [sp, #16]
 8001dcc:	465a      	mov	r2, fp
 8001dce:	a908      	add	r1, sp, #32
 8001dd0:	f000 f8d0 	bl	8001f74 <_printf_i>
 8001dd4:	9003      	str	r0, [sp, #12]
 8001dd6:	e76a      	b.n	8001cae <_vfiprintf_r+0x136>
 8001dd8:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8001ddc:	2300      	movs	r3, #0
 8001dde:	2a09      	cmp	r2, #9
 8001de0:	9309      	str	r3, [sp, #36]	@ 0x24
 8001de2:	f10a 0a01 	add.w	sl, sl, #1
 8001de6:	f63f af3d 	bhi.w	8001c64 <_vfiprintf_r+0xec>
 8001dea:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8001dee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001df2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001df6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8001dfa:	2a09      	cmp	r2, #9
 8001dfc:	d9f5      	bls.n	8001dea <_vfiprintf_r+0x272>
 8001dfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e00:	e730      	b.n	8001c64 <_vfiprintf_r+0xec>
 8001e02:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8001e06:	f7ff fd03 	bl	8001810 <__retarget_lock_release_recursive>
 8001e0a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8001e0e:	e763      	b.n	8001cd8 <_vfiprintf_r+0x160>
 8001e10:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8001e14:	f7ff fcf4 	bl	8001800 <__retarget_lock_acquire_recursive>
 8001e18:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8001e1c:	e6c1      	b.n	8001ba2 <_vfiprintf_r+0x2a>
 8001e1e:	f7ff fb41 	bl	80014a4 <__sinit>
 8001e22:	e6b5      	b.n	8001b90 <_vfiprintf_r+0x18>
 8001e24:	08005d44 	.word	0x08005d44
 8001e28:	08005d4c 	.word	0x08005d4c
 8001e2c:	08005d50 	.word	0x08005d50
 8001e30:	00000000 	.word	0x00000000
 8001e34:	08001b29 	.word	0x08001b29

08001e38 <vfiprintf>:
 8001e38:	b410      	push	{r4}
 8001e3a:	4c04      	ldr	r4, [pc, #16]	@ (8001e4c <vfiprintf+0x14>)
 8001e3c:	4684      	mov	ip, r0
 8001e3e:	4613      	mov	r3, r2
 8001e40:	6820      	ldr	r0, [r4, #0]
 8001e42:	bc10      	pop	{r4}
 8001e44:	460a      	mov	r2, r1
 8001e46:	4661      	mov	r1, ip
 8001e48:	f7ff be96 	b.w	8001b78 <_vfiprintf_r>
 8001e4c:	2000001c 	.word	0x2000001c

08001e50 <_printf_common>:
 8001e50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e54:	4692      	mov	sl, r2
 8001e56:	461f      	mov	r7, r3
 8001e58:	690a      	ldr	r2, [r1, #16]
 8001e5a:	688b      	ldr	r3, [r1, #8]
 8001e5c:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8001e60:	429a      	cmp	r2, r3
 8001e62:	bfb8      	it	lt
 8001e64:	461a      	movlt	r2, r3
 8001e66:	f8ca 2000 	str.w	r2, [sl]
 8001e6a:	f891 3043 	ldrb.w	r3, [r1, #67]	@ 0x43
 8001e6e:	460c      	mov	r4, r1
 8001e70:	4606      	mov	r6, r0
 8001e72:	b113      	cbz	r3, 8001e7a <_printf_common+0x2a>
 8001e74:	3201      	adds	r2, #1
 8001e76:	f8ca 2000 	str.w	r2, [sl]
 8001e7a:	6822      	ldr	r2, [r4, #0]
 8001e7c:	0691      	lsls	r1, r2, #26
 8001e7e:	d55f      	bpl.n	8001f40 <_printf_common+0xf0>
 8001e80:	f8da 3000 	ldr.w	r3, [sl]
 8001e84:	3302      	adds	r3, #2
 8001e86:	f8ca 3000 	str.w	r3, [sl]
 8001e8a:	6822      	ldr	r2, [r4, #0]
 8001e8c:	f012 0f06 	tst.w	r2, #6
 8001e90:	4611      	mov	r1, r2
 8001e92:	d11d      	bne.n	8001ed0 <_printf_common+0x80>
 8001e94:	68e1      	ldr	r1, [r4, #12]
 8001e96:	4299      	cmp	r1, r3
 8001e98:	bfd8      	it	le
 8001e9a:	4611      	movle	r1, r2
 8001e9c:	dd18      	ble.n	8001ed0 <_printf_common+0x80>
 8001e9e:	f104 0b19 	add.w	fp, r4, #25
 8001ea2:	f04f 0800 	mov.w	r8, #0
 8001ea6:	e005      	b.n	8001eb4 <_printf_common+0x64>
 8001ea8:	68e5      	ldr	r5, [r4, #12]
 8001eaa:	f8da 3000 	ldr.w	r3, [sl]
 8001eae:	1aed      	subs	r5, r5, r3
 8001eb0:	4545      	cmp	r5, r8
 8001eb2:	dd0c      	ble.n	8001ece <_printf_common+0x7e>
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	465a      	mov	r2, fp
 8001eb8:	4639      	mov	r1, r7
 8001eba:	4630      	mov	r0, r6
 8001ebc:	47c8      	blx	r9
 8001ebe:	3001      	adds	r0, #1
 8001ec0:	f108 0801 	add.w	r8, r8, #1
 8001ec4:	d1f0      	bne.n	8001ea8 <_printf_common+0x58>
 8001ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8001eca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ece:	6821      	ldr	r1, [r4, #0]
 8001ed0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001ed4:	3b00      	subs	r3, #0
 8001ed6:	bf18      	it	ne
 8001ed8:	2301      	movne	r3, #1
 8001eda:	068a      	lsls	r2, r1, #26
 8001edc:	d50a      	bpl.n	8001ef4 <_printf_common+0xa4>
 8001ede:	18e1      	adds	r1, r4, r3
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	2030      	movs	r0, #48	@ 0x30
 8001ee4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001ee8:	4422      	add	r2, r4
 8001eea:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001eee:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001ef8:	4639      	mov	r1, r7
 8001efa:	4630      	mov	r0, r6
 8001efc:	47c8      	blx	r9
 8001efe:	3001      	adds	r0, #1
 8001f00:	d0e1      	beq.n	8001ec6 <_printf_common+0x76>
 8001f02:	6823      	ldr	r3, [r4, #0]
 8001f04:	f8da 5000 	ldr.w	r5, [sl]
 8001f08:	6921      	ldr	r1, [r4, #16]
 8001f0a:	f003 0306 	and.w	r3, r3, #6
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8001f14:	d01b      	beq.n	8001f4e <_printf_common+0xfe>
 8001f16:	428a      	cmp	r2, r1
 8001f18:	dd20      	ble.n	8001f5c <_printf_common+0x10c>
 8001f1a:	f04f 0800 	mov.w	r8, #0
 8001f1e:	1a52      	subs	r2, r2, r1
 8001f20:	4490      	add	r8, r2
 8001f22:	341a      	adds	r4, #26
 8001f24:	2500      	movs	r5, #0
 8001f26:	e001      	b.n	8001f2c <_printf_common+0xdc>
 8001f28:	4545      	cmp	r5, r8
 8001f2a:	da17      	bge.n	8001f5c <_printf_common+0x10c>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	4622      	mov	r2, r4
 8001f30:	4639      	mov	r1, r7
 8001f32:	4630      	mov	r0, r6
 8001f34:	47c8      	blx	r9
 8001f36:	3001      	adds	r0, #1
 8001f38:	f105 0501 	add.w	r5, r5, #1
 8001f3c:	d1f4      	bne.n	8001f28 <_printf_common+0xd8>
 8001f3e:	e7c2      	b.n	8001ec6 <_printf_common+0x76>
 8001f40:	f012 0f06 	tst.w	r2, #6
 8001f44:	d00d      	beq.n	8001f62 <_printf_common+0x112>
 8001f46:	3b00      	subs	r3, #0
 8001f48:	bf18      	it	ne
 8001f4a:	2301      	movne	r3, #1
 8001f4c:	e7d2      	b.n	8001ef4 <_printf_common+0xa4>
 8001f4e:	1b40      	subs	r0, r0, r5
 8001f50:	428a      	cmp	r2, r1
 8001f52:	ea20 78e0 	bic.w	r8, r0, r0, asr #31
 8001f56:	dce2      	bgt.n	8001f1e <_printf_common+0xce>
 8001f58:	2800      	cmp	r0, #0
 8001f5a:	dce2      	bgt.n	8001f22 <_printf_common+0xd2>
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f62:	68e1      	ldr	r1, [r4, #12]
 8001f64:	f8da 3000 	ldr.w	r3, [sl]
 8001f68:	4299      	cmp	r1, r3
 8001f6a:	bfd8      	it	le
 8001f6c:	4611      	movle	r1, r2
 8001f6e:	dc96      	bgt.n	8001e9e <_printf_common+0x4e>
 8001f70:	e7ae      	b.n	8001ed0 <_printf_common+0x80>
 8001f72:	bf00      	nop

08001f74 <_printf_i>:
 8001f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f78:	460c      	mov	r4, r1
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	4617      	mov	r7, r2
 8001f7e:	7e22      	ldrb	r2, [r4, #24]
 8001f80:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001f82:	4606      	mov	r6, r0
 8001f84:	4698      	mov	r8, r3
 8001f86:	f104 0c43 	add.w	ip, r4, #67	@ 0x43
 8001f8a:	2a00      	cmp	r2, #0
 8001f8c:	d035      	beq.n	8001ffa <_printf_i+0x86>
 8001f8e:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
 8001f92:	b2d8      	uxtb	r0, r3
 8001f94:	2820      	cmp	r0, #32
 8001f96:	d869      	bhi.n	800206c <_printf_i+0xf8>
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	d867      	bhi.n	800206c <_printf_i+0xf8>
 8001f9c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001fa0:	006600e0 	.word	0x006600e0
 8001fa4:	00660066 	.word	0x00660066
 8001fa8:	00660066 	.word	0x00660066
 8001fac:	00660066 	.word	0x00660066
 8001fb0:	00660066 	.word	0x00660066
 8001fb4:	00940066 	.word	0x00940066
 8001fb8:	00660070 	.word	0x00660070
 8001fbc:	00660066 	.word	0x00660066
 8001fc0:	00700066 	.word	0x00700066
 8001fc4:	00660066 	.word	0x00660066
 8001fc8:	00660066 	.word	0x00660066
 8001fcc:	00830021 	.word	0x00830021
 8001fd0:	006600ae 	.word	0x006600ae
 8001fd4:	009e0066 	.word	0x009e0066
 8001fd8:	00830066 	.word	0x00830066
 8001fdc:	00660066 	.word	0x00660066
 8001fe0:	00e6      	.short	0x00e6
 8001fe2:	680b      	ldr	r3, [r1, #0]
 8001fe4:	6822      	ldr	r2, [r4, #0]
 8001fe6:	6960      	ldr	r0, [r4, #20]
 8001fe8:	1d1d      	adds	r5, r3, #4
 8001fea:	600d      	str	r5, [r1, #0]
 8001fec:	0611      	lsls	r1, r2, #24
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	d402      	bmi.n	8001ff8 <_printf_i+0x84>
 8001ff2:	0652      	lsls	r2, r2, #25
 8001ff4:	f100 80dc 	bmi.w	80021b0 <_printf_i+0x23c>
 8001ff8:	6018      	str	r0, [r3, #0]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	46e1      	mov	r9, ip
 8001ffe:	6123      	str	r3, [r4, #16]
 8002000:	f8cd 8000 	str.w	r8, [sp]
 8002004:	463b      	mov	r3, r7
 8002006:	aa03      	add	r2, sp, #12
 8002008:	4621      	mov	r1, r4
 800200a:	4630      	mov	r0, r6
 800200c:	f7ff ff20 	bl	8001e50 <_printf_common>
 8002010:	3001      	adds	r0, #1
 8002012:	d020      	beq.n	8002056 <_printf_i+0xe2>
 8002014:	6923      	ldr	r3, [r4, #16]
 8002016:	464a      	mov	r2, r9
 8002018:	4639      	mov	r1, r7
 800201a:	4630      	mov	r0, r6
 800201c:	47c0      	blx	r8
 800201e:	3001      	adds	r0, #1
 8002020:	d019      	beq.n	8002056 <_printf_i+0xe2>
 8002022:	6823      	ldr	r3, [r4, #0]
 8002024:	68e0      	ldr	r0, [r4, #12]
 8002026:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800202a:	079b      	lsls	r3, r3, #30
 800202c:	d518      	bpl.n	8002060 <_printf_i+0xec>
 800202e:	4548      	cmp	r0, r9
 8002030:	dd16      	ble.n	8002060 <_printf_i+0xec>
 8002032:	f104 0a19 	add.w	sl, r4, #25
 8002036:	2500      	movs	r5, #0
 8002038:	e004      	b.n	8002044 <_printf_i+0xd0>
 800203a:	68e0      	ldr	r0, [r4, #12]
 800203c:	eba0 0309 	sub.w	r3, r0, r9
 8002040:	42ab      	cmp	r3, r5
 8002042:	dd0d      	ble.n	8002060 <_printf_i+0xec>
 8002044:	2301      	movs	r3, #1
 8002046:	4652      	mov	r2, sl
 8002048:	4639      	mov	r1, r7
 800204a:	4630      	mov	r0, r6
 800204c:	47c0      	blx	r8
 800204e:	3001      	adds	r0, #1
 8002050:	f105 0501 	add.w	r5, r5, #1
 8002054:	d1f1      	bne.n	800203a <_printf_i+0xc6>
 8002056:	f04f 30ff 	mov.w	r0, #4294967295
 800205a:	b004      	add	sp, #16
 800205c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002060:	4548      	cmp	r0, r9
 8002062:	bfb8      	it	lt
 8002064:	4648      	movlt	r0, r9
 8002066:	b004      	add	sp, #16
 8002068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800206c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 8002070:	2001      	movs	r0, #1
 8002072:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 8002076:	2300      	movs	r3, #0
 8002078:	6120      	str	r0, [r4, #16]
 800207a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800207e:	e7bf      	b.n	8002000 <_printf_i+0x8c>
 8002080:	680a      	ldr	r2, [r1, #0]
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	1d10      	adds	r0, r2, #4
 8002086:	6008      	str	r0, [r1, #0]
 8002088:	0618      	lsls	r0, r3, #24
 800208a:	d402      	bmi.n	8002092 <_printf_i+0x11e>
 800208c:	0659      	lsls	r1, r3, #25
 800208e:	f100 8093 	bmi.w	80021b8 <_printf_i+0x244>
 8002092:	6810      	ldr	r0, [r2, #0]
 8002094:	4601      	mov	r1, r0
 8002096:	2800      	cmp	r0, #0
 8002098:	6862      	ldr	r2, [r4, #4]
 800209a:	f2c0 8091 	blt.w	80021c0 <_printf_i+0x24c>
 800209e:	4853      	ldr	r0, [pc, #332]	@ (80021ec <_printf_i+0x278>)
 80020a0:	f04f 0e0a 	mov.w	lr, #10
 80020a4:	e04a      	b.n	800213c <_printf_i+0x1c8>
 80020a6:	680b      	ldr	r3, [r1, #0]
 80020a8:	6820      	ldr	r0, [r4, #0]
 80020aa:	1d1d      	adds	r5, r3, #4
 80020ac:	600d      	str	r5, [r1, #0]
 80020ae:	0605      	lsls	r5, r0, #24
 80020b0:	d401      	bmi.n	80020b6 <_printf_i+0x142>
 80020b2:	0641      	lsls	r1, r0, #25
 80020b4:	d47e      	bmi.n	80021b4 <_printf_i+0x240>
 80020b6:	6819      	ldr	r1, [r3, #0]
 80020b8:	484c      	ldr	r0, [pc, #304]	@ (80021ec <_printf_i+0x278>)
 80020ba:	2a6f      	cmp	r2, #111	@ 0x6f
 80020bc:	bf14      	ite	ne
 80020be:	f04f 0e0a 	movne.w	lr, #10
 80020c2:	f04f 0e08 	moveq.w	lr, #8
 80020c6:	e035      	b.n	8002134 <_printf_i+0x1c0>
 80020c8:	680b      	ldr	r3, [r1, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	3304      	adds	r3, #4
 80020ce:	600b      	str	r3, [r1, #0]
 80020d0:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 80020d4:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 80020d8:	2001      	movs	r0, #1
 80020da:	e7cc      	b.n	8002076 <_printf_i+0x102>
 80020dc:	680b      	ldr	r3, [r1, #0]
 80020de:	6862      	ldr	r2, [r4, #4]
 80020e0:	1d18      	adds	r0, r3, #4
 80020e2:	6008      	str	r0, [r1, #0]
 80020e4:	f8d3 9000 	ldr.w	r9, [r3]
 80020e8:	2100      	movs	r1, #0
 80020ea:	4648      	mov	r0, r9
 80020ec:	f000 fc78 	bl	80029e0 <memchr>
 80020f0:	2800      	cmp	r0, #0
 80020f2:	d079      	beq.n	80021e8 <_printf_i+0x274>
 80020f4:	eba0 0009 	sub.w	r0, r0, r9
 80020f8:	6060      	str	r0, [r4, #4]
 80020fa:	e7bc      	b.n	8002076 <_printf_i+0x102>
 80020fc:	6823      	ldr	r3, [r4, #0]
 80020fe:	f043 0320 	orr.w	r3, r3, #32
 8002102:	6023      	str	r3, [r4, #0]
 8002104:	2278      	movs	r2, #120	@ 0x78
 8002106:	483a      	ldr	r0, [pc, #232]	@ (80021f0 <_printf_i+0x27c>)
 8002108:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 800210c:	680a      	ldr	r2, [r1, #0]
 800210e:	1d15      	adds	r5, r2, #4
 8002110:	600d      	str	r5, [r1, #0]
 8002112:	061d      	lsls	r5, r3, #24
 8002114:	d44a      	bmi.n	80021ac <_printf_i+0x238>
 8002116:	0659      	lsls	r1, r3, #25
 8002118:	d548      	bpl.n	80021ac <_printf_i+0x238>
 800211a:	8811      	ldrh	r1, [r2, #0]
 800211c:	07dd      	lsls	r5, r3, #31
 800211e:	bf44      	itt	mi
 8002120:	f043 0320 	orrmi.w	r3, r3, #32
 8002124:	6023      	strmi	r3, [r4, #0]
 8002126:	b919      	cbnz	r1, 8002130 <_printf_i+0x1bc>
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	f023 0320 	bic.w	r3, r3, #32
 800212e:	6023      	str	r3, [r4, #0]
 8002130:	f04f 0e10 	mov.w	lr, #16
 8002134:	2300      	movs	r3, #0
 8002136:	6862      	ldr	r2, [r4, #4]
 8002138:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800213c:	2a00      	cmp	r2, #0
 800213e:	60a2      	str	r2, [r4, #8]
 8002140:	db16      	blt.n	8002170 <_printf_i+0x1fc>
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	f023 0304 	bic.w	r3, r3, #4
 8002148:	6023      	str	r3, [r4, #0]
 800214a:	b989      	cbnz	r1, 8002170 <_printf_i+0x1fc>
 800214c:	2a00      	cmp	r2, #0
 800214e:	d145      	bne.n	80021dc <_printf_i+0x268>
 8002150:	46e1      	mov	r9, ip
 8002152:	f1be 0f08 	cmp.w	lr, #8
 8002156:	d01c      	beq.n	8002192 <_printf_i+0x21e>
 8002158:	ebac 0309 	sub.w	r3, ip, r9
 800215c:	6123      	str	r3, [r4, #16]
 800215e:	e74f      	b.n	8002000 <_printf_i+0x8c>
 8002160:	2358      	movs	r3, #88	@ 0x58
 8002162:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8002166:	4821      	ldr	r0, [pc, #132]	@ (80021ec <_printf_i+0x278>)
 8002168:	6823      	ldr	r3, [r4, #0]
 800216a:	e7cf      	b.n	800210c <_printf_i+0x198>
 800216c:	6823      	ldr	r3, [r4, #0]
 800216e:	e7c9      	b.n	8002104 <_printf_i+0x190>
 8002170:	4675      	mov	r5, lr
 8002172:	46e1      	mov	r9, ip
 8002174:	fbb1 f3f5 	udiv	r3, r1, r5
 8002178:	fb05 1a13 	mls	sl, r5, r3, r1
 800217c:	460a      	mov	r2, r1
 800217e:	42aa      	cmp	r2, r5
 8002180:	f810 100a 	ldrb.w	r1, [r0, sl]
 8002184:	f809 1d01 	strb.w	r1, [r9, #-1]!
 8002188:	4619      	mov	r1, r3
 800218a:	d2f3      	bcs.n	8002174 <_printf_i+0x200>
 800218c:	f1be 0f08 	cmp.w	lr, #8
 8002190:	d1e2      	bne.n	8002158 <_printf_i+0x1e4>
 8002192:	6823      	ldr	r3, [r4, #0]
 8002194:	07d8      	lsls	r0, r3, #31
 8002196:	d5df      	bpl.n	8002158 <_printf_i+0x1e4>
 8002198:	6862      	ldr	r2, [r4, #4]
 800219a:	6923      	ldr	r3, [r4, #16]
 800219c:	429a      	cmp	r2, r3
 800219e:	dcdb      	bgt.n	8002158 <_printf_i+0x1e4>
 80021a0:	2330      	movs	r3, #48	@ 0x30
 80021a2:	f809 3c01 	strb.w	r3, [r9, #-1]
 80021a6:	f109 39ff 	add.w	r9, r9, #4294967295
 80021aa:	e7d5      	b.n	8002158 <_printf_i+0x1e4>
 80021ac:	6811      	ldr	r1, [r2, #0]
 80021ae:	e7b5      	b.n	800211c <_printf_i+0x1a8>
 80021b0:	8018      	strh	r0, [r3, #0]
 80021b2:	e722      	b.n	8001ffa <_printf_i+0x86>
 80021b4:	8819      	ldrh	r1, [r3, #0]
 80021b6:	e77f      	b.n	80020b8 <_printf_i+0x144>
 80021b8:	f9b2 1000 	ldrsh.w	r1, [r2]
 80021bc:	4608      	mov	r0, r1
 80021be:	e76a      	b.n	8002096 <_printf_i+0x122>
 80021c0:	202d      	movs	r0, #45	@ 0x2d
 80021c2:	2a00      	cmp	r2, #0
 80021c4:	60a2      	str	r2, [r4, #8]
 80021c6:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
 80021ca:	db02      	blt.n	80021d2 <_printf_i+0x25e>
 80021cc:	f023 0304 	bic.w	r3, r3, #4
 80021d0:	6023      	str	r3, [r4, #0]
 80021d2:	250a      	movs	r5, #10
 80021d4:	4805      	ldr	r0, [pc, #20]	@ (80021ec <_printf_i+0x278>)
 80021d6:	4249      	negs	r1, r1
 80021d8:	46ae      	mov	lr, r5
 80021da:	e7ca      	b.n	8002172 <_printf_i+0x1fe>
 80021dc:	7803      	ldrb	r3, [r0, #0]
 80021de:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80021e2:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 80021e6:	e7b4      	b.n	8002152 <_printf_i+0x1de>
 80021e8:	6860      	ldr	r0, [r4, #4]
 80021ea:	e744      	b.n	8002076 <_printf_i+0x102>
 80021ec:	08005d58 	.word	0x08005d58
 80021f0:	08005d6c 	.word	0x08005d6c

080021f4 <__sfvwrite_r>:
 80021f4:	6893      	ldr	r3, [r2, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 80f6 	beq.w	80023e8 <__sfvwrite_r+0x1f4>
 80021fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002200:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
 8002204:	f01c 0f08 	tst.w	ip, #8
 8002208:	b083      	sub	sp, #12
 800220a:	4690      	mov	r8, r2
 800220c:	4681      	mov	r9, r0
 800220e:	460c      	mov	r4, r1
 8002210:	d031      	beq.n	8002276 <__sfvwrite_r+0x82>
 8002212:	690b      	ldr	r3, [r1, #16]
 8002214:	b37b      	cbz	r3, 8002276 <__sfvwrite_r+0x82>
 8002216:	f01c 0702 	ands.w	r7, ip, #2
 800221a:	f8d8 6000 	ldr.w	r6, [r8]
 800221e:	d038      	beq.n	8002292 <__sfvwrite_r+0x9e>
 8002220:	2700      	movs	r7, #0
 8002222:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 8002226:	6a21      	ldr	r1, [r4, #32]
 8002228:	f8df a2bc 	ldr.w	sl, [pc, #700]	@ 80024e8 <__sfvwrite_r+0x2f4>
 800222c:	463d      	mov	r5, r7
 800222e:	4555      	cmp	r5, sl
 8002230:	462b      	mov	r3, r5
 8002232:	463a      	mov	r2, r7
 8002234:	bf28      	it	cs
 8002236:	4653      	movcs	r3, sl
 8002238:	4648      	mov	r0, r9
 800223a:	b1c5      	cbz	r5, 800226e <__sfvwrite_r+0x7a>
 800223c:	47d8      	blx	fp
 800223e:	2800      	cmp	r0, #0
 8002240:	f340 80c8 	ble.w	80023d4 <__sfvwrite_r+0x1e0>
 8002244:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8002248:	1a1b      	subs	r3, r3, r0
 800224a:	4407      	add	r7, r0
 800224c:	1a2d      	subs	r5, r5, r0
 800224e:	f8c8 3008 	str.w	r3, [r8, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 80b4 	beq.w	80023c0 <__sfvwrite_r+0x1cc>
 8002258:	4555      	cmp	r5, sl
 800225a:	462b      	mov	r3, r5
 800225c:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 8002260:	6a21      	ldr	r1, [r4, #32]
 8002262:	bf28      	it	cs
 8002264:	4653      	movcs	r3, sl
 8002266:	463a      	mov	r2, r7
 8002268:	4648      	mov	r0, r9
 800226a:	2d00      	cmp	r5, #0
 800226c:	d1e6      	bne.n	800223c <__sfvwrite_r+0x48>
 800226e:	e9d6 7500 	ldrd	r7, r5, [r6]
 8002272:	3608      	adds	r6, #8
 8002274:	e7db      	b.n	800222e <__sfvwrite_r+0x3a>
 8002276:	4621      	mov	r1, r4
 8002278:	4648      	mov	r0, r9
 800227a:	f000 f987 	bl	800258c <__swsetup_r>
 800227e:	2800      	cmp	r0, #0
 8002280:	f040 80ad 	bne.w	80023de <__sfvwrite_r+0x1ea>
 8002284:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8002288:	f8d8 6000 	ldr.w	r6, [r8]
 800228c:	f01c 0702 	ands.w	r7, ip, #2
 8002290:	d1c6      	bne.n	8002220 <__sfvwrite_r+0x2c>
 8002292:	f01c 0a01 	ands.w	sl, ip, #1
 8002296:	d163      	bne.n	8002360 <__sfvwrite_r+0x16c>
 8002298:	6823      	ldr	r3, [r4, #0]
 800229a:	68a1      	ldr	r1, [r4, #8]
 800229c:	4657      	mov	r7, sl
 800229e:	4618      	mov	r0, r3
 80022a0:	468b      	mov	fp, r1
 80022a2:	2f00      	cmp	r7, #0
 80022a4:	d058      	beq.n	8002358 <__sfvwrite_r+0x164>
 80022a6:	f41c 7f00 	tst.w	ip, #512	@ 0x200
 80022aa:	f000 80b1 	beq.w	8002410 <__sfvwrite_r+0x21c>
 80022ae:	42b9      	cmp	r1, r7
 80022b0:	460a      	mov	r2, r1
 80022b2:	f200 80dd 	bhi.w	8002470 <__sfvwrite_r+0x27c>
 80022b6:	f41c 6f90 	tst.w	ip, #1152	@ 0x480
 80022ba:	d02f      	beq.n	800231c <__sfvwrite_r+0x128>
 80022bc:	6921      	ldr	r1, [r4, #16]
 80022be:	6962      	ldr	r2, [r4, #20]
 80022c0:	1a5d      	subs	r5, r3, r1
 80022c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80022c6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80022ca:	1c6b      	adds	r3, r5, #1
 80022cc:	1052      	asrs	r2, r2, #1
 80022ce:	443b      	add	r3, r7
 80022d0:	4293      	cmp	r3, r2
 80022d2:	bf92      	itee	ls
 80022d4:	4693      	movls	fp, r2
 80022d6:	469b      	movhi	fp, r3
 80022d8:	461a      	movhi	r2, r3
 80022da:	f41c 6f80 	tst.w	ip, #1024	@ 0x400
 80022de:	f000 80e6 	beq.w	80024ae <__sfvwrite_r+0x2ba>
 80022e2:	4611      	mov	r1, r2
 80022e4:	4648      	mov	r0, r9
 80022e6:	f7fe febf 	bl	8001068 <_malloc_r>
 80022ea:	2800      	cmp	r0, #0
 80022ec:	f000 80f5 	beq.w	80024da <__sfvwrite_r+0x2e6>
 80022f0:	462a      	mov	r2, r5
 80022f2:	6921      	ldr	r1, [r4, #16]
 80022f4:	9001      	str	r0, [sp, #4]
 80022f6:	f000 fbc3 	bl	8002a80 <memcpy>
 80022fa:	89a2      	ldrh	r2, [r4, #12]
 80022fc:	9b01      	ldr	r3, [sp, #4]
 80022fe:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 8002302:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002306:	81a2      	strh	r2, [r4, #12]
 8002308:	1958      	adds	r0, r3, r5
 800230a:	ebab 0505 	sub.w	r5, fp, r5
 800230e:	f8c4 b014 	str.w	fp, [r4, #20]
 8002312:	6123      	str	r3, [r4, #16]
 8002314:	60a5      	str	r5, [r4, #8]
 8002316:	6020      	str	r0, [r4, #0]
 8002318:	46bb      	mov	fp, r7
 800231a:	463a      	mov	r2, r7
 800231c:	4651      	mov	r1, sl
 800231e:	9201      	str	r2, [sp, #4]
 8002320:	f000 f994 	bl	800264c <memmove>
 8002324:	68a1      	ldr	r1, [r4, #8]
 8002326:	6823      	ldr	r3, [r4, #0]
 8002328:	9a01      	ldr	r2, [sp, #4]
 800232a:	eba1 010b 	sub.w	r1, r1, fp
 800232e:	441a      	add	r2, r3
 8002330:	463d      	mov	r5, r7
 8002332:	60a1      	str	r1, [r4, #8]
 8002334:	6022      	str	r2, [r4, #0]
 8002336:	2700      	movs	r7, #0
 8002338:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800233c:	1b5b      	subs	r3, r3, r5
 800233e:	44aa      	add	sl, r5
 8002340:	f8c8 3008 	str.w	r3, [r8, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d03b      	beq.n	80023c0 <__sfvwrite_r+0x1cc>
 8002348:	6823      	ldr	r3, [r4, #0]
 800234a:	68a1      	ldr	r1, [r4, #8]
 800234c:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8002350:	4618      	mov	r0, r3
 8002352:	468b      	mov	fp, r1
 8002354:	2f00      	cmp	r7, #0
 8002356:	d1a6      	bne.n	80022a6 <__sfvwrite_r+0xb2>
 8002358:	e9d6 a700 	ldrd	sl, r7, [r6]
 800235c:	3608      	adds	r6, #8
 800235e:	e79e      	b.n	800229e <__sfvwrite_r+0xaa>
 8002360:	4638      	mov	r0, r7
 8002362:	46bb      	mov	fp, r7
 8002364:	463d      	mov	r5, r7
 8002366:	2d00      	cmp	r5, #0
 8002368:	d040      	beq.n	80023ec <__sfvwrite_r+0x1f8>
 800236a:	2800      	cmp	r0, #0
 800236c:	d045      	beq.n	80023fa <__sfvwrite_r+0x206>
 800236e:	463a      	mov	r2, r7
 8002370:	e9d4 c304 	ldrd	ip, r3, [r4, #16]
 8002374:	6820      	ldr	r0, [r4, #0]
 8002376:	68a1      	ldr	r1, [r4, #8]
 8002378:	42aa      	cmp	r2, r5
 800237a:	bf28      	it	cs
 800237c:	462a      	movcs	r2, r5
 800237e:	4560      	cmp	r0, ip
 8002380:	d904      	bls.n	800238c <__sfvwrite_r+0x198>
 8002382:	eb01 0a03 	add.w	sl, r1, r3
 8002386:	4552      	cmp	r2, sl
 8002388:	f300 8082 	bgt.w	8002490 <__sfvwrite_r+0x29c>
 800238c:	4293      	cmp	r3, r2
 800238e:	dc72      	bgt.n	8002476 <__sfvwrite_r+0x282>
 8002390:	6a21      	ldr	r1, [r4, #32]
 8002392:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002396:	465a      	mov	r2, fp
 8002398:	4648      	mov	r0, r9
 800239a:	47e0      	blx	ip
 800239c:	f1b0 0a00 	subs.w	sl, r0, #0
 80023a0:	dd18      	ble.n	80023d4 <__sfvwrite_r+0x1e0>
 80023a2:	ebb7 070a 	subs.w	r7, r7, sl
 80023a6:	d00f      	beq.n	80023c8 <__sfvwrite_r+0x1d4>
 80023a8:	2001      	movs	r0, #1
 80023aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80023ae:	eba3 030a 	sub.w	r3, r3, sl
 80023b2:	44d3      	add	fp, sl
 80023b4:	eba5 050a 	sub.w	r5, r5, sl
 80023b8:	f8c8 3008 	str.w	r3, [r8, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1d2      	bne.n	8002366 <__sfvwrite_r+0x172>
 80023c0:	2000      	movs	r0, #0
 80023c2:	b003      	add	sp, #12
 80023c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023c8:	4621      	mov	r1, r4
 80023ca:	4648      	mov	r0, r9
 80023cc:	f7ff fb2e 	bl	8001a2c <_fflush_r>
 80023d0:	2800      	cmp	r0, #0
 80023d2:	d0ea      	beq.n	80023aa <__sfvwrite_r+0x1b6>
 80023d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023dc:	81a3      	strh	r3, [r4, #12]
 80023de:	f04f 30ff 	mov.w	r0, #4294967295
 80023e2:	b003      	add	sp, #12
 80023e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023e8:	2000      	movs	r0, #0
 80023ea:	4770      	bx	lr
 80023ec:	6875      	ldr	r5, [r6, #4]
 80023ee:	4633      	mov	r3, r6
 80023f0:	3608      	adds	r6, #8
 80023f2:	2d00      	cmp	r5, #0
 80023f4:	d0fa      	beq.n	80023ec <__sfvwrite_r+0x1f8>
 80023f6:	f8d3 b000 	ldr.w	fp, [r3]
 80023fa:	462a      	mov	r2, r5
 80023fc:	210a      	movs	r1, #10
 80023fe:	4658      	mov	r0, fp
 8002400:	f000 faee 	bl	80029e0 <memchr>
 8002404:	2800      	cmp	r0, #0
 8002406:	d065      	beq.n	80024d4 <__sfvwrite_r+0x2e0>
 8002408:	3001      	adds	r0, #1
 800240a:	eba0 070b 	sub.w	r7, r0, fp
 800240e:	e7ae      	b.n	800236e <__sfvwrite_r+0x17a>
 8002410:	6922      	ldr	r2, [r4, #16]
 8002412:	429a      	cmp	r2, r3
 8002414:	d314      	bcc.n	8002440 <__sfvwrite_r+0x24c>
 8002416:	6962      	ldr	r2, [r4, #20]
 8002418:	42ba      	cmp	r2, r7
 800241a:	d811      	bhi.n	8002440 <__sfvwrite_r+0x24c>
 800241c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8002420:	42bb      	cmp	r3, r7
 8002422:	bf28      	it	cs
 8002424:	463b      	movcs	r3, r7
 8002426:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8002428:	fb93 f3f2 	sdiv	r3, r3, r2
 800242c:	6a21      	ldr	r1, [r4, #32]
 800242e:	fb02 f303 	mul.w	r3, r2, r3
 8002432:	4648      	mov	r0, r9
 8002434:	4652      	mov	r2, sl
 8002436:	47a8      	blx	r5
 8002438:	1e05      	subs	r5, r0, #0
 800243a:	ddcb      	ble.n	80023d4 <__sfvwrite_r+0x1e0>
 800243c:	1b7f      	subs	r7, r7, r5
 800243e:	e77b      	b.n	8002338 <__sfvwrite_r+0x144>
 8002440:	42b9      	cmp	r1, r7
 8002442:	bf28      	it	cs
 8002444:	4639      	movcs	r1, r7
 8002446:	460d      	mov	r5, r1
 8002448:	4618      	mov	r0, r3
 800244a:	460a      	mov	r2, r1
 800244c:	4651      	mov	r1, sl
 800244e:	f000 f8fd 	bl	800264c <memmove>
 8002452:	68a1      	ldr	r1, [r4, #8]
 8002454:	6823      	ldr	r3, [r4, #0]
 8002456:	1b49      	subs	r1, r1, r5
 8002458:	442b      	add	r3, r5
 800245a:	60a1      	str	r1, [r4, #8]
 800245c:	6023      	str	r3, [r4, #0]
 800245e:	2900      	cmp	r1, #0
 8002460:	d1ec      	bne.n	800243c <__sfvwrite_r+0x248>
 8002462:	4621      	mov	r1, r4
 8002464:	4648      	mov	r0, r9
 8002466:	f7ff fae1 	bl	8001a2c <_fflush_r>
 800246a:	2800      	cmp	r0, #0
 800246c:	d0e6      	beq.n	800243c <__sfvwrite_r+0x248>
 800246e:	e7b1      	b.n	80023d4 <__sfvwrite_r+0x1e0>
 8002470:	46bb      	mov	fp, r7
 8002472:	463a      	mov	r2, r7
 8002474:	e752      	b.n	800231c <__sfvwrite_r+0x128>
 8002476:	4659      	mov	r1, fp
 8002478:	9201      	str	r2, [sp, #4]
 800247a:	f000 f8e7 	bl	800264c <memmove>
 800247e:	9a01      	ldr	r2, [sp, #4]
 8002480:	68a3      	ldr	r3, [r4, #8]
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	60a3      	str	r3, [r4, #8]
 8002486:	6823      	ldr	r3, [r4, #0]
 8002488:	4413      	add	r3, r2
 800248a:	6023      	str	r3, [r4, #0]
 800248c:	4692      	mov	sl, r2
 800248e:	e788      	b.n	80023a2 <__sfvwrite_r+0x1ae>
 8002490:	4659      	mov	r1, fp
 8002492:	4652      	mov	r2, sl
 8002494:	f000 f8da 	bl	800264c <memmove>
 8002498:	6823      	ldr	r3, [r4, #0]
 800249a:	4453      	add	r3, sl
 800249c:	6023      	str	r3, [r4, #0]
 800249e:	4621      	mov	r1, r4
 80024a0:	4648      	mov	r0, r9
 80024a2:	f7ff fac3 	bl	8001a2c <_fflush_r>
 80024a6:	2800      	cmp	r0, #0
 80024a8:	f43f af7b 	beq.w	80023a2 <__sfvwrite_r+0x1ae>
 80024ac:	e792      	b.n	80023d4 <__sfvwrite_r+0x1e0>
 80024ae:	4648      	mov	r0, r9
 80024b0:	f000 fb80 	bl	8002bb4 <_realloc_r>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2800      	cmp	r0, #0
 80024b8:	f47f af26 	bne.w	8002308 <__sfvwrite_r+0x114>
 80024bc:	6921      	ldr	r1, [r4, #16]
 80024be:	4648      	mov	r0, r9
 80024c0:	f7ff f9ce 	bl	8001860 <_free_r>
 80024c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024c8:	220c      	movs	r2, #12
 80024ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024ce:	f8c9 2000 	str.w	r2, [r9]
 80024d2:	e781      	b.n	80023d8 <__sfvwrite_r+0x1e4>
 80024d4:	1c6a      	adds	r2, r5, #1
 80024d6:	4617      	mov	r7, r2
 80024d8:	e74a      	b.n	8002370 <__sfvwrite_r+0x17c>
 80024da:	220c      	movs	r2, #12
 80024dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024e0:	f8c9 2000 	str.w	r2, [r9]
 80024e4:	e778      	b.n	80023d8 <__sfvwrite_r+0x1e4>
 80024e6:	bf00      	nop
 80024e8:	7ffffc00 	.word	0x7ffffc00

080024ec <__swbuf_r>:
 80024ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ee:	460d      	mov	r5, r1
 80024f0:	4614      	mov	r4, r2
 80024f2:	4606      	mov	r6, r0
 80024f4:	b110      	cbz	r0, 80024fc <__swbuf_r+0x10>
 80024f6:	6a03      	ldr	r3, [r0, #32]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d037      	beq.n	800256c <__swbuf_r+0x80>
 80024fc:	89a3      	ldrh	r3, [r4, #12]
 80024fe:	69a2      	ldr	r2, [r4, #24]
 8002500:	60a2      	str	r2, [r4, #8]
 8002502:	071a      	lsls	r2, r3, #28
 8002504:	d519      	bpl.n	800253a <__swbuf_r+0x4e>
 8002506:	6923      	ldr	r3, [r4, #16]
 8002508:	b1bb      	cbz	r3, 800253a <__swbuf_r+0x4e>
 800250a:	6822      	ldr	r2, [r4, #0]
 800250c:	6961      	ldr	r1, [r4, #20]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	b2ed      	uxtb	r5, r5
 8002512:	4299      	cmp	r1, r3
 8002514:	462f      	mov	r7, r5
 8002516:	dd20      	ble.n	800255a <__swbuf_r+0x6e>
 8002518:	3301      	adds	r3, #1
 800251a:	68a1      	ldr	r1, [r4, #8]
 800251c:	3901      	subs	r1, #1
 800251e:	60a1      	str	r1, [r4, #8]
 8002520:	1c51      	adds	r1, r2, #1
 8002522:	6021      	str	r1, [r4, #0]
 8002524:	7015      	strb	r5, [r2, #0]
 8002526:	6962      	ldr	r2, [r4, #20]
 8002528:	429a      	cmp	r2, r3
 800252a:	d00d      	beq.n	8002548 <__swbuf_r+0x5c>
 800252c:	89a3      	ldrh	r3, [r4, #12]
 800252e:	07db      	lsls	r3, r3, #31
 8002530:	d501      	bpl.n	8002536 <__swbuf_r+0x4a>
 8002532:	2d0a      	cmp	r5, #10
 8002534:	d008      	beq.n	8002548 <__swbuf_r+0x5c>
 8002536:	4638      	mov	r0, r7
 8002538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800253a:	4621      	mov	r1, r4
 800253c:	4630      	mov	r0, r6
 800253e:	f000 f825 	bl	800258c <__swsetup_r>
 8002542:	b938      	cbnz	r0, 8002554 <__swbuf_r+0x68>
 8002544:	6923      	ldr	r3, [r4, #16]
 8002546:	e7e0      	b.n	800250a <__swbuf_r+0x1e>
 8002548:	4621      	mov	r1, r4
 800254a:	4630      	mov	r0, r6
 800254c:	f7ff fa6e 	bl	8001a2c <_fflush_r>
 8002550:	2800      	cmp	r0, #0
 8002552:	d0f0      	beq.n	8002536 <__swbuf_r+0x4a>
 8002554:	f04f 37ff 	mov.w	r7, #4294967295
 8002558:	e7ed      	b.n	8002536 <__swbuf_r+0x4a>
 800255a:	4621      	mov	r1, r4
 800255c:	4630      	mov	r0, r6
 800255e:	f7ff fa65 	bl	8001a2c <_fflush_r>
 8002562:	2800      	cmp	r0, #0
 8002564:	d1f6      	bne.n	8002554 <__swbuf_r+0x68>
 8002566:	6822      	ldr	r2, [r4, #0]
 8002568:	2301      	movs	r3, #1
 800256a:	e7d6      	b.n	800251a <__swbuf_r+0x2e>
 800256c:	f7fe ff9a 	bl	80014a4 <__sinit>
 8002570:	e7c4      	b.n	80024fc <__swbuf_r+0x10>
 8002572:	bf00      	nop

08002574 <__swbuf>:
 8002574:	b410      	push	{r4}
 8002576:	4c04      	ldr	r4, [pc, #16]	@ (8002588 <__swbuf+0x14>)
 8002578:	4603      	mov	r3, r0
 800257a:	460a      	mov	r2, r1
 800257c:	6820      	ldr	r0, [r4, #0]
 800257e:	bc10      	pop	{r4}
 8002580:	4619      	mov	r1, r3
 8002582:	f7ff bfb3 	b.w	80024ec <__swbuf_r>
 8002586:	bf00      	nop
 8002588:	2000001c 	.word	0x2000001c

0800258c <__swsetup_r>:
 800258c:	b538      	push	{r3, r4, r5, lr}
 800258e:	4b2e      	ldr	r3, [pc, #184]	@ (8002648 <__swsetup_r+0xbc>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4605      	mov	r5, r0
 8002594:	460c      	mov	r4, r1
 8002596:	b113      	cbz	r3, 800259e <__swsetup_r+0x12>
 8002598:	6a1a      	ldr	r2, [r3, #32]
 800259a:	2a00      	cmp	r2, #0
 800259c:	d04b      	beq.n	8002636 <__swsetup_r+0xaa>
 800259e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025a2:	0718      	lsls	r0, r3, #28
 80025a4:	d51c      	bpl.n	80025e0 <__swsetup_r+0x54>
 80025a6:	6922      	ldr	r2, [r4, #16]
 80025a8:	b322      	cbz	r2, 80025f4 <__swsetup_r+0x68>
 80025aa:	f013 0101 	ands.w	r1, r3, #1
 80025ae:	d007      	beq.n	80025c0 <__swsetup_r+0x34>
 80025b0:	6961      	ldr	r1, [r4, #20]
 80025b2:	2000      	movs	r0, #0
 80025b4:	4249      	negs	r1, r1
 80025b6:	60a0      	str	r0, [r4, #8]
 80025b8:	61a1      	str	r1, [r4, #24]
 80025ba:	b13a      	cbz	r2, 80025cc <__swsetup_r+0x40>
 80025bc:	2000      	movs	r0, #0
 80025be:	bd38      	pop	{r3, r4, r5, pc}
 80025c0:	0798      	lsls	r0, r3, #30
 80025c2:	bf58      	it	pl
 80025c4:	6961      	ldrpl	r1, [r4, #20]
 80025c6:	60a1      	str	r1, [r4, #8]
 80025c8:	2a00      	cmp	r2, #0
 80025ca:	d1f7      	bne.n	80025bc <__swsetup_r+0x30>
 80025cc:	0619      	lsls	r1, r3, #24
 80025ce:	bf58      	it	pl
 80025d0:	4610      	movpl	r0, r2
 80025d2:	d5f4      	bpl.n	80025be <__swsetup_r+0x32>
 80025d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025d8:	81a3      	strh	r3, [r4, #12]
 80025da:	f04f 30ff 	mov.w	r0, #4294967295
 80025de:	bd38      	pop	{r3, r4, r5, pc}
 80025e0:	06d9      	lsls	r1, r3, #27
 80025e2:	d52c      	bpl.n	800263e <__swsetup_r+0xb2>
 80025e4:	075a      	lsls	r2, r3, #29
 80025e6:	d412      	bmi.n	800260e <__swsetup_r+0x82>
 80025e8:	6922      	ldr	r2, [r4, #16]
 80025ea:	f043 0308 	orr.w	r3, r3, #8
 80025ee:	81a3      	strh	r3, [r4, #12]
 80025f0:	2a00      	cmp	r2, #0
 80025f2:	d1da      	bne.n	80025aa <__swsetup_r+0x1e>
 80025f4:	f403 7120 	and.w	r1, r3, #640	@ 0x280
 80025f8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80025fc:	d0d5      	beq.n	80025aa <__swsetup_r+0x1e>
 80025fe:	4621      	mov	r1, r4
 8002600:	4628      	mov	r0, r5
 8002602:	f000 fb0b 	bl	8002c1c <__smakebuf_r>
 8002606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800260a:	6922      	ldr	r2, [r4, #16]
 800260c:	e7cd      	b.n	80025aa <__swsetup_r+0x1e>
 800260e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002610:	b151      	cbz	r1, 8002628 <__swsetup_r+0x9c>
 8002612:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 8002616:	4291      	cmp	r1, r2
 8002618:	d004      	beq.n	8002624 <__swsetup_r+0x98>
 800261a:	4628      	mov	r0, r5
 800261c:	f7ff f920 	bl	8001860 <_free_r>
 8002620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	6362      	str	r2, [r4, #52]	@ 0x34
 8002628:	6922      	ldr	r2, [r4, #16]
 800262a:	2100      	movs	r1, #0
 800262c:	e9c4 2100 	strd	r2, r1, [r4]
 8002630:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002634:	e7d9      	b.n	80025ea <__swsetup_r+0x5e>
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe ff34 	bl	80014a4 <__sinit>
 800263c:	e7af      	b.n	800259e <__swsetup_r+0x12>
 800263e:	2209      	movs	r2, #9
 8002640:	602a      	str	r2, [r5, #0]
 8002642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002646:	e7c7      	b.n	80025d8 <__swsetup_r+0x4c>
 8002648:	2000001c 	.word	0x2000001c

0800264c <memmove>:
 800264c:	4288      	cmp	r0, r1
 800264e:	d90e      	bls.n	800266e <memmove+0x22>
 8002650:	188b      	adds	r3, r1, r2
 8002652:	4283      	cmp	r3, r0
 8002654:	d90b      	bls.n	800266e <memmove+0x22>
 8002656:	eb00 0c02 	add.w	ip, r0, r2
 800265a:	2a00      	cmp	r2, #0
 800265c:	d06e      	beq.n	800273c <memmove+0xf0>
 800265e:	4662      	mov	r2, ip
 8002660:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 8002664:	f802 cd01 	strb.w	ip, [r2, #-1]!
 8002668:	4299      	cmp	r1, r3
 800266a:	d1f9      	bne.n	8002660 <memmove+0x14>
 800266c:	4770      	bx	lr
 800266e:	2a0f      	cmp	r2, #15
 8002670:	d80f      	bhi.n	8002692 <memmove+0x46>
 8002672:	4603      	mov	r3, r0
 8002674:	f102 3cff 	add.w	ip, r2, #4294967295
 8002678:	2a00      	cmp	r2, #0
 800267a:	d05f      	beq.n	800273c <memmove+0xf0>
 800267c:	f10c 0c01 	add.w	ip, ip, #1
 8002680:	3b01      	subs	r3, #1
 8002682:	448c      	add	ip, r1
 8002684:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002688:	f803 2f01 	strb.w	r2, [r3, #1]!
 800268c:	4561      	cmp	r1, ip
 800268e:	d1f9      	bne.n	8002684 <memmove+0x38>
 8002690:	4770      	bx	lr
 8002692:	ea40 0301 	orr.w	r3, r0, r1
 8002696:	079b      	lsls	r3, r3, #30
 8002698:	d151      	bne.n	800273e <memmove+0xf2>
 800269a:	f1a2 0310 	sub.w	r3, r2, #16
 800269e:	b570      	push	{r4, r5, r6, lr}
 80026a0:	f101 0c20 	add.w	ip, r1, #32
 80026a4:	f023 050f 	bic.w	r5, r3, #15
 80026a8:	f101 0e10 	add.w	lr, r1, #16
 80026ac:	f100 0410 	add.w	r4, r0, #16
 80026b0:	44ac      	add	ip, r5
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 80026b8:	f844 5c10 	str.w	r5, [r4, #-16]
 80026bc:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 80026c0:	f844 5c0c 	str.w	r5, [r4, #-12]
 80026c4:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 80026c8:	f844 5c08 	str.w	r5, [r4, #-8]
 80026cc:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 80026d0:	f844 5c04 	str.w	r5, [r4, #-4]
 80026d4:	f10e 0e10 	add.w	lr, lr, #16
 80026d8:	45e6      	cmp	lr, ip
 80026da:	f104 0410 	add.w	r4, r4, #16
 80026de:	d1e9      	bne.n	80026b4 <memmove+0x68>
 80026e0:	3301      	adds	r3, #1
 80026e2:	f012 0f0c 	tst.w	r2, #12
 80026e6:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80026ea:	f002 040f 	and.w	r4, r2, #15
 80026ee:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 80026f2:	d028      	beq.n	8002746 <memmove+0xfa>
 80026f4:	3c04      	subs	r4, #4
 80026f6:	f024 0603 	bic.w	r6, r4, #3
 80026fa:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 80026fe:	441e      	add	r6, r3
 8002700:	1f1c      	subs	r4, r3, #4
 8002702:	468e      	mov	lr, r1
 8002704:	f85e 5b04 	ldr.w	r5, [lr], #4
 8002708:	f844 5f04 	str.w	r5, [r4, #4]!
 800270c:	42b4      	cmp	r4, r6
 800270e:	d1f9      	bne.n	8002704 <memmove+0xb8>
 8002710:	f10c 0401 	add.w	r4, ip, #1
 8002714:	f002 0203 	and.w	r2, r2, #3
 8002718:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800271c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8002720:	f102 3cff 	add.w	ip, r2, #4294967295
 8002724:	b14a      	cbz	r2, 800273a <memmove+0xee>
 8002726:	f10c 0c01 	add.w	ip, ip, #1
 800272a:	3b01      	subs	r3, #1
 800272c:	448c      	add	ip, r1
 800272e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002732:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002736:	4561      	cmp	r1, ip
 8002738:	d1f9      	bne.n	800272e <memmove+0xe2>
 800273a:	bd70      	pop	{r4, r5, r6, pc}
 800273c:	4770      	bx	lr
 800273e:	f102 3cff 	add.w	ip, r2, #4294967295
 8002742:	4603      	mov	r3, r0
 8002744:	e79a      	b.n	800267c <memmove+0x30>
 8002746:	4622      	mov	r2, r4
 8002748:	e7ea      	b.n	8002720 <memmove+0xd4>
 800274a:	bf00      	nop

0800274c <_init_signal_r>:
 800274c:	b538      	push	{r3, r4, r5, lr}
 800274e:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8002750:	b10c      	cbz	r4, 8002756 <_init_signal_r+0xa>
 8002752:	2000      	movs	r0, #0
 8002754:	bd38      	pop	{r3, r4, r5, pc}
 8002756:	2180      	movs	r1, #128	@ 0x80
 8002758:	4605      	mov	r5, r0
 800275a:	f7fe fc85 	bl	8001068 <_malloc_r>
 800275e:	4602      	mov	r2, r0
 8002760:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8002762:	b130      	cbz	r0, 8002772 <_init_signal_r+0x26>
 8002764:	1f03      	subs	r3, r0, #4
 8002766:	327c      	adds	r2, #124	@ 0x7c
 8002768:	f843 4f04 	str.w	r4, [r3, #4]!
 800276c:	4293      	cmp	r3, r2
 800276e:	d1fb      	bne.n	8002768 <_init_signal_r+0x1c>
 8002770:	e7ef      	b.n	8002752 <_init_signal_r+0x6>
 8002772:	f04f 30ff 	mov.w	r0, #4294967295
 8002776:	bd38      	pop	{r3, r4, r5, pc}

08002778 <_signal_r>:
 8002778:	b530      	push	{r4, r5, lr}
 800277a:	291f      	cmp	r1, #31
 800277c:	b083      	sub	sp, #12
 800277e:	4605      	mov	r5, r0
 8002780:	d808      	bhi.n	8002794 <_signal_r+0x1c>
 8002782:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002784:	460c      	mov	r4, r1
 8002786:	b153      	cbz	r3, 800279e <_signal_r+0x26>
 8002788:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800278c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8002790:	b003      	add	sp, #12
 8002792:	bd30      	pop	{r4, r5, pc}
 8002794:	2316      	movs	r3, #22
 8002796:	6003      	str	r3, [r0, #0]
 8002798:	f04f 30ff 	mov.w	r0, #4294967295
 800279c:	e7f8      	b.n	8002790 <_signal_r+0x18>
 800279e:	2180      	movs	r1, #128	@ 0x80
 80027a0:	9201      	str	r2, [sp, #4]
 80027a2:	f7fe fc61 	bl	8001068 <_malloc_r>
 80027a6:	9a01      	ldr	r2, [sp, #4]
 80027a8:	63e8      	str	r0, [r5, #60]	@ 0x3c
 80027aa:	4603      	mov	r3, r0
 80027ac:	2800      	cmp	r0, #0
 80027ae:	d0f3      	beq.n	8002798 <_signal_r+0x20>
 80027b0:	1f01      	subs	r1, r0, #4
 80027b2:	f100 057c 	add.w	r5, r0, #124	@ 0x7c
 80027b6:	2000      	movs	r0, #0
 80027b8:	f841 0f04 	str.w	r0, [r1, #4]!
 80027bc:	42a9      	cmp	r1, r5
 80027be:	d1fb      	bne.n	80027b8 <_signal_r+0x40>
 80027c0:	e7e2      	b.n	8002788 <_signal_r+0x10>
 80027c2:	bf00      	nop

080027c4 <_raise_r>:
 80027c4:	291f      	cmp	r1, #31
 80027c6:	b538      	push	{r3, r4, r5, lr}
 80027c8:	4605      	mov	r5, r0
 80027ca:	d81e      	bhi.n	800280a <_raise_r+0x46>
 80027cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80027ce:	460c      	mov	r4, r1
 80027d0:	b16a      	cbz	r2, 80027ee <_raise_r+0x2a>
 80027d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80027d6:	b153      	cbz	r3, 80027ee <_raise_r+0x2a>
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d006      	beq.n	80027ea <_raise_r+0x26>
 80027dc:	1c59      	adds	r1, r3, #1
 80027de:	d010      	beq.n	8002802 <_raise_r+0x3e>
 80027e0:	2100      	movs	r1, #0
 80027e2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80027e6:	4620      	mov	r0, r4
 80027e8:	4798      	blx	r3
 80027ea:	2000      	movs	r0, #0
 80027ec:	bd38      	pop	{r3, r4, r5, pc}
 80027ee:	4628      	mov	r0, r5
 80027f0:	f000 f8f2 	bl	80029d8 <_getpid_r>
 80027f4:	4622      	mov	r2, r4
 80027f6:	4601      	mov	r1, r0
 80027f8:	4628      	mov	r0, r5
 80027fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027fe:	f000 b8d5 	b.w	80029ac <_kill_r>
 8002802:	2316      	movs	r3, #22
 8002804:	6003      	str	r3, [r0, #0]
 8002806:	2001      	movs	r0, #1
 8002808:	bd38      	pop	{r3, r4, r5, pc}
 800280a:	2316      	movs	r3, #22
 800280c:	6003      	str	r3, [r0, #0]
 800280e:	f04f 30ff 	mov.w	r0, #4294967295
 8002812:	bd38      	pop	{r3, r4, r5, pc}

08002814 <__sigtramp_r>:
 8002814:	291f      	cmp	r1, #31
 8002816:	d82a      	bhi.n	800286e <__sigtramp_r+0x5a>
 8002818:	b538      	push	{r3, r4, r5, lr}
 800281a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800281c:	460c      	mov	r4, r1
 800281e:	4605      	mov	r5, r0
 8002820:	b1a3      	cbz	r3, 800284c <__sigtramp_r+0x38>
 8002822:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8002826:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800282a:	b14a      	cbz	r2, 8002840 <__sigtramp_r+0x2c>
 800282c:	1c51      	adds	r1, r2, #1
 800282e:	d00b      	beq.n	8002848 <__sigtramp_r+0x34>
 8002830:	2a01      	cmp	r2, #1
 8002832:	d007      	beq.n	8002844 <__sigtramp_r+0x30>
 8002834:	2500      	movs	r5, #0
 8002836:	4620      	mov	r0, r4
 8002838:	601d      	str	r5, [r3, #0]
 800283a:	4790      	blx	r2
 800283c:	4628      	mov	r0, r5
 800283e:	bd38      	pop	{r3, r4, r5, pc}
 8002840:	2001      	movs	r0, #1
 8002842:	bd38      	pop	{r3, r4, r5, pc}
 8002844:	2003      	movs	r0, #3
 8002846:	bd38      	pop	{r3, r4, r5, pc}
 8002848:	2002      	movs	r0, #2
 800284a:	bd38      	pop	{r3, r4, r5, pc}
 800284c:	2180      	movs	r1, #128	@ 0x80
 800284e:	f7fe fc0b 	bl	8001068 <_malloc_r>
 8002852:	4603      	mov	r3, r0
 8002854:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8002856:	b138      	cbz	r0, 8002868 <__sigtramp_r+0x54>
 8002858:	1f02      	subs	r2, r0, #4
 800285a:	2100      	movs	r1, #0
 800285c:	307c      	adds	r0, #124	@ 0x7c
 800285e:	f842 1f04 	str.w	r1, [r2, #4]!
 8002862:	4290      	cmp	r0, r2
 8002864:	d1fb      	bne.n	800285e <__sigtramp_r+0x4a>
 8002866:	e7dc      	b.n	8002822 <__sigtramp_r+0xe>
 8002868:	f04f 30ff 	mov.w	r0, #4294967295
 800286c:	bd38      	pop	{r3, r4, r5, pc}
 800286e:	f04f 30ff 	mov.w	r0, #4294967295
 8002872:	4770      	bx	lr

08002874 <raise>:
 8002874:	b538      	push	{r3, r4, r5, lr}
 8002876:	4b13      	ldr	r3, [pc, #76]	@ (80028c4 <raise+0x50>)
 8002878:	281f      	cmp	r0, #31
 800287a:	681d      	ldr	r5, [r3, #0]
 800287c:	d81d      	bhi.n	80028ba <raise+0x46>
 800287e:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8002880:	4604      	mov	r4, r0
 8002882:	b162      	cbz	r2, 800289e <raise+0x2a>
 8002884:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8002888:	b14b      	cbz	r3, 800289e <raise+0x2a>
 800288a:	2b01      	cmp	r3, #1
 800288c:	d005      	beq.n	800289a <raise+0x26>
 800288e:	1c59      	adds	r1, r3, #1
 8002890:	d00f      	beq.n	80028b2 <raise+0x3e>
 8002892:	2100      	movs	r1, #0
 8002894:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 8002898:	4798      	blx	r3
 800289a:	2000      	movs	r0, #0
 800289c:	bd38      	pop	{r3, r4, r5, pc}
 800289e:	4628      	mov	r0, r5
 80028a0:	f000 f89a 	bl	80029d8 <_getpid_r>
 80028a4:	4622      	mov	r2, r4
 80028a6:	4601      	mov	r1, r0
 80028a8:	4628      	mov	r0, r5
 80028aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028ae:	f000 b87d 	b.w	80029ac <_kill_r>
 80028b2:	2316      	movs	r3, #22
 80028b4:	602b      	str	r3, [r5, #0]
 80028b6:	2001      	movs	r0, #1
 80028b8:	bd38      	pop	{r3, r4, r5, pc}
 80028ba:	2316      	movs	r3, #22
 80028bc:	602b      	str	r3, [r5, #0]
 80028be:	f04f 30ff 	mov.w	r0, #4294967295
 80028c2:	bd38      	pop	{r3, r4, r5, pc}
 80028c4:	2000001c 	.word	0x2000001c

080028c8 <signal>:
 80028c8:	4b11      	ldr	r3, [pc, #68]	@ (8002910 <signal+0x48>)
 80028ca:	281f      	cmp	r0, #31
 80028cc:	b570      	push	{r4, r5, r6, lr}
 80028ce:	681e      	ldr	r6, [r3, #0]
 80028d0:	d808      	bhi.n	80028e4 <signal+0x1c>
 80028d2:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 80028d4:	4604      	mov	r4, r0
 80028d6:	460d      	mov	r5, r1
 80028d8:	b14b      	cbz	r3, 80028ee <signal+0x26>
 80028da:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80028de:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
 80028e2:	bd70      	pop	{r4, r5, r6, pc}
 80028e4:	2316      	movs	r3, #22
 80028e6:	6033      	str	r3, [r6, #0]
 80028e8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ec:	bd70      	pop	{r4, r5, r6, pc}
 80028ee:	2180      	movs	r1, #128	@ 0x80
 80028f0:	4630      	mov	r0, r6
 80028f2:	f7fe fbb9 	bl	8001068 <_malloc_r>
 80028f6:	4603      	mov	r3, r0
 80028f8:	63f0      	str	r0, [r6, #60]	@ 0x3c
 80028fa:	2800      	cmp	r0, #0
 80028fc:	d0f4      	beq.n	80028e8 <signal+0x20>
 80028fe:	1f02      	subs	r2, r0, #4
 8002900:	2100      	movs	r1, #0
 8002902:	307c      	adds	r0, #124	@ 0x7c
 8002904:	f842 1f04 	str.w	r1, [r2, #4]!
 8002908:	4290      	cmp	r0, r2
 800290a:	d1fb      	bne.n	8002904 <signal+0x3c>
 800290c:	e7e5      	b.n	80028da <signal+0x12>
 800290e:	bf00      	nop
 8002910:	2000001c 	.word	0x2000001c

08002914 <_init_signal>:
 8002914:	b538      	push	{r3, r4, r5, lr}
 8002916:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <_init_signal+0x30>)
 8002918:	681d      	ldr	r5, [r3, #0]
 800291a:	6bec      	ldr	r4, [r5, #60]	@ 0x3c
 800291c:	b10c      	cbz	r4, 8002922 <_init_signal+0xe>
 800291e:	2000      	movs	r0, #0
 8002920:	bd38      	pop	{r3, r4, r5, pc}
 8002922:	2180      	movs	r1, #128	@ 0x80
 8002924:	4628      	mov	r0, r5
 8002926:	f7fe fb9f 	bl	8001068 <_malloc_r>
 800292a:	63e8      	str	r0, [r5, #60]	@ 0x3c
 800292c:	b138      	cbz	r0, 800293e <_init_signal+0x2a>
 800292e:	1f03      	subs	r3, r0, #4
 8002930:	f100 027c 	add.w	r2, r0, #124	@ 0x7c
 8002934:	f843 4f04 	str.w	r4, [r3, #4]!
 8002938:	4293      	cmp	r3, r2
 800293a:	d1fb      	bne.n	8002934 <_init_signal+0x20>
 800293c:	e7ef      	b.n	800291e <_init_signal+0xa>
 800293e:	f04f 30ff 	mov.w	r0, #4294967295
 8002942:	bd38      	pop	{r3, r4, r5, pc}
 8002944:	2000001c 	.word	0x2000001c

08002948 <__sigtramp>:
 8002948:	b538      	push	{r3, r4, r5, lr}
 800294a:	4b17      	ldr	r3, [pc, #92]	@ (80029a8 <__sigtramp+0x60>)
 800294c:	281f      	cmp	r0, #31
 800294e:	681d      	ldr	r5, [r3, #0]
 8002950:	d826      	bhi.n	80029a0 <__sigtramp+0x58>
 8002952:	4604      	mov	r4, r0
 8002954:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 8002956:	b1a0      	cbz	r0, 8002982 <__sigtramp+0x3a>
 8002958:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 800295c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8002960:	b14b      	cbz	r3, 8002976 <__sigtramp+0x2e>
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	d00b      	beq.n	800297e <__sigtramp+0x36>
 8002966:	2b01      	cmp	r3, #1
 8002968:	d007      	beq.n	800297a <__sigtramp+0x32>
 800296a:	2500      	movs	r5, #0
 800296c:	6005      	str	r5, [r0, #0]
 800296e:	4620      	mov	r0, r4
 8002970:	4798      	blx	r3
 8002972:	4628      	mov	r0, r5
 8002974:	bd38      	pop	{r3, r4, r5, pc}
 8002976:	2001      	movs	r0, #1
 8002978:	bd38      	pop	{r3, r4, r5, pc}
 800297a:	2003      	movs	r0, #3
 800297c:	bd38      	pop	{r3, r4, r5, pc}
 800297e:	2002      	movs	r0, #2
 8002980:	bd38      	pop	{r3, r4, r5, pc}
 8002982:	2180      	movs	r1, #128	@ 0x80
 8002984:	4628      	mov	r0, r5
 8002986:	f7fe fb6f 	bl	8001068 <_malloc_r>
 800298a:	63e8      	str	r0, [r5, #60]	@ 0x3c
 800298c:	b140      	cbz	r0, 80029a0 <__sigtramp+0x58>
 800298e:	1f03      	subs	r3, r0, #4
 8002990:	f100 017c 	add.w	r1, r0, #124	@ 0x7c
 8002994:	2200      	movs	r2, #0
 8002996:	f843 2f04 	str.w	r2, [r3, #4]!
 800299a:	4299      	cmp	r1, r3
 800299c:	d1fb      	bne.n	8002996 <__sigtramp+0x4e>
 800299e:	e7db      	b.n	8002958 <__sigtramp+0x10>
 80029a0:	f04f 30ff 	mov.w	r0, #4294967295
 80029a4:	bd38      	pop	{r3, r4, r5, pc}
 80029a6:	bf00      	nop
 80029a8:	2000001c 	.word	0x2000001c

080029ac <_kill_r>:
 80029ac:	b570      	push	{r4, r5, r6, lr}
 80029ae:	460c      	mov	r4, r1
 80029b0:	4d08      	ldr	r5, [pc, #32]	@ (80029d4 <_kill_r+0x28>)
 80029b2:	4603      	mov	r3, r0
 80029b4:	2600      	movs	r6, #0
 80029b6:	4620      	mov	r0, r4
 80029b8:	4611      	mov	r1, r2
 80029ba:	461c      	mov	r4, r3
 80029bc:	602e      	str	r6, [r5, #0]
 80029be:	f000 fa07 	bl	8002dd0 <_kill>
 80029c2:	1c43      	adds	r3, r0, #1
 80029c4:	d000      	beq.n	80029c8 <_kill_r+0x1c>
 80029c6:	bd70      	pop	{r4, r5, r6, pc}
 80029c8:	682b      	ldr	r3, [r5, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0fb      	beq.n	80029c6 <_kill_r+0x1a>
 80029ce:	6023      	str	r3, [r4, #0]
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	bf00      	nop
 80029d4:	200002f4 	.word	0x200002f4

080029d8 <_getpid_r>:
 80029d8:	f000 b9ea 	b.w	8002db0 <_getpid>
 80029dc:	0000      	movs	r0, r0
 80029de:	0000      	movs	r0, r0

080029e0 <memchr>:
 80029e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80029e4:	2a10      	cmp	r2, #16
 80029e6:	db2b      	blt.n	8002a40 <memchr+0x60>
 80029e8:	f010 0f07 	tst.w	r0, #7
 80029ec:	d008      	beq.n	8002a00 <memchr+0x20>
 80029ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80029f2:	3a01      	subs	r2, #1
 80029f4:	428b      	cmp	r3, r1
 80029f6:	d02d      	beq.n	8002a54 <memchr+0x74>
 80029f8:	f010 0f07 	tst.w	r0, #7
 80029fc:	b342      	cbz	r2, 8002a50 <memchr+0x70>
 80029fe:	d1f6      	bne.n	80029ee <memchr+0xe>
 8002a00:	b4f0      	push	{r4, r5, r6, r7}
 8002a02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002a06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8002a0a:	f022 0407 	bic.w	r4, r2, #7
 8002a0e:	f07f 0700 	mvns.w	r7, #0
 8002a12:	2300      	movs	r3, #0
 8002a14:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002a18:	3c08      	subs	r4, #8
 8002a1a:	ea85 0501 	eor.w	r5, r5, r1
 8002a1e:	ea86 0601 	eor.w	r6, r6, r1
 8002a22:	fa85 f547 	uadd8	r5, r5, r7
 8002a26:	faa3 f587 	sel	r5, r3, r7
 8002a2a:	fa86 f647 	uadd8	r6, r6, r7
 8002a2e:	faa5 f687 	sel	r6, r5, r7
 8002a32:	b98e      	cbnz	r6, 8002a58 <memchr+0x78>
 8002a34:	d1ee      	bne.n	8002a14 <memchr+0x34>
 8002a36:	bcf0      	pop	{r4, r5, r6, r7}
 8002a38:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8002a3c:	f002 0207 	and.w	r2, r2, #7
 8002a40:	b132      	cbz	r2, 8002a50 <memchr+0x70>
 8002a42:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002a46:	3a01      	subs	r2, #1
 8002a48:	ea83 0301 	eor.w	r3, r3, r1
 8002a4c:	b113      	cbz	r3, 8002a54 <memchr+0x74>
 8002a4e:	d1f8      	bne.n	8002a42 <memchr+0x62>
 8002a50:	2000      	movs	r0, #0
 8002a52:	4770      	bx	lr
 8002a54:	3801      	subs	r0, #1
 8002a56:	4770      	bx	lr
 8002a58:	2d00      	cmp	r5, #0
 8002a5a:	bf06      	itte	eq
 8002a5c:	4635      	moveq	r5, r6
 8002a5e:	3803      	subeq	r0, #3
 8002a60:	3807      	subne	r0, #7
 8002a62:	f015 0f01 	tst.w	r5, #1
 8002a66:	d107      	bne.n	8002a78 <memchr+0x98>
 8002a68:	3001      	adds	r0, #1
 8002a6a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8002a6e:	bf02      	ittt	eq
 8002a70:	3001      	addeq	r0, #1
 8002a72:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8002a76:	3001      	addeq	r0, #1
 8002a78:	bcf0      	pop	{r4, r5, r6, r7}
 8002a7a:	3801      	subs	r0, #1
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop

08002a80 <memcpy>:
 8002a80:	4684      	mov	ip, r0
 8002a82:	ea41 0300 	orr.w	r3, r1, r0
 8002a86:	f013 0303 	ands.w	r3, r3, #3
 8002a8a:	d16d      	bne.n	8002b68 <memcpy+0xe8>
 8002a8c:	3a40      	subs	r2, #64	@ 0x40
 8002a8e:	d341      	bcc.n	8002b14 <memcpy+0x94>
 8002a90:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a94:	f840 3b04 	str.w	r3, [r0], #4
 8002a98:	f851 3b04 	ldr.w	r3, [r1], #4
 8002a9c:	f840 3b04 	str.w	r3, [r0], #4
 8002aa0:	f851 3b04 	ldr.w	r3, [r1], #4
 8002aa4:	f840 3b04 	str.w	r3, [r0], #4
 8002aa8:	f851 3b04 	ldr.w	r3, [r1], #4
 8002aac:	f840 3b04 	str.w	r3, [r0], #4
 8002ab0:	f851 3b04 	ldr.w	r3, [r1], #4
 8002ab4:	f840 3b04 	str.w	r3, [r0], #4
 8002ab8:	f851 3b04 	ldr.w	r3, [r1], #4
 8002abc:	f840 3b04 	str.w	r3, [r0], #4
 8002ac0:	f851 3b04 	ldr.w	r3, [r1], #4
 8002ac4:	f840 3b04 	str.w	r3, [r0], #4
 8002ac8:	f851 3b04 	ldr.w	r3, [r1], #4
 8002acc:	f840 3b04 	str.w	r3, [r0], #4
 8002ad0:	f851 3b04 	ldr.w	r3, [r1], #4
 8002ad4:	f840 3b04 	str.w	r3, [r0], #4
 8002ad8:	f851 3b04 	ldr.w	r3, [r1], #4
 8002adc:	f840 3b04 	str.w	r3, [r0], #4
 8002ae0:	f851 3b04 	ldr.w	r3, [r1], #4
 8002ae4:	f840 3b04 	str.w	r3, [r0], #4
 8002ae8:	f851 3b04 	ldr.w	r3, [r1], #4
 8002aec:	f840 3b04 	str.w	r3, [r0], #4
 8002af0:	f851 3b04 	ldr.w	r3, [r1], #4
 8002af4:	f840 3b04 	str.w	r3, [r0], #4
 8002af8:	f851 3b04 	ldr.w	r3, [r1], #4
 8002afc:	f840 3b04 	str.w	r3, [r0], #4
 8002b00:	f851 3b04 	ldr.w	r3, [r1], #4
 8002b04:	f840 3b04 	str.w	r3, [r0], #4
 8002b08:	f851 3b04 	ldr.w	r3, [r1], #4
 8002b0c:	f840 3b04 	str.w	r3, [r0], #4
 8002b10:	3a40      	subs	r2, #64	@ 0x40
 8002b12:	d2bd      	bcs.n	8002a90 <memcpy+0x10>
 8002b14:	3230      	adds	r2, #48	@ 0x30
 8002b16:	d311      	bcc.n	8002b3c <memcpy+0xbc>
 8002b18:	f851 3b04 	ldr.w	r3, [r1], #4
 8002b1c:	f840 3b04 	str.w	r3, [r0], #4
 8002b20:	f851 3b04 	ldr.w	r3, [r1], #4
 8002b24:	f840 3b04 	str.w	r3, [r0], #4
 8002b28:	f851 3b04 	ldr.w	r3, [r1], #4
 8002b2c:	f840 3b04 	str.w	r3, [r0], #4
 8002b30:	f851 3b04 	ldr.w	r3, [r1], #4
 8002b34:	f840 3b04 	str.w	r3, [r0], #4
 8002b38:	3a10      	subs	r2, #16
 8002b3a:	d2ed      	bcs.n	8002b18 <memcpy+0x98>
 8002b3c:	320c      	adds	r2, #12
 8002b3e:	d305      	bcc.n	8002b4c <memcpy+0xcc>
 8002b40:	f851 3b04 	ldr.w	r3, [r1], #4
 8002b44:	f840 3b04 	str.w	r3, [r0], #4
 8002b48:	3a04      	subs	r2, #4
 8002b4a:	d2f9      	bcs.n	8002b40 <memcpy+0xc0>
 8002b4c:	3204      	adds	r2, #4
 8002b4e:	d008      	beq.n	8002b62 <memcpy+0xe2>
 8002b50:	07d2      	lsls	r2, r2, #31
 8002b52:	bf1c      	itt	ne
 8002b54:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8002b58:	f800 3b01 	strbne.w	r3, [r0], #1
 8002b5c:	d301      	bcc.n	8002b62 <memcpy+0xe2>
 8002b5e:	880b      	ldrh	r3, [r1, #0]
 8002b60:	8003      	strh	r3, [r0, #0]
 8002b62:	4660      	mov	r0, ip
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	2a08      	cmp	r2, #8
 8002b6a:	d313      	bcc.n	8002b94 <memcpy+0x114>
 8002b6c:	078b      	lsls	r3, r1, #30
 8002b6e:	d08d      	beq.n	8002a8c <memcpy+0xc>
 8002b70:	f010 0303 	ands.w	r3, r0, #3
 8002b74:	d08a      	beq.n	8002a8c <memcpy+0xc>
 8002b76:	f1c3 0304 	rsb	r3, r3, #4
 8002b7a:	1ad2      	subs	r2, r2, r3
 8002b7c:	07db      	lsls	r3, r3, #31
 8002b7e:	bf1c      	itt	ne
 8002b80:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8002b84:	f800 3b01 	strbne.w	r3, [r0], #1
 8002b88:	d380      	bcc.n	8002a8c <memcpy+0xc>
 8002b8a:	f831 3b02 	ldrh.w	r3, [r1], #2
 8002b8e:	f820 3b02 	strh.w	r3, [r0], #2
 8002b92:	e77b      	b.n	8002a8c <memcpy+0xc>
 8002b94:	3a04      	subs	r2, #4
 8002b96:	d3d9      	bcc.n	8002b4c <memcpy+0xcc>
 8002b98:	3a01      	subs	r2, #1
 8002b9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b9e:	f800 3b01 	strb.w	r3, [r0], #1
 8002ba2:	d2f9      	bcs.n	8002b98 <memcpy+0x118>
 8002ba4:	780b      	ldrb	r3, [r1, #0]
 8002ba6:	7003      	strb	r3, [r0, #0]
 8002ba8:	784b      	ldrb	r3, [r1, #1]
 8002baa:	7043      	strb	r3, [r0, #1]
 8002bac:	788b      	ldrb	r3, [r1, #2]
 8002bae:	7083      	strb	r3, [r0, #2]
 8002bb0:	4660      	mov	r0, ip
 8002bb2:	4770      	bx	lr

08002bb4 <_realloc_r>:
 8002bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bb8:	4614      	mov	r4, r2
 8002bba:	b349      	cbz	r1, 8002c10 <_realloc_r+0x5c>
 8002bbc:	b1ea      	cbz	r2, 8002bfa <_realloc_r+0x46>
 8002bbe:	4606      	mov	r6, r0
 8002bc0:	460d      	mov	r5, r1
 8002bc2:	f000 f8dd 	bl	8002d80 <_malloc_usable_size_r>
 8002bc6:	4284      	cmp	r4, r0
 8002bc8:	4607      	mov	r7, r0
 8002bca:	d802      	bhi.n	8002bd2 <_realloc_r+0x1e>
 8002bcc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002bd0:	d81a      	bhi.n	8002c08 <_realloc_r+0x54>
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	4630      	mov	r0, r6
 8002bd6:	f7fe fa47 	bl	8001068 <_malloc_r>
 8002bda:	4680      	mov	r8, r0
 8002bdc:	b178      	cbz	r0, 8002bfe <_realloc_r+0x4a>
 8002bde:	42bc      	cmp	r4, r7
 8002be0:	4622      	mov	r2, r4
 8002be2:	4629      	mov	r1, r5
 8002be4:	bf28      	it	cs
 8002be6:	463a      	movcs	r2, r7
 8002be8:	f7ff ff4a 	bl	8002a80 <memcpy>
 8002bec:	4630      	mov	r0, r6
 8002bee:	4629      	mov	r1, r5
 8002bf0:	f7fe fe36 	bl	8001860 <_free_r>
 8002bf4:	4640      	mov	r0, r8
 8002bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bfa:	f7fe fe31 	bl	8001860 <_free_r>
 8002bfe:	f04f 0800 	mov.w	r8, #0
 8002c02:	4640      	mov	r0, r8
 8002c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c08:	46a8      	mov	r8, r5
 8002c0a:	4640      	mov	r0, r8
 8002c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c14:	4611      	mov	r1, r2
 8002c16:	f7fe ba27 	b.w	8001068 <_malloc_r>
 8002c1a:	bf00      	nop

08002c1c <__smakebuf_r>:
 8002c1c:	b570      	push	{r4, r5, r6, lr}
 8002c1e:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8002c22:	460c      	mov	r4, r1
 8002c24:	0799      	lsls	r1, r3, #30
 8002c26:	b096      	sub	sp, #88	@ 0x58
 8002c28:	d507      	bpl.n	8002c3a <__smakebuf_r+0x1e>
 8002c2a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002c2e:	2201      	movs	r2, #1
 8002c30:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8002c34:	6023      	str	r3, [r4, #0]
 8002c36:	b016      	add	sp, #88	@ 0x58
 8002c38:	bd70      	pop	{r4, r5, r6, pc}
 8002c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	4605      	mov	r5, r0
 8002c42:	db29      	blt.n	8002c98 <__smakebuf_r+0x7c>
 8002c44:	466a      	mov	r2, sp
 8002c46:	f000 f873 	bl	8002d30 <_fstat_r>
 8002c4a:	2800      	cmp	r0, #0
 8002c4c:	db22      	blt.n	8002c94 <__smakebuf_r+0x78>
 8002c4e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c52:	4628      	mov	r0, r5
 8002c54:	9e01      	ldr	r6, [sp, #4]
 8002c56:	f7fe fa07 	bl	8001068 <_malloc_r>
 8002c5a:	b388      	cbz	r0, 8002cc0 <__smakebuf_r+0xa4>
 8002c5c:	89a3      	ldrh	r3, [r4, #12]
 8002c5e:	6020      	str	r0, [r4, #0]
 8002c60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c64:	f406 4670 	and.w	r6, r6, #61440	@ 0xf000
 8002c68:	81a3      	strh	r3, [r4, #12]
 8002c6a:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
 8002c6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c72:	e9c4 0304 	strd	r0, r3, [r4, #16]
 8002c76:	d1de      	bne.n	8002c36 <__smakebuf_r+0x1a>
 8002c78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c7c:	4628      	mov	r0, r5
 8002c7e:	f000 f86d 	bl	8002d5c <_isatty_r>
 8002c82:	2800      	cmp	r0, #0
 8002c84:	d0d7      	beq.n	8002c36 <__smakebuf_r+0x1a>
 8002c86:	89a3      	ldrh	r3, [r4, #12]
 8002c88:	f023 0303 	bic.w	r3, r3, #3
 8002c8c:	f043 0301 	orr.w	r3, r3, #1
 8002c90:	81a3      	strh	r3, [r4, #12]
 8002c92:	e7d0      	b.n	8002c36 <__smakebuf_r+0x1a>
 8002c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002c9c:	bf14      	ite	ne
 8002c9e:	2640      	movne	r6, #64	@ 0x40
 8002ca0:	f44f 6680 	moveq.w	r6, #1024	@ 0x400
 8002ca4:	4631      	mov	r1, r6
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	f7fe f9de 	bl	8001068 <_malloc_r>
 8002cac:	b140      	cbz	r0, 8002cc0 <__smakebuf_r+0xa4>
 8002cae:	89a3      	ldrh	r3, [r4, #12]
 8002cb0:	6020      	str	r0, [r4, #0]
 8002cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cb6:	e9c4 0604 	strd	r0, r6, [r4, #16]
 8002cba:	81a3      	strh	r3, [r4, #12]
 8002cbc:	b016      	add	sp, #88	@ 0x58
 8002cbe:	bd70      	pop	{r4, r5, r6, pc}
 8002cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cc4:	059a      	lsls	r2, r3, #22
 8002cc6:	d4b6      	bmi.n	8002c36 <__smakebuf_r+0x1a>
 8002cc8:	f023 0303 	bic.w	r3, r3, #3
 8002ccc:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8002cd0:	f043 0302 	orr.w	r3, r3, #2
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	e9c4 2104 	strd	r2, r1, [r4, #16]
 8002cda:	81a3      	strh	r3, [r4, #12]
 8002cdc:	6022      	str	r2, [r4, #0]
 8002cde:	e7aa      	b.n	8002c36 <__smakebuf_r+0x1a>

08002ce0 <__swhatbuf_r>:
 8002ce0:	b570      	push	{r4, r5, r6, lr}
 8002ce2:	460c      	mov	r4, r1
 8002ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ce8:	2900      	cmp	r1, #0
 8002cea:	b096      	sub	sp, #88	@ 0x58
 8002cec:	4615      	mov	r5, r2
 8002cee:	461e      	mov	r6, r3
 8002cf0:	db0f      	blt.n	8002d12 <__swhatbuf_r+0x32>
 8002cf2:	466a      	mov	r2, sp
 8002cf4:	f000 f81c 	bl	8002d30 <_fstat_r>
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	db0a      	blt.n	8002d12 <__swhatbuf_r+0x32>
 8002cfc:	9b01      	ldr	r3, [sp, #4]
 8002cfe:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002d02:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8002d06:	fab3 f383 	clz	r3, r3
 8002d0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	e008      	b.n	8002d24 <__swhatbuf_r+0x44>
 8002d12:	89a2      	ldrh	r2, [r4, #12]
 8002d14:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	bf14      	ite	ne
 8002d1e:	2240      	movne	r2, #64	@ 0x40
 8002d20:	f44f 6280 	moveq.w	r2, #1024	@ 0x400
 8002d24:	2000      	movs	r0, #0
 8002d26:	6033      	str	r3, [r6, #0]
 8002d28:	602a      	str	r2, [r5, #0]
 8002d2a:	b016      	add	sp, #88	@ 0x58
 8002d2c:	bd70      	pop	{r4, r5, r6, pc}
 8002d2e:	bf00      	nop

08002d30 <_fstat_r>:
 8002d30:	b570      	push	{r4, r5, r6, lr}
 8002d32:	460c      	mov	r4, r1
 8002d34:	4d08      	ldr	r5, [pc, #32]	@ (8002d58 <_fstat_r+0x28>)
 8002d36:	4603      	mov	r3, r0
 8002d38:	2600      	movs	r6, #0
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	461c      	mov	r4, r3
 8002d40:	602e      	str	r6, [r5, #0]
 8002d42:	f000 f82d 	bl	8002da0 <_fstat>
 8002d46:	1c43      	adds	r3, r0, #1
 8002d48:	d000      	beq.n	8002d4c <_fstat_r+0x1c>
 8002d4a:	bd70      	pop	{r4, r5, r6, pc}
 8002d4c:	682b      	ldr	r3, [r5, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0fb      	beq.n	8002d4a <_fstat_r+0x1a>
 8002d52:	6023      	str	r3, [r4, #0]
 8002d54:	bd70      	pop	{r4, r5, r6, pc}
 8002d56:	bf00      	nop
 8002d58:	200002f4 	.word	0x200002f4

08002d5c <_isatty_r>:
 8002d5c:	b538      	push	{r3, r4, r5, lr}
 8002d5e:	4d07      	ldr	r5, [pc, #28]	@ (8002d7c <_isatty_r+0x20>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	4604      	mov	r4, r0
 8002d64:	4608      	mov	r0, r1
 8002d66:	602a      	str	r2, [r5, #0]
 8002d68:	f000 f82a 	bl	8002dc0 <_isatty>
 8002d6c:	1c43      	adds	r3, r0, #1
 8002d6e:	d000      	beq.n	8002d72 <_isatty_r+0x16>
 8002d70:	bd38      	pop	{r3, r4, r5, pc}
 8002d72:	682b      	ldr	r3, [r5, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0fb      	beq.n	8002d70 <_isatty_r+0x14>
 8002d78:	6023      	str	r3, [r4, #0]
 8002d7a:	bd38      	pop	{r3, r4, r5, pc}
 8002d7c:	200002f4 	.word	0x200002f4

08002d80 <_malloc_usable_size_r>:
 8002d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d84:	1f18      	subs	r0, r3, #4
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	bfbc      	itt	lt
 8002d8a:	580b      	ldrlt	r3, [r1, r0]
 8002d8c:	18c0      	addlt	r0, r0, r3
 8002d8e:	4770      	bx	lr

08002d90 <_close>:
 8002d90:	4b02      	ldr	r3, [pc, #8]	@ (8002d9c <_close+0xc>)
 8002d92:	2258      	movs	r2, #88	@ 0x58
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	f04f 30ff 	mov.w	r0, #4294967295
 8002d9a:	4770      	bx	lr
 8002d9c:	200002f4 	.word	0x200002f4

08002da0 <_fstat>:
 8002da0:	4b02      	ldr	r3, [pc, #8]	@ (8002dac <_fstat+0xc>)
 8002da2:	2258      	movs	r2, #88	@ 0x58
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	f04f 30ff 	mov.w	r0, #4294967295
 8002daa:	4770      	bx	lr
 8002dac:	200002f4 	.word	0x200002f4

08002db0 <_getpid>:
 8002db0:	4b02      	ldr	r3, [pc, #8]	@ (8002dbc <_getpid+0xc>)
 8002db2:	2258      	movs	r2, #88	@ 0x58
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dba:	4770      	bx	lr
 8002dbc:	200002f4 	.word	0x200002f4

08002dc0 <_isatty>:
 8002dc0:	4b02      	ldr	r3, [pc, #8]	@ (8002dcc <_isatty+0xc>)
 8002dc2:	2258      	movs	r2, #88	@ 0x58
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	200002f4 	.word	0x200002f4

08002dd0 <_kill>:
 8002dd0:	4b02      	ldr	r3, [pc, #8]	@ (8002ddc <_kill+0xc>)
 8002dd2:	2258      	movs	r2, #88	@ 0x58
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dda:	4770      	bx	lr
 8002ddc:	200002f4 	.word	0x200002f4

08002de0 <_lseek>:
 8002de0:	4b02      	ldr	r3, [pc, #8]	@ (8002dec <_lseek+0xc>)
 8002de2:	2258      	movs	r2, #88	@ 0x58
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dea:	4770      	bx	lr
 8002dec:	200002f4 	.word	0x200002f4

08002df0 <_read>:
 8002df0:	4b02      	ldr	r3, [pc, #8]	@ (8002dfc <_read+0xc>)
 8002df2:	2258      	movs	r2, #88	@ 0x58
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfa:	4770      	bx	lr
 8002dfc:	200002f4 	.word	0x200002f4

08002e00 <_write>:
 8002e00:	4b02      	ldr	r3, [pc, #8]	@ (8002e0c <_write+0xc>)
 8002e02:	2258      	movs	r2, #88	@ 0x58
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	f04f 30ff 	mov.w	r0, #4294967295
 8002e0a:	4770      	bx	lr
 8002e0c:	200002f4 	.word	0x200002f4

08002e10 <_exit>:
 8002e10:	e7fe      	b.n	8002e10 <_exit>
 8002e12:	bf00      	nop

08002e14 <__do_global_dtors_aux>:
 8002e14:	b510      	push	{r4, lr}
 8002e16:	4c05      	ldr	r4, [pc, #20]	@ (8002e2c <__do_global_dtors_aux+0x18>)
 8002e18:	7823      	ldrb	r3, [r4, #0]
 8002e1a:	b933      	cbnz	r3, 8002e2a <__do_global_dtors_aux+0x16>
 8002e1c:	4b04      	ldr	r3, [pc, #16]	@ (8002e30 <__do_global_dtors_aux+0x1c>)
 8002e1e:	b113      	cbz	r3, 8002e26 <__do_global_dtors_aux+0x12>
 8002e20:	4804      	ldr	r0, [pc, #16]	@ (8002e34 <__do_global_dtors_aux+0x20>)
 8002e22:	f3af 8000 	nop.w
 8002e26:	2301      	movs	r3, #1
 8002e28:	7023      	strb	r3, [r4, #0]
 8002e2a:	bd10      	pop	{r4, pc}
 8002e2c:	20000315 	.word	0x20000315
 8002e30:	00000000 	.word	0x00000000
 8002e34:	08005c58 	.word	0x08005c58

08002e38 <frame_dummy>:
 8002e38:	b508      	push	{r3, lr}
 8002e3a:	4b03      	ldr	r3, [pc, #12]	@ (8002e48 <frame_dummy+0x10>)
 8002e3c:	b11b      	cbz	r3, 8002e46 <frame_dummy+0xe>
 8002e3e:	4903      	ldr	r1, [pc, #12]	@ (8002e4c <frame_dummy+0x14>)
 8002e40:	4803      	ldr	r0, [pc, #12]	@ (8002e50 <frame_dummy+0x18>)
 8002e42:	f3af 8000 	nop.w
 8002e46:	bd08      	pop	{r3, pc}
 8002e48:	00000000 	.word	0x00000000
 8002e4c:	20000318 	.word	0x20000318
 8002e50:	08005c58 	.word	0x08005c58

08002e54 <handle>:
/// This function will handle the 'p' command send from the capture board.
/// It returns the squared version of the scmd given.
/// It does this in approximately equal time, which allows us to see clear
/// differences between different scmd values.
uint8_t handle(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 8002e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e58:	b090      	sub	sp, #64	@ 0x40
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	603b      	str	r3, [r7, #0]
 8002e5e:	4603      	mov	r3, r0
 8002e60:	71fb      	strb	r3, [r7, #7]
 8002e62:	460b      	mov	r3, r1
 8002e64:	71bb      	strb	r3, [r7, #6]
 8002e66:	4613      	mov	r3, r2
 8002e68:	717b      	strb	r3, [r7, #5]
 8002e6a:	466b      	mov	r3, sp
 8002e6c:	469a      	mov	sl, r3
  volatile uint8_t result = 0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  int arr[4] = {7,5,4,2};
 8002e74:	4b60      	ldr	r3, [pc, #384]	@ (8002ff8 <handle+0x1a4>)
 8002e76:	f107 0610 	add.w	r6, r7, #16
 8002e7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e7c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  int return_string_len =  ((arr[1] + 1) * arr[0]) + 1;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	3301      	adds	r3, #1
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	fb02 f303 	mul.w	r3, r2, r3
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  char string[return_string_len];
 8002e8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e90:	1e4b      	subs	r3, r1, #1
 8002e92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e94:	460a      	mov	r2, r1
 8002e96:	2300      	movs	r3, #0
 8002e98:	4690      	mov	r8, r2
 8002e9a:	4699      	mov	r9, r3
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ea8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eb0:	460a      	mov	r2, r1
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	4614      	mov	r4, r2
 8002eb6:	461d      	mov	r5, r3
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	00eb      	lsls	r3, r5, #3
 8002ec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ec6:	00e2      	lsls	r2, r4, #3
 8002ec8:	460b      	mov	r3, r1
 8002eca:	3307      	adds	r3, #7
 8002ecc:	08db      	lsrs	r3, r3, #3
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	ebad 0d03 	sub.w	sp, sp, r3
 8002ed4:	466b      	mov	r3, sp
 8002ed6:	3300      	adds	r3, #0
 8002ed8:	627b      	str	r3, [r7, #36]	@ 0x24

  // expects an input of byte lenght, of number neurons in first layer
  for(int x = 0; x < arr[0]; x++){
 8002eda:	2300      	movs	r3, #0
 8002edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ede:	e011      	b.n	8002f04 <handle+0xb0>
      net->layers[0].neurons[x].a = (signed char)(buf[x]);
 8002ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	18d1      	adds	r1, r2, r3
 8002ee6:	4b45      	ldr	r3, [pc, #276]	@ (8002ffc <handle+0x1a8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	6858      	ldr	r0, [r3, #4]
 8002eee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4403      	add	r3, r0
 8002efa:	780a      	ldrb	r2, [r1, #0]
 8002efc:	729a      	strb	r2, [r3, #10]
  for(int x = 0; x < arr[0]; x++){
 8002efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f00:	3301      	adds	r3, #1
 8002f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	dbe9      	blt.n	8002ee0 <handle+0x8c>
  //}

  //int ****random_indices = generate_random_indices(net);

  // Start measurement.
  trigger_high();
 8002f0c:	f000 fe98 	bl	8003c40 <trigger_high>
  for(int x = 0;x<100;x++){
 8002f10:	2300      	movs	r3, #0
 8002f12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f14:	e003      	b.n	8002f1e <handle+0xca>
      __asm__("nop");
 8002f16:	bf00      	nop
  for(int x = 0;x<100;x++){
 8002f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f20:	2b63      	cmp	r3, #99	@ 0x63
 8002f22:	ddf8      	ble.n	8002f16 <handle+0xc2>
  }

  forward(*net,0);
 8002f24:	4b35      	ldr	r3, [pc, #212]	@ (8002ffc <handle+0x1a8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002f2e:	f000 f999 	bl	8003264 <forward>
  //forward_shuffled(net);
  //forward_shuffled_without_overhead(net, random_indices, 0);
  //forward_shuffled_without_overhead_activations_at_end(net, random_indices, 2);

  // Stop measurement.
  trigger_low();
 8002f32:	f000 fe90 	bl	8003c56 <trigger_low>

  // For now we can just return the result back to the user.
  result = scmd*scmd;
 8002f36:	79ba      	ldrb	r2, [r7, #6]
 8002f38:	79bb      	ldrb	r3, [r7, #6]
 8002f3a:	fb12 f303 	smulbb	r3, r2, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t buff[1] = { result };
 8002f44:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	733b      	strb	r3, [r7, #12]

  // char string[] = "Hello";
    for(int x = 0; x < arr[0]; x++){
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f50:	e037      	b.n	8002fc2 <handle+0x16e>
        for(int y = 0;y<arr[1];y++){
 8002f52:	2300      	movs	r3, #0
 8002f54:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f56:	e019      	b.n	8002f8c <handle+0x138>
            string[(x*(arr[1]+1)) + y] = net->layers[0].neurons[x].weights[y];
 8002f58:	4b28      	ldr	r3, [pc, #160]	@ (8002ffc <handle+0x1a8>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f62:	4613      	mov	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f70:	441a      	add	r2, r3
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	3301      	adds	r3, #1
 8002f76:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002f78:	fb03 f101 	mul.w	r1, r3, r1
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7e:	440b      	add	r3, r1
 8002f80:	7811      	ldrb	r1, [r2, #0]
 8002f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f84:	54d1      	strb	r1, [r2, r3]
        for(int y = 0;y<arr[1];y++){
 8002f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f88:	3301      	adds	r3, #1
 8002f8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f90:	429a      	cmp	r2, r3
 8002f92:	dbe1      	blt.n	8002f58 <handle+0x104>
        }
        string[(x*(arr[1]+1)) + arr[1]] = net->layers[0].neurons[x].bias;
 8002f94:	4b19      	ldr	r3, [pc, #100]	@ (8002ffc <handle+0x1a8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	6859      	ldr	r1, [r3, #4]
 8002f9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	18ca      	adds	r2, r1, r3
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	3301      	adds	r3, #1
 8002fac:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002fae:	fb03 f101 	mul.w	r1, r3, r1
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	440b      	add	r3, r1
 8002fb6:	7a11      	ldrb	r1, [r2, #8]
 8002fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fba:	54d1      	strb	r1, [r2, r3]
    for(int x = 0; x < arr[0]; x++){
 8002fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	dbc3      	blt.n	8002f52 <handle+0xfe>
    }
    string[return_string_len - 1] = 0;
 8002fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	54d1      	strb	r1, [r2, r3]
    uint8_t return_len = return_string_len;
 8002fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  simpleserial_put('r', return_len, string);
 8002fda:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	2072      	movs	r0, #114	@ 0x72
 8002fe4:	f000 fcbe 	bl	8003964 <simpleserial_put>

  return 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	46d5      	mov	sp, sl
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3740      	adds	r7, #64	@ 0x40
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ff6:	bf00      	nop
 8002ff8:	08005c70 	.word	0x08005c70
 8002ffc:	2000006c 	.word	0x2000006c

08003000 <main>:

int main(void) {
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
    // Setup the specific chipset.
  platform_init();
 8003006:	f000 fd4d 	bl	8003aa4 <platform_init>
  // Setup serial communication line.
  init_uart();
 800300a:	f000 fd9d 	bl	8003b48 <init_uart>
  // Setup measurement trigger.
  trigger_setup();
 800300e:	f000 fdeb 	bl	8003be8 <trigger_setup>

  simpleserial_init();
 8003012:	f000 fb1b 	bl	800364c <simpleserial_init>

  // Insert your handlers here.
  simpleserial_addcmd('p', 16, handle);
 8003016:	4a0e      	ldr	r2, [pc, #56]	@ (8003050 <main+0x50>)
 8003018:	2110      	movs	r1, #16
 800301a:	2070      	movs	r0, #112	@ 0x70
 800301c:	f000 fb28 	bl	8003670 <simpleserial_addcmd>

  arr[0] = 7;
 8003020:	4b0c      	ldr	r3, [pc, #48]	@ (8003054 <main+0x54>)
 8003022:	2207      	movs	r2, #7
 8003024:	601a      	str	r2, [r3, #0]
  arr[1] = 5;
 8003026:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <main+0x54>)
 8003028:	2205      	movs	r2, #5
 800302a:	605a      	str	r2, [r3, #4]
  arr[2] = 4;
 800302c:	4b09      	ldr	r3, [pc, #36]	@ (8003054 <main+0x54>)
 800302e:	2204      	movs	r2, #4
 8003030:	609a      	str	r2, [r3, #8]
  arr[3] = 2;
 8003032:	4b08      	ldr	r3, [pc, #32]	@ (8003054 <main+0x54>)
 8003034:	2202      	movs	r2, #2
 8003036:	60da      	str	r2, [r3, #12]
  network ann = construct_quantized_network2(4,arr);
 8003038:	463b      	mov	r3, r7
 800303a:	4a06      	ldr	r2, [pc, #24]	@ (8003054 <main+0x54>)
 800303c:	2104      	movs	r1, #4
 800303e:	4618      	mov	r0, r3
 8003040:	f000 f879 	bl	8003136 <construct_quantized_network2>
  net = &ann;
 8003044:	4a04      	ldr	r2, [pc, #16]	@ (8003058 <main+0x58>)
 8003046:	463b      	mov	r3, r7
 8003048:	6013      	str	r3, [r2, #0]
  // What for the capture board to send commands and handle them.
  while (1)
    simpleserial_get();
 800304a:	f000 fb57 	bl	80036fc <simpleserial_get>
 800304e:	e7fc      	b.n	800304a <main+0x4a>
 8003050:	08002e55 	.word	0x08002e55
 8003054:	20000000 	.word	0x20000000
 8003058:	2000006c 	.word	0x2000006c

0800305c <quantized_create_neuron>:
    return new_neuron;
}



neuron quantized_create_neuron(int num_out_weights){
 800305c:	b590      	push	{r4, r7, lr}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
    neuron new_neuron;
    new_neuron.bias = 0;
 8003066:	2300      	movs	r3, #0
 8003068:	743b      	strb	r3, [r7, #16]
    new_neuron.z = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	747b      	strb	r3, [r7, #17]
    new_neuron.a = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	74bb      	strb	r3, [r7, #18]
    new_neuron.weights = (char*) malloc(num_out_weights * sizeof(char));
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fd ffc3 	bl	8001000 <malloc>
 800307a:	4603      	mov	r3, r0
 800307c:	60fb      	str	r3, [r7, #12]
    new_neuron.num_weights = num_out_weights;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	60bb      	str	r3, [r7, #8]

    for (int i=0; i<num_out_weights; i++){
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	e00f      	b.n	80030a8 <quantized_create_neuron+0x4c>
        new_neuron.weights[i] = (signed char)(rand() % 256);
 8003088:	f7fe f8a8 	bl	80011dc <rand>
 800308c:	4603      	mov	r3, r0
 800308e:	425a      	negs	r2, r3
 8003090:	b2db      	uxtb	r3, r3
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	bf58      	it	pl
 8003096:	4253      	negpl	r3, r2
 8003098:	68f9      	ldr	r1, [r7, #12]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	440a      	add	r2, r1
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	7013      	strb	r3, [r2, #0]
    for (int i=0; i<num_out_weights; i++){
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	3301      	adds	r3, #1
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	dbeb      	blt.n	8003088 <quantized_create_neuron+0x2c>
    }
    return new_neuron;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	461c      	mov	r4, r3
 80030b4:	f107 0308 	add.w	r3, r7, #8
 80030b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80030bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	371c      	adds	r7, #28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd90      	pop	{r4, r7, pc}

080030c8 <create_layer>:



layer create_layer(int num_neurons){
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
    layer lay;
    lay.num_neurons = num_neurons;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	60bb      	str	r3, [r7, #8]
    lay.neurons = (neuron*) malloc(num_neurons * sizeof(neuron));
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	4613      	mov	r3, r2
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fd ff8d 	bl	8001000 <malloc>
 80030e6:	4603      	mov	r3, r0
 80030e8:	60fb      	str	r3, [r7, #12]
    return lay;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	461a      	mov	r2, r3
 80030ee:	f107 0308 	add.w	r3, r7, #8
 80030f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80030f6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <create_network>:

network create_network(int num_layers){
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	6039      	str	r1, [r7, #0]
    network net;
    net.num_layers = num_layers;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	60bb      	str	r3, [r7, #8]
    net.layers = (layer*) malloc(num_layers * sizeof(layer));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4618      	mov	r0, r3
 8003116:	f7fd ff73 	bl	8001000 <malloc>
 800311a:	4603      	mov	r3, r0
 800311c:	60fb      	str	r3, [r7, #12]
    return net;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	461a      	mov	r2, r3
 8003122:	f107 0308 	add.w	r3, r7, #8
 8003126:	e893 0003 	ldmia.w	r3, {r0, r1}
 800312a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <construct_quantized_network2>:
    return net;
}



network construct_quantized_network2(int num_layers, int *num_neurons) {
 8003136:	b590      	push	{r4, r7, lr}
 8003138:	b08b      	sub	sp, #44	@ 0x2c
 800313a:	af00      	add	r7, sp, #0
 800313c:	6178      	str	r0, [r7, #20]
 800313e:	6139      	str	r1, [r7, #16]
 8003140:	60fa      	str	r2, [r7, #12]
    network net = create_network(num_layers);
 8003142:	f107 0318 	add.w	r3, r7, #24
 8003146:	6939      	ldr	r1, [r7, #16]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff ffda 	bl	8003102 <create_network>
    int i, j;
    for (i=0; i<num_layers; i++){
 800314e:	2300      	movs	r3, #0
 8003150:	627b      	str	r3, [r7, #36]	@ 0x24
 8003152:	e015      	b.n	8003180 <construct_quantized_network2+0x4a>
        net.layers[i] = create_layer(num_neurons[i]);
 8003154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	6819      	ldr	r1, [r3, #0]
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	18d4      	adds	r4, r2, r3
 8003166:	463b      	mov	r3, r7
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff ffad 	bl	80030c8 <create_layer>
 800316e:	4622      	mov	r2, r4
 8003170:	463b      	mov	r3, r7
 8003172:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003176:	e882 0003 	stmia.w	r2, {r0, r1}
    for (i=0; i<num_layers; i++){
 800317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317c:	3301      	adds	r3, #1
 800317e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	429a      	cmp	r2, r3
 8003186:	dbe5      	blt.n	8003154 <construct_quantized_network2+0x1e>
    }
    // For each layer create neurons with number of weights eqaual to the number of neurons in the following layer,
    // wherein the last layer is the output layer
    for (i=1; i<num_layers; i++){
 8003188:	2301      	movs	r3, #1
 800318a:	627b      	str	r3, [r7, #36]	@ 0x24
 800318c:	e030      	b.n	80031f0 <construct_quantized_network2+0xba>
        for (j=0; j<net.layers[i - 1].num_neurons; j++){
 800318e:	2300      	movs	r3, #0
 8003190:	623b      	str	r3, [r7, #32]
 8003192:	e01f      	b.n	80031d4 <construct_quantized_network2+0x9e>
            net.layers[i - 1].neurons[j] = quantized_create_neuron(net.layers[i].num_neurons);
 8003194:	69fa      	ldr	r2, [r7, #28]
 8003196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4413      	add	r3, r2
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	69fa      	ldr	r2, [r7, #28]
 80031a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a2:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80031a6:	3b01      	subs	r3, #1
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4413      	add	r3, r2
 80031ac:	6859      	ldr	r1, [r3, #4]
 80031ae:	6a3a      	ldr	r2, [r7, #32]
 80031b0:	4613      	mov	r3, r2
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	18cc      	adds	r4, r1, r3
 80031ba:	463b      	mov	r3, r7
 80031bc:	4601      	mov	r1, r0
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff ff4c 	bl	800305c <quantized_create_neuron>
 80031c4:	463b      	mov	r3, r7
 80031c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        for (j=0; j<net.layers[i - 1].num_neurons; j++){
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	3301      	adds	r3, #1
 80031d2:	623b      	str	r3, [r7, #32]
 80031d4:	69fa      	ldr	r2, [r7, #28]
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80031dc:	3b01      	subs	r3, #1
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	4413      	add	r3, r2
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6a3a      	ldr	r2, [r7, #32]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	dbd4      	blt.n	8003194 <construct_quantized_network2+0x5e>
    for (i=1; i<num_layers; i++){
 80031ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ec:	3301      	adds	r3, #1
 80031ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80031f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	dbca      	blt.n	800318e <construct_quantized_network2+0x58>
        }
    }
    for (j=0; j<net.layers[num_layers - 1].num_neurons; j++){
 80031f8:	2300      	movs	r3, #0
 80031fa:	623b      	str	r3, [r7, #32]
 80031fc:	e01a      	b.n	8003234 <construct_quantized_network2+0xfe>
            net.layers[num_layers - 1].neurons[j] = quantized_create_neuron(0);
 80031fe:	69fa      	ldr	r2, [r7, #28]
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8003206:	3b01      	subs	r3, #1
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	4413      	add	r3, r2
 800320c:	6859      	ldr	r1, [r3, #4]
 800320e:	6a3a      	ldr	r2, [r7, #32]
 8003210:	4613      	mov	r3, r2
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	4413      	add	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	18cc      	adds	r4, r1, r3
 800321a:	463b      	mov	r3, r7
 800321c:	2100      	movs	r1, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff ff1c 	bl	800305c <quantized_create_neuron>
 8003224:	463b      	mov	r3, r7
 8003226:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800322a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    for (j=0; j<net.layers[num_layers - 1].num_neurons; j++){
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	3301      	adds	r3, #1
 8003232:	623b      	str	r3, [r7, #32]
 8003234:	69fa      	ldr	r2, [r7, #28]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800323c:	3b01      	subs	r3, #1
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6a3a      	ldr	r2, [r7, #32]
 8003246:	429a      	cmp	r2, r3
 8003248:	dbd9      	blt.n	80031fe <construct_quantized_network2+0xc8>
    }
    return net;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	461a      	mov	r2, r3
 800324e:	f107 0318 	add.w	r3, r7, #24
 8003252:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003256:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800325a:	6978      	ldr	r0, [r7, #20]
 800325c:	372c      	adds	r7, #44	@ 0x2c
 800325e:	46bd      	mov	sp, r7
 8003260:	bd90      	pop	{r4, r7, pc}
 8003262:	0000      	movs	r0, r0

08003264 <forward>:

void forward(network net, int dummy_operations){
 8003264:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8003268:	b08b      	sub	sp, #44	@ 0x2c
 800326a:	af00      	add	r7, sp, #0
 800326c:	f107 0308 	add.w	r3, r7, #8
 8003270:	e883 0003 	stmia.w	r3, {r0, r1}
 8003274:	607a      	str	r2, [r7, #4]
    int i, j, k;
    uint8_t result, scmd = 16;
 8003276:	2310      	movs	r3, #16
 8003278:	76fb      	strb	r3, [r7, #27]
    // for each layer
    for (i=1; i<net.num_layers; i++){
 800327a:	2301      	movs	r3, #1
 800327c:	627b      	str	r3, [r7, #36]	@ 0x24
 800327e:	e101      	b.n	8003484 <forward+0x220>
        
        // for each neuron in this layer
        for (j=0; j<net.layers[i].num_neurons; j++){   
 8003280:	2300      	movs	r3, #0
 8003282:	623b      	str	r3, [r7, #32]
 8003284:	e0d7      	b.n	8003436 <forward+0x1d2>
            net.layers[i].neurons[j].z = net.layers[i].neurons[j].bias;
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4413      	add	r3, r2
 800328e:	6859      	ldr	r1, [r3, #4]
 8003290:	6a3a      	ldr	r2, [r7, #32]
 8003292:	4613      	mov	r3, r2
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4419      	add	r1, r3
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4413      	add	r3, r2
 80032a4:	6858      	ldr	r0, [r3, #4]
 80032a6:	6a3a      	ldr	r2, [r7, #32]
 80032a8:	4613      	mov	r3, r2
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4403      	add	r3, r0
 80032b2:	7a0a      	ldrb	r2, [r1, #8]
 80032b4:	725a      	strb	r2, [r3, #9]

            // for all neurons on the previous layer
            for (k=0; k<net.layers[i - 1].num_neurons; k++){
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	e040      	b.n	800333e <forward+0xda>
                net.layers[i].neurons[j].z = net.layers[i].neurons[j].z +
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4413      	add	r3, r2
 80032c4:	6859      	ldr	r1, [r3, #4]
 80032c6:	6a3a      	ldr	r2, [r7, #32]
 80032c8:	4613      	mov	r3, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	7a58      	ldrb	r0, [r3, #9]
                ((net.layers[i-1].neurons[k].weights[j]) * (net.layers[i-1].neurons[k].a));
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d8:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80032dc:	3b01      	subs	r3, #1
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4413      	add	r3, r2
 80032e2:	6859      	ldr	r1, [r3, #4]
 80032e4:	69fa      	ldr	r2, [r7, #28]
 80032e6:	4613      	mov	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	4413      	add	r3, r2
 80032f6:	7819      	ldrb	r1, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fc:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8003300:	3b01      	subs	r3, #1
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4413      	add	r3, r2
 8003306:	685c      	ldr	r4, [r3, #4]
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	4613      	mov	r3, r2
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4423      	add	r3, r4
 8003314:	7a9b      	ldrb	r3, [r3, #10]
 8003316:	fb11 f303 	smulbb	r3, r1, r3
 800331a:	b2d9      	uxtb	r1, r3
                net.layers[i].neurons[j].z = net.layers[i].neurons[j].z +
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4413      	add	r3, r2
 8003324:	685c      	ldr	r4, [r3, #4]
 8003326:	6a3a      	ldr	r2, [r7, #32]
 8003328:	4613      	mov	r3, r2
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4423      	add	r3, r4
 8003332:	1842      	adds	r2, r0, r1
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	725a      	strb	r2, [r3, #9]
            for (k=0; k<net.layers[i - 1].num_neurons; k++){
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	3301      	adds	r3, #1
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003342:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8003346:	3b01      	subs	r3, #1
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4413      	add	r3, r2
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	429a      	cmp	r2, r3
 8003352:	dbb3      	blt.n	80032bc <forward+0x58>
                // We are looking for THIS MULTIPLICATION
            }
            //get a values
            net.layers[i].neurons[j].a = net.layers[i].neurons[j].z;
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4413      	add	r3, r2
 800335c:	6859      	ldr	r1, [r3, #4]
 800335e:	6a3a      	ldr	r2, [r7, #32]
 8003360:	4613      	mov	r3, r2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	4413      	add	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4419      	add	r1, r3
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4413      	add	r3, r2
 8003372:	6858      	ldr	r0, [r3, #4]
 8003374:	6a3a      	ldr	r2, [r7, #32]
 8003376:	4613      	mov	r3, r2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	4413      	add	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4403      	add	r3, r0
 8003380:	7a4a      	ldrb	r2, [r1, #9]
 8003382:	729a      	strb	r2, [r3, #10]
            //apply relu
            if(i < net.num_layers-1){
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	3b01      	subs	r3, #1
 8003388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800338a:	429a      	cmp	r2, r3
 800338c:	da18      	bge.n	80033c0 <forward+0x15c>
                    net.layers[i].neurons[j].a = 0;
                }

                else
                {
                    net.layers[i].neurons[j].a = net.layers[i].neurons[j].z;
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4413      	add	r3, r2
 8003396:	6859      	ldr	r1, [r3, #4]
 8003398:	6a3a      	ldr	r2, [r7, #32]
 800339a:	4613      	mov	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4419      	add	r1, r3
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4413      	add	r3, r2
 80033ac:	6858      	ldr	r0, [r3, #4]
 80033ae:	6a3a      	ldr	r2, [r7, #32]
 80033b0:	4613      	mov	r3, r2
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4403      	add	r3, r0
 80033ba:	7a4a      	ldrb	r2, [r1, #9]
 80033bc:	729a      	strb	r2, [r3, #10]
 80033be:	e037      	b.n	8003430 <forward+0x1cc>
                }
            }
            //apply sigmoid to the last layer
            else{
                net.layers[i].neurons[j].a = 1/(1+exp(-net.layers[i].neurons[j].z));
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	4413      	add	r3, r2
 80033c8:	6859      	ldr	r1, [r3, #4]
 80033ca:	6a3a      	ldr	r2, [r7, #32]
 80033cc:	4613      	mov	r3, r2
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	7a5b      	ldrb	r3, [r3, #9]
 80033d8:	425b      	negs	r3, r3
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd faae 	bl	800093c <__aeabi_i2d>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4610      	mov	r0, r2
 80033e6:	4619      	mov	r1, r3
 80033e8:	f7fc fed2 	bl	8000190 <exp>
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	4b2a      	ldr	r3, [pc, #168]	@ (800349c <forward+0x238>)
 80033f2:	f7fd f957 	bl	80006a4 <__adddf3>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	f04f 0000 	mov.w	r0, #0
 80033fe:	4927      	ldr	r1, [pc, #156]	@ (800349c <forward+0x238>)
 8003400:	f7fd fc30 	bl	8000c64 <__aeabi_ddiv>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4690      	mov	r8, r2
 800340a:	4699      	mov	r9, r3
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4413      	add	r3, r2
 8003414:	6859      	ldr	r1, [r3, #4]
 8003416:	6a3a      	ldr	r2, [r7, #32]
 8003418:	4613      	mov	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	18cc      	adds	r4, r1, r3
 8003422:	4640      	mov	r0, r8
 8003424:	4649      	mov	r1, r9
 8003426:	f7fd fdcb 	bl	8000fc0 <__aeabi_d2uiz>
 800342a:	4603      	mov	r3, r0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	72a3      	strb	r3, [r4, #10]
        for (j=0; j<net.layers[i].num_neurons; j++){   
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	3301      	adds	r3, #1
 8003434:	623b      	str	r3, [r7, #32]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	4413      	add	r3, r2
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6a3a      	ldr	r2, [r7, #32]
 8003442:	429a      	cmp	r2, r3
 8003444:	f6ff af1f 	blt.w	8003286 <forward+0x22>
            }
        }
        //OPTIONAL DUMMY OPERATIONS
        if (dummy_operations > 0){
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	dd17      	ble.n	800347e <forward+0x21a>
            for (volatile int dummy_i = 0; dummy_i<10; dummy_i++) {
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	e011      	b.n	8003478 <forward+0x214>
                result = scmd *scmd;
 8003454:	7efa      	ldrb	r2, [r7, #27]
 8003456:	7efb      	ldrb	r3, [r7, #27]
 8003458:	fb12 f303 	smulbb	r3, r2, r3
 800345c:	76bb      	strb	r3, [r7, #26]
                result = scmd *scmd;
 800345e:	7efa      	ldrb	r2, [r7, #27]
 8003460:	7efb      	ldrb	r3, [r7, #27]
 8003462:	fb12 f303 	smulbb	r3, r2, r3
 8003466:	76bb      	strb	r3, [r7, #26]
                result = scmd *scmd;
 8003468:	7efa      	ldrb	r2, [r7, #27]
 800346a:	7efb      	ldrb	r3, [r7, #27]
 800346c:	fb12 f303 	smulbb	r3, r2, r3
 8003470:	76bb      	strb	r3, [r7, #26]
            for (volatile int dummy_i = 0; dummy_i<10; dummy_i++) {
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	3301      	adds	r3, #1
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2b09      	cmp	r3, #9
 800347c:	ddea      	ble.n	8003454 <forward+0x1f0>
    for (i=1; i<net.num_layers; i++){
 800347e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003480:	3301      	adds	r3, #1
 8003482:	627b      	str	r3, [r7, #36]	@ 0x24
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003488:	429a      	cmp	r2, r3
 800348a:	f6ff aef9 	blt.w	8003280 <forward+0x1c>
            }
        }
    }
}
 800348e:	bf00      	nop
 8003490:	bf00      	nop
 8003492:	372c      	adds	r7, #44	@ 0x2c
 8003494:	46bd      	mov	sp, r7
 8003496:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 800349a:	bf00      	nop
 800349c:	3ff00000 	.word	0x3ff00000

080034a0 <ss_crc>:


// 0xA6 formerly 
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	70fb      	strb	r3, [r7, #3]
	unsigned int k = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
	uint8_t crc = 0x00;
 80034b0:	2300      	movs	r3, #0
 80034b2:	72fb      	strb	r3, [r7, #11]
	while (len--) {
 80034b4:	e01f      	b.n	80034f6 <ss_crc+0x56>
		crc ^= *buf++;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	781a      	ldrb	r2, [r3, #0]
 80034be:	7afb      	ldrb	r3, [r7, #11]
 80034c0:	4053      	eors	r3, r2
 80034c2:	72fb      	strb	r3, [r7, #11]
		for (k = 0; k < 8; k++) {
 80034c4:	2300      	movs	r3, #0
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	e012      	b.n	80034f0 <ss_crc+0x50>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 80034ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	da07      	bge.n	80034e2 <ss_crc+0x42>
 80034d2:	7afb      	ldrb	r3, [r7, #11]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	b25b      	sxtb	r3, r3
 80034d8:	f083 034d 	eor.w	r3, r3, #77	@ 0x4d
 80034dc:	b25b      	sxtb	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	e002      	b.n	80034e8 <ss_crc+0x48>
 80034e2:	7afb      	ldrb	r3, [r7, #11]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	72fb      	strb	r3, [r7, #11]
		for (k = 0; k < 8; k++) {
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	3301      	adds	r3, #1
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b07      	cmp	r3, #7
 80034f4:	d9e9      	bls.n	80034ca <ss_crc+0x2a>
	while (len--) {
 80034f6:	78fb      	ldrb	r3, [r7, #3]
 80034f8:	1e5a      	subs	r2, r3, #1
 80034fa:	70fa      	strb	r2, [r7, #3]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1da      	bne.n	80034b6 <ss_crc+0x16>
		}
	}
	return crc;
 8003500:	7afb      	ldrb	r3, [r7, #11]

}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr

0800350c <check_version>:
}

#define FRAME_BYTE 0x00

uint8_t check_version(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *data)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	4603      	mov	r3, r0
 8003516:	71fb      	strb	r3, [r7, #7]
 8003518:	460b      	mov	r3, r1
 800351a:	71bb      	strb	r3, [r7, #6]
 800351c:	4613      	mov	r3, r2
 800351e:	717b      	strb	r3, [r7, #5]
	uint8_t ver = SS_VER;
 8003520:	2303      	movs	r3, #3
 8003522:	73fb      	strb	r3, [r7, #15]
	simpleserial_put('r', 1, &ver);
 8003524:	f107 030f 	add.w	r3, r7, #15
 8003528:	461a      	mov	r2, r3
 800352a:	2101      	movs	r1, #1
 800352c:	2072      	movs	r0, #114	@ 0x72
 800352e:	f000 fa19 	bl	8003964 <simpleserial_put>
	return SS_ERR_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <ss_get_commands>:

uint8_t ss_get_commands(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *data)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b088      	sub	sp, #32
 8003540:	af00      	add	r7, sp, #0
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	4603      	mov	r3, r0
 8003546:	71fb      	strb	r3, [r7, #7]
 8003548:	460b      	mov	r3, r1
 800354a:	71bb      	strb	r3, [r7, #6]
 800354c:	4613      	mov	r3, r2
 800354e:	717b      	strb	r3, [r7, #5]
    uint8_t cmd_chars[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8003550:	2300      	movs	r3, #0
 8003552:	77fb      	strb	r3, [r7, #31]
 8003554:	e010      	b.n	8003578 <ss_get_commands+0x3c>
        cmd_chars[i] = commands[i].c;
 8003556:	7ffa      	ldrb	r2, [r7, #31]
 8003558:	7ff9      	ldrb	r1, [r7, #31]
 800355a:	4811      	ldr	r0, [pc, #68]	@ (80035a0 <ss_get_commands+0x64>)
 800355c:	4613      	mov	r3, r2
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4403      	add	r3, r0
 8003566:	781a      	ldrb	r2, [r3, #0]
 8003568:	f101 0320 	add.w	r3, r1, #32
 800356c:	443b      	add	r3, r7
 800356e:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8003572:	7ffb      	ldrb	r3, [r7, #31]
 8003574:	3301      	adds	r3, #1
 8003576:	77fb      	strb	r3, [r7, #31]
 8003578:	7ffa      	ldrb	r2, [r7, #31]
 800357a:	4b0a      	ldr	r3, [pc, #40]	@ (80035a4 <ss_get_commands+0x68>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	b2db      	uxtb	r3, r3
 8003580:	429a      	cmp	r2, r3
 8003582:	dbe8      	blt.n	8003556 <ss_get_commands+0x1a>
    }

    simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 8003584:	4b07      	ldr	r3, [pc, #28]	@ (80035a4 <ss_get_commands+0x68>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	f107 020c 	add.w	r2, r7, #12
 800358e:	4619      	mov	r1, r3
 8003590:	2072      	movs	r0, #114	@ 0x72
 8003592:	f000 f9e7 	bl	8003964 <simpleserial_put>
    return 0x00;
 8003596:	2300      	movs	r3, #0

}
 8003598:	4618      	mov	r0, r3
 800359a:	3720      	adds	r7, #32
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	20000074 	.word	0x20000074
 80035a4:	20000070 	.word	0x20000070

080035a8 <stuff_data>:

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 1;
 80035b4:	2301      	movs	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
	uint8_t last = 0;
 80035b8:	2300      	movs	r3, #0
 80035ba:	73bb      	strb	r3, [r7, #14]
	for (; i < len; i++) {
 80035bc:	e012      	b.n	80035e4 <stuff_data+0x3c>
		if (buf[i] == FRAME_BYTE) {
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	4413      	add	r3, r2
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <stuff_data+0x36>
			buf[last] = i - last;
 80035ca:	7bbb      	ldrb	r3, [r7, #14]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	4413      	add	r3, r2
 80035d0:	7bf9      	ldrb	r1, [r7, #15]
 80035d2:	7bba      	ldrb	r2, [r7, #14]
 80035d4:	1a8a      	subs	r2, r1, r2
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	701a      	strb	r2, [r3, #0]
			last = i;
 80035da:	7bfb      	ldrb	r3, [r7, #15]
 80035dc:	73bb      	strb	r3, [r7, #14]
	for (; i < len; i++) {
 80035de:	7bfb      	ldrb	r3, [r7, #15]
 80035e0:	3301      	adds	r3, #1
 80035e2:	73fb      	strb	r3, [r7, #15]
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	78fb      	ldrb	r3, [r7, #3]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d3e8      	bcc.n	80035be <stuff_data+0x16>
		}
	}
	return 0x00;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	70fb      	strb	r3, [r7, #3]
	uint8_t next = buf[0];
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	73fb      	strb	r3, [r7, #15]
	buf[0] = 0x00;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]
	//len -= 1;
	uint8_t tmp = next;
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	73bb      	strb	r3, [r7, #14]
	while ((next < len) && tmp != 0) {
 8003614:	e00d      	b.n	8003632 <unstuff_data+0x3a>
		tmp = buf[next];
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	4413      	add	r3, r2
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	73bb      	strb	r3, [r7, #14]
		buf[next] = FRAME_BYTE;
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	4413      	add	r3, r2
 8003626:	2200      	movs	r2, #0
 8003628:	701a      	strb	r2, [r3, #0]
		next += tmp;
 800362a:	7bfa      	ldrb	r2, [r7, #15]
 800362c:	7bbb      	ldrb	r3, [r7, #14]
 800362e:	4413      	add	r3, r2
 8003630:	73fb      	strb	r3, [r7, #15]
	while ((next < len) && tmp != 0) {
 8003632:	7bfa      	ldrb	r2, [r7, #15]
 8003634:	78fb      	ldrb	r3, [r7, #3]
 8003636:	429a      	cmp	r2, r3
 8003638:	d202      	bcs.n	8003640 <unstuff_data+0x48>
 800363a:	7bbb      	ldrb	r3, [r7, #14]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1ea      	bne.n	8003616 <unstuff_data+0x1e>
	}
	return next;
 8003640:	7bfb      	ldrb	r3, [r7, #15]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <simpleserial_init>:

// Set up the SimpleSerial module by preparing internal commands
// This just adds the "v" command for now...
void simpleserial_init()
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
	simpleserial_addcmd('v', 0, check_version);
 8003650:	4a05      	ldr	r2, [pc, #20]	@ (8003668 <simpleserial_init+0x1c>)
 8003652:	2100      	movs	r1, #0
 8003654:	2076      	movs	r0, #118	@ 0x76
 8003656:	f000 f80b 	bl	8003670 <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 800365a:	4a04      	ldr	r2, [pc, #16]	@ (800366c <simpleserial_init+0x20>)
 800365c:	2100      	movs	r1, #0
 800365e:	2077      	movs	r0, #119	@ 0x77
 8003660:	f000 f806 	bl	8003670 <simpleserial_addcmd>
}
 8003664:	bf00      	nop
 8003666:	bd80      	pop	{r7, pc}
 8003668:	0800350d 	.word	0x0800350d
 800366c:	0800353d 	.word	0x0800353d

08003670 <simpleserial_addcmd>:

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	73fb      	strb	r3, [r7, #15]
	if(num_commands >= MAX_SS_CMDS) {
 800367e:	4b1d      	ldr	r3, [pc, #116]	@ (80036f4 <simpleserial_addcmd+0x84>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b0f      	cmp	r3, #15
 8003684:	dd04      	ble.n	8003690 <simpleserial_addcmd+0x20>
		putch('a');
 8003686:	2061      	movs	r0, #97	@ 0x61
 8003688:	f000 fb0e 	bl	8003ca8 <putch>
		return 1;
 800368c:	2301      	movs	r3, #1
 800368e:	e02d      	b.n	80036ec <simpleserial_addcmd+0x7c>
	}

	if(len >= MAX_SS_LEN) {
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2bff      	cmp	r3, #255	@ 0xff
 8003694:	d904      	bls.n	80036a0 <simpleserial_addcmd+0x30>
		putch('b');
 8003696:	2062      	movs	r0, #98	@ 0x62
 8003698:	f000 fb06 	bl	8003ca8 <putch>
		return 1;
 800369c:	2301      	movs	r3, #1
 800369e:	e025      	b.n	80036ec <simpleserial_addcmd+0x7c>
	}

	commands[num_commands].c   = c;
 80036a0:	4b14      	ldr	r3, [pc, #80]	@ (80036f4 <simpleserial_addcmd+0x84>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	4914      	ldr	r1, [pc, #80]	@ (80036f8 <simpleserial_addcmd+0x88>)
 80036a6:	4613      	mov	r3, r2
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	4413      	add	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	7bfa      	ldrb	r2, [r7, #15]
 80036b2:	701a      	strb	r2, [r3, #0]
	commands[num_commands].len = len;
 80036b4:	4b0f      	ldr	r3, [pc, #60]	@ (80036f4 <simpleserial_addcmd+0x84>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	490f      	ldr	r1, [pc, #60]	@ (80036f8 <simpleserial_addcmd+0x88>)
 80036ba:	4613      	mov	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	3304      	adds	r3, #4
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	601a      	str	r2, [r3, #0]
	commands[num_commands].fp  = fp;
 80036ca:	4b0a      	ldr	r3, [pc, #40]	@ (80036f4 <simpleserial_addcmd+0x84>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	490a      	ldr	r1, [pc, #40]	@ (80036f8 <simpleserial_addcmd+0x88>)
 80036d0:	4613      	mov	r3, r2
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	3308      	adds	r3, #8
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	601a      	str	r2, [r3, #0]
	num_commands++;
 80036e0:	4b04      	ldr	r3, [pc, #16]	@ (80036f4 <simpleserial_addcmd+0x84>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3301      	adds	r3, #1
 80036e6:	4a03      	ldr	r2, [pc, #12]	@ (80036f4 <simpleserial_addcmd+0x84>)
 80036e8:	6013      	str	r3, [r2, #0]

	return 0;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	20000070 	.word	0x20000070
 80036f8:	20000074 	.word	0x20000074

080036fc <simpleserial_get>:

void simpleserial_get(void)
{
 80036fc:	b590      	push	{r4, r7, lr}
 80036fe:	b0c7      	sub	sp, #284	@ 0x11c
 8003700:	af00      	add	r7, sp, #0
	uint8_t data_buf[MAX_SS_LEN];
	uint8_t err = 0;
 8003702:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003706:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800370a:	2200      	movs	r2, #0
 800370c:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 4; i++) {
 800370e:	2300      	movs	r3, #0
 8003710:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003714:	e022      	b.n	800375c <simpleserial_get+0x60>
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 8003716:	f000 faa9 	bl	8003c6c <getch>
 800371a:	4603      	mov	r3, r0
 800371c:	4619      	mov	r1, r3
 800371e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003722:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8003726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800372a:	4413      	add	r3, r2
 800372c:	460a      	mov	r2, r1
 800372e:	701a      	strb	r2, [r3, #0]
		if (data_buf[i] == FRAME_BYTE) {
 8003730:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003734:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8003738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373c:	4413      	add	r3, r2
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d106      	bne.n	8003752 <simpleserial_get+0x56>
			err = SS_ERR_FRAME_BYTE;
 8003744:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003748:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800374c:	2205      	movs	r2, #5
 800374e:	701a      	strb	r2, [r3, #0]
			goto ERROR;
 8003750:	e0f9      	b.n	8003946 <simpleserial_get+0x24a>
	for (int i = 0; i < 4; i++) {
 8003752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003756:	3301      	adds	r3, #1
 8003758:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800375c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003760:	2b03      	cmp	r3, #3
 8003762:	ddd8      	ble.n	8003716 <simpleserial_get+0x1a>
		}
	}
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8003764:	f107 0308 	add.w	r3, r7, #8
 8003768:	2104      	movs	r1, #4
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff ff44 	bl	80035f8 <unstuff_data>
 8003770:	4603      	mov	r3, r0
 8003772:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b

	// check for valid command
	uint8_t c = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
	for(c = 0; c < num_commands; c++)
 800377c:	2300      	movs	r3, #0
 800377e:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 8003782:	e014      	b.n	80037ae <simpleserial_get+0xb2>
	{
		if(commands[c].c == data_buf[1])
 8003784:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 8003788:	4974      	ldr	r1, [pc, #464]	@ (800395c <simpleserial_get+0x260>)
 800378a:	4613      	mov	r3, r2
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	781a      	ldrb	r2, [r3, #0]
 8003796:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800379a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800379e:	785b      	ldrb	r3, [r3, #1]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d00b      	beq.n	80037bc <simpleserial_get+0xc0>
	for(c = 0; c < num_commands; c++)
 80037a4:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 80037a8:	3301      	adds	r3, #1
 80037aa:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 80037ae:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 80037b2:	4b6b      	ldr	r3, [pc, #428]	@ (8003960 <simpleserial_get+0x264>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	dbe4      	blt.n	8003784 <simpleserial_get+0x88>
 80037ba:	e000      	b.n	80037be <simpleserial_get+0xc2>
			break;
 80037bc:	bf00      	nop
	}

	if (c == num_commands) {
 80037be:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 80037c2:	4b67      	ldr	r3, [pc, #412]	@ (8003960 <simpleserial_get+0x264>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d106      	bne.n	80037d8 <simpleserial_get+0xdc>
		err = SS_ERR_CMD;
 80037ca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80037ce:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80037d2:	2201      	movs	r2, #1
 80037d4:	701a      	strb	r2, [r3, #0]
		goto ERROR;
 80037d6:	e0b6      	b.n	8003946 <simpleserial_get+0x24a>
	}

	//check that next frame not beyond end of message
	// account for cmd, scmd, len, data, crc, end of frame
	if ((data_buf[3] + 5) < next_frame) {
 80037d8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80037dc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80037e0:	78db      	ldrb	r3, [r3, #3]
 80037e2:	1d5a      	adds	r2, r3, #5
 80037e4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80037e8:	429a      	cmp	r2, r3
 80037ea:	da06      	bge.n	80037fa <simpleserial_get+0xfe>
		err = SS_ERR_LEN;
 80037ec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80037f0:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80037f4:	2204      	movs	r2, #4
 80037f6:	701a      	strb	r2, [r3, #0]
		goto ERROR;
 80037f8:	e0a5      	b.n	8003946 <simpleserial_get+0x24a>
	}

	// read in data
	// eq to len + crc + frame end
	int i = 4;
 80037fa:	2304      	movs	r3, #4
 80037fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	for (; i < data_buf[3] + 5; i++) {
 8003800:	e022      	b.n	8003848 <simpleserial_get+0x14c>
		data_buf[i] = getch();
 8003802:	f000 fa33 	bl	8003c6c <getch>
 8003806:	4603      	mov	r3, r0
 8003808:	4619      	mov	r1, r3
 800380a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800380e:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8003812:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003816:	4413      	add	r3, r2
 8003818:	460a      	mov	r2, r1
 800381a:	701a      	strb	r2, [r3, #0]
		if (data_buf[i] == FRAME_BYTE) {
 800381c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003820:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8003824:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003828:	4413      	add	r3, r2
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d106      	bne.n	800383e <simpleserial_get+0x142>
			err = SS_ERR_FRAME_BYTE;
 8003830:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003834:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8003838:	2205      	movs	r2, #5
 800383a:	701a      	strb	r2, [r3, #0]
			goto ERROR;
 800383c:	e083      	b.n	8003946 <simpleserial_get+0x24a>
	for (; i < data_buf[3] + 5; i++) {
 800383e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003842:	3301      	adds	r3, #1
 8003844:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003848:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800384c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003850:	78db      	ldrb	r3, [r3, #3]
 8003852:	3304      	adds	r3, #4
 8003854:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8003858:	429a      	cmp	r2, r3
 800385a:	ddd2      	ble.n	8003802 <simpleserial_get+0x106>
		}
	}

	//check that final byte is the FRAME_BYTE
	data_buf[i] = getch();
 800385c:	f000 fa06 	bl	8003c6c <getch>
 8003860:	4603      	mov	r3, r0
 8003862:	4619      	mov	r1, r3
 8003864:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003868:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 800386c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003870:	4413      	add	r3, r2
 8003872:	460a      	mov	r2, r1
 8003874:	701a      	strb	r2, [r3, #0]
	if (data_buf[i] != FRAME_BYTE) {
 8003876:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800387a:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 800387e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003882:	4413      	add	r3, r2
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d006      	beq.n	8003898 <simpleserial_get+0x19c>
		err = SS_ERR_LEN;
 800388a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800388e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8003892:	2204      	movs	r2, #4
 8003894:	701a      	strb	r2, [r3, #0]
		goto ERROR;
 8003896:	e056      	b.n	8003946 <simpleserial_get+0x24a>
	}

	//fully unstuff data now
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 8003898:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800389c:	f107 0208 	add.w	r2, r7, #8
 80038a0:	18d0      	adds	r0, r2, r3
 80038a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	3301      	adds	r3, #1
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	4619      	mov	r1, r3
 80038b6:	f7ff fe9f 	bl	80035f8 <unstuff_data>

	//calc crc excluding original frame offset and frame end and crc
	uint8_t crc = ss_crc(data_buf+1, i-2);
 80038ba:	f107 0308 	add.w	r3, r7, #8
 80038be:	3301      	adds	r3, #1
 80038c0:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	3a02      	subs	r2, #2
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	4611      	mov	r1, r2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff fde7 	bl	80034a0 <ss_crc>
 80038d2:	4603      	mov	r3, r0
 80038d4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
	if (crc != data_buf[i-1]) {
 80038d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80038dc:	3b01      	subs	r3, #1
 80038de:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80038e2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80038e6:	5cd3      	ldrb	r3, [r2, r3]
 80038e8:	f897 210a 	ldrb.w	r2, [r7, #266]	@ 0x10a
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d006      	beq.n	80038fe <simpleserial_get+0x202>
		err = SS_ERR_CRC;
 80038f0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80038f4:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80038f8:	2202      	movs	r2, #2
 80038fa:	701a      	strb	r2, [r3, #0]
		goto ERROR;
 80038fc:	e023      	b.n	8003946 <simpleserial_get+0x24a>
	}

	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 80038fe:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 8003902:	4916      	ldr	r1, [pc, #88]	@ (800395c <simpleserial_get+0x260>)
 8003904:	4613      	mov	r3, r2
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	3308      	adds	r3, #8
 8003910:	681c      	ldr	r4, [r3, #0]
 8003912:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003916:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800391a:	7858      	ldrb	r0, [r3, #1]
 800391c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003920:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003924:	7899      	ldrb	r1, [r3, #2]
 8003926:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800392a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800392e:	78da      	ldrb	r2, [r3, #3]
 8003930:	f107 0308 	add.w	r3, r7, #8
 8003934:	3304      	adds	r3, #4
 8003936:	47a0      	blx	r4
 8003938:	4603      	mov	r3, r0
 800393a:	461a      	mov	r2, r3
 800393c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003940:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8003944:	701a      	strb	r2, [r3, #0]

ERROR:
	simpleserial_put('e', 0x01, &err);
 8003946:	1dfb      	adds	r3, r7, #7
 8003948:	461a      	mov	r2, r3
 800394a:	2101      	movs	r1, #1
 800394c:	2065      	movs	r0, #101	@ 0x65
 800394e:	f000 f809 	bl	8003964 <simpleserial_put>
	return;
 8003952:	bf00      	nop
}
 8003954:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8003958:	46bd      	mov	sp, r7
 800395a:	bd90      	pop	{r4, r7, pc}
 800395c:	20000074 	.word	0x20000074
 8003960:	20000070 	.word	0x20000070

08003964 <simpleserial_put>:

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8003964:	b590      	push	{r4, r7, lr}
 8003966:	b0c5      	sub	sp, #276	@ 0x114
 8003968:	af00      	add	r7, sp, #0
 800396a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800396e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003978:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800397c:	4602      	mov	r2, r0
 800397e:	701a      	strb	r2, [r3, #0]
 8003980:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003984:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8003988:	460a      	mov	r2, r1
 800398a:	701a      	strb	r2, [r3, #0]
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 800398c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003994:	2200      	movs	r2, #0
 8003996:	701a      	strb	r2, [r3, #0]
	data_buf[1] = c;
 8003998:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800399c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039a0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80039a4:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 80039a8:	7812      	ldrb	r2, [r2, #0]
 80039aa:	705a      	strb	r2, [r3, #1]
	data_buf[2] = size;
 80039ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80039b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80039b4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80039b8:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80039bc:	7812      	ldrb	r2, [r2, #0]
 80039be:	709a      	strb	r2, [r3, #2]
	int i = 0;
 80039c0:	2300      	movs	r3, #0
 80039c2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	for (; i < size; i++) {
 80039c6:	e015      	b.n	80039f4 <simpleserial_put+0x90>
		data_buf[i + 3] = output[i];
 80039c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039cc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80039d0:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	441a      	add	r2, r3
 80039d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039dc:	3303      	adds	r3, #3
 80039de:	7811      	ldrb	r1, [r2, #0]
 80039e0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80039e4:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80039e8:	54d1      	strb	r1, [r2, r3]
	for (; i < size; i++) {
 80039ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039ee:	3301      	adds	r3, #1
 80039f0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80039f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80039f8:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8003a02:	429a      	cmp	r2, r3
 8003a04:	dbe0      	blt.n	80039c8 <simpleserial_put+0x64>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8003a06:	f107 0308 	add.w	r3, r7, #8
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003a10:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8003a14:	7812      	ldrb	r2, [r2, #0]
 8003a16:	3202      	adds	r2, #2
 8003a18:	b2d1      	uxtb	r1, r2
 8003a1a:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8003a1e:	1cd4      	adds	r4, r2, #3
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fd3d 	bl	80034a0 <ss_crc>
 8003a26:	4603      	mov	r3, r0
 8003a28:	461a      	mov	r2, r3
 8003a2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a32:	551a      	strb	r2, [r3, r4]
	data_buf[i + 4] = 0x00;
 8003a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a38:	3304      	adds	r3, #4
 8003a3a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8003a3e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8003a42:	2100      	movs	r1, #0
 8003a44:	54d1      	strb	r1, [r2, r3]
	stuff_data(data_buf, i + 5);
 8003a46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	3305      	adds	r3, #5
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	f107 0308 	add.w	r3, r7, #8
 8003a54:	4611      	mov	r1, r2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff fda6 	bl	80035a8 <stuff_data>
	for (int i = 0; i < size + 5; i++) {
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003a62:	e00f      	b.n	8003a84 <simpleserial_put+0x120>
		putch(data_buf[i]);
 8003a64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a68:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003a6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003a70:	4413      	add	r3, r2
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 f917 	bl	8003ca8 <putch>
	for (int i = 0; i < size + 5; i++) {
 8003a7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003a7e:	3301      	adds	r3, #1
 8003a80:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003a84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8003a88:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8003a94:	429a      	cmp	r2, r3
 8003a96:	dde5      	ble.n	8003a64 <simpleserial_put+0x100>
	}
}
 8003a98:	bf00      	nop
 8003a9a:	bf00      	nop
 8003a9c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd90      	pop	{r4, r7, pc}

08003aa4 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b096      	sub	sp, #88	@ 0x58
 8003aa8:	af00      	add	r7, sp, #0
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8003aae:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8003ab2:	633b      	str	r3, [r7, #48]	@ 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003abc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 f925 	bl	8003d10 <HAL_RCC_OscConfig>

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003ac6:	230f      	movs	r3, #15
 8003ac8:	61bb      	str	r3, [r7, #24]
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8003aca:	2301      	movs	r3, #1
 8003acc:	61fb      	str	r3, [r7, #28]
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	623b      	str	r3, [r7, #32]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	627b      	str	r3, [r7, #36]	@ 0x24
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
     uint32_t flash_latency = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	657b      	str	r3, [r7, #84]	@ 0x54
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8003ade:	f107 0318 	add.w	r3, r7, #24
 8003ae2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f001 f929 	bl	8004d3c <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aea:	4b15      	ldr	r3, [pc, #84]	@ (8003b40 <platform_init+0x9c>)
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	4a14      	ldr	r2, [pc, #80]	@ (8003b40 <platform_init+0x9c>)
 8003af0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003af4:	6153      	str	r3, [r2, #20]
 8003af6:	4b12      	ldr	r3, [pc, #72]	@ (8003b40 <platform_init+0x9c>)
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003afe:	603b      	str	r3, [r7, #0]
 8003b00:	683b      	ldr	r3, [r7, #0]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8003b02:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8003b06:	607b      	str	r3, [r7, #4]
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	60bb      	str	r3, [r7, #8]
  GpioInit.Pull      = GPIO_NOPULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60fb      	str	r3, [r7, #12]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003b10:	2303      	movs	r3, #3
 8003b12:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8003b14:	1d3b      	adds	r3, r7, #4
 8003b16:	4619      	mov	r1, r3
 8003b18:	480a      	ldr	r0, [pc, #40]	@ (8003b44 <platform_init+0xa0>)
 8003b1a:	f001 fa99 	bl	8005050 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003b24:	4807      	ldr	r0, [pc, #28]	@ (8003b44 <platform_init+0xa0>)
 8003b26:	f001 fc11 	bl	800534c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003b30:	4804      	ldr	r0, [pc, #16]	@ (8003b44 <platform_init+0xa0>)
 8003b32:	f001 fc0b 	bl	800534c <HAL_GPIO_WritePin>
#endif
}
 8003b36:	bf00      	nop
 8003b38:	3758      	adds	r7, #88	@ 0x58
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40021000 	.word	0x40021000
 8003b44:	48000800 	.word	0x48000800

08003b48 <init_uart>:

void init_uart(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 8003b4e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003b52:	60fb      	str	r3, [r7, #12]
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8003b54:	2302      	movs	r3, #2
 8003b56:	613b      	str	r3, [r7, #16]
  GpioInit.Pull      = GPIO_PULLUP;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	617b      	str	r3, [r7, #20]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	61bb      	str	r3, [r7, #24]
  GpioInit.Alternate = GPIO_AF7_USART1;
 8003b60:	2307      	movs	r3, #7
 8003b62:	61fb      	str	r3, [r7, #28]
  __GPIOA_CLK_ENABLE();
 8003b64:	4b1d      	ldr	r3, [pc, #116]	@ (8003bdc <init_uart+0x94>)
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	4a1c      	ldr	r2, [pc, #112]	@ (8003bdc <init_uart+0x94>)
 8003b6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b6e:	6153      	str	r3, [r2, #20]
 8003b70:	4b1a      	ldr	r3, [pc, #104]	@ (8003bdc <init_uart+0x94>)
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8003b7c:	f107 030c 	add.w	r3, r7, #12
 8003b80:	4619      	mov	r1, r3
 8003b82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b86:	f001 fa63 	bl	8005050 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8003b8a:	4b15      	ldr	r3, [pc, #84]	@ (8003be0 <init_uart+0x98>)
 8003b8c:	4a15      	ldr	r2, [pc, #84]	@ (8003be4 <init_uart+0x9c>)
 8003b8e:	601a      	str	r2, [r3, #0]
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 8003b90:	4b13      	ldr	r3, [pc, #76]	@ (8003be0 <init_uart+0x98>)
 8003b92:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8003b96:	605a      	str	r2, [r3, #4]
  #else
  UartHandle.Init.BaudRate   = 38400;
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8003b98:	4b11      	ldr	r3, [pc, #68]	@ (8003be0 <init_uart+0x98>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8003b9e:	4b10      	ldr	r3, [pc, #64]	@ (8003be0 <init_uart+0x98>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8003ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8003be0 <init_uart+0x98>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8003baa:	4b0d      	ldr	r3, [pc, #52]	@ (8003be0 <init_uart+0x98>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003be0 <init_uart+0x98>)
 8003bb2:	220c      	movs	r2, #12
 8003bb4:	615a      	str	r2, [r3, #20]
  __USART1_CLK_ENABLE();
 8003bb6:	4b09      	ldr	r3, [pc, #36]	@ (8003bdc <init_uart+0x94>)
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	4a08      	ldr	r2, [pc, #32]	@ (8003bdc <init_uart+0x94>)
 8003bbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bc0:	6193      	str	r3, [r2, #24]
 8003bc2:	4b06      	ldr	r3, [pc, #24]	@ (8003bdc <init_uart+0x94>)
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bca:	607b      	str	r3, [r7, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
  HAL_UART_Init(&UartHandle);
 8003bce:	4804      	ldr	r0, [pc, #16]	@ (8003be0 <init_uart+0x98>)
 8003bd0:	f001 fe1d 	bl	800580e <HAL_UART_Init>
}
 8003bd4:	bf00      	nop
 8003bd6:	3720      	adds	r7, #32
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	20000134 	.word	0x20000134
 8003be4:	40013800 	.word	0x40013800

08003be8 <trigger_setup>:

void trigger_setup(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bee:	4b13      	ldr	r3, [pc, #76]	@ (8003c3c <trigger_setup+0x54>)
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	4a12      	ldr	r2, [pc, #72]	@ (8003c3c <trigger_setup+0x54>)
 8003bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bf8:	6153      	str	r3, [r2, #20]
 8003bfa:	4b10      	ldr	r3, [pc, #64]	@ (8003c3c <trigger_setup+0x54>)
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
 8003c06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c0a:	607b      	str	r3, [r7, #4]
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	60bb      	str	r3, [r7, #8]
  GpioInit.Pull      = GPIO_NOPULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003c14:	2303      	movs	r3, #3
 8003c16:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8003c18:	1d3b      	adds	r3, r7, #4
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c20:	f001 fa16 	bl	8005050 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8003c24:	2200      	movs	r2, #0
 8003c26:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c2e:	f001 fb8d 	bl	800534c <HAL_GPIO_WritePin>
}
 8003c32:	bf00      	nop
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40021000 	.word	0x40021000

08003c40 <trigger_high>:

void trigger_high(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8003c44:	2201      	movs	r2, #1
 8003c46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c4e:	f001 fb7d 	bl	800534c <HAL_GPIO_WritePin>
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <trigger_low>:

void trigger_low(void)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c64:	f001 fb72 	bl	800534c <HAL_GPIO_WritePin>
}
 8003c68:	bf00      	nop
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <getch>:

char getch(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8003c72:	e005      	b.n	8003c80 <getch+0x14>
    USART1->ICR |= (1 << 3);
 8003c74:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca0 <getch+0x34>)
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	4a09      	ldr	r2, [pc, #36]	@ (8003ca0 <getch+0x34>)
 8003c7a:	f043 0308 	orr.w	r3, r3, #8
 8003c7e:	6213      	str	r3, [r2, #32]
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8003c80:	1df9      	adds	r1, r7, #7
 8003c82:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003c86:	2201      	movs	r2, #1
 8003c88:	4806      	ldr	r0, [pc, #24]	@ (8003ca4 <getch+0x38>)
 8003c8a:	f001 fedd 	bl	8005a48 <HAL_UART_Receive>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1ef      	bne.n	8003c74 <getch+0x8>
  //putch(d);
  return d;
 8003c94:	79fb      	ldrb	r3, [r7, #7]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40013800 	.word	0x40013800
 8003ca4:	20000134 	.word	0x20000134

08003ca8 <putch>:

void putch(char c)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	71fb      	strb	r3, [r7, #7]
  uint8_t d  = c;
 8003cb2:	79fb      	ldrb	r3, [r7, #7]
 8003cb4:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8003cb6:	f107 010f 	add.w	r1, r7, #15
 8003cba:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	4803      	ldr	r0, [pc, #12]	@ (8003cd0 <putch+0x28>)
 8003cc2:	f001 fe35 	bl	8005930 <HAL_UART_Transmit>
}
 8003cc6:	bf00      	nop
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000134 	.word	0x20000134

08003cd4 <HAL_GetTick>:
{
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
	return hal_sys_tick++;
 8003cd8:	4b04      	ldr	r3, [pc, #16]	@ (8003cec <HAL_GetTick+0x18>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	4903      	ldr	r1, [pc, #12]	@ (8003cec <HAL_GetTick+0x18>)
 8003ce0:	600a      	str	r2, [r1, #0]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	200001a4 	.word	0x200001a4

08003cf0 <HAL_RCC_GetSysClockFreq>:

#define UART_CR1_FIELDS  ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | \
                                     USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8)) /*!< UART or USART CR1 fields of parameters set by UART_SetConfig API */

uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
	return F_CPU;
 8003cf4:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr

08003d00 <HAL_RCC_GetPCLK1Freq>:

uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
	return F_CPU;
 8003d04:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr

08003d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d20:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 8180 	beq.w	800403e <HAL_RCC_OscConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003d3e:	4bbe      	ldr	r3, [pc, #760]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d00c      	beq.n	8003d64 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d4a:	4bbb      	ldr	r3, [pc, #748]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d15d      	bne.n	8003e12 <HAL_RCC_OscConfig+0x102>
 8003d56:	4bb8      	ldr	r3, [pc, #736]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d62:	d156      	bne.n	8003e12 <HAL_RCC_OscConfig+0x102>
 8003d64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d68:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003d70:	fa93 f3a3 	rbit	r3, r3
 8003d74:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003d78:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d7c:	fab3 f383 	clz	r3, r3
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d102      	bne.n	8003d96 <HAL_RCC_OscConfig+0x86>
 8003d90:	4ba9      	ldr	r3, [pc, #676]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	e015      	b.n	8003dc2 <HAL_RCC_OscConfig+0xb2>
 8003d96:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d9a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8003da2:	fa93 f3a3 	rbit	r3, r3
 8003da6:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8003daa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003dae:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003db2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8003db6:	fa93 f3a3 	rbit	r3, r3
 8003dba:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003dbe:	4b9e      	ldr	r3, [pc, #632]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003dc6:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8003dca:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8003dce:	fa92 f2a2 	rbit	r2, r2
 8003dd2:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return(result);
 8003dd6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003dda:	fab2 f282 	clz	r2, r2
 8003dde:	b252      	sxtb	r2, r2
 8003de0:	f042 0220 	orr.w	r2, r2, #32
 8003de4:	b252      	sxtb	r2, r2
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	f002 021f 	and.w	r2, r2, #31
 8003dec:	2101      	movs	r1, #1
 8003dee:	fa01 f202 	lsl.w	r2, r1, r2
 8003df2:	4013      	ands	r3, r2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8121 	beq.w	800403c <HAL_RCC_OscConfig+0x32c>
 8003dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f040 8118 	bne.w	800403c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f000 bf8c 	b.w	8004d2a <HAL_RCC_OscConfig+0x101a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e22:	d106      	bne.n	8003e32 <HAL_RCC_OscConfig+0x122>
 8003e24:	4b84      	ldr	r3, [pc, #528]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a83      	ldr	r2, [pc, #524]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	e036      	b.n	8003ea0 <HAL_RCC_OscConfig+0x190>
 8003e32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10c      	bne.n	8003e5c <HAL_RCC_OscConfig+0x14c>
 8003e42:	4b7d      	ldr	r3, [pc, #500]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a7c      	ldr	r2, [pc, #496]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003e48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	4b7a      	ldr	r3, [pc, #488]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a79      	ldr	r2, [pc, #484]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003e54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	e021      	b.n	8003ea0 <HAL_RCC_OscConfig+0x190>
 8003e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e6c:	d10c      	bne.n	8003e88 <HAL_RCC_OscConfig+0x178>
 8003e6e:	4b72      	ldr	r3, [pc, #456]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a71      	ldr	r2, [pc, #452]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003e74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	4b6f      	ldr	r3, [pc, #444]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a6e      	ldr	r2, [pc, #440]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003e80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	e00b      	b.n	8003ea0 <HAL_RCC_OscConfig+0x190>
 8003e88:	4b6b      	ldr	r3, [pc, #428]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a6a      	ldr	r2, [pc, #424]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003e8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e92:	6013      	str	r3, [r2, #0]
 8003e94:	4b68      	ldr	r3, [pc, #416]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a67      	ldr	r2, [pc, #412]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003e9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e9e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ea0:	4b65      	ldr	r3, [pc, #404]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea4:	f023 020f 	bic.w	r2, r3, #15
 8003ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	4960      	ldr	r1, [pc, #384]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ebe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d05a      	beq.n	8003f80 <HAL_RCC_OscConfig+0x270>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eca:	f7ff ff03 	bl	8003cd4 <HAL_GetTick>
 8003ece:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed2:	e00a      	b.n	8003eea <HAL_RCC_OscConfig+0x1da>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ed4:	f7ff fefe 	bl	8003cd4 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b64      	cmp	r3, #100	@ 0x64
 8003ee2:	d902      	bls.n	8003eea <HAL_RCC_OscConfig+0x1da>
          {
            return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	f000 bf20 	b.w	8004d2a <HAL_RCC_OscConfig+0x101a>
 8003eea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003eee:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003ef6:	fa93 f3a3 	rbit	r3, r3
 8003efa:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return(result);
 8003efe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f02:	fab3 f383 	clz	r3, r3
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	095b      	lsrs	r3, r3, #5
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	f043 0301 	orr.w	r3, r3, #1
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d102      	bne.n	8003f1c <HAL_RCC_OscConfig+0x20c>
 8003f16:	4b48      	ldr	r3, [pc, #288]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	e015      	b.n	8003f48 <HAL_RCC_OscConfig+0x238>
 8003f1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f20:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f24:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003f28:	fa93 f3a3 	rbit	r3, r3
 8003f2c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003f30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f34:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003f38:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003f3c:	fa93 f3a3 	rbit	r3, r3
 8003f40:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003f44:	4b3c      	ldr	r3, [pc, #240]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f48:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f4c:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8003f50:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003f54:	fa92 f2a2 	rbit	r2, r2
 8003f58:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return(result);
 8003f5c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003f60:	fab2 f282 	clz	r2, r2
 8003f64:	b252      	sxtb	r2, r2
 8003f66:	f042 0220 	orr.w	r2, r2, #32
 8003f6a:	b252      	sxtb	r2, r2
 8003f6c:	b2d2      	uxtb	r2, r2
 8003f6e:	f002 021f 	and.w	r2, r2, #31
 8003f72:	2101      	movs	r1, #1
 8003f74:	fa01 f202 	lsl.w	r2, r1, r2
 8003f78:	4013      	ands	r3, r2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0aa      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x1c4>
 8003f7e:	e05e      	b.n	800403e <HAL_RCC_OscConfig+0x32e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f80:	f7ff fea8 	bl	8003cd4 <HAL_GetTick>
 8003f84:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f88:	e00a      	b.n	8003fa0 <HAL_RCC_OscConfig+0x290>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f8a:	f7ff fea3 	bl	8003cd4 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b64      	cmp	r3, #100	@ 0x64
 8003f98:	d902      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	f000 bec5 	b.w	8004d2a <HAL_RCC_OscConfig+0x101a>
 8003fa0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003fa4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003fac:	fa93 f3a3 	rbit	r3, r3
 8003fb0:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return(result);
 8003fb4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fb8:	fab3 f383 	clz	r3, r3
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	f043 0301 	orr.w	r3, r3, #1
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d102      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x2c2>
 8003fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	e015      	b.n	8003ffe <HAL_RCC_OscConfig+0x2ee>
 8003fd2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003fd6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fda:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003fde:	fa93 f3a3 	rbit	r3, r3
 8003fe2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003fe6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003fea:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003fee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003ff2:	fa93 f3a3 	rbit	r3, r3
 8003ff6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8004038 <HAL_RCC_OscConfig+0x328>)
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004002:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8004006:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800400a:	fa92 f2a2 	rbit	r2, r2
 800400e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return(result);
 8004012:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004016:	fab2 f282 	clz	r2, r2
 800401a:	b252      	sxtb	r2, r2
 800401c:	f042 0220 	orr.w	r2, r2, #32
 8004020:	b252      	sxtb	r2, r2
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	f002 021f 	and.w	r2, r2, #31
 8004028:	2101      	movs	r1, #1
 800402a:	fa01 f202 	lsl.w	r2, r1, r2
 800402e:	4013      	ands	r3, r2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1aa      	bne.n	8003f8a <HAL_RCC_OscConfig+0x27a>
 8004034:	e003      	b.n	800403e <HAL_RCC_OscConfig+0x32e>
 8004036:	bf00      	nop
 8004038:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800403c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800403e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004042:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 817e 	beq.w	8004350 <HAL_RCC_OscConfig+0x640>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004054:	4ba6      	ldr	r3, [pc, #664]	@ (80042f0 <HAL_RCC_OscConfig+0x5e0>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f003 030c 	and.w	r3, r3, #12
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00b      	beq.n	8004078 <HAL_RCC_OscConfig+0x368>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004060:	4ba3      	ldr	r3, [pc, #652]	@ (80042f0 <HAL_RCC_OscConfig+0x5e0>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f003 030c 	and.w	r3, r3, #12
 8004068:	2b08      	cmp	r3, #8
 800406a:	d173      	bne.n	8004154 <HAL_RCC_OscConfig+0x444>
 800406c:	4ba0      	ldr	r3, [pc, #640]	@ (80042f0 <HAL_RCC_OscConfig+0x5e0>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d16d      	bne.n	8004154 <HAL_RCC_OscConfig+0x444>
 8004078:	2302      	movs	r3, #2
 800407a:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004082:	fa93 f3a3 	rbit	r3, r3
 8004086:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return(result);
 800408a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800408e:	fab3 f383 	clz	r3, r3
 8004092:	b2db      	uxtb	r3, r3
 8004094:	095b      	lsrs	r3, r3, #5
 8004096:	b2db      	uxtb	r3, r3
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d102      	bne.n	80040a8 <HAL_RCC_OscConfig+0x398>
 80040a2:	4b93      	ldr	r3, [pc, #588]	@ (80042f0 <HAL_RCC_OscConfig+0x5e0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	e013      	b.n	80040d0 <HAL_RCC_OscConfig+0x3c0>
 80040a8:	2302      	movs	r3, #2
 80040aa:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80040b2:	fa93 f3a3 	rbit	r3, r3
 80040b6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80040ba:	2302      	movs	r3, #2
 80040bc:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80040c0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80040c4:	fa93 f3a3 	rbit	r3, r3
 80040c8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80040cc:	4b88      	ldr	r3, [pc, #544]	@ (80042f0 <HAL_RCC_OscConfig+0x5e0>)
 80040ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d0:	2202      	movs	r2, #2
 80040d2:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80040d6:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80040da:	fa92 f2a2 	rbit	r2, r2
 80040de:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return(result);
 80040e2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80040e6:	fab2 f282 	clz	r2, r2
 80040ea:	b252      	sxtb	r2, r2
 80040ec:	f042 0220 	orr.w	r2, r2, #32
 80040f0:	b252      	sxtb	r2, r2
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	f002 021f 	and.w	r2, r2, #31
 80040f8:	2101      	movs	r1, #1
 80040fa:	fa01 f202 	lsl.w	r2, r1, r2
 80040fe:	4013      	ands	r3, r2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <HAL_RCC_OscConfig+0x40a>
 8004104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004108:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d002      	beq.n	800411a <HAL_RCC_OscConfig+0x40a>
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	f000 be08 	b.w	8004d2a <HAL_RCC_OscConfig+0x101a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411a:	4b75      	ldr	r3, [pc, #468]	@ (80042f0 <HAL_RCC_OscConfig+0x5e0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004126:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6959      	ldr	r1, [r3, #20]
 800412e:	23f8      	movs	r3, #248	@ 0xf8
 8004130:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004134:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8004138:	fa93 f3a3 	rbit	r3, r3
 800413c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
  return(result);
 8004140:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8004144:	fab3 f383 	clz	r3, r3
 8004148:	fa01 f303 	lsl.w	r3, r1, r3
 800414c:	4968      	ldr	r1, [pc, #416]	@ (80042f0 <HAL_RCC_OscConfig+0x5e0>)
 800414e:	4313      	orrs	r3, r2
 8004150:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004152:	e0fd      	b.n	8004350 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004158:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 8088 	beq.w	8004276 <HAL_RCC_OscConfig+0x566>
 8004166:	2301      	movs	r3, #1
 8004168:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004170:	fa93 f3a3 	rbit	r3, r3
 8004174:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return(result);
 8004178:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800417c:	fab3 f383 	clz	r3, r3
 8004180:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004184:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	461a      	mov	r2, r3
 800418c:	2301      	movs	r3, #1
 800418e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004190:	f7ff fda0 	bl	8003cd4 <HAL_GetTick>
 8004194:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004198:	e00a      	b.n	80041b0 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800419a:	f7ff fd9b 	bl	8003cd4 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d902      	bls.n	80041b0 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	f000 bdbd 	b.w	8004d2a <HAL_RCC_OscConfig+0x101a>
 80041b0:	2302      	movs	r3, #2
 80041b2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80041ba:	fa93 f3a3 	rbit	r3, r3
 80041be:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return(result);
 80041c2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c6:	fab3 f383 	clz	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d102      	bne.n	80041e0 <HAL_RCC_OscConfig+0x4d0>
 80041da:	4b45      	ldr	r3, [pc, #276]	@ (80042f0 <HAL_RCC_OscConfig+0x5e0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	e013      	b.n	8004208 <HAL_RCC_OscConfig+0x4f8>
 80041e0:	2302      	movs	r3, #2
 80041e2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80041ea:	fa93 f3a3 	rbit	r3, r3
 80041ee:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80041f2:	2302      	movs	r3, #2
 80041f4:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80041f8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80041fc:	fa93 f3a3 	rbit	r3, r3
 8004200:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004204:	4b3a      	ldr	r3, [pc, #232]	@ (80042f0 <HAL_RCC_OscConfig+0x5e0>)
 8004206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004208:	2202      	movs	r2, #2
 800420a:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800420e:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8004212:	fa92 f2a2 	rbit	r2, r2
 8004216:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return(result);
 800421a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800421e:	fab2 f282 	clz	r2, r2
 8004222:	b252      	sxtb	r2, r2
 8004224:	f042 0220 	orr.w	r2, r2, #32
 8004228:	b252      	sxtb	r2, r2
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	f002 021f 	and.w	r2, r2, #31
 8004230:	2101      	movs	r1, #1
 8004232:	fa01 f202 	lsl.w	r2, r1, r2
 8004236:	4013      	ands	r3, r2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0ae      	beq.n	800419a <HAL_RCC_OscConfig+0x48a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423c:	4b2c      	ldr	r3, [pc, #176]	@ (80042f0 <HAL_RCC_OscConfig+0x5e0>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004248:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6959      	ldr	r1, [r3, #20]
 8004250:	23f8      	movs	r3, #248	@ 0xf8
 8004252:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004256:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800425a:	fa93 f3a3 	rbit	r3, r3
 800425e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  return(result);
 8004262:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8004266:	fab3 f383 	clz	r3, r3
 800426a:	fa01 f303 	lsl.w	r3, r1, r3
 800426e:	4920      	ldr	r1, [pc, #128]	@ (80042f0 <HAL_RCC_OscConfig+0x5e0>)
 8004270:	4313      	orrs	r3, r2
 8004272:	600b      	str	r3, [r1, #0]
 8004274:	e06c      	b.n	8004350 <HAL_RCC_OscConfig+0x640>
 8004276:	2301      	movs	r3, #1
 8004278:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8004280:	fa93 f3a3 	rbit	r3, r3
 8004284:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return(result);
 8004288:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800428c:	fab3 f383 	clz	r3, r3
 8004290:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004294:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	461a      	mov	r2, r3
 800429c:	2300      	movs	r3, #0
 800429e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a0:	f7ff fd18 	bl	8003cd4 <HAL_GetTick>
 80042a4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042a8:	e00a      	b.n	80042c0 <HAL_RCC_OscConfig+0x5b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042aa:	f7ff fd13 	bl	8003cd4 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d902      	bls.n	80042c0 <HAL_RCC_OscConfig+0x5b0>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	f000 bd35 	b.w	8004d2a <HAL_RCC_OscConfig+0x101a>
 80042c0:	2302      	movs	r3, #2
 80042c2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80042ca:	fa93 f3a3 	rbit	r3, r3
 80042ce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return(result);
 80042d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042d6:	fab3 f383 	clz	r3, r3
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	095b      	lsrs	r3, r3, #5
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d104      	bne.n	80042f4 <HAL_RCC_OscConfig+0x5e4>
 80042ea:	4b01      	ldr	r3, [pc, #4]	@ (80042f0 <HAL_RCC_OscConfig+0x5e0>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	e015      	b.n	800431c <HAL_RCC_OscConfig+0x60c>
 80042f0:	40021000 	.word	0x40021000
 80042f4:	2302      	movs	r3, #2
 80042f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80042fe:	fa93 f3a3 	rbit	r3, r3
 8004302:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004306:	2302      	movs	r3, #2
 8004308:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800430c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8004310:	fa93 f3a3 	rbit	r3, r3
 8004314:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004318:	4bc5      	ldr	r3, [pc, #788]	@ (8004630 <HAL_RCC_OscConfig+0x920>)
 800431a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431c:	2202      	movs	r2, #2
 800431e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8004322:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8004326:	fa92 f2a2 	rbit	r2, r2
 800432a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return(result);
 800432e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004332:	fab2 f282 	clz	r2, r2
 8004336:	b252      	sxtb	r2, r2
 8004338:	f042 0220 	orr.w	r2, r2, #32
 800433c:	b252      	sxtb	r2, r2
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	f002 021f 	and.w	r2, r2, #31
 8004344:	2101      	movs	r1, #1
 8004346:	fa01 f202 	lsl.w	r2, r1, r2
 800434a:	4013      	ands	r3, r2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1ac      	bne.n	80042aa <HAL_RCC_OscConfig+0x59a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004354:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 810a 	beq.w	800457a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800436a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d073      	beq.n	800445e <HAL_RCC_OscConfig+0x74e>
 8004376:	2301      	movs	r3, #1
 8004378:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004380:	fa93 f3a3 	rbit	r3, r3
 8004384:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return(result);
 8004388:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800438c:	fab3 f383 	clz	r3, r3
 8004390:	461a      	mov	r2, r3
 8004392:	4ba8      	ldr	r3, [pc, #672]	@ (8004634 <HAL_RCC_OscConfig+0x924>)
 8004394:	4413      	add	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	461a      	mov	r2, r3
 800439a:	2301      	movs	r3, #1
 800439c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800439e:	f7ff fc99 	bl	8003cd4 <HAL_GetTick>
 80043a2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043a6:	e00a      	b.n	80043be <HAL_RCC_OscConfig+0x6ae>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043a8:	f7ff fc94 	bl	8003cd4 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d902      	bls.n	80043be <HAL_RCC_OscConfig+0x6ae>
        {
          return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	f000 bcb6 	b.w	8004d2a <HAL_RCC_OscConfig+0x101a>
 80043be:	2302      	movs	r3, #2
 80043c0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043c8:	fa93 f3a3 	rbit	r3, r3
 80043cc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80043d0:	2302      	movs	r3, #2
 80043d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80043d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043da:	fa93 f2a3 	rbit	r2, r3
 80043de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043e2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043f0:	2202      	movs	r2, #2
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	fa93 f2a3 	rbit	r2, r3
 8004402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004406:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800440a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800440c:	4b88      	ldr	r3, [pc, #544]	@ (8004630 <HAL_RCC_OscConfig+0x920>)
 800440e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004414:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004418:	2102      	movs	r1, #2
 800441a:	6019      	str	r1, [r3, #0]
 800441c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004420:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	fa93 f1a3 	rbit	r1, r3
 800442a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800442e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004432:	6019      	str	r1, [r3, #0]
  return(result);
 8004434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004438:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	fab3 f383 	clz	r3, r3
 8004442:	b25b      	sxtb	r3, r3
 8004444:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004448:	b25b      	sxtb	r3, r3
 800444a:	b2db      	uxtb	r3, r3
 800444c:	f003 031f 	and.w	r3, r3, #31
 8004450:	2101      	movs	r1, #1
 8004452:	fa01 f303 	lsl.w	r3, r1, r3
 8004456:	4013      	ands	r3, r2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0a5      	beq.n	80043a8 <HAL_RCC_OscConfig+0x698>
 800445c:	e08d      	b.n	800457a <HAL_RCC_OscConfig+0x86a>
 800445e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004462:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004466:	2201      	movs	r2, #1
 8004468:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800446e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	fa93 f2a3 	rbit	r2, r3
 8004478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800447c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004480:	601a      	str	r2, [r3, #0]
  return(result);
 8004482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004486:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800448a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800448c:	fab3 f383 	clz	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	4b68      	ldr	r3, [pc, #416]	@ (8004634 <HAL_RCC_OscConfig+0x924>)
 8004494:	4413      	add	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	461a      	mov	r2, r3
 800449a:	2300      	movs	r3, #0
 800449c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800449e:	f7ff fc19 	bl	8003cd4 <HAL_GetTick>
 80044a2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a6:	e00a      	b.n	80044be <HAL_RCC_OscConfig+0x7ae>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044a8:	f7ff fc14 	bl	8003cd4 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d902      	bls.n	80044be <HAL_RCC_OscConfig+0x7ae>
        {
          return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	f000 bc36 	b.w	8004d2a <HAL_RCC_OscConfig+0x101a>
 80044be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044c2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80044c6:	2202      	movs	r2, #2
 80044c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ce:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	fa93 f2a3 	rbit	r2, r3
 80044d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044dc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044e6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80044ea:	2202      	movs	r2, #2
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044f2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	fa93 f2a3 	rbit	r2, r3
 80044fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004500:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800450a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800450e:	2202      	movs	r2, #2
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004516:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	fa93 f2a3 	rbit	r2, r3
 8004520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004524:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004528:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800452a:	4b41      	ldr	r3, [pc, #260]	@ (8004630 <HAL_RCC_OscConfig+0x920>)
 800452c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800452e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004532:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004536:	2102      	movs	r1, #2
 8004538:	6019      	str	r1, [r3, #0]
 800453a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800453e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	fa93 f1a3 	rbit	r1, r3
 8004548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800454c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004550:	6019      	str	r1, [r3, #0]
  return(result);
 8004552:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004556:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	fab3 f383 	clz	r3, r3
 8004560:	b25b      	sxtb	r3, r3
 8004562:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004566:	b25b      	sxtb	r3, r3
 8004568:	b2db      	uxtb	r3, r3
 800456a:	f003 031f 	and.w	r3, r3, #31
 800456e:	2101      	movs	r1, #1
 8004570:	fa01 f303 	lsl.w	r3, r1, r3
 8004574:	4013      	ands	r3, r2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d196      	bne.n	80044a8 <HAL_RCC_OscConfig+0x798>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800457a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800457e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 81a4 	beq.w	80048d8 <HAL_RCC_OscConfig+0xbc8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004590:	2300      	movs	r3, #0
 8004592:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004596:	4b26      	ldr	r3, [pc, #152]	@ (8004630 <HAL_RCC_OscConfig+0x920>)
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d116      	bne.n	80045d0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a2:	4b23      	ldr	r3, [pc, #140]	@ (8004630 <HAL_RCC_OscConfig+0x920>)
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	4a22      	ldr	r2, [pc, #136]	@ (8004630 <HAL_RCC_OscConfig+0x920>)
 80045a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045ac:	61d3      	str	r3, [r2, #28]
 80045ae:	4b20      	ldr	r3, [pc, #128]	@ (8004630 <HAL_RCC_OscConfig+0x920>)
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80045b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ba:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045c4:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80045c8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80045ca:	2301      	movs	r3, #1
 80045cc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d0:	4b19      	ldr	r3, [pc, #100]	@ (8004638 <HAL_RCC_OscConfig+0x928>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d11a      	bne.n	8004612 <HAL_RCC_OscConfig+0x902>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045dc:	4b16      	ldr	r3, [pc, #88]	@ (8004638 <HAL_RCC_OscConfig+0x928>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a15      	ldr	r2, [pc, #84]	@ (8004638 <HAL_RCC_OscConfig+0x928>)
 80045e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045e6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045e8:	f7ff fb74 	bl	8003cd4 <HAL_GetTick>
 80045ec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f0:	e009      	b.n	8004606 <HAL_RCC_OscConfig+0x8f6>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f2:	f7ff fb6f 	bl	8003cd4 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b64      	cmp	r3, #100	@ 0x64
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x8f6>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e391      	b.n	8004d2a <HAL_RCC_OscConfig+0x101a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004606:	4b0c      	ldr	r3, [pc, #48]	@ (8004638 <HAL_RCC_OscConfig+0x928>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0ef      	beq.n	80045f2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004616:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d10c      	bne.n	800463c <HAL_RCC_OscConfig+0x92c>
 8004622:	4b03      	ldr	r3, [pc, #12]	@ (8004630 <HAL_RCC_OscConfig+0x920>)
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	4a02      	ldr	r2, [pc, #8]	@ (8004630 <HAL_RCC_OscConfig+0x920>)
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	6213      	str	r3, [r2, #32]
 800462e:	e03b      	b.n	80046a8 <HAL_RCC_OscConfig+0x998>
 8004630:	40021000 	.word	0x40021000
 8004634:	10908120 	.word	0x10908120
 8004638:	40007000 	.word	0x40007000
 800463c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004640:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10c      	bne.n	8004666 <HAL_RCC_OscConfig+0x956>
 800464c:	4b7f      	ldr	r3, [pc, #508]	@ (800484c <HAL_RCC_OscConfig+0xb3c>)
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	4a7e      	ldr	r2, [pc, #504]	@ (800484c <HAL_RCC_OscConfig+0xb3c>)
 8004652:	f023 0301 	bic.w	r3, r3, #1
 8004656:	6213      	str	r3, [r2, #32]
 8004658:	4b7c      	ldr	r3, [pc, #496]	@ (800484c <HAL_RCC_OscConfig+0xb3c>)
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	4a7b      	ldr	r2, [pc, #492]	@ (800484c <HAL_RCC_OscConfig+0xb3c>)
 800465e:	f023 0304 	bic.w	r3, r3, #4
 8004662:	6213      	str	r3, [r2, #32]
 8004664:	e020      	b.n	80046a8 <HAL_RCC_OscConfig+0x998>
 8004666:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800466a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	2b05      	cmp	r3, #5
 8004674:	d10c      	bne.n	8004690 <HAL_RCC_OscConfig+0x980>
 8004676:	4b75      	ldr	r3, [pc, #468]	@ (800484c <HAL_RCC_OscConfig+0xb3c>)
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	4a74      	ldr	r2, [pc, #464]	@ (800484c <HAL_RCC_OscConfig+0xb3c>)
 800467c:	f043 0304 	orr.w	r3, r3, #4
 8004680:	6213      	str	r3, [r2, #32]
 8004682:	4b72      	ldr	r3, [pc, #456]	@ (800484c <HAL_RCC_OscConfig+0xb3c>)
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	4a71      	ldr	r2, [pc, #452]	@ (800484c <HAL_RCC_OscConfig+0xb3c>)
 8004688:	f043 0301 	orr.w	r3, r3, #1
 800468c:	6213      	str	r3, [r2, #32]
 800468e:	e00b      	b.n	80046a8 <HAL_RCC_OscConfig+0x998>
 8004690:	4b6e      	ldr	r3, [pc, #440]	@ (800484c <HAL_RCC_OscConfig+0xb3c>)
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	4a6d      	ldr	r2, [pc, #436]	@ (800484c <HAL_RCC_OscConfig+0xb3c>)
 8004696:	f023 0301 	bic.w	r3, r3, #1
 800469a:	6213      	str	r3, [r2, #32]
 800469c:	4b6b      	ldr	r3, [pc, #428]	@ (800484c <HAL_RCC_OscConfig+0xb3c>)
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	4a6a      	ldr	r2, [pc, #424]	@ (800484c <HAL_RCC_OscConfig+0xb3c>)
 80046a2:	f023 0304 	bic.w	r3, r3, #4
 80046a6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 8082 	beq.w	80047be <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ba:	f7ff fb0b 	bl	8003cd4 <HAL_GetTick>
 80046be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c2:	e00b      	b.n	80046dc <HAL_RCC_OscConfig+0x9cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046c4:	f7ff fb06 	bl	8003cd4 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x9cc>
        {
          return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e326      	b.n	8004d2a <HAL_RCC_OscConfig+0x101a>
 80046dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80046e4:	2202      	movs	r2, #2
 80046e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	fa93 f2a3 	rbit	r2, r3
 80046f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046fa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004704:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004708:	2202      	movs	r2, #2
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004710:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	fa93 f2a3 	rbit	r2, r3
 800471a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800471e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004722:	601a      	str	r2, [r3, #0]
  return(result);
 8004724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004728:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800472c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472e:	fab3 f383 	clz	r3, r3
 8004732:	b2db      	uxtb	r3, r3
 8004734:	095b      	lsrs	r3, r3, #5
 8004736:	b2db      	uxtb	r3, r3
 8004738:	f043 0302 	orr.w	r3, r3, #2
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d102      	bne.n	8004748 <HAL_RCC_OscConfig+0xa38>
 8004742:	4b42      	ldr	r3, [pc, #264]	@ (800484c <HAL_RCC_OscConfig+0xb3c>)
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	e013      	b.n	8004770 <HAL_RCC_OscConfig+0xa60>
 8004748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800474c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004750:	2202      	movs	r2, #2
 8004752:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004758:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	fa93 f2a3 	rbit	r2, r3
 8004762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004766:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	4b37      	ldr	r3, [pc, #220]	@ (800484c <HAL_RCC_OscConfig+0xb3c>)
 800476e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004770:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004774:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 8004778:	2102      	movs	r1, #2
 800477a:	6011      	str	r1, [r2, #0]
 800477c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004780:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 8004784:	6812      	ldr	r2, [r2, #0]
 8004786:	fa92 f1a2 	rbit	r1, r2
 800478a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800478e:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004792:	6011      	str	r1, [r2, #0]
  return(result);
 8004794:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004798:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	fab2 f282 	clz	r2, r2
 80047a2:	b252      	sxtb	r2, r2
 80047a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047a8:	b252      	sxtb	r2, r2
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	f002 021f 	and.w	r2, r2, #31
 80047b0:	2101      	movs	r1, #1
 80047b2:	fa01 f202 	lsl.w	r2, r1, r2
 80047b6:	4013      	ands	r3, r2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d083      	beq.n	80046c4 <HAL_RCC_OscConfig+0x9b4>
 80047bc:	e082      	b.n	80048c4 <HAL_RCC_OscConfig+0xbb4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047be:	f7ff fa89 	bl	8003cd4 <HAL_GetTick>
 80047c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c6:	e00b      	b.n	80047e0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047c8:	f7ff fa84 	bl	8003cd4 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d8:	4293      	cmp	r3, r2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e2a4      	b.n	8004d2a <HAL_RCC_OscConfig+0x101a>
 80047e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047e4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80047e8:	2202      	movs	r2, #2
 80047ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047f0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	fa93 f2a3 	rbit	r2, r3
 80047fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047fe:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004808:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800480c:	2202      	movs	r2, #2
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004814:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	fa93 f2a3 	rbit	r2, r3
 800481e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004822:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004826:	601a      	str	r2, [r3, #0]
  return(result);
 8004828:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800482c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004830:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004832:	fab3 f383 	clz	r3, r3
 8004836:	b2db      	uxtb	r3, r3
 8004838:	095b      	lsrs	r3, r3, #5
 800483a:	b2db      	uxtb	r3, r3
 800483c:	f043 0302 	orr.w	r3, r3, #2
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d104      	bne.n	8004850 <HAL_RCC_OscConfig+0xb40>
 8004846:	4b01      	ldr	r3, [pc, #4]	@ (800484c <HAL_RCC_OscConfig+0xb3c>)
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	e015      	b.n	8004878 <HAL_RCC_OscConfig+0xb68>
 800484c:	40021000 	.word	0x40021000
 8004850:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004854:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004858:	2202      	movs	r2, #2
 800485a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004860:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	fa93 f2a3 	rbit	r2, r3
 800486a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800486e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	4bad      	ldr	r3, [pc, #692]	@ (8004b2c <HAL_RCC_OscConfig+0xe1c>)
 8004876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004878:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800487c:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 8004880:	2102      	movs	r1, #2
 8004882:	6011      	str	r1, [r2, #0]
 8004884:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004888:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 800488c:	6812      	ldr	r2, [r2, #0]
 800488e:	fa92 f1a2 	rbit	r1, r2
 8004892:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004896:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800489a:	6011      	str	r1, [r2, #0]
  return(result);
 800489c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80048a0:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80048a4:	6812      	ldr	r2, [r2, #0]
 80048a6:	fab2 f282 	clz	r2, r2
 80048aa:	b252      	sxtb	r2, r2
 80048ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048b0:	b252      	sxtb	r2, r2
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	f002 021f 	and.w	r2, r2, #31
 80048b8:	2101      	movs	r1, #1
 80048ba:	fa01 f202 	lsl.w	r2, r1, r2
 80048be:	4013      	ands	r3, r2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d181      	bne.n	80047c8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048c4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d105      	bne.n	80048d8 <HAL_RCC_OscConfig+0xbc8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048cc:	4b97      	ldr	r3, [pc, #604]	@ (8004b2c <HAL_RCC_OscConfig+0xe1c>)
 80048ce:	69db      	ldr	r3, [r3, #28]
 80048d0:	4a96      	ldr	r2, [pc, #600]	@ (8004b2c <HAL_RCC_OscConfig+0xe1c>)
 80048d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048d6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 821f 	beq.w	8004d28 <HAL_RCC_OscConfig+0x1018>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048ea:	4b90      	ldr	r3, [pc, #576]	@ (8004b2c <HAL_RCC_OscConfig+0xe1c>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f003 030c 	and.w	r3, r3, #12
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	f000 8216 	beq.w	8004d24 <HAL_RCC_OscConfig+0x1014>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	2b02      	cmp	r3, #2
 8004906:	f040 8166 	bne.w	8004bd6 <HAL_RCC_OscConfig+0xec6>
 800490a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800490e:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8004912:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004916:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800491c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	fa93 f2a3 	rbit	r2, r3
 8004926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800492a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800492e:	601a      	str	r2, [r3, #0]
  return(result);
 8004930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004934:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004938:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800493a:	fab3 f383 	clz	r3, r3
 800493e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004942:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	461a      	mov	r2, r3
 800494a:	2300      	movs	r3, #0
 800494c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494e:	f7ff f9c1 	bl	8003cd4 <HAL_GetTick>
 8004952:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004956:	e00a      	b.n	800496e <HAL_RCC_OscConfig+0xc5e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004958:	f7ff f9bc 	bl	8003cd4 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	4a72      	ldr	r2, [pc, #456]	@ (8004b30 <HAL_RCC_OscConfig+0xe20>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0xc5e>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e1dd      	b.n	8004d2a <HAL_RCC_OscConfig+0x101a>
 800496e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004972:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004976:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800497a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004980:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	fa93 f2a3 	rbit	r2, r3
 800498a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800498e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004992:	601a      	str	r2, [r3, #0]
  return(result);
 8004994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004998:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800499c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800499e:	fab3 f383 	clz	r3, r3
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	095b      	lsrs	r3, r3, #5
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	f043 0301 	orr.w	r3, r3, #1
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d102      	bne.n	80049b8 <HAL_RCC_OscConfig+0xca8>
 80049b2:	4b5e      	ldr	r3, [pc, #376]	@ (8004b2c <HAL_RCC_OscConfig+0xe1c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	e027      	b.n	8004a08 <HAL_RCC_OscConfig+0xcf8>
 80049b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049bc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80049c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80049c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ca:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	fa93 f2a3 	rbit	r2, r3
 80049d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049d8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049e2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80049e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049f0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	fa93 f2a3 	rbit	r2, r3
 80049fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049fe:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	4b49      	ldr	r3, [pc, #292]	@ (8004b2c <HAL_RCC_OscConfig+0xe1c>)
 8004a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a08:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a0c:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 8004a10:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004a14:	6011      	str	r1, [r2, #0]
 8004a16:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a1a:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 8004a1e:	6812      	ldr	r2, [r2, #0]
 8004a20:	fa92 f1a2 	rbit	r1, r2
 8004a24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a28:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004a2c:	6011      	str	r1, [r2, #0]
  return(result);
 8004a2e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004a32:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004a36:	6812      	ldr	r2, [r2, #0]
 8004a38:	fab2 f282 	clz	r2, r2
 8004a3c:	b252      	sxtb	r2, r2
 8004a3e:	f042 0220 	orr.w	r2, r2, #32
 8004a42:	b252      	sxtb	r2, r2
 8004a44:	b2d2      	uxtb	r2, r2
 8004a46:	f002 021f 	and.w	r2, r2, #31
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a50:	4013      	ands	r3, r2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d180      	bne.n	8004958 <HAL_RCC_OscConfig+0xc48>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a56:	4b35      	ldr	r3, [pc, #212]	@ (8004b2c <HAL_RCC_OscConfig+0xe1c>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004a5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	430b      	orrs	r3, r1
 8004a78:	492c      	ldr	r1, [pc, #176]	@ (8004b2c <HAL_RCC_OscConfig+0xe1c>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	604b      	str	r3, [r1, #4]
 8004a7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a82:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8004a86:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a90:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	fa93 f2a3 	rbit	r2, r3
 8004a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a9e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004aa2:	601a      	str	r2, [r3, #0]
  return(result);
 8004aa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aa8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004aac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aae:	fab3 f383 	clz	r3, r3
 8004ab2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004ab6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	461a      	mov	r2, r3
 8004abe:	2301      	movs	r3, #1
 8004ac0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac2:	f7ff f907 	bl	8003cd4 <HAL_GetTick>
 8004ac6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004aca:	e00a      	b.n	8004ae2 <HAL_RCC_OscConfig+0xdd2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004acc:	f7ff f902 	bl	8003cd4 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	4a15      	ldr	r2, [pc, #84]	@ (8004b30 <HAL_RCC_OscConfig+0xe20>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0xdd2>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e123      	b.n	8004d2a <HAL_RCC_OscConfig+0x101a>
 8004ae2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ae6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004aea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004aee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004af4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	fa93 f2a3 	rbit	r2, r3
 8004afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b02:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004b06:	601a      	str	r2, [r3, #0]
  return(result);
 8004b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b0c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004b10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b12:	fab3 f383 	clz	r3, r3
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	095b      	lsrs	r3, r3, #5
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	f043 0301 	orr.w	r3, r3, #1
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d106      	bne.n	8004b34 <HAL_RCC_OscConfig+0xe24>
 8004b26:	4b01      	ldr	r3, [pc, #4]	@ (8004b2c <HAL_RCC_OscConfig+0xe1c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	e02b      	b.n	8004b84 <HAL_RCC_OscConfig+0xe74>
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	00030d40 	.word	0x00030d40
 8004b34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b38:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004b3c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b46:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	fa93 f2a3 	rbit	r2, r3
 8004b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b54:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b5e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004b62:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b6c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	fa93 f2a3 	rbit	r2, r3
 8004b76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b7a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	4b6c      	ldr	r3, [pc, #432]	@ (8004d34 <HAL_RCC_OscConfig+0x1024>)
 8004b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b84:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b88:	f5a2 72e2 	sub.w	r2, r2, #452	@ 0x1c4
 8004b8c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004b90:	6011      	str	r1, [r2, #0]
 8004b92:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b96:	f5a2 72e2 	sub.w	r2, r2, #452	@ 0x1c4
 8004b9a:	6812      	ldr	r2, [r2, #0]
 8004b9c:	fa92 f1a2 	rbit	r1, r2
 8004ba0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ba4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004ba8:	6011      	str	r1, [r2, #0]
  return(result);
 8004baa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bae:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	fab2 f282 	clz	r2, r2
 8004bb8:	b252      	sxtb	r2, r2
 8004bba:	f042 0220 	orr.w	r2, r2, #32
 8004bbe:	b252      	sxtb	r2, r2
 8004bc0:	b2d2      	uxtb	r2, r2
 8004bc2:	f002 021f 	and.w	r2, r2, #31
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bcc:	4013      	ands	r3, r2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f43f af7c 	beq.w	8004acc <HAL_RCC_OscConfig+0xdbc>
 8004bd4:	e0a8      	b.n	8004d28 <HAL_RCC_OscConfig+0x1018>
 8004bd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bda:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004bde:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004be2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004be8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	fa93 f2a3 	rbit	r2, r3
 8004bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bf6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004bfa:	601a      	str	r2, [r3, #0]
  return(result);
 8004bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c00:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004c04:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c06:	fab3 f383 	clz	r3, r3
 8004c0a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004c0e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	461a      	mov	r2, r3
 8004c16:	2300      	movs	r3, #0
 8004c18:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1a:	f7ff f85b 	bl	8003cd4 <HAL_GetTick>
 8004c1e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c22:	e00a      	b.n	8004c3a <HAL_RCC_OscConfig+0xf2a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c24:	f7ff f856 	bl	8003cd4 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	4a41      	ldr	r2, [pc, #260]	@ (8004d38 <HAL_RCC_OscConfig+0x1028>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0xf2a>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e077      	b.n	8004d2a <HAL_RCC_OscConfig+0x101a>
 8004c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c3e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004c42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c4c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	fa93 f2a3 	rbit	r2, r3
 8004c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c5a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004c5e:	601a      	str	r2, [r3, #0]
  return(result);
 8004c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c64:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004c68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c6a:	fab3 f383 	clz	r3, r3
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	095b      	lsrs	r3, r3, #5
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	f043 0301 	orr.w	r3, r3, #1
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d102      	bne.n	8004c84 <HAL_RCC_OscConfig+0xf74>
 8004c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8004d34 <HAL_RCC_OscConfig+0x1024>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	e027      	b.n	8004cd4 <HAL_RCC_OscConfig+0xfc4>
 8004c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c88:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004c8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004c90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c96:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	fa93 f2a3 	rbit	r2, r3
 8004ca0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ca4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cae:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004cb2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cbc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	fa93 f2a3 	rbit	r2, r3
 8004cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cca:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	4b18      	ldr	r3, [pc, #96]	@ (8004d34 <HAL_RCC_OscConfig+0x1024>)
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004cd8:	f5a2 72f6 	sub.w	r2, r2, #492	@ 0x1ec
 8004cdc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004ce0:	6011      	str	r1, [r2, #0]
 8004ce2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ce6:	f5a2 72f6 	sub.w	r2, r2, #492	@ 0x1ec
 8004cea:	6812      	ldr	r2, [r2, #0]
 8004cec:	fa92 f1a2 	rbit	r1, r2
 8004cf0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004cf4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004cf8:	6011      	str	r1, [r2, #0]
  return(result);
 8004cfa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004cfe:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004d02:	6812      	ldr	r2, [r2, #0]
 8004d04:	fab2 f282 	clz	r2, r2
 8004d08:	b252      	sxtb	r2, r2
 8004d0a:	f042 0220 	orr.w	r2, r2, #32
 8004d0e:	b252      	sxtb	r2, r2
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	f002 021f 	and.w	r2, r2, #31
 8004d16:	2101      	movs	r1, #1
 8004d18:	fa01 f202 	lsl.w	r2, r1, r2
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d180      	bne.n	8004c24 <HAL_RCC_OscConfig+0xf14>
 8004d22:	e001      	b.n	8004d28 <HAL_RCC_OscConfig+0x1018>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e000      	b.n	8004d2a <HAL_RCC_OscConfig+0x101a>
    }
  }
  
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40021000 	.word	0x40021000
 8004d38:	00030d40 	.word	0x00030d40

08004d3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b09c      	sub	sp, #112	@ 0x70
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004d4a:	4b98      	ldr	r3, [pc, #608]	@ (8004fac <HAL_RCC_ClockConfig+0x270>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0307 	and.w	r3, r3, #7
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d910      	bls.n	8004d7a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d58:	4b94      	ldr	r3, [pc, #592]	@ (8004fac <HAL_RCC_ClockConfig+0x270>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f023 0207 	bic.w	r2, r3, #7
 8004d60:	4992      	ldr	r1, [pc, #584]	@ (8004fac <HAL_RCC_ClockConfig+0x270>)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004d68:	4b90      	ldr	r3, [pc, #576]	@ (8004fac <HAL_RCC_ClockConfig+0x270>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d001      	beq.n	8004d7a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e15a      	b.n	8005030 <HAL_RCC_ClockConfig+0x2f4>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d008      	beq.n	8004d98 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d86:	4b8a      	ldr	r3, [pc, #552]	@ (8004fb0 <HAL_RCC_ClockConfig+0x274>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	4987      	ldr	r1, [pc, #540]	@ (8004fb0 <HAL_RCC_ClockConfig+0x274>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f000 810d 	beq.w	8004fc0 <HAL_RCC_ClockConfig+0x284>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d13d      	bne.n	8004e2a <HAL_RCC_ClockConfig+0xee>
 8004dae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004db2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004db6:	fa93 f3a3 	rbit	r3, r3
 8004dba:	667b      	str	r3, [r7, #100]	@ 0x64
  return(result);
 8004dbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dbe:	fab3 f383 	clz	r3, r3
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	f043 0301 	orr.w	r3, r3, #1
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d102      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0x9c>
 8004dd2:	4b77      	ldr	r3, [pc, #476]	@ (8004fb0 <HAL_RCC_ClockConfig+0x274>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	e00f      	b.n	8004df8 <HAL_RCC_ClockConfig+0xbc>
 8004dd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004ddc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004de0:	fa93 f3a3 	rbit	r3, r3
 8004de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004de6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004dea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004dec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004dee:	fa93 f3a3 	rbit	r3, r3
 8004df2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004df4:	4b6e      	ldr	r3, [pc, #440]	@ (8004fb0 <HAL_RCC_ClockConfig+0x274>)
 8004df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004dfc:	653a      	str	r2, [r7, #80]	@ 0x50
 8004dfe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004e00:	fa92 f2a2 	rbit	r2, r2
 8004e04:	64fa      	str	r2, [r7, #76]	@ 0x4c
  return(result);
 8004e06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e08:	fab2 f282 	clz	r2, r2
 8004e0c:	b252      	sxtb	r2, r2
 8004e0e:	f042 0220 	orr.w	r2, r2, #32
 8004e12:	b252      	sxtb	r2, r2
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	f002 021f 	and.w	r2, r2, #31
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e20:	4013      	ands	r3, r2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d17d      	bne.n	8004f22 <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e102      	b.n	8005030 <HAL_RCC_ClockConfig+0x2f4>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d13d      	bne.n	8004eae <HAL_RCC_ClockConfig+0x172>
 8004e32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e36:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e3a:	fa93 f3a3 	rbit	r3, r3
 8004e3e:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8004e40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e42:	fab3 f383 	clz	r3, r3
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	095b      	lsrs	r3, r3, #5
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	f043 0301 	orr.w	r3, r3, #1
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d102      	bne.n	8004e5c <HAL_RCC_ClockConfig+0x120>
 8004e56:	4b56      	ldr	r3, [pc, #344]	@ (8004fb0 <HAL_RCC_ClockConfig+0x274>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	e00f      	b.n	8004e7c <HAL_RCC_ClockConfig+0x140>
 8004e5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e60:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e64:	fa93 f3a3 	rbit	r3, r3
 8004e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e72:	fa93 f3a3 	rbit	r3, r3
 8004e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e78:	4b4d      	ldr	r3, [pc, #308]	@ (8004fb0 <HAL_RCC_ClockConfig+0x274>)
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004e80:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e84:	fa92 f2a2 	rbit	r2, r2
 8004e88:	62fa      	str	r2, [r7, #44]	@ 0x2c
  return(result);
 8004e8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e8c:	fab2 f282 	clz	r2, r2
 8004e90:	b252      	sxtb	r2, r2
 8004e92:	f042 0220 	orr.w	r2, r2, #32
 8004e96:	b252      	sxtb	r2, r2
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	f002 021f 	and.w	r2, r2, #31
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d13b      	bne.n	8004f22 <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e0c0      	b.n	8005030 <HAL_RCC_ClockConfig+0x2f4>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb4:	fa93 f3a3 	rbit	r3, r3
 8004eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ebc:	fab3 f383 	clz	r3, r3
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	095b      	lsrs	r3, r3, #5
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	f043 0301 	orr.w	r3, r3, #1
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d102      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0x19a>
 8004ed0:	4b37      	ldr	r3, [pc, #220]	@ (8004fb0 <HAL_RCC_ClockConfig+0x274>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	e00d      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x1b6>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	fa93 f3a3 	rbit	r3, r3
 8004ee0:	61fb      	str	r3, [r7, #28]
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	fa93 f3a3 	rbit	r3, r3
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	4b30      	ldr	r3, [pc, #192]	@ (8004fb0 <HAL_RCC_ClockConfig+0x274>)
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	613a      	str	r2, [r7, #16]
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	fa92 f2a2 	rbit	r2, r2
 8004efc:	60fa      	str	r2, [r7, #12]
  return(result);
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	fab2 f282 	clz	r2, r2
 8004f04:	b252      	sxtb	r2, r2
 8004f06:	f042 0220 	orr.w	r2, r2, #32
 8004f0a:	b252      	sxtb	r2, r2
 8004f0c:	b2d2      	uxtb	r2, r2
 8004f0e:	f002 021f 	and.w	r2, r2, #31
 8004f12:	2101      	movs	r1, #1
 8004f14:	fa01 f202 	lsl.w	r2, r1, r2
 8004f18:	4013      	ands	r3, r2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e086      	b.n	8005030 <HAL_RCC_ClockConfig+0x2f4>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f22:	4b23      	ldr	r3, [pc, #140]	@ (8004fb0 <HAL_RCC_ClockConfig+0x274>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f023 0203 	bic.w	r2, r3, #3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	4920      	ldr	r1, [pc, #128]	@ (8004fb0 <HAL_RCC_ClockConfig+0x274>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f34:	f7fe fece 	bl	8003cd4 <HAL_GetTick>
 8004f38:	66f8      	str	r0, [r7, #108]	@ 0x6c
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d112      	bne.n	8004f68 <HAL_RCC_ClockConfig+0x22c>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f42:	e00a      	b.n	8004f5a <HAL_RCC_ClockConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f44:	f7fe fec6 	bl	8003cd4 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_ClockConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e06a      	b.n	8005030 <HAL_RCC_ClockConfig+0x2f4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f5a:	4b15      	ldr	r3, [pc, #84]	@ (8004fb0 <HAL_RCC_ClockConfig+0x274>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	d1ee      	bne.n	8004f44 <HAL_RCC_ClockConfig+0x208>
 8004f66:	e02b      	b.n	8004fc0 <HAL_RCC_ClockConfig+0x284>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d121      	bne.n	8004fb4 <HAL_RCC_ClockConfig+0x278>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f70:	e00a      	b.n	8004f88 <HAL_RCC_ClockConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f72:	f7fe feaf 	bl	8003cd4 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_ClockConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e053      	b.n	8005030 <HAL_RCC_ClockConfig+0x2f4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f88:	4b09      	ldr	r3, [pc, #36]	@ (8004fb0 <HAL_RCC_ClockConfig+0x274>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f003 030c 	and.w	r3, r3, #12
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d1ee      	bne.n	8004f72 <HAL_RCC_ClockConfig+0x236>
 8004f94:	e014      	b.n	8004fc0 <HAL_RCC_ClockConfig+0x284>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f96:	f7fe fe9d 	bl	8003cd4 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d905      	bls.n	8004fb4 <HAL_RCC_ClockConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e041      	b.n	8005030 <HAL_RCC_ClockConfig+0x2f4>
 8004fac:	40022000 	.word	0x40022000
 8004fb0:	40021000 	.word	0x40021000
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fb4:	4b20      	ldr	r3, [pc, #128]	@ (8005038 <HAL_RCC_ClockConfig+0x2fc>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f003 030c 	and.w	r3, r3, #12
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1ea      	bne.n	8004f96 <HAL_RCC_ClockConfig+0x25a>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004fc0:	4b1e      	ldr	r3, [pc, #120]	@ (800503c <HAL_RCC_ClockConfig+0x300>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d210      	bcs.n	8004ff0 <HAL_RCC_ClockConfig+0x2b4>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fce:	4b1b      	ldr	r3, [pc, #108]	@ (800503c <HAL_RCC_ClockConfig+0x300>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f023 0207 	bic.w	r2, r3, #7
 8004fd6:	4919      	ldr	r1, [pc, #100]	@ (800503c <HAL_RCC_ClockConfig+0x300>)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004fde:	4b17      	ldr	r3, [pc, #92]	@ (800503c <HAL_RCC_ClockConfig+0x300>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d001      	beq.n	8004ff0 <HAL_RCC_ClockConfig+0x2b4>
    {
      return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e01f      	b.n	8005030 <HAL_RCC_ClockConfig+0x2f4>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d008      	beq.n	800500e <HAL_RCC_ClockConfig+0x2d2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8005038 <HAL_RCC_ClockConfig+0x2fc>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	490b      	ldr	r1, [pc, #44]	@ (8005038 <HAL_RCC_ClockConfig+0x2fc>)
 800500a:	4313      	orrs	r3, r2
 800500c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0308 	and.w	r3, r3, #8
 8005016:	2b00      	cmp	r3, #0
 8005018:	d009      	beq.n	800502e <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800501a:	4b07      	ldr	r3, [pc, #28]	@ (8005038 <HAL_RCC_ClockConfig+0x2fc>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	4903      	ldr	r1, [pc, #12]	@ (8005038 <HAL_RCC_ClockConfig+0x2fc>)
 800502a:	4313      	orrs	r3, r2
 800502c:	604b      	str	r3, [r1, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3770      	adds	r7, #112	@ 0x70
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	40021000 	.word	0x40021000
 800503c:	40022000 	.word	0x40022000

08005040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  //return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
  return F_CPU;
 8005044:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
}
 8005048:	4618      	mov	r0, r3
 800504a:	46bd      	mov	sp, r7
 800504c:	bc80      	pop	{r7}
 800504e:	4770      	bx	lr

08005050 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800505a:	2300      	movs	r3, #0
 800505c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800505e:	2300      	movs	r3, #0
 8005060:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8005062:	2300      	movs	r3, #0
 8005064:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8005066:	e154      	b.n	8005312 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	2101      	movs	r1, #1
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	fa01 f303 	lsl.w	r3, r1, r3
 8005074:	4013      	ands	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 8146 	beq.w	800530c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2b02      	cmp	r3, #2
 8005086:	d003      	beq.n	8005090 <HAL_GPIO_Init+0x40>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2b12      	cmp	r3, #18
 800508e:	d123      	bne.n	80050d8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	08da      	lsrs	r2, r3, #3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3208      	adds	r2, #8
 8005098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800509c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f003 0307 	and.w	r3, r3, #7
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	220f      	movs	r2, #15
 80050a8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ac:	43db      	mvns	r3, r3
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	4013      	ands	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	08da      	lsrs	r2, r3, #3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3208      	adds	r2, #8
 80050d2:	6939      	ldr	r1, [r7, #16]
 80050d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	2203      	movs	r2, #3
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	43db      	mvns	r3, r3
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4013      	ands	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f003 0203 	and.w	r2, r3, #3
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	005b      	lsls	r3, r3, #1
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d00b      	beq.n	800512c <HAL_GPIO_Init+0xdc>
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	2b02      	cmp	r3, #2
 800511a:	d007      	beq.n	800512c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005120:	2b11      	cmp	r3, #17
 8005122:	d003      	beq.n	800512c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	2b12      	cmp	r3, #18
 800512a:	d130      	bne.n	800518e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	2203      	movs	r2, #3
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	43db      	mvns	r3, r3
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	4013      	ands	r3, r2
 8005142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	fa02 f303 	lsl.w	r3, r2, r3
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	4313      	orrs	r3, r2
 8005154:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005162:	2201      	movs	r2, #1
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	fa02 f303 	lsl.w	r3, r2, r3
 800516a:	43db      	mvns	r3, r3
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4013      	ands	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	091b      	lsrs	r3, r3, #4
 8005178:	f003 0201 	and.w	r2, r3, #1
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	2203      	movs	r2, #3
 800519a:	fa02 f303 	lsl.w	r3, r2, r3
 800519e:	43db      	mvns	r3, r3
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	4013      	ands	r3, r2
 80051a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 80a0 	beq.w	800530c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051cc:	4b58      	ldr	r3, [pc, #352]	@ (8005330 <HAL_GPIO_Init+0x2e0>)
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	4a57      	ldr	r2, [pc, #348]	@ (8005330 <HAL_GPIO_Init+0x2e0>)
 80051d2:	f043 0301 	orr.w	r3, r3, #1
 80051d6:	6193      	str	r3, [r2, #24]
 80051d8:	4b55      	ldr	r3, [pc, #340]	@ (8005330 <HAL_GPIO_Init+0x2e0>)
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80051e4:	4a53      	ldr	r2, [pc, #332]	@ (8005334 <HAL_GPIO_Init+0x2e4>)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	089b      	lsrs	r3, r3, #2
 80051ea:	3302      	adds	r3, #2
 80051ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051f0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	220f      	movs	r2, #15
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	43db      	mvns	r3, r3
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	4013      	ands	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800520e:	d019      	beq.n	8005244 <HAL_GPIO_Init+0x1f4>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a49      	ldr	r2, [pc, #292]	@ (8005338 <HAL_GPIO_Init+0x2e8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d013      	beq.n	8005240 <HAL_GPIO_Init+0x1f0>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a48      	ldr	r2, [pc, #288]	@ (800533c <HAL_GPIO_Init+0x2ec>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d00d      	beq.n	800523c <HAL_GPIO_Init+0x1ec>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a47      	ldr	r2, [pc, #284]	@ (8005340 <HAL_GPIO_Init+0x2f0>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d007      	beq.n	8005238 <HAL_GPIO_Init+0x1e8>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a46      	ldr	r2, [pc, #280]	@ (8005344 <HAL_GPIO_Init+0x2f4>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d101      	bne.n	8005234 <HAL_GPIO_Init+0x1e4>
 8005230:	2304      	movs	r3, #4
 8005232:	e008      	b.n	8005246 <HAL_GPIO_Init+0x1f6>
 8005234:	2305      	movs	r3, #5
 8005236:	e006      	b.n	8005246 <HAL_GPIO_Init+0x1f6>
 8005238:	2303      	movs	r3, #3
 800523a:	e004      	b.n	8005246 <HAL_GPIO_Init+0x1f6>
 800523c:	2302      	movs	r3, #2
 800523e:	e002      	b.n	8005246 <HAL_GPIO_Init+0x1f6>
 8005240:	2301      	movs	r3, #1
 8005242:	e000      	b.n	8005246 <HAL_GPIO_Init+0x1f6>
 8005244:	2300      	movs	r3, #0
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	f002 0203 	and.w	r2, r2, #3
 800524c:	0092      	lsls	r2, r2, #2
 800524e:	4093      	lsls	r3, r2
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4313      	orrs	r3, r2
 8005254:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005256:	4937      	ldr	r1, [pc, #220]	@ (8005334 <HAL_GPIO_Init+0x2e4>)
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	089b      	lsrs	r3, r3, #2
 800525c:	3302      	adds	r3, #2
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005264:	4b38      	ldr	r3, [pc, #224]	@ (8005348 <HAL_GPIO_Init+0x2f8>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	43db      	mvns	r3, r3
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4013      	ands	r3, r2
 8005272:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	4313      	orrs	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005288:	4a2f      	ldr	r2, [pc, #188]	@ (8005348 <HAL_GPIO_Init+0x2f8>)
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800528e:	4b2e      	ldr	r3, [pc, #184]	@ (8005348 <HAL_GPIO_Init+0x2f8>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	43db      	mvns	r3, r3
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	4013      	ands	r3, r2
 800529c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80052b2:	4a25      	ldr	r2, [pc, #148]	@ (8005348 <HAL_GPIO_Init+0x2f8>)
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052b8:	4b23      	ldr	r3, [pc, #140]	@ (8005348 <HAL_GPIO_Init+0x2f8>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	43db      	mvns	r3, r3
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4013      	ands	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d003      	beq.n	80052dc <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80052dc:	4a1a      	ldr	r2, [pc, #104]	@ (8005348 <HAL_GPIO_Init+0x2f8>)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052e2:	4b19      	ldr	r3, [pc, #100]	@ (8005348 <HAL_GPIO_Init+0x2f8>)
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	43db      	mvns	r3, r3
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4013      	ands	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005306:	4a10      	ldr	r2, [pc, #64]	@ (8005348 <HAL_GPIO_Init+0x2f8>)
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	3301      	adds	r3, #1
 8005310:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	fa22 f303 	lsr.w	r3, r2, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	f47f aea3 	bne.w	8005068 <HAL_GPIO_Init+0x18>
  }
}
 8005322:	bf00      	nop
 8005324:	bf00      	nop
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	40021000 	.word	0x40021000
 8005334:	40010000 	.word	0x40010000
 8005338:	48000400 	.word	0x48000400
 800533c:	48000800 	.word	0x48000800
 8005340:	48000c00 	.word	0x48000c00
 8005344:	48001000 	.word	0x48001000
 8005348:	40010400 	.word	0x40010400

0800534c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	460b      	mov	r3, r1
 8005356:	807b      	strh	r3, [r7, #2]
 8005358:	4613      	mov	r3, r2
 800535a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800535c:	787b      	ldrb	r3, [r7, #1]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005362:	887a      	ldrh	r2, [r7, #2]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005368:	e002      	b.n	8005370 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800536a:	887a      	ldrh	r2, [r7, #2]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	bc80      	pop	{r7}
 8005378:	4770      	bx	lr
 800537a:	0000      	movs	r0, r0

0800537c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8005384:	2300      	movs	r3, #0
 8005386:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8005388:	2310      	movs	r3, #16
 800538a:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 800538c:	2300      	movs	r3, #0
 800538e:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8005390:	2300      	movs	r3, #0
 8005392:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005394:	2300      	movs	r3, #0
 8005396:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80053ba:	f023 030c 	bic.w	r3, r3, #12
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6812      	ldr	r2, [r2, #0]
 80053c2:	68f9      	ldr	r1, [r7, #12]
 80053c4:	430b      	orrs	r3, r1
 80053c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4aa1      	ldr	r2, [pc, #644]	@ (8005688 <UART_SetConfig+0x30c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d120      	bne.n	800544a <UART_SetConfig+0xce>
 8005408:	4ba0      	ldr	r3, [pc, #640]	@ (800568c <UART_SetConfig+0x310>)
 800540a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	2b03      	cmp	r3, #3
 8005412:	d817      	bhi.n	8005444 <UART_SetConfig+0xc8>
 8005414:	a201      	add	r2, pc, #4	@ (adr r2, 800541c <UART_SetConfig+0xa0>)
 8005416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541a:	bf00      	nop
 800541c:	0800542d 	.word	0x0800542d
 8005420:	08005439 	.word	0x08005439
 8005424:	0800543f 	.word	0x0800543f
 8005428:	08005433 	.word	0x08005433
 800542c:	2301      	movs	r3, #1
 800542e:	75fb      	strb	r3, [r7, #23]
 8005430:	e0b5      	b.n	800559e <UART_SetConfig+0x222>
 8005432:	2302      	movs	r3, #2
 8005434:	75fb      	strb	r3, [r7, #23]
 8005436:	e0b2      	b.n	800559e <UART_SetConfig+0x222>
 8005438:	2304      	movs	r3, #4
 800543a:	75fb      	strb	r3, [r7, #23]
 800543c:	e0af      	b.n	800559e <UART_SetConfig+0x222>
 800543e:	2308      	movs	r3, #8
 8005440:	75fb      	strb	r3, [r7, #23]
 8005442:	e0ac      	b.n	800559e <UART_SetConfig+0x222>
 8005444:	2310      	movs	r3, #16
 8005446:	75fb      	strb	r3, [r7, #23]
 8005448:	e0a9      	b.n	800559e <UART_SetConfig+0x222>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a90      	ldr	r2, [pc, #576]	@ (8005690 <UART_SetConfig+0x314>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d124      	bne.n	800549e <UART_SetConfig+0x122>
 8005454:	4b8d      	ldr	r3, [pc, #564]	@ (800568c <UART_SetConfig+0x310>)
 8005456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005458:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800545c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005460:	d011      	beq.n	8005486 <UART_SetConfig+0x10a>
 8005462:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005466:	d817      	bhi.n	8005498 <UART_SetConfig+0x11c>
 8005468:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800546c:	d011      	beq.n	8005492 <UART_SetConfig+0x116>
 800546e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005472:	d811      	bhi.n	8005498 <UART_SetConfig+0x11c>
 8005474:	2b00      	cmp	r3, #0
 8005476:	d003      	beq.n	8005480 <UART_SetConfig+0x104>
 8005478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800547c:	d006      	beq.n	800548c <UART_SetConfig+0x110>
 800547e:	e00b      	b.n	8005498 <UART_SetConfig+0x11c>
 8005480:	2300      	movs	r3, #0
 8005482:	75fb      	strb	r3, [r7, #23]
 8005484:	e08b      	b.n	800559e <UART_SetConfig+0x222>
 8005486:	2302      	movs	r3, #2
 8005488:	75fb      	strb	r3, [r7, #23]
 800548a:	e088      	b.n	800559e <UART_SetConfig+0x222>
 800548c:	2304      	movs	r3, #4
 800548e:	75fb      	strb	r3, [r7, #23]
 8005490:	e085      	b.n	800559e <UART_SetConfig+0x222>
 8005492:	2308      	movs	r3, #8
 8005494:	75fb      	strb	r3, [r7, #23]
 8005496:	e082      	b.n	800559e <UART_SetConfig+0x222>
 8005498:	2310      	movs	r3, #16
 800549a:	75fb      	strb	r3, [r7, #23]
 800549c:	e07f      	b.n	800559e <UART_SetConfig+0x222>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a7c      	ldr	r2, [pc, #496]	@ (8005694 <UART_SetConfig+0x318>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d124      	bne.n	80054f2 <UART_SetConfig+0x176>
 80054a8:	4b78      	ldr	r3, [pc, #480]	@ (800568c <UART_SetConfig+0x310>)
 80054aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ac:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80054b0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80054b4:	d011      	beq.n	80054da <UART_SetConfig+0x15e>
 80054b6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80054ba:	d817      	bhi.n	80054ec <UART_SetConfig+0x170>
 80054bc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80054c0:	d011      	beq.n	80054e6 <UART_SetConfig+0x16a>
 80054c2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80054c6:	d811      	bhi.n	80054ec <UART_SetConfig+0x170>
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <UART_SetConfig+0x158>
 80054cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80054d0:	d006      	beq.n	80054e0 <UART_SetConfig+0x164>
 80054d2:	e00b      	b.n	80054ec <UART_SetConfig+0x170>
 80054d4:	2300      	movs	r3, #0
 80054d6:	75fb      	strb	r3, [r7, #23]
 80054d8:	e061      	b.n	800559e <UART_SetConfig+0x222>
 80054da:	2302      	movs	r3, #2
 80054dc:	75fb      	strb	r3, [r7, #23]
 80054de:	e05e      	b.n	800559e <UART_SetConfig+0x222>
 80054e0:	2304      	movs	r3, #4
 80054e2:	75fb      	strb	r3, [r7, #23]
 80054e4:	e05b      	b.n	800559e <UART_SetConfig+0x222>
 80054e6:	2308      	movs	r3, #8
 80054e8:	75fb      	strb	r3, [r7, #23]
 80054ea:	e058      	b.n	800559e <UART_SetConfig+0x222>
 80054ec:	2310      	movs	r3, #16
 80054ee:	75fb      	strb	r3, [r7, #23]
 80054f0:	e055      	b.n	800559e <UART_SetConfig+0x222>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a68      	ldr	r2, [pc, #416]	@ (8005698 <UART_SetConfig+0x31c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d124      	bne.n	8005546 <UART_SetConfig+0x1ca>
 80054fc:	4b63      	ldr	r3, [pc, #396]	@ (800568c <UART_SetConfig+0x310>)
 80054fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005500:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005504:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005508:	d011      	beq.n	800552e <UART_SetConfig+0x1b2>
 800550a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800550e:	d817      	bhi.n	8005540 <UART_SetConfig+0x1c4>
 8005510:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005514:	d011      	beq.n	800553a <UART_SetConfig+0x1be>
 8005516:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800551a:	d811      	bhi.n	8005540 <UART_SetConfig+0x1c4>
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <UART_SetConfig+0x1ac>
 8005520:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005524:	d006      	beq.n	8005534 <UART_SetConfig+0x1b8>
 8005526:	e00b      	b.n	8005540 <UART_SetConfig+0x1c4>
 8005528:	2300      	movs	r3, #0
 800552a:	75fb      	strb	r3, [r7, #23]
 800552c:	e037      	b.n	800559e <UART_SetConfig+0x222>
 800552e:	2302      	movs	r3, #2
 8005530:	75fb      	strb	r3, [r7, #23]
 8005532:	e034      	b.n	800559e <UART_SetConfig+0x222>
 8005534:	2304      	movs	r3, #4
 8005536:	75fb      	strb	r3, [r7, #23]
 8005538:	e031      	b.n	800559e <UART_SetConfig+0x222>
 800553a:	2308      	movs	r3, #8
 800553c:	75fb      	strb	r3, [r7, #23]
 800553e:	e02e      	b.n	800559e <UART_SetConfig+0x222>
 8005540:	2310      	movs	r3, #16
 8005542:	75fb      	strb	r3, [r7, #23]
 8005544:	e02b      	b.n	800559e <UART_SetConfig+0x222>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a54      	ldr	r2, [pc, #336]	@ (800569c <UART_SetConfig+0x320>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d124      	bne.n	800559a <UART_SetConfig+0x21e>
 8005550:	4b4e      	ldr	r3, [pc, #312]	@ (800568c <UART_SetConfig+0x310>)
 8005552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005554:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005558:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800555c:	d011      	beq.n	8005582 <UART_SetConfig+0x206>
 800555e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005562:	d817      	bhi.n	8005594 <UART_SetConfig+0x218>
 8005564:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005568:	d011      	beq.n	800558e <UART_SetConfig+0x212>
 800556a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800556e:	d811      	bhi.n	8005594 <UART_SetConfig+0x218>
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <UART_SetConfig+0x200>
 8005574:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005578:	d006      	beq.n	8005588 <UART_SetConfig+0x20c>
 800557a:	e00b      	b.n	8005594 <UART_SetConfig+0x218>
 800557c:	2300      	movs	r3, #0
 800557e:	75fb      	strb	r3, [r7, #23]
 8005580:	e00d      	b.n	800559e <UART_SetConfig+0x222>
 8005582:	2302      	movs	r3, #2
 8005584:	75fb      	strb	r3, [r7, #23]
 8005586:	e00a      	b.n	800559e <UART_SetConfig+0x222>
 8005588:	2304      	movs	r3, #4
 800558a:	75fb      	strb	r3, [r7, #23]
 800558c:	e007      	b.n	800559e <UART_SetConfig+0x222>
 800558e:	2308      	movs	r3, #8
 8005590:	75fb      	strb	r3, [r7, #23]
 8005592:	e004      	b.n	800559e <UART_SetConfig+0x222>
 8005594:	2310      	movs	r3, #16
 8005596:	75fb      	strb	r3, [r7, #23]
 8005598:	e001      	b.n	800559e <UART_SetConfig+0x222>
 800559a:	2310      	movs	r3, #16
 800559c:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055a6:	d17b      	bne.n	80056a0 <UART_SetConfig+0x324>
  {
    switch (clocksource)
 80055a8:	7dfb      	ldrb	r3, [r7, #23]
 80055aa:	2b08      	cmp	r3, #8
 80055ac:	d856      	bhi.n	800565c <UART_SetConfig+0x2e0>
 80055ae:	a201      	add	r2, pc, #4	@ (adr r2, 80055b4 <UART_SetConfig+0x238>)
 80055b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b4:	080055d9 	.word	0x080055d9
 80055b8:	080055f5 	.word	0x080055f5
 80055bc:	08005611 	.word	0x08005611
 80055c0:	0800565d 	.word	0x0800565d
 80055c4:	0800562b 	.word	0x0800562b
 80055c8:	0800565d 	.word	0x0800565d
 80055cc:	0800565d 	.word	0x0800565d
 80055d0:	0800565d 	.word	0x0800565d
 80055d4:	08005647 	.word	0x08005647
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80055d8:	f7fe fb92 	bl	8003d00 <HAL_RCC_GetPCLK1Freq>
 80055dc:	4603      	mov	r3, r0
 80055de:	005a      	lsls	r2, r3, #1
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	085b      	lsrs	r3, r3, #1
 80055e6:	441a      	add	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f0:	82bb      	strh	r3, [r7, #20]
        break;
 80055f2:	e036      	b.n	8005662 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80055f4:	f7ff fd24 	bl	8005040 <HAL_RCC_GetPCLK2Freq>
 80055f8:	4603      	mov	r3, r0
 80055fa:	005a      	lsls	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	085b      	lsrs	r3, r3, #1
 8005602:	441a      	add	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	fbb2 f3f3 	udiv	r3, r2, r3
 800560c:	82bb      	strh	r3, [r7, #20]
        break;
 800560e:	e028      	b.n	8005662 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	085b      	lsrs	r3, r3, #1
 8005616:	f103 73f4 	add.w	r3, r3, #31981568	@ 0x1e80000
 800561a:	f503 4390 	add.w	r3, r3, #18432	@ 0x4800
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6852      	ldr	r2, [r2, #4]
 8005622:	fbb3 f3f2 	udiv	r3, r3, r2
 8005626:	82bb      	strh	r3, [r7, #20]
        break;
 8005628:	e01b      	b.n	8005662 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800562a:	f7fe fb61 	bl	8003cf0 <HAL_RCC_GetSysClockFreq>
 800562e:	4603      	mov	r3, r0
 8005630:	005a      	lsls	r2, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	085b      	lsrs	r3, r3, #1
 8005638:	441a      	add	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005642:	82bb      	strh	r3, [r7, #20]
        break;
 8005644:	e00d      	b.n	8005662 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	085b      	lsrs	r3, r3, #1
 800564c:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	fbb2 f3f3 	udiv	r3, r2, r3
 8005658:	82bb      	strh	r3, [r7, #20]
        break;
 800565a:	e002      	b.n	8005662 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	74fb      	strb	r3, [r7, #19]
        break;
 8005660:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8005662:	8abb      	ldrh	r3, [r7, #20]
 8005664:	f023 030f 	bic.w	r3, r3, #15
 8005668:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800566a:	8abb      	ldrh	r3, [r7, #20]
 800566c:	105b      	asrs	r3, r3, #1
 800566e:	b29b      	uxth	r3, r3
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	b29a      	uxth	r2, r3
 8005676:	897b      	ldrh	r3, [r7, #10]
 8005678:	4313      	orrs	r3, r2
 800567a:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	897a      	ldrh	r2, [r7, #10]
 8005682:	60da      	str	r2, [r3, #12]
 8005684:	e075      	b.n	8005772 <UART_SetConfig+0x3f6>
 8005686:	bf00      	nop
 8005688:	40013800 	.word	0x40013800
 800568c:	40021000 	.word	0x40021000
 8005690:	40004400 	.word	0x40004400
 8005694:	40004800 	.word	0x40004800
 8005698:	40004c00 	.word	0x40004c00
 800569c:	40005000 	.word	0x40005000
  }
  else
  {
    switch (clocksource)
 80056a0:	7dfb      	ldrb	r3, [r7, #23]
 80056a2:	2b08      	cmp	r3, #8
 80056a4:	d862      	bhi.n	800576c <UART_SetConfig+0x3f0>
 80056a6:	a201      	add	r2, pc, #4	@ (adr r2, 80056ac <UART_SetConfig+0x330>)
 80056a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ac:	080056d1 	.word	0x080056d1
 80056b0:	080056f1 	.word	0x080056f1
 80056b4:	08005711 	.word	0x08005711
 80056b8:	0800576d 	.word	0x0800576d
 80056bc:	08005731 	.word	0x08005731
 80056c0:	0800576d 	.word	0x0800576d
 80056c4:	0800576d 	.word	0x0800576d
 80056c8:	0800576d 	.word	0x0800576d
 80056cc:	08005751 	.word	0x08005751
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80056d0:	f7fe fb16 	bl	8003d00 <HAL_RCC_GetPCLK1Freq>
 80056d4:	4602      	mov	r2, r0
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	085b      	lsrs	r3, r3, #1
 80056dc:	441a      	add	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	60da      	str	r2, [r3, #12]
        break;
 80056ee:	e040      	b.n	8005772 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80056f0:	f7ff fca6 	bl	8005040 <HAL_RCC_GetPCLK2Freq>
 80056f4:	4602      	mov	r2, r0
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	085b      	lsrs	r3, r3, #1
 80056fc:	441a      	add	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	fbb2 f3f3 	udiv	r3, r2, r3
 8005706:	b29a      	uxth	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	60da      	str	r2, [r3, #12]
        break;
 800570e:	e030      	b.n	8005772 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	085b      	lsrs	r3, r3, #1
 8005716:	f503 0374 	add.w	r3, r3, #15990784	@ 0xf40000
 800571a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6852      	ldr	r2, [r2, #4]
 8005722:	fbb3 f3f2 	udiv	r3, r3, r2
 8005726:	b29a      	uxth	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	60da      	str	r2, [r3, #12]
        break;
 800572e:	e020      	b.n	8005772 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005730:	f7fe fade 	bl	8003cf0 <HAL_RCC_GetSysClockFreq>
 8005734:	4602      	mov	r2, r0
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	085b      	lsrs	r3, r3, #1
 800573c:	441a      	add	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	fbb2 f3f3 	udiv	r3, r2, r3
 8005746:	b29a      	uxth	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	60da      	str	r2, [r3, #12]
        break;
 800574e:	e010      	b.n	8005772 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	085b      	lsrs	r3, r3, #1
 8005756:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005762:	b29a      	uxth	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	60da      	str	r2, [r3, #12]
        break;
 800576a:	e002      	b.n	8005772 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	74fb      	strb	r3, [r7, #19]
        break;
 8005770:	bf00      	nop
    }
  }

  return ret;
 8005772:	7cfb      	ldrb	r3, [r7, #19]

}
 8005774:	4618      	mov	r0, r3
 8005776:	3718      	adds	r7, #24
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af02      	add	r7, sp, #8
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005784:	2300      	movs	r3, #0
 8005786:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800578e:	f7fe faa1 	bl	8003cd4 <HAL_GetTick>
 8005792:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0308 	and.w	r3, r3, #8
 800579e:	2b08      	cmp	r3, #8
 80057a0:	d10e      	bne.n	80057c0 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f873 	bl	800589c <UART_WaitOnFlagUntilTimeout>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e022      	b.n	8005806 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0304 	and.w	r3, r3, #4
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d10e      	bne.n	80057ec <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f85d 	bl	800589c <UART_WaitOnFlagUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e00c      	b.n	8005806 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
  huart->RxState = HAL_UART_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b082      	sub	sp, #8
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e039      	b.n	8005894 <HAL_UART_Init+0x86>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	d103      	bne.n	8005834 <HAL_UART_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    //HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2224      	movs	r2, #36	@ 0x24
 8005838:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0201 	bic.w	r2, r2, #1
 800584a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7ff fd95 	bl	800537c <UART_SetConfig>
 8005852:	4603      	mov	r3, r0
 8005854:	2b01      	cmp	r3, #1
 8005856:	d101      	bne.n	800585c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e01b      	b.n	8005894 <HAL_UART_Init+0x86>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800586a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689a      	ldr	r2, [r3, #8]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800587a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0201 	orr.w	r2, r2, #1
 800588a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return UART_CheckIdleState(huart);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff ff75 	bl	800577c <UART_CheckIdleState>
 8005892:	4603      	mov	r3, r0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	603b      	str	r3, [r7, #0]
 80058a8:	4613      	mov	r3, r2
 80058aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ac:	e02c      	b.n	8005908 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b4:	d028      	beq.n	8005908 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d007      	beq.n	80058cc <UART_WaitOnFlagUntilTimeout+0x30>
 80058bc:	f7fe fa0a 	bl	8003cd4 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d21d      	bcs.n	8005908 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80058da:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 0201 	bic.w	r2, r2, #1
 80058ea:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e00f      	b.n	8005928 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	69da      	ldr	r2, [r3, #28]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	4013      	ands	r3, r2
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	429a      	cmp	r2, r3
 8005916:	bf0c      	ite	eq
 8005918:	2301      	moveq	r3, #1
 800591a:	2300      	movne	r3, #0
 800591c:	b2db      	uxtb	r3, r3
 800591e:	461a      	mov	r2, r3
 8005920:	79fb      	ldrb	r3, [r7, #7]
 8005922:	429a      	cmp	r2, r3
 8005924:	d0c3      	beq.n	80058ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af02      	add	r7, sp, #8
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	603b      	str	r3, [r7, #0]
 800593c:	4613      	mov	r3, r2
 800593e:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b20      	cmp	r3, #32
 800594e:	d176      	bne.n	8005a3e <HAL_UART_Transmit+0x10e>
  {
    if((pData == NULL ) || (Size == 0U))
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <HAL_UART_Transmit+0x2c>
 8005956:	88fb      	ldrh	r3, [r7, #6]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e06f      	b.n	8005a40 <HAL_UART_Transmit+0x110>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8005966:	2b01      	cmp	r3, #1
 8005968:	d101      	bne.n	800596e <HAL_UART_Transmit+0x3e>
 800596a:	2302      	movs	r3, #2
 800596c:	e068      	b.n	8005a40 <HAL_UART_Transmit+0x110>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2221      	movs	r2, #33	@ 0x21
 8005980:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005984:	f7fe f9a6 	bl	8003cd4 <HAL_GetTick>
 8005988:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	88fa      	ldrh	r2, [r7, #6]
 800598e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	88fa      	ldrh	r2, [r7, #6]
 8005996:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while(huart->TxXferCount > 0U)
 800599a:	e033      	b.n	8005a04 <HAL_UART_Transmit+0xd4>
    {
      huart->TxXferCount--;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	3b01      	subs	r3, #1
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2200      	movs	r2, #0
 80059b6:	2180      	movs	r1, #128	@ 0x80
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f7ff ff6f 	bl	800589c <UART_WaitOnFlagUntilTimeout>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e03b      	b.n	8005a40 <HAL_UART_Transmit+0x110>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059d0:	d111      	bne.n	80059f6 <HAL_UART_Transmit+0xc6>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10d      	bne.n	80059f6 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	881a      	ldrh	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059ea:	b292      	uxth	r2, r2
 80059ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pData += 2U;
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	3302      	adds	r3, #2
 80059f2:	60bb      	str	r3, [r7, #8]
 80059f4:	e006      	b.n	8005a04 <HAL_UART_Transmit+0xd4>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	60ba      	str	r2, [r7, #8]
 80059fc:	781a      	ldrb	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	851a      	strh	r2, [r3, #40]	@ 0x28
    while(huart->TxXferCount > 0U)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1c5      	bne.n	800599c <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2200      	movs	r2, #0
 8005a18:	2140      	movs	r1, #64	@ 0x40
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f7ff ff3e 	bl	800589c <UART_WaitOnFlagUntilTimeout>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <HAL_UART_Transmit+0xfa>
    {
      return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e00a      	b.n	8005a40 <HAL_UART_Transmit+0x110>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	e000      	b.n	8005a40 <HAL_UART_Transmit+0x110>
  }
  else
  {
    return HAL_BUSY;
 8005a3e:	2302      	movs	r3, #2
  }
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3718      	adds	r7, #24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08a      	sub	sp, #40	@ 0x28
 8005a4c:	af02      	add	r7, sp, #8
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	603b      	str	r3, [r7, #0]
 8005a54:	4613      	mov	r3, r2
 8005a56:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b20      	cmp	r3, #32
 8005a66:	f040 809f 	bne.w	8005ba8 <HAL_UART_Receive+0x160>
  {
    if((pData == NULL ) || (Size == 0U))
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <HAL_UART_Receive+0x2e>
 8005a70:	88fb      	ldrh	r3, [r7, #6]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e097      	b.n	8005baa <HAL_UART_Receive+0x162>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_UART_Receive+0x40>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e090      	b.n	8005baa <HAL_UART_Receive+0x162>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f04f 32ff 	mov.w	r2, #4294967295
 8005a98:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2222      	movs	r2, #34	@ 0x22
 8005aa4:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005aa8:	f7fe f914 	bl	8003cd4 <HAL_GetTick>
 8005aac:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize = Size;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	88fa      	ldrh	r2, [r7, #6]
 8005ab2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	88fa      	ldrh	r2, [r7, #6]
 8005aba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ac6:	d10e      	bne.n	8005ae6 <HAL_UART_Receive+0x9e>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d105      	bne.n	8005adc <HAL_UART_Receive+0x94>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005ad6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ada:	e015      	b.n	8005b08 <HAL_UART_Receive+0xc0>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	22ff      	movs	r2, #255	@ 0xff
 8005ae0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ae4:	e010      	b.n	8005b08 <HAL_UART_Receive+0xc0>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10c      	bne.n	8005b08 <HAL_UART_Receive+0xc0>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d104      	bne.n	8005b00 <HAL_UART_Receive+0xb8>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	22ff      	movs	r2, #255	@ 0xff
 8005afa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005afe:	e003      	b.n	8005b08 <HAL_UART_Receive+0xc0>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	227f      	movs	r2, #127	@ 0x7f
 8005b04:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b0e:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8005b10:	e03a      	b.n	8005b88 <HAL_UART_Receive+0x140>
    {
      huart->RxXferCount--;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	2120      	movs	r1, #32
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f7ff feb4 	bl	800589c <UART_WaitOnFlagUntilTimeout>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <HAL_UART_Receive+0xf6>
      {
        return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e035      	b.n	8005baa <HAL_UART_Receive+0x162>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b46:	d112      	bne.n	8005b6e <HAL_UART_Receive+0x126>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10e      	bne.n	8005b6e <HAL_UART_Receive+0x126>
      {
        tmp = (uint16_t*) pData ;
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	8b7b      	ldrh	r3, [r7, #26]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	3302      	adds	r3, #2
 8005b6a:	60bb      	str	r3, [r7, #8]
 8005b6c:	e00c      	b.n	8005b88 <HAL_UART_Receive+0x140>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	b2d9      	uxtb	r1, r3
 8005b78:	8b7b      	ldrh	r3, [r7, #26]
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	1c58      	adds	r0, r3, #1
 8005b80:	60b8      	str	r0, [r7, #8]
 8005b82:	400a      	ands	r2, r1
 8005b84:	b2d2      	uxtb	r2, r2
 8005b86:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1be      	bne.n	8005b12 <HAL_UART_Receive+0xca>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	e000      	b.n	8005baa <HAL_UART_Receive+0x162>
  }
  else
  {
    return HAL_BUSY;
 8005ba8:	2302      	movs	r3, #2
  }
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3720      	adds	r7, #32
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	0000      	movs	r0, r0

08005bb4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
char *_sbrk(int incr)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005bbc:	4b11      	ldr	r3, [pc, #68]	@ (8005c04 <_sbrk+0x50>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d102      	bne.n	8005bca <_sbrk+0x16>
		heap_end = &end;
 8005bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8005c04 <_sbrk+0x50>)
 8005bc6:	4a10      	ldr	r2, [pc, #64]	@ (8005c08 <_sbrk+0x54>)
 8005bc8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005bca:	4b0e      	ldr	r3, [pc, #56]	@ (8005c04 <_sbrk+0x50>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8005c04 <_sbrk+0x50>)
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	466a      	mov	r2, sp
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d907      	bls.n	8005bee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005bde:	f7fb fdd7 	bl	8001790 <__errno>
 8005be2:	4603      	mov	r3, r0
 8005be4:	220c      	movs	r2, #12
 8005be6:	601a      	str	r2, [r3, #0]
		return (char *) -1;
 8005be8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bec:	e006      	b.n	8005bfc <_sbrk+0x48>
	}

	heap_end += incr;
 8005bee:	4b05      	ldr	r3, [pc, #20]	@ (8005c04 <_sbrk+0x50>)
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	4a03      	ldr	r2, [pc, #12]	@ (8005c04 <_sbrk+0x50>)
 8005bf8:	6013      	str	r3, [r2, #0]

	return (char *) prev_heap_end;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	200001ac 	.word	0x200001ac
 8005c08:	20000330 	.word	0x20000330

08005c0c <Reset_Handler>:
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	e003      	b.n	8005c18 <LoopCopyDataInit>

08005c10 <CopyDataInit>:
 8005c10:	4b0b      	ldr	r3, [pc, #44]	@ (8005c40 <LoopForever+0x2>)
 8005c12:	585b      	ldr	r3, [r3, r1]
 8005c14:	5043      	str	r3, [r0, r1]
 8005c16:	3104      	adds	r1, #4

08005c18 <LoopCopyDataInit>:
 8005c18:	480a      	ldr	r0, [pc, #40]	@ (8005c44 <LoopForever+0x6>)
 8005c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c48 <LoopForever+0xa>)
 8005c1c:	1842      	adds	r2, r0, r1
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d3f6      	bcc.n	8005c10 <CopyDataInit>
 8005c22:	4a0a      	ldr	r2, [pc, #40]	@ (8005c4c <LoopForever+0xe>)
 8005c24:	e002      	b.n	8005c2c <LoopFillZerobss>

08005c26 <FillZerobss>:
 8005c26:	2300      	movs	r3, #0
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	3204      	adds	r2, #4

08005c2c <LoopFillZerobss>:
 8005c2c:	4b08      	ldr	r3, [pc, #32]	@ (8005c50 <LoopForever+0x12>)
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d3f9      	bcc.n	8005c26 <FillZerobss>
 8005c32:	f3af 8000 	nop.w
 8005c36:	f7fb fdb1 	bl	800179c <__libc_init_array>
 8005c3a:	f7fd f9e1 	bl	8003000 <main>

08005c3e <LoopForever>:
 8005c3e:	e7fe      	b.n	8005c3e <LoopForever>
 8005c40:	08005d90 	.word	0x08005d90
 8005c44:	20000000 	.word	0x20000000
 8005c48:	2000006c 	.word	0x2000006c
 8005c4c:	2000006c 	.word	0x2000006c
 8005c50:	20000330 	.word	0x20000330

08005c54 <BusFault_Handler>:
 8005c54:	e7fe      	b.n	8005c54 <BusFault_Handler>
 8005c56:	0000      	movs	r0, r0

08005c58 <_init>:
 8005c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5a:	bf00      	nop
 8005c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c5e:	bc08      	pop	{r3}
 8005c60:	469e      	mov	lr, r3
 8005c62:	4770      	bx	lr

08005c64 <_fini>:
 8005c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c66:	bf00      	nop
 8005c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6a:	bc08      	pop	{r3}
 8005c6c:	469e      	mov	lr, r3
 8005c6e:	4770      	bx	lr
