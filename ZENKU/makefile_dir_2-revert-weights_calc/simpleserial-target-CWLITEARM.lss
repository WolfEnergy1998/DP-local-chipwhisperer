
simpleserial-target-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004388  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004518  08004518  00005518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004618  08004618  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  08004618  08004618  00005618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004620  08004620  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004620  08004620  00005620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004624  08004624  00005624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004628  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  2000006c  08004694  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000330  08004694  00006330  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a7b  00000000  00000000  00006096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055bd  00000000  00000000  0001db11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000344b  00000000  00000000  000230ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000830  00000000  00000000  00026520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000650  00000000  00000000  00026d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000099a4  00000000  00000000  000273a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000031be  00000000  00000000  00030d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000012  00000000  00000000  00033f02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001814  00000000  00000000  00033f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  00035728  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000070  00000000  00000000  0003586c  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loclists 0000307d  00000000  00000000  000358dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_rnglists 000002b3  00000000  00000000  00038959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 0000014d  00000000  00000000  00038c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <exp>:
 8000190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000192:	4604      	mov	r4, r0
 8000194:	460d      	mov	r5, r1
 8000196:	f000 f83b 	bl	8000210 <__ieee754_exp>
 800019a:	4606      	mov	r6, r0
 800019c:	460f      	mov	r7, r1
 800019e:	4620      	mov	r0, r4
 80001a0:	4629      	mov	r1, r5
 80001a2:	f000 f82f 	bl	8000204 <finite>
 80001a6:	b178      	cbz	r0, 80001c8 <exp+0x38>
 80001a8:	a311      	add	r3, pc, #68	@ (adr r3, 80001f0 <exp+0x60>)
 80001aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80001ae:	4620      	mov	r0, r4
 80001b0:	4629      	mov	r1, r5
 80001b2:	f000 ff71 	bl	8001098 <__aeabi_dcmpgt>
 80001b6:	b950      	cbnz	r0, 80001ce <exp+0x3e>
 80001b8:	a30f      	add	r3, pc, #60	@ (adr r3, 80001f8 <exp+0x68>)
 80001ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80001be:	4620      	mov	r0, r4
 80001c0:	4629      	mov	r1, r5
 80001c2:	f000 ff4b 	bl	800105c <__aeabi_dcmplt>
 80001c6:	b958      	cbnz	r0, 80001e0 <exp+0x50>
 80001c8:	4630      	mov	r0, r6
 80001ca:	4639      	mov	r1, r7
 80001cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80001ce:	f001 fcc1 	bl	8001b54 <__errno>
 80001d2:	4f0b      	ldr	r7, [pc, #44]	@ (8000200 <exp+0x70>)
 80001d4:	2322      	movs	r3, #34	@ 0x22
 80001d6:	2600      	movs	r6, #0
 80001d8:	6003      	str	r3, [r0, #0]
 80001da:	4639      	mov	r1, r7
 80001dc:	4630      	mov	r0, r6
 80001de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80001e0:	f001 fcb8 	bl	8001b54 <__errno>
 80001e4:	2322      	movs	r3, #34	@ 0x22
 80001e6:	6003      	str	r3, [r0, #0]
 80001e8:	2600      	movs	r6, #0
 80001ea:	2700      	movs	r7, #0
 80001ec:	e7ec      	b.n	80001c8 <exp+0x38>
 80001ee:	bf00      	nop
 80001f0:	fefa39ef 	.word	0xfefa39ef
 80001f4:	40862e42 	.word	0x40862e42
 80001f8:	d52d3051 	.word	0xd52d3051
 80001fc:	c0874910 	.word	0xc0874910
 8000200:	7ff00000 	.word	0x7ff00000

08000204 <finite>:
 8000204:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8000208:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800020c:	0fc0      	lsrs	r0, r0, #31
 800020e:	4770      	bx	lr

08000210 <__ieee754_exp>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	4dce      	ldr	r5, [pc, #824]	@ (8000550 <__ieee754_exp+0x340>)
 8000216:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800021a:	42aa      	cmp	r2, r5
 800021c:	b084      	sub	sp, #16
 800021e:	4606      	mov	r6, r0
 8000220:	460f      	mov	r7, r1
 8000222:	ea4f 74d1 	mov.w	r4, r1, lsr #31
 8000226:	d90d      	bls.n	8000244 <__ieee754_exp+0x34>
 8000228:	4dca      	ldr	r5, [pc, #808]	@ (8000554 <__ieee754_exp+0x344>)
 800022a:	42aa      	cmp	r2, r5
 800022c:	d96d      	bls.n	800030a <__ieee754_exp+0xfa>
 800022e:	f3c1 0313 	ubfx	r3, r1, #0, #20
 8000232:	4303      	orrs	r3, r0
 8000234:	4602      	mov	r2, r0
 8000236:	f040 8140 	bne.w	80004ba <__ieee754_exp+0x2aa>
 800023a:	2c00      	cmp	r4, #0
 800023c:	d062      	beq.n	8000304 <__ieee754_exp+0xf4>
 800023e:	2000      	movs	r0, #0
 8000240:	2100      	movs	r1, #0
 8000242:	e05f      	b.n	8000304 <__ieee754_exp+0xf4>
 8000244:	4bc4      	ldr	r3, [pc, #784]	@ (8000558 <__ieee754_exp+0x348>)
 8000246:	429a      	cmp	r2, r3
 8000248:	f200 8121 	bhi.w	800048e <__ieee754_exp+0x27e>
 800024c:	4bc3      	ldr	r3, [pc, #780]	@ (800055c <__ieee754_exp+0x34c>)
 800024e:	429a      	cmp	r2, r3
 8000250:	f240 810a 	bls.w	8000468 <__ieee754_exp+0x258>
 8000254:	4632      	mov	r2, r6
 8000256:	463b      	mov	r3, r7
 8000258:	4630      	mov	r0, r6
 800025a:	4639      	mov	r1, r7
 800025c:	f000 fc8c 	bl	8000b78 <__aeabi_dmul>
 8000260:	a3a5      	add	r3, pc, #660	@ (adr r3, 80004f8 <__ieee754_exp+0x2e8>)
 8000262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000266:	4604      	mov	r4, r0
 8000268:	460d      	mov	r5, r1
 800026a:	f000 fc85 	bl	8000b78 <__aeabi_dmul>
 800026e:	a3a4      	add	r3, pc, #656	@ (adr r3, 8000500 <__ieee754_exp+0x2f0>)
 8000270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000274:	f000 fac8 	bl	8000808 <__aeabi_dsub>
 8000278:	4622      	mov	r2, r4
 800027a:	462b      	mov	r3, r5
 800027c:	f000 fc7c 	bl	8000b78 <__aeabi_dmul>
 8000280:	a3a1      	add	r3, pc, #644	@ (adr r3, 8000508 <__ieee754_exp+0x2f8>)
 8000282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000286:	f000 fac1 	bl	800080c <__adddf3>
 800028a:	4622      	mov	r2, r4
 800028c:	462b      	mov	r3, r5
 800028e:	f000 fc73 	bl	8000b78 <__aeabi_dmul>
 8000292:	a39f      	add	r3, pc, #636	@ (adr r3, 8000510 <__ieee754_exp+0x300>)
 8000294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000298:	f000 fab6 	bl	8000808 <__aeabi_dsub>
 800029c:	4622      	mov	r2, r4
 800029e:	462b      	mov	r3, r5
 80002a0:	f000 fc6a 	bl	8000b78 <__aeabi_dmul>
 80002a4:	a39c      	add	r3, pc, #624	@ (adr r3, 8000518 <__ieee754_exp+0x308>)
 80002a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002aa:	f000 faaf 	bl	800080c <__adddf3>
 80002ae:	4622      	mov	r2, r4
 80002b0:	462b      	mov	r3, r5
 80002b2:	f000 fc61 	bl	8000b78 <__aeabi_dmul>
 80002b6:	4602      	mov	r2, r0
 80002b8:	460b      	mov	r3, r1
 80002ba:	4630      	mov	r0, r6
 80002bc:	4639      	mov	r1, r7
 80002be:	f000 faa3 	bl	8000808 <__aeabi_dsub>
 80002c2:	4602      	mov	r2, r0
 80002c4:	460b      	mov	r3, r1
 80002c6:	4630      	mov	r0, r6
 80002c8:	4639      	mov	r1, r7
 80002ca:	4690      	mov	r8, r2
 80002cc:	4699      	mov	r9, r3
 80002ce:	f000 fc53 	bl	8000b78 <__aeabi_dmul>
 80002d2:	2200      	movs	r2, #0
 80002d4:	4604      	mov	r4, r0
 80002d6:	460d      	mov	r5, r1
 80002d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002dc:	4640      	mov	r0, r8
 80002de:	4649      	mov	r1, r9
 80002e0:	f000 fa92 	bl	8000808 <__aeabi_dsub>
 80002e4:	4602      	mov	r2, r0
 80002e6:	460b      	mov	r3, r1
 80002e8:	4620      	mov	r0, r4
 80002ea:	4629      	mov	r1, r5
 80002ec:	f000 fd6e 	bl	8000dcc <__aeabi_ddiv>
 80002f0:	4632      	mov	r2, r6
 80002f2:	463b      	mov	r3, r7
 80002f4:	f000 fa88 	bl	8000808 <__aeabi_dsub>
 80002f8:	4602      	mov	r2, r0
 80002fa:	460b      	mov	r3, r1
 80002fc:	2000      	movs	r0, #0
 80002fe:	4998      	ldr	r1, [pc, #608]	@ (8000560 <__ieee754_exp+0x350>)
 8000300:	f000 fa82 	bl	8000808 <__aeabi_dsub>
 8000304:	b004      	add	sp, #16
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	a385      	add	r3, pc, #532	@ (adr r3, 8000520 <__ieee754_exp+0x310>)
 800030c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000310:	f000 fec2 	bl	8001098 <__aeabi_dcmpgt>
 8000314:	4605      	mov	r5, r0
 8000316:	2800      	cmp	r0, #0
 8000318:	f040 80d5 	bne.w	80004c6 <__ieee754_exp+0x2b6>
 800031c:	a382      	add	r3, pc, #520	@ (adr r3, 8000528 <__ieee754_exp+0x318>)
 800031e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000322:	4630      	mov	r0, r6
 8000324:	4639      	mov	r1, r7
 8000326:	f000 fe99 	bl	800105c <__aeabi_dcmplt>
 800032a:	2800      	cmp	r0, #0
 800032c:	f040 80dd 	bne.w	80004ea <__ieee754_exp+0x2da>
 8000330:	4b8c      	ldr	r3, [pc, #560]	@ (8000564 <__ieee754_exp+0x354>)
 8000332:	4630      	mov	r0, r6
 8000334:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8000338:	4639      	mov	r1, r7
 800033a:	a37d      	add	r3, pc, #500	@ (adr r3, 8000530 <__ieee754_exp+0x320>)
 800033c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000340:	f000 fc1a 	bl	8000b78 <__aeabi_dmul>
 8000344:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8000348:	f000 fa60 	bl	800080c <__adddf3>
 800034c:	f000 fec4 	bl	80010d8 <__aeabi_d2iz>
 8000350:	4682      	mov	sl, r0
 8000352:	f000 fba7 	bl	8000aa4 <__aeabi_i2d>
 8000356:	a378      	add	r3, pc, #480	@ (adr r3, 8000538 <__ieee754_exp+0x328>)
 8000358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800035c:	4604      	mov	r4, r0
 800035e:	460d      	mov	r5, r1
 8000360:	f000 fc0a 	bl	8000b78 <__aeabi_dmul>
 8000364:	4602      	mov	r2, r0
 8000366:	460b      	mov	r3, r1
 8000368:	4630      	mov	r0, r6
 800036a:	4639      	mov	r1, r7
 800036c:	f000 fa4c 	bl	8000808 <__aeabi_dsub>
 8000370:	a373      	add	r3, pc, #460	@ (adr r3, 8000540 <__ieee754_exp+0x330>)
 8000372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000376:	4680      	mov	r8, r0
 8000378:	4689      	mov	r9, r1
 800037a:	4620      	mov	r0, r4
 800037c:	4629      	mov	r1, r5
 800037e:	f000 fbfb 	bl	8000b78 <__aeabi_dmul>
 8000382:	e9cd 0100 	strd	r0, r1, [sp]
 8000386:	e9dd 2300 	ldrd	r2, r3, [sp]
 800038a:	4640      	mov	r0, r8
 800038c:	4649      	mov	r1, r9
 800038e:	f000 fa3b 	bl	8000808 <__aeabi_dsub>
 8000392:	4602      	mov	r2, r0
 8000394:	460b      	mov	r3, r1
 8000396:	4606      	mov	r6, r0
 8000398:	460f      	mov	r7, r1
 800039a:	f000 fbed 	bl	8000b78 <__aeabi_dmul>
 800039e:	a356      	add	r3, pc, #344	@ (adr r3, 80004f8 <__ieee754_exp+0x2e8>)
 80003a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003a4:	4604      	mov	r4, r0
 80003a6:	460d      	mov	r5, r1
 80003a8:	f000 fbe6 	bl	8000b78 <__aeabi_dmul>
 80003ac:	a354      	add	r3, pc, #336	@ (adr r3, 8000500 <__ieee754_exp+0x2f0>)
 80003ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003b2:	f000 fa29 	bl	8000808 <__aeabi_dsub>
 80003b6:	4622      	mov	r2, r4
 80003b8:	462b      	mov	r3, r5
 80003ba:	f000 fbdd 	bl	8000b78 <__aeabi_dmul>
 80003be:	a352      	add	r3, pc, #328	@ (adr r3, 8000508 <__ieee754_exp+0x2f8>)
 80003c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003c4:	f000 fa22 	bl	800080c <__adddf3>
 80003c8:	4622      	mov	r2, r4
 80003ca:	462b      	mov	r3, r5
 80003cc:	f000 fbd4 	bl	8000b78 <__aeabi_dmul>
 80003d0:	a34f      	add	r3, pc, #316	@ (adr r3, 8000510 <__ieee754_exp+0x300>)
 80003d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003d6:	f000 fa17 	bl	8000808 <__aeabi_dsub>
 80003da:	4622      	mov	r2, r4
 80003dc:	462b      	mov	r3, r5
 80003de:	f000 fbcb 	bl	8000b78 <__aeabi_dmul>
 80003e2:	a34d      	add	r3, pc, #308	@ (adr r3, 8000518 <__ieee754_exp+0x308>)
 80003e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003e8:	f000 fa10 	bl	800080c <__adddf3>
 80003ec:	4622      	mov	r2, r4
 80003ee:	462b      	mov	r3, r5
 80003f0:	f000 fbc2 	bl	8000b78 <__aeabi_dmul>
 80003f4:	4602      	mov	r2, r0
 80003f6:	460b      	mov	r3, r1
 80003f8:	4630      	mov	r0, r6
 80003fa:	4639      	mov	r1, r7
 80003fc:	f000 fa04 	bl	8000808 <__aeabi_dsub>
 8000400:	4602      	mov	r2, r0
 8000402:	460b      	mov	r3, r1
 8000404:	4604      	mov	r4, r0
 8000406:	460d      	mov	r5, r1
 8000408:	4630      	mov	r0, r6
 800040a:	4639      	mov	r1, r7
 800040c:	f000 fbb4 	bl	8000b78 <__aeabi_dmul>
 8000410:	4622      	mov	r2, r4
 8000412:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000416:	462b      	mov	r3, r5
 8000418:	f1ba 0f00 	cmp.w	sl, #0
 800041c:	f43f af53 	beq.w	80002c6 <__ieee754_exp+0xb6>
 8000420:	2000      	movs	r0, #0
 8000422:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000426:	f000 f9ef 	bl	8000808 <__aeabi_dsub>
 800042a:	4602      	mov	r2, r0
 800042c:	460b      	mov	r3, r1
 800042e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000432:	f000 fccb 	bl	8000dcc <__aeabi_ddiv>
 8000436:	4602      	mov	r2, r0
 8000438:	460b      	mov	r3, r1
 800043a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800043e:	f000 f9e3 	bl	8000808 <__aeabi_dsub>
 8000442:	4642      	mov	r2, r8
 8000444:	464b      	mov	r3, r9
 8000446:	f000 f9df 	bl	8000808 <__aeabi_dsub>
 800044a:	4602      	mov	r2, r0
 800044c:	460b      	mov	r3, r1
 800044e:	2000      	movs	r0, #0
 8000450:	4943      	ldr	r1, [pc, #268]	@ (8000560 <__ieee754_exp+0x350>)
 8000452:	f000 f9d9 	bl	8000808 <__aeabi_dsub>
 8000456:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 800045a:	4592      	cmp	sl, r2
 800045c:	db39      	blt.n	80004d2 <__ieee754_exp+0x2c2>
 800045e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8000462:	b004      	add	sp, #16
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	a337      	add	r3, pc, #220	@ (adr r3, 8000548 <__ieee754_exp+0x338>)
 800046a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800046e:	f000 f9cd 	bl	800080c <__adddf3>
 8000472:	4b3b      	ldr	r3, [pc, #236]	@ (8000560 <__ieee754_exp+0x350>)
 8000474:	2200      	movs	r2, #0
 8000476:	f000 fe0f 	bl	8001098 <__aeabi_dcmpgt>
 800047a:	2800      	cmp	r0, #0
 800047c:	f43f aeea 	beq.w	8000254 <__ieee754_exp+0x44>
 8000480:	4b37      	ldr	r3, [pc, #220]	@ (8000560 <__ieee754_exp+0x350>)
 8000482:	2200      	movs	r2, #0
 8000484:	4630      	mov	r0, r6
 8000486:	4639      	mov	r1, r7
 8000488:	f000 f9c0 	bl	800080c <__adddf3>
 800048c:	e73a      	b.n	8000304 <__ieee754_exp+0xf4>
 800048e:	4b36      	ldr	r3, [pc, #216]	@ (8000568 <__ieee754_exp+0x358>)
 8000490:	429a      	cmp	r2, r3
 8000492:	f63f af4d 	bhi.w	8000330 <__ieee754_exp+0x120>
 8000496:	4d33      	ldr	r5, [pc, #204]	@ (8000564 <__ieee754_exp+0x354>)
 8000498:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800049c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80004a0:	f000 f9b2 	bl	8000808 <__aeabi_dsub>
 80004a4:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80004a8:	f1c4 0a01 	rsb	sl, r4, #1
 80004ac:	e9cd 2300 	strd	r2, r3, [sp]
 80004b0:	4680      	mov	r8, r0
 80004b2:	4689      	mov	r9, r1
 80004b4:	ebaa 0a04 	sub.w	sl, sl, r4
 80004b8:	e765      	b.n	8000386 <__ieee754_exp+0x176>
 80004ba:	460b      	mov	r3, r1
 80004bc:	f000 f9a6 	bl	800080c <__adddf3>
 80004c0:	b004      	add	sp, #16
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	2000      	movs	r0, #0
 80004c8:	b004      	add	sp, #16
 80004ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004ce:	f000 b877 	b.w	80005c0 <__math_oflow>
 80004d2:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 80004d6:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80004da:	2200      	movs	r2, #0
 80004dc:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 80004e0:	f000 fb4a 	bl	8000b78 <__aeabi_dmul>
 80004e4:	b004      	add	sp, #16
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	4628      	mov	r0, r5
 80004ec:	b004      	add	sp, #16
 80004ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004f2:	f000 b85b 	b.w	80005ac <__math_uflow>
 80004f6:	bf00      	nop
 80004f8:	72bea4d0 	.word	0x72bea4d0
 80004fc:	3e663769 	.word	0x3e663769
 8000500:	c5d26bf1 	.word	0xc5d26bf1
 8000504:	3ebbbd41 	.word	0x3ebbbd41
 8000508:	af25de2c 	.word	0xaf25de2c
 800050c:	3f11566a 	.word	0x3f11566a
 8000510:	16bebd93 	.word	0x16bebd93
 8000514:	3f66c16c 	.word	0x3f66c16c
 8000518:	5555553e 	.word	0x5555553e
 800051c:	3fc55555 	.word	0x3fc55555
 8000520:	fefa39ef 	.word	0xfefa39ef
 8000524:	40862e42 	.word	0x40862e42
 8000528:	d52d3051 	.word	0xd52d3051
 800052c:	c0874910 	.word	0xc0874910
 8000530:	652b82fe 	.word	0x652b82fe
 8000534:	3ff71547 	.word	0x3ff71547
 8000538:	fee00000 	.word	0xfee00000
 800053c:	3fe62e42 	.word	0x3fe62e42
 8000540:	35793c76 	.word	0x35793c76
 8000544:	3dea39ef 	.word	0x3dea39ef
 8000548:	8800759c 	.word	0x8800759c
 800054c:	7e37e43c 	.word	0x7e37e43c
 8000550:	40862e41 	.word	0x40862e41
 8000554:	7fefffff 	.word	0x7fefffff
 8000558:	3fd62e42 	.word	0x3fd62e42
 800055c:	3defffff 	.word	0x3defffff
 8000560:	3ff00000 	.word	0x3ff00000
 8000564:	08004518 	.word	0x08004518
 8000568:	3ff0a2b1 	.word	0x3ff0a2b1

0800056c <with_errno>:
 800056c:	b5d0      	push	{r4, r6, r7, lr}
 800056e:	4606      	mov	r6, r0
 8000570:	460f      	mov	r7, r1
 8000572:	4614      	mov	r4, r2
 8000574:	f001 faee 	bl	8001b54 <__errno>
 8000578:	4603      	mov	r3, r0
 800057a:	4639      	mov	r1, r7
 800057c:	4630      	mov	r0, r6
 800057e:	601c      	str	r4, [r3, #0]
 8000580:	bdd0      	pop	{r4, r6, r7, pc}
 8000582:	bf00      	nop

08000584 <xflow>:
 8000584:	b510      	push	{r4, lr}
 8000586:	4604      	mov	r4, r0
 8000588:	b082      	sub	sp, #8
 800058a:	4610      	mov	r0, r2
 800058c:	4619      	mov	r1, r3
 800058e:	b10c      	cbz	r4, 8000594 <xflow+0x10>
 8000590:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000594:	e9cd 2300 	strd	r2, r3, [sp]
 8000598:	e9dd 2300 	ldrd	r2, r3, [sp]
 800059c:	f000 faec 	bl	8000b78 <__aeabi_dmul>
 80005a0:	2222      	movs	r2, #34	@ 0x22
 80005a2:	b002      	add	sp, #8
 80005a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005a8:	e7e0      	b.n	800056c <with_errno>
 80005aa:	bf00      	nop

080005ac <__math_uflow>:
 80005ac:	2200      	movs	r2, #0
 80005ae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80005b2:	e7e7      	b.n	8000584 <xflow>

080005b4 <__math_may_uflow>:
 80005b4:	4b01      	ldr	r3, [pc, #4]	@ (80005bc <__math_may_uflow+0x8>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	e7e4      	b.n	8000584 <xflow>
 80005ba:	bf00      	nop
 80005bc:	1e580000 	.word	0x1e580000

080005c0 <__math_oflow>:
 80005c0:	2200      	movs	r2, #0
 80005c2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80005c6:	e7dd      	b.n	8000584 <xflow>

080005c8 <__math_divzero>:
 80005c8:	b500      	push	{lr}
 80005ca:	2200      	movs	r2, #0
 80005cc:	b083      	sub	sp, #12
 80005ce:	b168      	cbz	r0, 80005ec <__math_divzero+0x24>
 80005d0:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <__math_divzero+0x28>)
 80005d2:	e9cd 2300 	strd	r2, r3, [sp]
 80005d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80005da:	2200      	movs	r2, #0
 80005dc:	2300      	movs	r3, #0
 80005de:	f000 fbf5 	bl	8000dcc <__aeabi_ddiv>
 80005e2:	2222      	movs	r2, #34	@ 0x22
 80005e4:	b003      	add	sp, #12
 80005e6:	f85d eb04 	ldr.w	lr, [sp], #4
 80005ea:	e7bf      	b.n	800056c <with_errno>
 80005ec:	4b01      	ldr	r3, [pc, #4]	@ (80005f4 <__math_divzero+0x2c>)
 80005ee:	e7f0      	b.n	80005d2 <__math_divzero+0xa>
 80005f0:	bff00000 	.word	0xbff00000
 80005f4:	3ff00000 	.word	0x3ff00000

080005f8 <__math_invalid>:
 80005f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fa:	4602      	mov	r2, r0
 80005fc:	460b      	mov	r3, r1
 80005fe:	4604      	mov	r4, r0
 8000600:	460d      	mov	r5, r1
 8000602:	f000 f901 	bl	8000808 <__aeabi_dsub>
 8000606:	4602      	mov	r2, r0
 8000608:	460b      	mov	r3, r1
 800060a:	f000 fbdf 	bl	8000dcc <__aeabi_ddiv>
 800060e:	4622      	mov	r2, r4
 8000610:	4606      	mov	r6, r0
 8000612:	460f      	mov	r7, r1
 8000614:	462b      	mov	r3, r5
 8000616:	4620      	mov	r0, r4
 8000618:	4629      	mov	r1, r5
 800061a:	f000 fd47 	bl	80010ac <__aeabi_dcmpun>
 800061e:	b928      	cbnz	r0, 800062c <__math_invalid+0x34>
 8000620:	4630      	mov	r0, r6
 8000622:	4639      	mov	r1, r7
 8000624:	2221      	movs	r2, #33	@ 0x21
 8000626:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800062a:	e79f      	b.n	800056c <with_errno>
 800062c:	4630      	mov	r0, r6
 800062e:	4639      	mov	r1, r7
 8000630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000632:	bf00      	nop

08000634 <__math_check_uflow>:
 8000634:	b538      	push	{r3, r4, r5, lr}
 8000636:	2200      	movs	r2, #0
 8000638:	2300      	movs	r3, #0
 800063a:	4604      	mov	r4, r0
 800063c:	460d      	mov	r5, r1
 800063e:	f000 fd03 	bl	8001048 <__aeabi_dcmpeq>
 8000642:	b910      	cbnz	r0, 800064a <__math_check_uflow+0x16>
 8000644:	4620      	mov	r0, r4
 8000646:	4629      	mov	r1, r5
 8000648:	bd38      	pop	{r3, r4, r5, pc}
 800064a:	4620      	mov	r0, r4
 800064c:	4629      	mov	r1, r5
 800064e:	2222      	movs	r2, #34	@ 0x22
 8000650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000654:	e78a      	b.n	800056c <with_errno>
 8000656:	bf00      	nop

08000658 <__math_check_oflow>:
 8000658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800065a:	f021 4700 	bic.w	r7, r1, #2147483648	@ 0x80000000
 800065e:	460d      	mov	r5, r1
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <__math_check_oflow+0x3c>)
 8000662:	f04f 32ff 	mov.w	r2, #4294967295
 8000666:	4639      	mov	r1, r7
 8000668:	4604      	mov	r4, r0
 800066a:	f000 fd1f 	bl	80010ac <__aeabi_dcmpun>
 800066e:	b938      	cbnz	r0, 8000680 <__math_check_oflow+0x28>
 8000670:	4b08      	ldr	r3, [pc, #32]	@ (8000694 <__math_check_oflow+0x3c>)
 8000672:	4620      	mov	r0, r4
 8000674:	4639      	mov	r1, r7
 8000676:	f04f 32ff 	mov.w	r2, #4294967295
 800067a:	f000 fcf9 	bl	8001070 <__aeabi_dcmple>
 800067e:	b110      	cbz	r0, 8000686 <__math_check_oflow+0x2e>
 8000680:	4620      	mov	r0, r4
 8000682:	4629      	mov	r1, r5
 8000684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000686:	4620      	mov	r0, r4
 8000688:	4629      	mov	r1, r5
 800068a:	2222      	movs	r2, #34	@ 0x22
 800068c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000690:	e76c      	b.n	800056c <with_errno>
 8000692:	bf00      	nop
 8000694:	7fefffff 	.word	0x7fefffff

08000698 <__aeabi_fmul>:
 8000698:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800069c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80006a0:	bf1e      	ittt	ne
 80006a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80006a6:	ea92 0f0c 	teqne	r2, ip
 80006aa:	ea93 0f0c 	teqne	r3, ip
 80006ae:	d06f      	beq.n	8000790 <__aeabi_fmul+0xf8>
 80006b0:	441a      	add	r2, r3
 80006b2:	ea80 0c01 	eor.w	ip, r0, r1
 80006b6:	0240      	lsls	r0, r0, #9
 80006b8:	bf18      	it	ne
 80006ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80006be:	d01e      	beq.n	80006fe <__aeabi_fmul+0x66>
 80006c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80006c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80006c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80006cc:	fba0 3101 	umull	r3, r1, r0, r1
 80006d0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80006d4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80006d8:	bf3e      	ittt	cc
 80006da:	0049      	lslcc	r1, r1, #1
 80006dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80006e0:	005b      	lslcc	r3, r3, #1
 80006e2:	ea40 0001 	orr.w	r0, r0, r1
 80006e6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80006ea:	2afd      	cmp	r2, #253	@ 0xfd
 80006ec:	d81d      	bhi.n	800072a <__aeabi_fmul+0x92>
 80006ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80006f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006f6:	bf08      	it	eq
 80006f8:	f020 0001 	biceq.w	r0, r0, #1
 80006fc:	4770      	bx	lr
 80006fe:	f090 0f00 	teq	r0, #0
 8000702:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000706:	bf08      	it	eq
 8000708:	0249      	lsleq	r1, r1, #9
 800070a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800070e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000712:	3a7f      	subs	r2, #127	@ 0x7f
 8000714:	bfc2      	ittt	gt
 8000716:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800071a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800071e:	4770      	bxgt	lr
 8000720:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000724:	f04f 0300 	mov.w	r3, #0
 8000728:	3a01      	subs	r2, #1
 800072a:	dc5d      	bgt.n	80007e8 <__aeabi_fmul+0x150>
 800072c:	f112 0f19 	cmn.w	r2, #25
 8000730:	bfdc      	itt	le
 8000732:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000736:	4770      	bxle	lr
 8000738:	f1c2 0200 	rsb	r2, r2, #0
 800073c:	0041      	lsls	r1, r0, #1
 800073e:	fa21 f102 	lsr.w	r1, r1, r2
 8000742:	f1c2 0220 	rsb	r2, r2, #32
 8000746:	fa00 fc02 	lsl.w	ip, r0, r2
 800074a:	ea5f 0031 	movs.w	r0, r1, rrx
 800074e:	f140 0000 	adc.w	r0, r0, #0
 8000752:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000756:	bf08      	it	eq
 8000758:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800075c:	4770      	bx	lr
 800075e:	f092 0f00 	teq	r2, #0
 8000762:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000766:	bf02      	ittt	eq
 8000768:	0040      	lsleq	r0, r0, #1
 800076a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800076e:	3a01      	subeq	r2, #1
 8000770:	d0f9      	beq.n	8000766 <__aeabi_fmul+0xce>
 8000772:	ea40 000c 	orr.w	r0, r0, ip
 8000776:	f093 0f00 	teq	r3, #0
 800077a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800077e:	bf02      	ittt	eq
 8000780:	0049      	lsleq	r1, r1, #1
 8000782:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000786:	3b01      	subeq	r3, #1
 8000788:	d0f9      	beq.n	800077e <__aeabi_fmul+0xe6>
 800078a:	ea41 010c 	orr.w	r1, r1, ip
 800078e:	e78f      	b.n	80006b0 <__aeabi_fmul+0x18>
 8000790:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000794:	ea92 0f0c 	teq	r2, ip
 8000798:	bf18      	it	ne
 800079a:	ea93 0f0c 	teqne	r3, ip
 800079e:	d00a      	beq.n	80007b6 <__aeabi_fmul+0x11e>
 80007a0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80007a4:	bf18      	it	ne
 80007a6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80007aa:	d1d8      	bne.n	800075e <__aeabi_fmul+0xc6>
 80007ac:	ea80 0001 	eor.w	r0, r0, r1
 80007b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80007b4:	4770      	bx	lr
 80007b6:	f090 0f00 	teq	r0, #0
 80007ba:	bf17      	itett	ne
 80007bc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80007c0:	4608      	moveq	r0, r1
 80007c2:	f091 0f00 	teqne	r1, #0
 80007c6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80007ca:	d014      	beq.n	80007f6 <__aeabi_fmul+0x15e>
 80007cc:	ea92 0f0c 	teq	r2, ip
 80007d0:	d101      	bne.n	80007d6 <__aeabi_fmul+0x13e>
 80007d2:	0242      	lsls	r2, r0, #9
 80007d4:	d10f      	bne.n	80007f6 <__aeabi_fmul+0x15e>
 80007d6:	ea93 0f0c 	teq	r3, ip
 80007da:	d103      	bne.n	80007e4 <__aeabi_fmul+0x14c>
 80007dc:	024b      	lsls	r3, r1, #9
 80007de:	bf18      	it	ne
 80007e0:	4608      	movne	r0, r1
 80007e2:	d108      	bne.n	80007f6 <__aeabi_fmul+0x15e>
 80007e4:	ea80 0001 	eor.w	r0, r0, r1
 80007e8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80007ec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80007f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007f4:	4770      	bx	lr
 80007f6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80007fa:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80007fe:	4770      	bx	lr

08000800 <__aeabi_drsub>:
 8000800:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	e002      	b.n	800080c <__adddf3>
 8000806:	bf00      	nop

08000808 <__aeabi_dsub>:
 8000808:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800080c <__adddf3>:
 800080c:	b530      	push	{r4, r5, lr}
 800080e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000812:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000816:	ea94 0f05 	teq	r4, r5
 800081a:	bf08      	it	eq
 800081c:	ea90 0f02 	teqeq	r0, r2
 8000820:	bf1f      	itttt	ne
 8000822:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000826:	ea55 0c02 	orrsne.w	ip, r5, r2
 800082a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800082e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000832:	f000 80e2 	beq.w	80009fa <__adddf3+0x1ee>
 8000836:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800083a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800083e:	bfb8      	it	lt
 8000840:	426d      	neglt	r5, r5
 8000842:	dd0c      	ble.n	800085e <__adddf3+0x52>
 8000844:	442c      	add	r4, r5
 8000846:	ea80 0202 	eor.w	r2, r0, r2
 800084a:	ea81 0303 	eor.w	r3, r1, r3
 800084e:	ea82 0000 	eor.w	r0, r2, r0
 8000852:	ea83 0101 	eor.w	r1, r3, r1
 8000856:	ea80 0202 	eor.w	r2, r0, r2
 800085a:	ea81 0303 	eor.w	r3, r1, r3
 800085e:	2d36      	cmp	r5, #54	@ 0x36
 8000860:	bf88      	it	hi
 8000862:	bd30      	pophi	{r4, r5, pc}
 8000864:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000870:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000874:	d002      	beq.n	800087c <__adddf3+0x70>
 8000876:	4240      	negs	r0, r0
 8000878:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800087c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000888:	d002      	beq.n	8000890 <__adddf3+0x84>
 800088a:	4252      	negs	r2, r2
 800088c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000890:	ea94 0f05 	teq	r4, r5
 8000894:	f000 80a7 	beq.w	80009e6 <__adddf3+0x1da>
 8000898:	f1a4 0401 	sub.w	r4, r4, #1
 800089c:	f1d5 0e20 	rsbs	lr, r5, #32
 80008a0:	db0d      	blt.n	80008be <__adddf3+0xb2>
 80008a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80008a6:	fa22 f205 	lsr.w	r2, r2, r5
 80008aa:	1880      	adds	r0, r0, r2
 80008ac:	f141 0100 	adc.w	r1, r1, #0
 80008b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80008b4:	1880      	adds	r0, r0, r2
 80008b6:	fa43 f305 	asr.w	r3, r3, r5
 80008ba:	4159      	adcs	r1, r3
 80008bc:	e00e      	b.n	80008dc <__adddf3+0xd0>
 80008be:	f1a5 0520 	sub.w	r5, r5, #32
 80008c2:	f10e 0e20 	add.w	lr, lr, #32
 80008c6:	2a01      	cmp	r2, #1
 80008c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80008cc:	bf28      	it	cs
 80008ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80008d2:	fa43 f305 	asr.w	r3, r3, r5
 80008d6:	18c0      	adds	r0, r0, r3
 80008d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80008dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80008e0:	d507      	bpl.n	80008f2 <__adddf3+0xe6>
 80008e2:	f04f 0e00 	mov.w	lr, #0
 80008e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80008ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80008ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80008f2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80008f6:	d31b      	bcc.n	8000930 <__adddf3+0x124>
 80008f8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80008fc:	d30c      	bcc.n	8000918 <__adddf3+0x10c>
 80008fe:	0849      	lsrs	r1, r1, #1
 8000900:	ea5f 0030 	movs.w	r0, r0, rrx
 8000904:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000908:	f104 0401 	add.w	r4, r4, #1
 800090c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000910:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000914:	f080 809a 	bcs.w	8000a4c <__adddf3+0x240>
 8000918:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800091c:	bf08      	it	eq
 800091e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000922:	f150 0000 	adcs.w	r0, r0, #0
 8000926:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092a:	ea41 0105 	orr.w	r1, r1, r5
 800092e:	bd30      	pop	{r4, r5, pc}
 8000930:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000934:	4140      	adcs	r0, r0
 8000936:	eb41 0101 	adc.w	r1, r1, r1
 800093a:	3c01      	subs	r4, #1
 800093c:	bf28      	it	cs
 800093e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000942:	d2e9      	bcs.n	8000918 <__adddf3+0x10c>
 8000944:	f091 0f00 	teq	r1, #0
 8000948:	bf04      	itt	eq
 800094a:	4601      	moveq	r1, r0
 800094c:	2000      	moveq	r0, #0
 800094e:	fab1 f381 	clz	r3, r1
 8000952:	bf08      	it	eq
 8000954:	3320      	addeq	r3, #32
 8000956:	f1a3 030b 	sub.w	r3, r3, #11
 800095a:	f1b3 0220 	subs.w	r2, r3, #32
 800095e:	da0c      	bge.n	800097a <__adddf3+0x16e>
 8000960:	320c      	adds	r2, #12
 8000962:	dd08      	ble.n	8000976 <__adddf3+0x16a>
 8000964:	f102 0c14 	add.w	ip, r2, #20
 8000968:	f1c2 020c 	rsb	r2, r2, #12
 800096c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000970:	fa21 f102 	lsr.w	r1, r1, r2
 8000974:	e00c      	b.n	8000990 <__adddf3+0x184>
 8000976:	f102 0214 	add.w	r2, r2, #20
 800097a:	bfd8      	it	le
 800097c:	f1c2 0c20 	rsble	ip, r2, #32
 8000980:	fa01 f102 	lsl.w	r1, r1, r2
 8000984:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000988:	bfdc      	itt	le
 800098a:	ea41 010c 	orrle.w	r1, r1, ip
 800098e:	4090      	lslle	r0, r2
 8000990:	1ae4      	subs	r4, r4, r3
 8000992:	bfa2      	ittt	ge
 8000994:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000998:	4329      	orrge	r1, r5
 800099a:	bd30      	popge	{r4, r5, pc}
 800099c:	ea6f 0404 	mvn.w	r4, r4
 80009a0:	3c1f      	subs	r4, #31
 80009a2:	da1c      	bge.n	80009de <__adddf3+0x1d2>
 80009a4:	340c      	adds	r4, #12
 80009a6:	dc0e      	bgt.n	80009c6 <__adddf3+0x1ba>
 80009a8:	f104 0414 	add.w	r4, r4, #20
 80009ac:	f1c4 0220 	rsb	r2, r4, #32
 80009b0:	fa20 f004 	lsr.w	r0, r0, r4
 80009b4:	fa01 f302 	lsl.w	r3, r1, r2
 80009b8:	ea40 0003 	orr.w	r0, r0, r3
 80009bc:	fa21 f304 	lsr.w	r3, r1, r4
 80009c0:	ea45 0103 	orr.w	r1, r5, r3
 80009c4:	bd30      	pop	{r4, r5, pc}
 80009c6:	f1c4 040c 	rsb	r4, r4, #12
 80009ca:	f1c4 0220 	rsb	r2, r4, #32
 80009ce:	fa20 f002 	lsr.w	r0, r0, r2
 80009d2:	fa01 f304 	lsl.w	r3, r1, r4
 80009d6:	ea40 0003 	orr.w	r0, r0, r3
 80009da:	4629      	mov	r1, r5
 80009dc:	bd30      	pop	{r4, r5, pc}
 80009de:	fa21 f004 	lsr.w	r0, r1, r4
 80009e2:	4629      	mov	r1, r5
 80009e4:	bd30      	pop	{r4, r5, pc}
 80009e6:	f094 0f00 	teq	r4, #0
 80009ea:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80009ee:	bf06      	itte	eq
 80009f0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80009f4:	3401      	addeq	r4, #1
 80009f6:	3d01      	subne	r5, #1
 80009f8:	e74e      	b.n	8000898 <__adddf3+0x8c>
 80009fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80009fe:	bf18      	it	ne
 8000a00:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000a04:	d029      	beq.n	8000a5a <__adddf3+0x24e>
 8000a06:	ea94 0f05 	teq	r4, r5
 8000a0a:	bf08      	it	eq
 8000a0c:	ea90 0f02 	teqeq	r0, r2
 8000a10:	d005      	beq.n	8000a1e <__adddf3+0x212>
 8000a12:	ea54 0c00 	orrs.w	ip, r4, r0
 8000a16:	bf04      	itt	eq
 8000a18:	4619      	moveq	r1, r3
 8000a1a:	4610      	moveq	r0, r2
 8000a1c:	bd30      	pop	{r4, r5, pc}
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf1e      	ittt	ne
 8000a24:	2100      	movne	r1, #0
 8000a26:	2000      	movne	r0, #0
 8000a28:	bd30      	popne	{r4, r5, pc}
 8000a2a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000a2e:	d105      	bne.n	8000a3c <__adddf3+0x230>
 8000a30:	0040      	lsls	r0, r0, #1
 8000a32:	4149      	adcs	r1, r1
 8000a34:	bf28      	it	cs
 8000a36:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000a3a:	bd30      	pop	{r4, r5, pc}
 8000a3c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000a40:	bf3c      	itt	cc
 8000a42:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000a46:	bd30      	popcc	{r4, r5, pc}
 8000a48:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000a4c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000a50:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	bd30      	pop	{r4, r5, pc}
 8000a5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000a5e:	bf1a      	itte	ne
 8000a60:	4619      	movne	r1, r3
 8000a62:	4610      	movne	r0, r2
 8000a64:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000a68:	bf1c      	itt	ne
 8000a6a:	460b      	movne	r3, r1
 8000a6c:	4602      	movne	r2, r0
 8000a6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a72:	bf06      	itte	eq
 8000a74:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000a78:	ea91 0f03 	teqeq	r1, r3
 8000a7c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000a80:	bd30      	pop	{r4, r5, pc}
 8000a82:	bf00      	nop

08000a84 <__aeabi_ui2d>:
 8000a84:	f090 0f00 	teq	r0, #0
 8000a88:	bf04      	itt	eq
 8000a8a:	2100      	moveq	r1, #0
 8000a8c:	4770      	bxeq	lr
 8000a8e:	b530      	push	{r4, r5, lr}
 8000a90:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000a94:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000a98:	f04f 0500 	mov.w	r5, #0
 8000a9c:	f04f 0100 	mov.w	r1, #0
 8000aa0:	e750      	b.n	8000944 <__adddf3+0x138>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_i2d>:
 8000aa4:	f090 0f00 	teq	r0, #0
 8000aa8:	bf04      	itt	eq
 8000aaa:	2100      	moveq	r1, #0
 8000aac:	4770      	bxeq	lr
 8000aae:	b530      	push	{r4, r5, lr}
 8000ab0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000ab4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000ab8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000abc:	bf48      	it	mi
 8000abe:	4240      	negmi	r0, r0
 8000ac0:	f04f 0100 	mov.w	r1, #0
 8000ac4:	e73e      	b.n	8000944 <__adddf3+0x138>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_f2d>:
 8000ac8:	0042      	lsls	r2, r0, #1
 8000aca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000ace:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ad2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000adc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000ae0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000ae4:	4770      	bxne	lr
 8000ae6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000aea:	bf08      	it	eq
 8000aec:	4770      	bxeq	lr
 8000aee:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000af2:	bf04      	itt	eq
 8000af4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000af8:	4770      	bxeq	lr
 8000afa:	b530      	push	{r4, r5, lr}
 8000afc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000b00:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000b04:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000b08:	e71c      	b.n	8000944 <__adddf3+0x138>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_ul2d>:
 8000b0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b10:	bf08      	it	eq
 8000b12:	4770      	bxeq	lr
 8000b14:	b530      	push	{r4, r5, lr}
 8000b16:	f04f 0500 	mov.w	r5, #0
 8000b1a:	e00a      	b.n	8000b32 <__aeabi_l2d+0x16>

08000b1c <__aeabi_l2d>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	b530      	push	{r4, r5, lr}
 8000b26:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000b2a:	d502      	bpl.n	8000b32 <__aeabi_l2d+0x16>
 8000b2c:	4240      	negs	r0, r0
 8000b2e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b32:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000b36:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000b3a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000b3e:	f43f aed8 	beq.w	80008f2 <__adddf3+0xe6>
 8000b42:	f04f 0203 	mov.w	r2, #3
 8000b46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000b4a:	bf18      	it	ne
 8000b4c:	3203      	addne	r2, #3
 8000b4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000b52:	bf18      	it	ne
 8000b54:	3203      	addne	r2, #3
 8000b56:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000b5a:	f1c2 0320 	rsb	r3, r2, #32
 8000b5e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	fa01 fe03 	lsl.w	lr, r1, r3
 8000b6a:	ea40 000e 	orr.w	r0, r0, lr
 8000b6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000b72:	4414      	add	r4, r2
 8000b74:	e6bd      	b.n	80008f2 <__adddf3+0xe6>
 8000b76:	bf00      	nop

08000b78 <__aeabi_dmul>:
 8000b78:	b570      	push	{r4, r5, r6, lr}
 8000b7a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b7e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000b82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000b86:	bf1d      	ittte	ne
 8000b88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000b8c:	ea94 0f0c 	teqne	r4, ip
 8000b90:	ea95 0f0c 	teqne	r5, ip
 8000b94:	f000 f8de 	bleq	8000d54 <__aeabi_dmul+0x1dc>
 8000b98:	442c      	add	r4, r5
 8000b9a:	ea81 0603 	eor.w	r6, r1, r3
 8000b9e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000ba2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000ba6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000baa:	bf18      	it	ne
 8000bac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000bb0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000bb8:	d038      	beq.n	8000c2c <__aeabi_dmul+0xb4>
 8000bba:	fba0 ce02 	umull	ip, lr, r0, r2
 8000bbe:	f04f 0500 	mov.w	r5, #0
 8000bc2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000bc6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000bca:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000bce:	f04f 0600 	mov.w	r6, #0
 8000bd2:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000bd6:	f09c 0f00 	teq	ip, #0
 8000bda:	bf18      	it	ne
 8000bdc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000be0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000be4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000be8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000bec:	d204      	bcs.n	8000bf8 <__aeabi_dmul+0x80>
 8000bee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000bf2:	416d      	adcs	r5, r5
 8000bf4:	eb46 0606 	adc.w	r6, r6, r6
 8000bf8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000bfc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000c00:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000c04:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000c08:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000c0c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000c10:	bf88      	it	hi
 8000c12:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000c16:	d81e      	bhi.n	8000c56 <__aeabi_dmul+0xde>
 8000c18:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000c1c:	bf08      	it	eq
 8000c1e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000c22:	f150 0000 	adcs.w	r0, r0, #0
 8000c26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c2a:	bd70      	pop	{r4, r5, r6, pc}
 8000c2c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000c30:	ea46 0101 	orr.w	r1, r6, r1
 8000c34:	ea40 0002 	orr.w	r0, r0, r2
 8000c38:	ea81 0103 	eor.w	r1, r1, r3
 8000c3c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000c40:	bfc2      	ittt	gt
 8000c42:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c4a:	bd70      	popgt	{r4, r5, r6, pc}
 8000c4c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c50:	f04f 0e00 	mov.w	lr, #0
 8000c54:	3c01      	subs	r4, #1
 8000c56:	f300 80ab 	bgt.w	8000db0 <__aeabi_dmul+0x238>
 8000c5a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000c5e:	bfde      	ittt	le
 8000c60:	2000      	movle	r0, #0
 8000c62:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000c66:	bd70      	pople	{r4, r5, r6, pc}
 8000c68:	f1c4 0400 	rsb	r4, r4, #0
 8000c6c:	3c20      	subs	r4, #32
 8000c6e:	da35      	bge.n	8000cdc <__aeabi_dmul+0x164>
 8000c70:	340c      	adds	r4, #12
 8000c72:	dc1b      	bgt.n	8000cac <__aeabi_dmul+0x134>
 8000c74:	f104 0414 	add.w	r4, r4, #20
 8000c78:	f1c4 0520 	rsb	r5, r4, #32
 8000c7c:	fa00 f305 	lsl.w	r3, r0, r5
 8000c80:	fa20 f004 	lsr.w	r0, r0, r4
 8000c84:	fa01 f205 	lsl.w	r2, r1, r5
 8000c88:	ea40 0002 	orr.w	r0, r0, r2
 8000c8c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000c90:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000c94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000c98:	fa21 f604 	lsr.w	r6, r1, r4
 8000c9c:	eb42 0106 	adc.w	r1, r2, r6
 8000ca0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000ca4:	bf08      	it	eq
 8000ca6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000caa:	bd70      	pop	{r4, r5, r6, pc}
 8000cac:	f1c4 040c 	rsb	r4, r4, #12
 8000cb0:	f1c4 0520 	rsb	r5, r4, #32
 8000cb4:	fa00 f304 	lsl.w	r3, r0, r4
 8000cb8:	fa20 f005 	lsr.w	r0, r0, r5
 8000cbc:	fa01 f204 	lsl.w	r2, r1, r4
 8000cc0:	ea40 0002 	orr.w	r0, r0, r2
 8000cc4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000cc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000ccc:	f141 0100 	adc.w	r1, r1, #0
 8000cd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000cd4:	bf08      	it	eq
 8000cd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000cda:	bd70      	pop	{r4, r5, r6, pc}
 8000cdc:	f1c4 0520 	rsb	r5, r4, #32
 8000ce0:	fa00 f205 	lsl.w	r2, r0, r5
 8000ce4:	ea4e 0e02 	orr.w	lr, lr, r2
 8000ce8:	fa20 f304 	lsr.w	r3, r0, r4
 8000cec:	fa01 f205 	lsl.w	r2, r1, r5
 8000cf0:	ea43 0302 	orr.w	r3, r3, r2
 8000cf4:	fa21 f004 	lsr.w	r0, r1, r4
 8000cf8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000cfc:	fa21 f204 	lsr.w	r2, r1, r4
 8000d00:	ea20 0002 	bic.w	r0, r0, r2
 8000d04:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000d08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000d0c:	bf08      	it	eq
 8000d0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000d12:	bd70      	pop	{r4, r5, r6, pc}
 8000d14:	f094 0f00 	teq	r4, #0
 8000d18:	d10f      	bne.n	8000d3a <__aeabi_dmul+0x1c2>
 8000d1a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000d1e:	0040      	lsls	r0, r0, #1
 8000d20:	eb41 0101 	adc.w	r1, r1, r1
 8000d24:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000d28:	bf08      	it	eq
 8000d2a:	3c01      	subeq	r4, #1
 8000d2c:	d0f7      	beq.n	8000d1e <__aeabi_dmul+0x1a6>
 8000d2e:	ea41 0106 	orr.w	r1, r1, r6
 8000d32:	f095 0f00 	teq	r5, #0
 8000d36:	bf18      	it	ne
 8000d38:	4770      	bxne	lr
 8000d3a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000d3e:	0052      	lsls	r2, r2, #1
 8000d40:	eb43 0303 	adc.w	r3, r3, r3
 8000d44:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000d48:	bf08      	it	eq
 8000d4a:	3d01      	subeq	r5, #1
 8000d4c:	d0f7      	beq.n	8000d3e <__aeabi_dmul+0x1c6>
 8000d4e:	ea43 0306 	orr.w	r3, r3, r6
 8000d52:	4770      	bx	lr
 8000d54:	ea94 0f0c 	teq	r4, ip
 8000d58:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000d5c:	bf18      	it	ne
 8000d5e:	ea95 0f0c 	teqne	r5, ip
 8000d62:	d00c      	beq.n	8000d7e <__aeabi_dmul+0x206>
 8000d64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000d68:	bf18      	it	ne
 8000d6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000d6e:	d1d1      	bne.n	8000d14 <__aeabi_dmul+0x19c>
 8000d70:	ea81 0103 	eor.w	r1, r1, r3
 8000d74:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000d78:	f04f 0000 	mov.w	r0, #0
 8000d7c:	bd70      	pop	{r4, r5, r6, pc}
 8000d7e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000d82:	bf06      	itte	eq
 8000d84:	4610      	moveq	r0, r2
 8000d86:	4619      	moveq	r1, r3
 8000d88:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000d8c:	d019      	beq.n	8000dc2 <__aeabi_dmul+0x24a>
 8000d8e:	ea94 0f0c 	teq	r4, ip
 8000d92:	d102      	bne.n	8000d9a <__aeabi_dmul+0x222>
 8000d94:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000d98:	d113      	bne.n	8000dc2 <__aeabi_dmul+0x24a>
 8000d9a:	ea95 0f0c 	teq	r5, ip
 8000d9e:	d105      	bne.n	8000dac <__aeabi_dmul+0x234>
 8000da0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000da4:	bf1c      	itt	ne
 8000da6:	4610      	movne	r0, r2
 8000da8:	4619      	movne	r1, r3
 8000daa:	d10a      	bne.n	8000dc2 <__aeabi_dmul+0x24a>
 8000dac:	ea81 0103 	eor.w	r1, r1, r3
 8000db0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000db4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000db8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000dbc:	f04f 0000 	mov.w	r0, #0
 8000dc0:	bd70      	pop	{r4, r5, r6, pc}
 8000dc2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000dc6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000dca:	bd70      	pop	{r4, r5, r6, pc}

08000dcc <__aeabi_ddiv>:
 8000dcc:	b570      	push	{r4, r5, r6, lr}
 8000dce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000dd2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000dd6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000dda:	bf1d      	ittte	ne
 8000ddc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000de0:	ea94 0f0c 	teqne	r4, ip
 8000de4:	ea95 0f0c 	teqne	r5, ip
 8000de8:	f000 f8a7 	bleq	8000f3a <__aeabi_ddiv+0x16e>
 8000dec:	eba4 0405 	sub.w	r4, r4, r5
 8000df0:	ea81 0e03 	eor.w	lr, r1, r3
 8000df4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000df8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000dfc:	f000 8088 	beq.w	8000f10 <__aeabi_ddiv+0x144>
 8000e00:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000e04:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000e08:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000e0c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000e10:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000e14:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000e18:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000e1c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000e20:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000e24:	429d      	cmp	r5, r3
 8000e26:	bf08      	it	eq
 8000e28:	4296      	cmpeq	r6, r2
 8000e2a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000e2e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000e32:	d202      	bcs.n	8000e3a <__aeabi_ddiv+0x6e>
 8000e34:	085b      	lsrs	r3, r3, #1
 8000e36:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e3a:	1ab6      	subs	r6, r6, r2
 8000e3c:	eb65 0503 	sbc.w	r5, r5, r3
 8000e40:	085b      	lsrs	r3, r3, #1
 8000e42:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e46:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000e4a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000e4e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e52:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000e56:	bf22      	ittt	cs
 8000e58:	1ab6      	subcs	r6, r6, r2
 8000e5a:	4675      	movcs	r5, lr
 8000e5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e60:	085b      	lsrs	r3, r3, #1
 8000e62:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e66:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000e6e:	bf22      	ittt	cs
 8000e70:	1ab6      	subcs	r6, r6, r2
 8000e72:	4675      	movcs	r5, lr
 8000e74:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e78:	085b      	lsrs	r3, r3, #1
 8000e7a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e7e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e82:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000e86:	bf22      	ittt	cs
 8000e88:	1ab6      	subcs	r6, r6, r2
 8000e8a:	4675      	movcs	r5, lr
 8000e8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e90:	085b      	lsrs	r3, r3, #1
 8000e92:	ea4f 0232 	mov.w	r2, r2, rrx
 8000e96:	ebb6 0e02 	subs.w	lr, r6, r2
 8000e9a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000e9e:	bf22      	ittt	cs
 8000ea0:	1ab6      	subcs	r6, r6, r2
 8000ea2:	4675      	movcs	r5, lr
 8000ea4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ea8:	ea55 0e06 	orrs.w	lr, r5, r6
 8000eac:	d018      	beq.n	8000ee0 <__aeabi_ddiv+0x114>
 8000eae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000eb2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000eb6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000eba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000ebe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000ec2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000ec6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000eca:	d1c0      	bne.n	8000e4e <__aeabi_ddiv+0x82>
 8000ecc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000ed0:	d10b      	bne.n	8000eea <__aeabi_ddiv+0x11e>
 8000ed2:	ea41 0100 	orr.w	r1, r1, r0
 8000ed6:	f04f 0000 	mov.w	r0, #0
 8000eda:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000ede:	e7b6      	b.n	8000e4e <__aeabi_ddiv+0x82>
 8000ee0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000ee4:	bf04      	itt	eq
 8000ee6:	4301      	orreq	r1, r0
 8000ee8:	2000      	moveq	r0, #0
 8000eea:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000eee:	bf88      	it	hi
 8000ef0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000ef4:	f63f aeaf 	bhi.w	8000c56 <__aeabi_dmul+0xde>
 8000ef8:	ebb5 0c03 	subs.w	ip, r5, r3
 8000efc:	bf04      	itt	eq
 8000efe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000f02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000f06:	f150 0000 	adcs.w	r0, r0, #0
 8000f0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000f0e:	bd70      	pop	{r4, r5, r6, pc}
 8000f10:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000f14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000f18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000f1c:	bfc2      	ittt	gt
 8000f1e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000f22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000f26:	bd70      	popgt	{r4, r5, r6, pc}
 8000f28:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000f2c:	f04f 0e00 	mov.w	lr, #0
 8000f30:	3c01      	subs	r4, #1
 8000f32:	e690      	b.n	8000c56 <__aeabi_dmul+0xde>
 8000f34:	ea45 0e06 	orr.w	lr, r5, r6
 8000f38:	e68d      	b.n	8000c56 <__aeabi_dmul+0xde>
 8000f3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000f3e:	ea94 0f0c 	teq	r4, ip
 8000f42:	bf08      	it	eq
 8000f44:	ea95 0f0c 	teqeq	r5, ip
 8000f48:	f43f af3b 	beq.w	8000dc2 <__aeabi_dmul+0x24a>
 8000f4c:	ea94 0f0c 	teq	r4, ip
 8000f50:	d10a      	bne.n	8000f68 <__aeabi_ddiv+0x19c>
 8000f52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000f56:	f47f af34 	bne.w	8000dc2 <__aeabi_dmul+0x24a>
 8000f5a:	ea95 0f0c 	teq	r5, ip
 8000f5e:	f47f af25 	bne.w	8000dac <__aeabi_dmul+0x234>
 8000f62:	4610      	mov	r0, r2
 8000f64:	4619      	mov	r1, r3
 8000f66:	e72c      	b.n	8000dc2 <__aeabi_dmul+0x24a>
 8000f68:	ea95 0f0c 	teq	r5, ip
 8000f6c:	d106      	bne.n	8000f7c <__aeabi_ddiv+0x1b0>
 8000f6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000f72:	f43f aefd 	beq.w	8000d70 <__aeabi_dmul+0x1f8>
 8000f76:	4610      	mov	r0, r2
 8000f78:	4619      	mov	r1, r3
 8000f7a:	e722      	b.n	8000dc2 <__aeabi_dmul+0x24a>
 8000f7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000f80:	bf18      	it	ne
 8000f82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000f86:	f47f aec5 	bne.w	8000d14 <__aeabi_dmul+0x19c>
 8000f8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000f8e:	f47f af0d 	bne.w	8000dac <__aeabi_dmul+0x234>
 8000f92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000f96:	f47f aeeb 	bne.w	8000d70 <__aeabi_dmul+0x1f8>
 8000f9a:	e712      	b.n	8000dc2 <__aeabi_dmul+0x24a>

08000f9c <__gedf2>:
 8000f9c:	f04f 3cff 	mov.w	ip, #4294967295
 8000fa0:	e006      	b.n	8000fb0 <__cmpdf2+0x4>
 8000fa2:	bf00      	nop

08000fa4 <__ledf2>:
 8000fa4:	f04f 0c01 	mov.w	ip, #1
 8000fa8:	e002      	b.n	8000fb0 <__cmpdf2+0x4>
 8000faa:	bf00      	nop

08000fac <__cmpdf2>:
 8000fac:	f04f 0c01 	mov.w	ip, #1
 8000fb0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000fb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000fbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000fc0:	bf18      	it	ne
 8000fc2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000fc6:	d01b      	beq.n	8001000 <__cmpdf2+0x54>
 8000fc8:	b001      	add	sp, #4
 8000fca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000fce:	bf0c      	ite	eq
 8000fd0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000fd4:	ea91 0f03 	teqne	r1, r3
 8000fd8:	bf02      	ittt	eq
 8000fda:	ea90 0f02 	teqeq	r0, r2
 8000fde:	2000      	moveq	r0, #0
 8000fe0:	4770      	bxeq	lr
 8000fe2:	f110 0f00 	cmn.w	r0, #0
 8000fe6:	ea91 0f03 	teq	r1, r3
 8000fea:	bf58      	it	pl
 8000fec:	4299      	cmppl	r1, r3
 8000fee:	bf08      	it	eq
 8000ff0:	4290      	cmpeq	r0, r2
 8000ff2:	bf2c      	ite	cs
 8000ff4:	17d8      	asrcs	r0, r3, #31
 8000ff6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ffa:	f040 0001 	orr.w	r0, r0, #1
 8000ffe:	4770      	bx	lr
 8001000:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001004:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001008:	d102      	bne.n	8001010 <__cmpdf2+0x64>
 800100a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800100e:	d107      	bne.n	8001020 <__cmpdf2+0x74>
 8001010:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001014:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001018:	d1d6      	bne.n	8000fc8 <__cmpdf2+0x1c>
 800101a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800101e:	d0d3      	beq.n	8000fc8 <__cmpdf2+0x1c>
 8001020:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <__aeabi_cdrcmple>:
 8001028:	4684      	mov	ip, r0
 800102a:	4610      	mov	r0, r2
 800102c:	4662      	mov	r2, ip
 800102e:	468c      	mov	ip, r1
 8001030:	4619      	mov	r1, r3
 8001032:	4663      	mov	r3, ip
 8001034:	e000      	b.n	8001038 <__aeabi_cdcmpeq>
 8001036:	bf00      	nop

08001038 <__aeabi_cdcmpeq>:
 8001038:	b501      	push	{r0, lr}
 800103a:	f7ff ffb7 	bl	8000fac <__cmpdf2>
 800103e:	2800      	cmp	r0, #0
 8001040:	bf48      	it	mi
 8001042:	f110 0f00 	cmnmi.w	r0, #0
 8001046:	bd01      	pop	{r0, pc}

08001048 <__aeabi_dcmpeq>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff fff4 	bl	8001038 <__aeabi_cdcmpeq>
 8001050:	bf0c      	ite	eq
 8001052:	2001      	moveq	r0, #1
 8001054:	2000      	movne	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_dcmplt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffea 	bl	8001038 <__aeabi_cdcmpeq>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_dcmple>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffe0 	bl	8001038 <__aeabi_cdcmpeq>
 8001078:	bf94      	ite	ls
 800107a:	2001      	movls	r0, #1
 800107c:	2000      	movhi	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_dcmpge>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffce 	bl	8001028 <__aeabi_cdrcmple>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_dcmpgt>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffc4 	bl	8001028 <__aeabi_cdrcmple>
 80010a0:	bf34      	ite	cc
 80010a2:	2001      	movcc	r0, #1
 80010a4:	2000      	movcs	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_dcmpun>:
 80010ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80010b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80010b4:	d102      	bne.n	80010bc <__aeabi_dcmpun+0x10>
 80010b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80010ba:	d10a      	bne.n	80010d2 <__aeabi_dcmpun+0x26>
 80010bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80010c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80010c4:	d102      	bne.n	80010cc <__aeabi_dcmpun+0x20>
 80010c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80010ca:	d102      	bne.n	80010d2 <__aeabi_dcmpun+0x26>
 80010cc:	f04f 0000 	mov.w	r0, #0
 80010d0:	4770      	bx	lr
 80010d2:	f04f 0001 	mov.w	r0, #1
 80010d6:	4770      	bx	lr

080010d8 <__aeabi_d2iz>:
 80010d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80010dc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80010e0:	d215      	bcs.n	800110e <__aeabi_d2iz+0x36>
 80010e2:	d511      	bpl.n	8001108 <__aeabi_d2iz+0x30>
 80010e4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80010e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80010ec:	d912      	bls.n	8001114 <__aeabi_d2iz+0x3c>
 80010ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80010f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80010fa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80010fe:	fa23 f002 	lsr.w	r0, r3, r2
 8001102:	bf18      	it	ne
 8001104:	4240      	negne	r0, r0
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001112:	d105      	bne.n	8001120 <__aeabi_d2iz+0x48>
 8001114:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8001118:	bf08      	it	eq
 800111a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800111e:	4770      	bx	lr
 8001120:	f04f 0000 	mov.w	r0, #0
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop

08001128 <__aeabi_d2uiz>:
 8001128:	004a      	lsls	r2, r1, #1
 800112a:	d211      	bcs.n	8001150 <__aeabi_d2uiz+0x28>
 800112c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8001130:	d211      	bcs.n	8001156 <__aeabi_d2uiz+0x2e>
 8001132:	d50d      	bpl.n	8001150 <__aeabi_d2uiz+0x28>
 8001134:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8001138:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800113c:	d40e      	bmi.n	800115c <__aeabi_d2uiz+0x34>
 800113e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001142:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001146:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800114a:	fa23 f002 	lsr.w	r0, r3, r2
 800114e:	4770      	bx	lr
 8001150:	f04f 0000 	mov.w	r0, #0
 8001154:	4770      	bx	lr
 8001156:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800115a:	d102      	bne.n	8001162 <__aeabi_d2uiz+0x3a>
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	4770      	bx	lr
 8001162:	f04f 0000 	mov.w	r0, #0
 8001166:	4770      	bx	lr

08001168 <__aeabi_frsub>:
 8001168:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800116c:	e002      	b.n	8001174 <__addsf3>
 800116e:	bf00      	nop

08001170 <__aeabi_fsub>:
 8001170:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08001174 <__addsf3>:
 8001174:	0042      	lsls	r2, r0, #1
 8001176:	bf1f      	itttt	ne
 8001178:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800117c:	ea92 0f03 	teqne	r2, r3
 8001180:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8001184:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001188:	d06a      	beq.n	8001260 <__addsf3+0xec>
 800118a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800118e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8001192:	bfc1      	itttt	gt
 8001194:	18d2      	addgt	r2, r2, r3
 8001196:	4041      	eorgt	r1, r0
 8001198:	4048      	eorgt	r0, r1
 800119a:	4041      	eorgt	r1, r0
 800119c:	bfb8      	it	lt
 800119e:	425b      	neglt	r3, r3
 80011a0:	2b19      	cmp	r3, #25
 80011a2:	bf88      	it	hi
 80011a4:	4770      	bxhi	lr
 80011a6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80011aa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80011ae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80011b2:	bf18      	it	ne
 80011b4:	4240      	negne	r0, r0
 80011b6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80011ba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80011be:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80011c2:	bf18      	it	ne
 80011c4:	4249      	negne	r1, r1
 80011c6:	ea92 0f03 	teq	r2, r3
 80011ca:	d03f      	beq.n	800124c <__addsf3+0xd8>
 80011cc:	f1a2 0201 	sub.w	r2, r2, #1
 80011d0:	fa41 fc03 	asr.w	ip, r1, r3
 80011d4:	eb10 000c 	adds.w	r0, r0, ip
 80011d8:	f1c3 0320 	rsb	r3, r3, #32
 80011dc:	fa01 f103 	lsl.w	r1, r1, r3
 80011e0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80011e4:	d502      	bpl.n	80011ec <__addsf3+0x78>
 80011e6:	4249      	negs	r1, r1
 80011e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80011ec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80011f0:	d313      	bcc.n	800121a <__addsf3+0xa6>
 80011f2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80011f6:	d306      	bcc.n	8001206 <__addsf3+0x92>
 80011f8:	0840      	lsrs	r0, r0, #1
 80011fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80011fe:	f102 0201 	add.w	r2, r2, #1
 8001202:	2afe      	cmp	r2, #254	@ 0xfe
 8001204:	d251      	bcs.n	80012aa <__addsf3+0x136>
 8001206:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800120a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800120e:	bf08      	it	eq
 8001210:	f020 0001 	biceq.w	r0, r0, #1
 8001214:	ea40 0003 	orr.w	r0, r0, r3
 8001218:	4770      	bx	lr
 800121a:	0049      	lsls	r1, r1, #1
 800121c:	eb40 0000 	adc.w	r0, r0, r0
 8001220:	3a01      	subs	r2, #1
 8001222:	bf28      	it	cs
 8001224:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8001228:	d2ed      	bcs.n	8001206 <__addsf3+0x92>
 800122a:	fab0 fc80 	clz	ip, r0
 800122e:	f1ac 0c08 	sub.w	ip, ip, #8
 8001232:	ebb2 020c 	subs.w	r2, r2, ip
 8001236:	fa00 f00c 	lsl.w	r0, r0, ip
 800123a:	bfaa      	itet	ge
 800123c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8001240:	4252      	neglt	r2, r2
 8001242:	4318      	orrge	r0, r3
 8001244:	bfbc      	itt	lt
 8001246:	40d0      	lsrlt	r0, r2
 8001248:	4318      	orrlt	r0, r3
 800124a:	4770      	bx	lr
 800124c:	f092 0f00 	teq	r2, #0
 8001250:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8001254:	bf06      	itte	eq
 8001256:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800125a:	3201      	addeq	r2, #1
 800125c:	3b01      	subne	r3, #1
 800125e:	e7b5      	b.n	80011cc <__addsf3+0x58>
 8001260:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001264:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001268:	bf18      	it	ne
 800126a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800126e:	d021      	beq.n	80012b4 <__addsf3+0x140>
 8001270:	ea92 0f03 	teq	r2, r3
 8001274:	d004      	beq.n	8001280 <__addsf3+0x10c>
 8001276:	f092 0f00 	teq	r2, #0
 800127a:	bf08      	it	eq
 800127c:	4608      	moveq	r0, r1
 800127e:	4770      	bx	lr
 8001280:	ea90 0f01 	teq	r0, r1
 8001284:	bf1c      	itt	ne
 8001286:	2000      	movne	r0, #0
 8001288:	4770      	bxne	lr
 800128a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800128e:	d104      	bne.n	800129a <__addsf3+0x126>
 8001290:	0040      	lsls	r0, r0, #1
 8001292:	bf28      	it	cs
 8001294:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8001298:	4770      	bx	lr
 800129a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800129e:	bf3c      	itt	cc
 80012a0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80012a4:	4770      	bxcc	lr
 80012a6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80012aa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80012ae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80012b2:	4770      	bx	lr
 80012b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80012b8:	bf16      	itet	ne
 80012ba:	4608      	movne	r0, r1
 80012bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80012c0:	4601      	movne	r1, r0
 80012c2:	0242      	lsls	r2, r0, #9
 80012c4:	bf06      	itte	eq
 80012c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80012ca:	ea90 0f01 	teqeq	r0, r1
 80012ce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80012d2:	4770      	bx	lr

080012d4 <__aeabi_ui2f>:
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	e004      	b.n	80012e4 <__aeabi_i2f+0x8>
 80012da:	bf00      	nop

080012dc <__aeabi_i2f>:
 80012dc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80012e0:	bf48      	it	mi
 80012e2:	4240      	negmi	r0, r0
 80012e4:	ea5f 0c00 	movs.w	ip, r0
 80012e8:	bf08      	it	eq
 80012ea:	4770      	bxeq	lr
 80012ec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80012f0:	4601      	mov	r1, r0
 80012f2:	f04f 0000 	mov.w	r0, #0
 80012f6:	e01c      	b.n	8001332 <__aeabi_l2f+0x2a>

080012f8 <__aeabi_ul2f>:
 80012f8:	ea50 0201 	orrs.w	r2, r0, r1
 80012fc:	bf08      	it	eq
 80012fe:	4770      	bxeq	lr
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	e00a      	b.n	800131c <__aeabi_l2f+0x14>
 8001306:	bf00      	nop

08001308 <__aeabi_l2f>:
 8001308:	ea50 0201 	orrs.w	r2, r0, r1
 800130c:	bf08      	it	eq
 800130e:	4770      	bxeq	lr
 8001310:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8001314:	d502      	bpl.n	800131c <__aeabi_l2f+0x14>
 8001316:	4240      	negs	r0, r0
 8001318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800131c:	ea5f 0c01 	movs.w	ip, r1
 8001320:	bf02      	ittt	eq
 8001322:	4684      	moveq	ip, r0
 8001324:	4601      	moveq	r1, r0
 8001326:	2000      	moveq	r0, #0
 8001328:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800132c:	bf08      	it	eq
 800132e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8001332:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8001336:	fabc f28c 	clz	r2, ip
 800133a:	3a08      	subs	r2, #8
 800133c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8001340:	db10      	blt.n	8001364 <__aeabi_l2f+0x5c>
 8001342:	fa01 fc02 	lsl.w	ip, r1, r2
 8001346:	4463      	add	r3, ip
 8001348:	fa00 fc02 	lsl.w	ip, r0, r2
 800134c:	f1c2 0220 	rsb	r2, r2, #32
 8001350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8001354:	fa20 f202 	lsr.w	r2, r0, r2
 8001358:	eb43 0002 	adc.w	r0, r3, r2
 800135c:	bf08      	it	eq
 800135e:	f020 0001 	biceq.w	r0, r0, #1
 8001362:	4770      	bx	lr
 8001364:	f102 0220 	add.w	r2, r2, #32
 8001368:	fa01 fc02 	lsl.w	ip, r1, r2
 800136c:	f1c2 0220 	rsb	r2, r2, #32
 8001370:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8001374:	fa21 f202 	lsr.w	r2, r1, r2
 8001378:	eb43 0002 	adc.w	r0, r3, r2
 800137c:	bf08      	it	eq
 800137e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8001382:	4770      	bx	lr

08001384 <__aeabi_f2uiz>:
 8001384:	0042      	lsls	r2, r0, #1
 8001386:	d20e      	bcs.n	80013a6 <__aeabi_f2uiz+0x22>
 8001388:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800138c:	d30b      	bcc.n	80013a6 <__aeabi_f2uiz+0x22>
 800138e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001392:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001396:	d409      	bmi.n	80013ac <__aeabi_f2uiz+0x28>
 8001398:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800139c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80013a0:	fa23 f002 	lsr.w	r0, r3, r2
 80013a4:	4770      	bx	lr
 80013a6:	f04f 0000 	mov.w	r0, #0
 80013aa:	4770      	bx	lr
 80013ac:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80013b0:	d101      	bne.n	80013b6 <__aeabi_f2uiz+0x32>
 80013b2:	0242      	lsls	r2, r0, #9
 80013b4:	d102      	bne.n	80013bc <__aeabi_f2uiz+0x38>
 80013b6:	f04f 30ff 	mov.w	r0, #4294967295
 80013ba:	4770      	bx	lr
 80013bc:	f04f 0000 	mov.w	r0, #0
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop

080013c4 <malloc>:
 80013c4:	4b02      	ldr	r3, [pc, #8]	@ (80013d0 <malloc+0xc>)
 80013c6:	4601      	mov	r1, r0
 80013c8:	6818      	ldr	r0, [r3, #0]
 80013ca:	f000 b82f 	b.w	800142c <_malloc_r>
 80013ce:	bf00      	nop
 80013d0:	2000001c 	.word	0x2000001c

080013d4 <free>:
 80013d4:	4b02      	ldr	r3, [pc, #8]	@ (80013e0 <free+0xc>)
 80013d6:	4601      	mov	r1, r0
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	f000 bcbd 	b.w	8001d58 <_free_r>
 80013de:	bf00      	nop
 80013e0:	2000001c 	.word	0x2000001c

080013e4 <sbrk_aligned>:
 80013e4:	b570      	push	{r4, r5, r6, lr}
 80013e6:	4e10      	ldr	r6, [pc, #64]	@ (8001428 <sbrk_aligned+0x44>)
 80013e8:	6833      	ldr	r3, [r6, #0]
 80013ea:	4605      	mov	r5, r0
 80013ec:	460c      	mov	r4, r1
 80013ee:	b1b3      	cbz	r3, 800141e <sbrk_aligned+0x3a>
 80013f0:	4621      	mov	r1, r4
 80013f2:	4628      	mov	r0, r5
 80013f4:	f000 fb86 	bl	8001b04 <_sbrk_r>
 80013f8:	1c43      	adds	r3, r0, #1
 80013fa:	d00c      	beq.n	8001416 <sbrk_aligned+0x32>
 80013fc:	1cc4      	adds	r4, r0, #3
 80013fe:	f024 0403 	bic.w	r4, r4, #3
 8001402:	42a0      	cmp	r0, r4
 8001404:	d005      	beq.n	8001412 <sbrk_aligned+0x2e>
 8001406:	1a21      	subs	r1, r4, r0
 8001408:	4628      	mov	r0, r5
 800140a:	f000 fb7b 	bl	8001b04 <_sbrk_r>
 800140e:	3001      	adds	r0, #1
 8001410:	d001      	beq.n	8001416 <sbrk_aligned+0x32>
 8001412:	4620      	mov	r0, r4
 8001414:	bd70      	pop	{r4, r5, r6, pc}
 8001416:	f04f 34ff 	mov.w	r4, #4294967295
 800141a:	4620      	mov	r0, r4
 800141c:	bd70      	pop	{r4, r5, r6, pc}
 800141e:	4619      	mov	r1, r3
 8001420:	f000 fb70 	bl	8001b04 <_sbrk_r>
 8001424:	6030      	str	r0, [r6, #0]
 8001426:	e7e3      	b.n	80013f0 <sbrk_aligned+0xc>
 8001428:	200001b0 	.word	0x200001b0

0800142c <_malloc_r>:
 800142c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001430:	1ccd      	adds	r5, r1, #3
 8001432:	f025 0503 	bic.w	r5, r5, #3
 8001436:	3508      	adds	r5, #8
 8001438:	2d0c      	cmp	r5, #12
 800143a:	bf38      	it	cc
 800143c:	250c      	movcc	r5, #12
 800143e:	2d00      	cmp	r5, #0
 8001440:	b082      	sub	sp, #8
 8001442:	4606      	mov	r6, r0
 8001444:	db16      	blt.n	8001474 <_malloc_r+0x48>
 8001446:	42a9      	cmp	r1, r5
 8001448:	d814      	bhi.n	8001474 <_malloc_r+0x48>
 800144a:	4f35      	ldr	r7, [pc, #212]	@ (8001520 <_malloc_r+0xf4>)
 800144c:	f000 f86a 	bl	8001524 <__malloc_lock>
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	b1aa      	cbz	r2, 8001480 <_malloc_r+0x54>
 8001454:	4614      	mov	r4, r2
 8001456:	e003      	b.n	8001460 <_malloc_r+0x34>
 8001458:	6863      	ldr	r3, [r4, #4]
 800145a:	4622      	mov	r2, r4
 800145c:	b183      	cbz	r3, 8001480 <_malloc_r+0x54>
 800145e:	461c      	mov	r4, r3
 8001460:	6823      	ldr	r3, [r4, #0]
 8001462:	1b5b      	subs	r3, r3, r5
 8001464:	d4f8      	bmi.n	8001458 <_malloc_r+0x2c>
 8001466:	2b0b      	cmp	r3, #11
 8001468:	d821      	bhi.n	80014ae <_malloc_r+0x82>
 800146a:	42a2      	cmp	r2, r4
 800146c:	6863      	ldr	r3, [r4, #4]
 800146e:	d055      	beq.n	800151c <_malloc_r+0xf0>
 8001470:	6053      	str	r3, [r2, #4]
 8001472:	e00d      	b.n	8001490 <_malloc_r+0x64>
 8001474:	230c      	movs	r3, #12
 8001476:	6033      	str	r3, [r6, #0]
 8001478:	2000      	movs	r0, #0
 800147a:	b002      	add	sp, #8
 800147c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001480:	4629      	mov	r1, r5
 8001482:	4630      	mov	r0, r6
 8001484:	f7ff ffae 	bl	80013e4 <sbrk_aligned>
 8001488:	1c43      	adds	r3, r0, #1
 800148a:	4604      	mov	r4, r0
 800148c:	d019      	beq.n	80014c2 <_malloc_r+0x96>
 800148e:	6005      	str	r5, [r0, #0]
 8001490:	4630      	mov	r0, r6
 8001492:	f000 f84d 	bl	8001530 <__malloc_unlock>
 8001496:	f104 000b 	add.w	r0, r4, #11
 800149a:	1d23      	adds	r3, r4, #4
 800149c:	f020 0007 	bic.w	r0, r0, #7
 80014a0:	1ac2      	subs	r2, r0, r3
 80014a2:	bf1c      	itt	ne
 80014a4:	1a1b      	subne	r3, r3, r0
 80014a6:	50a3      	strne	r3, [r4, r2]
 80014a8:	b002      	add	sp, #8
 80014aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014ae:	1961      	adds	r1, r4, r5
 80014b0:	42a2      	cmp	r2, r4
 80014b2:	6025      	str	r5, [r4, #0]
 80014b4:	bf14      	ite	ne
 80014b6:	6051      	strne	r1, [r2, #4]
 80014b8:	6079      	streq	r1, [r7, #4]
 80014ba:	5163      	str	r3, [r4, r5]
 80014bc:	6863      	ldr	r3, [r4, #4]
 80014be:	604b      	str	r3, [r1, #4]
 80014c0:	e7e6      	b.n	8001490 <_malloc_r+0x64>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	b323      	cbz	r3, 8001510 <_malloc_r+0xe4>
 80014c6:	461c      	mov	r4, r3
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1fb      	bne.n	80014c6 <_malloc_r+0x9a>
 80014ce:	6822      	ldr	r2, [r4, #0]
 80014d0:	9301      	str	r3, [sp, #4]
 80014d2:	4619      	mov	r1, r3
 80014d4:	4630      	mov	r0, r6
 80014d6:	eb04 0802 	add.w	r8, r4, r2
 80014da:	f000 fb13 	bl	8001b04 <_sbrk_r>
 80014de:	4580      	cmp	r8, r0
 80014e0:	d116      	bne.n	8001510 <_malloc_r+0xe4>
 80014e2:	6822      	ldr	r2, [r4, #0]
 80014e4:	1aad      	subs	r5, r5, r2
 80014e6:	4629      	mov	r1, r5
 80014e8:	4630      	mov	r0, r6
 80014ea:	f7ff ff7b 	bl	80013e4 <sbrk_aligned>
 80014ee:	3001      	adds	r0, #1
 80014f0:	d00e      	beq.n	8001510 <_malloc_r+0xe4>
 80014f2:	6822      	ldr	r2, [r4, #0]
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	9b01      	ldr	r3, [sp, #4]
 80014f8:	442a      	add	r2, r5
 80014fa:	6022      	str	r2, [r4, #0]
 80014fc:	6842      	ldr	r2, [r0, #4]
 80014fe:	b912      	cbnz	r2, 8001506 <_malloc_r+0xda>
 8001500:	e00c      	b.n	800151c <_malloc_r+0xf0>
 8001502:	4610      	mov	r0, r2
 8001504:	6852      	ldr	r2, [r2, #4]
 8001506:	42a2      	cmp	r2, r4
 8001508:	d1fb      	bne.n	8001502 <_malloc_r+0xd6>
 800150a:	2300      	movs	r3, #0
 800150c:	6043      	str	r3, [r0, #4]
 800150e:	e7bf      	b.n	8001490 <_malloc_r+0x64>
 8001510:	230c      	movs	r3, #12
 8001512:	6033      	str	r3, [r6, #0]
 8001514:	4630      	mov	r0, r6
 8001516:	f000 f80b 	bl	8001530 <__malloc_unlock>
 800151a:	e7ad      	b.n	8001478 <_malloc_r+0x4c>
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	e7b7      	b.n	8001490 <_malloc_r+0x64>
 8001520:	200001b0 	.word	0x200001b0

08001524 <__malloc_lock>:
 8001524:	4801      	ldr	r0, [pc, #4]	@ (800152c <__malloc_lock+0x8>)
 8001526:	f000 bb4d 	b.w	8001bc4 <__retarget_lock_acquire_recursive>
 800152a:	bf00      	nop
 800152c:	20000308 	.word	0x20000308

08001530 <__malloc_unlock>:
 8001530:	4801      	ldr	r0, [pc, #4]	@ (8001538 <__malloc_unlock+0x8>)
 8001532:	f000 bb4f 	b.w	8001bd4 <__retarget_lock_release_recursive>
 8001536:	bf00      	nop
 8001538:	20000308 	.word	0x20000308

0800153c <srand>:
 800153c:	b538      	push	{r3, r4, r5, lr}
 800153e:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <srand+0x4c>)
 8001540:	681d      	ldr	r5, [r3, #0]
 8001542:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8001544:	4604      	mov	r4, r0
 8001546:	b11a      	cbz	r2, 8001550 <srand+0x14>
 8001548:	2300      	movs	r3, #0
 800154a:	e9c2 4304 	strd	r4, r3, [r2, #16]
 800154e:	bd38      	pop	{r3, r4, r5, pc}
 8001550:	2018      	movs	r0, #24
 8001552:	f7ff ff37 	bl	80013c4 <malloc>
 8001556:	4602      	mov	r2, r0
 8001558:	6328      	str	r0, [r5, #48]	@ 0x30
 800155a:	b178      	cbz	r0, 800157c <srand+0x40>
 800155c:	2001      	movs	r0, #1
 800155e:	2100      	movs	r1, #0
 8001560:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001564:	4b09      	ldr	r3, [pc, #36]	@ (800158c <srand+0x50>)
 8001566:	480a      	ldr	r0, [pc, #40]	@ (8001590 <srand+0x54>)
 8001568:	490a      	ldr	r1, [pc, #40]	@ (8001594 <srand+0x58>)
 800156a:	6091      	str	r1, [r2, #8]
 800156c:	e9c2 0300 	strd	r0, r3, [r2]
 8001570:	230b      	movs	r3, #11
 8001572:	8193      	strh	r3, [r2, #12]
 8001574:	2300      	movs	r3, #0
 8001576:	e9c2 4304 	strd	r4, r3, [r2, #16]
 800157a:	bd38      	pop	{r3, r4, r5, pc}
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <srand+0x5c>)
 800157e:	4807      	ldr	r0, [pc, #28]	@ (800159c <srand+0x60>)
 8001580:	2146      	movs	r1, #70	@ 0x46
 8001582:	f000 fbc3 	bl	8001d0c <__assert_func>
 8001586:	bf00      	nop
 8001588:	2000001c 	.word	0x2000001c
 800158c:	e66d1234 	.word	0xe66d1234
 8001590:	abcd330e 	.word	0xabcd330e
 8001594:	0005deec 	.word	0x0005deec
 8001598:	08004548 	.word	0x08004548
 800159c:	08004560 	.word	0x08004560

080015a0 <rand>:
 80015a0:	b538      	push	{r3, r4, r5, lr}
 80015a2:	4b19      	ldr	r3, [pc, #100]	@ (8001608 <rand+0x68>)
 80015a4:	681c      	ldr	r4, [r3, #0]
 80015a6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80015a8:	b18a      	cbz	r2, 80015ce <rand+0x2e>
 80015aa:	6913      	ldr	r3, [r2, #16]
 80015ac:	4917      	ldr	r1, [pc, #92]	@ (800160c <rand+0x6c>)
 80015ae:	6954      	ldr	r4, [r2, #20]
 80015b0:	4817      	ldr	r0, [pc, #92]	@ (8001610 <rand+0x70>)
 80015b2:	fb03 f101 	mul.w	r1, r3, r1
 80015b6:	fb00 1104 	mla	r1, r0, r4, r1
 80015ba:	fba3 3000 	umull	r3, r0, r3, r0
 80015be:	3301      	adds	r3, #1
 80015c0:	eb41 0100 	adc.w	r1, r1, r0
 80015c4:	e9c2 3104 	strd	r3, r1, [r2, #16]
 80015c8:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 80015cc:	bd38      	pop	{r3, r4, r5, pc}
 80015ce:	2018      	movs	r0, #24
 80015d0:	f7ff fef8 	bl	80013c4 <malloc>
 80015d4:	4602      	mov	r2, r0
 80015d6:	6320      	str	r0, [r4, #48]	@ 0x30
 80015d8:	b188      	cbz	r0, 80015fe <rand+0x5e>
 80015da:	2401      	movs	r4, #1
 80015dc:	2500      	movs	r5, #0
 80015de:	e9c2 4504 	strd	r4, r5, [r2, #16]
 80015e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <rand+0x74>)
 80015e4:	4c0c      	ldr	r4, [pc, #48]	@ (8001618 <rand+0x78>)
 80015e6:	4809      	ldr	r0, [pc, #36]	@ (800160c <rand+0x6c>)
 80015e8:	490c      	ldr	r1, [pc, #48]	@ (800161c <rand+0x7c>)
 80015ea:	6091      	str	r1, [r2, #8]
 80015ec:	e9c2 4300 	strd	r4, r3, [r2]
 80015f0:	230b      	movs	r3, #11
 80015f2:	8193      	strh	r3, [r2, #12]
 80015f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001620 <rand+0x80>)
 80015f6:	4601      	mov	r1, r0
 80015f8:	e9c2 3104 	strd	r3, r1, [r2, #16]
 80015fc:	bd38      	pop	{r3, r4, r5, pc}
 80015fe:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <rand+0x84>)
 8001600:	4809      	ldr	r0, [pc, #36]	@ (8001628 <rand+0x88>)
 8001602:	2152      	movs	r1, #82	@ 0x52
 8001604:	f000 fb82 	bl	8001d0c <__assert_func>
 8001608:	2000001c 	.word	0x2000001c
 800160c:	5851f42d 	.word	0x5851f42d
 8001610:	4c957f2d 	.word	0x4c957f2d
 8001614:	e66d1234 	.word	0xe66d1234
 8001618:	abcd330e 	.word	0xabcd330e
 800161c:	0005deec 	.word	0x0005deec
 8001620:	4c957f2e 	.word	0x4c957f2e
 8001624:	08004548 	.word	0x08004548
 8001628:	08004560 	.word	0x08004560

0800162c <stdio_exit_handler>:
 800162c:	4a02      	ldr	r2, [pc, #8]	@ (8001638 <stdio_exit_handler+0xc>)
 800162e:	4903      	ldr	r1, [pc, #12]	@ (800163c <stdio_exit_handler+0x10>)
 8001630:	4803      	ldr	r0, [pc, #12]	@ (8001640 <stdio_exit_handler+0x14>)
 8001632:	f000 b969 	b.w	8001908 <_fwalk_sglue>
 8001636:	bf00      	nop
 8001638:	20000010 	.word	0x20000010
 800163c:	08001f25 	.word	0x08001f25
 8001640:	20000020 	.word	0x20000020

08001644 <cleanup_stdio>:
 8001644:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <cleanup_stdio+0x34>)
 8001646:	6841      	ldr	r1, [r0, #4]
 8001648:	4299      	cmp	r1, r3
 800164a:	b510      	push	{r4, lr}
 800164c:	4604      	mov	r4, r0
 800164e:	d001      	beq.n	8001654 <cleanup_stdio+0x10>
 8001650:	f000 fc68 	bl	8001f24 <_fflush_r>
 8001654:	68a1      	ldr	r1, [r4, #8]
 8001656:	4b09      	ldr	r3, [pc, #36]	@ (800167c <cleanup_stdio+0x38>)
 8001658:	4299      	cmp	r1, r3
 800165a:	d002      	beq.n	8001662 <cleanup_stdio+0x1e>
 800165c:	4620      	mov	r0, r4
 800165e:	f000 fc61 	bl	8001f24 <_fflush_r>
 8001662:	68e1      	ldr	r1, [r4, #12]
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <cleanup_stdio+0x3c>)
 8001666:	4299      	cmp	r1, r3
 8001668:	d004      	beq.n	8001674 <cleanup_stdio+0x30>
 800166a:	4620      	mov	r0, r4
 800166c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001670:	f000 bc58 	b.w	8001f24 <_fflush_r>
 8001674:	bd10      	pop	{r4, pc}
 8001676:	bf00      	nop
 8001678:	200001b8 	.word	0x200001b8
 800167c:	20000220 	.word	0x20000220
 8001680:	20000288 	.word	0x20000288

08001684 <__fp_lock>:
 8001684:	b508      	push	{r3, lr}
 8001686:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8001688:	07da      	lsls	r2, r3, #31
 800168a:	d402      	bmi.n	8001692 <__fp_lock+0xe>
 800168c:	898b      	ldrh	r3, [r1, #12]
 800168e:	059b      	lsls	r3, r3, #22
 8001690:	d501      	bpl.n	8001696 <__fp_lock+0x12>
 8001692:	2000      	movs	r0, #0
 8001694:	bd08      	pop	{r3, pc}
 8001696:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 8001698:	f000 fa94 	bl	8001bc4 <__retarget_lock_acquire_recursive>
 800169c:	2000      	movs	r0, #0
 800169e:	bd08      	pop	{r3, pc}

080016a0 <__fp_unlock>:
 80016a0:	b508      	push	{r3, lr}
 80016a2:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80016a4:	07da      	lsls	r2, r3, #31
 80016a6:	d402      	bmi.n	80016ae <__fp_unlock+0xe>
 80016a8:	898b      	ldrh	r3, [r1, #12]
 80016aa:	059b      	lsls	r3, r3, #22
 80016ac:	d501      	bpl.n	80016b2 <__fp_unlock+0x12>
 80016ae:	2000      	movs	r0, #0
 80016b0:	bd08      	pop	{r3, pc}
 80016b2:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 80016b4:	f000 fa8e 	bl	8001bd4 <__retarget_lock_release_recursive>
 80016b8:	2000      	movs	r0, #0
 80016ba:	bd08      	pop	{r3, pc}

080016bc <global_stdio_init.part.0>:
 80016bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016c0:	4c31      	ldr	r4, [pc, #196]	@ (8001788 <global_stdio_init.part.0+0xcc>)
 80016c2:	4b32      	ldr	r3, [pc, #200]	@ (800178c <global_stdio_init.part.0+0xd0>)
 80016c4:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 8001790 <global_stdio_init.part.0+0xd4>
 80016c8:	f8df 80c8 	ldr.w	r8, [pc, #200]	@ 8001794 <global_stdio_init.part.0+0xd8>
 80016cc:	4f32      	ldr	r7, [pc, #200]	@ (8001798 <global_stdio_init.part.0+0xdc>)
 80016ce:	f8c4 3138 	str.w	r3, [r4, #312]	@ 0x138
 80016d2:	2500      	movs	r5, #0
 80016d4:	4629      	mov	r1, r5
 80016d6:	2304      	movs	r3, #4
 80016d8:	2208      	movs	r2, #8
 80016da:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 80016de:	4e2f      	ldr	r6, [pc, #188]	@ (800179c <global_stdio_init.part.0+0xe0>)
 80016e0:	60e3      	str	r3, [r4, #12]
 80016e2:	e9c4 5500 	strd	r5, r5, [r4]
 80016e6:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80016ea:	60a5      	str	r5, [r4, #8]
 80016ec:	6665      	str	r5, [r4, #100]	@ 0x64
 80016ee:	61a5      	str	r5, [r4, #24]
 80016f0:	f000 f978 	bl	80019e4 <memset>
 80016f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80016f8:	e9c4 4908 	strd	r4, r9, [r4, #32]
 80016fc:	e9c4 870a 	strd	r8, r7, [r4, #40]	@ 0x28
 8001700:	6326      	str	r6, [r4, #48]	@ 0x30
 8001702:	f000 fa57 	bl	8001bb4 <__retarget_lock_init_recursive>
 8001706:	4629      	mov	r1, r5
 8001708:	4b25      	ldr	r3, [pc, #148]	@ (80017a0 <global_stdio_init.part.0+0xe4>)
 800170a:	6763      	str	r3, [r4, #116]	@ 0x74
 800170c:	2208      	movs	r2, #8
 800170e:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4
 8001712:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 8001716:	e9c4 551e 	strd	r5, r5, [r4, #120]	@ 0x78
 800171a:	6725      	str	r5, [r4, #112]	@ 0x70
 800171c:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
 8001720:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
 8001724:	f000 f95e 	bl	80019e4 <memset>
 8001728:	f104 0368 	add.w	r3, r4, #104	@ 0x68
 800172c:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 8001730:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 8001734:	e9c4 9823 	strd	r9, r8, [r4, #140]	@ 0x8c
 8001738:	e9c4 7625 	strd	r7, r6, [r4, #148]	@ 0x94
 800173c:	f000 fa3a 	bl	8001bb4 <__retarget_lock_init_recursive>
 8001740:	4b18      	ldr	r3, [pc, #96]	@ (80017a4 <global_stdio_init.part.0+0xe8>)
 8001742:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
 8001746:	4629      	mov	r1, r5
 8001748:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
 800174c:	2208      	movs	r2, #8
 800174e:	e9c4 5534 	strd	r5, r5, [r4, #208]	@ 0xd0
 8001752:	e9c4 5538 	strd	r5, r5, [r4, #224]	@ 0xe0
 8001756:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
 800175a:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 800175e:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
 8001762:	f000 f93f 	bl	80019e4 <memset>
 8001766:	f104 03d0 	add.w	r3, r4, #208	@ 0xd0
 800176a:	e9c4 873e 	strd	r8, r7, [r4, #248]	@ 0xf8
 800176e:	f8c4 90f4 	str.w	r9, [r4, #244]	@ 0xf4
 8001772:	f504 7094 	add.w	r0, r4, #296	@ 0x128
 8001776:	f8c4 6100 	str.w	r6, [r4, #256]	@ 0x100
 800177a:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
 800177e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001782:	f000 ba17 	b.w	8001bb4 <__retarget_lock_init_recursive>
 8001786:	bf00      	nop
 8001788:	200001b8 	.word	0x200001b8
 800178c:	0800162d 	.word	0x0800162d
 8001790:	08001951 	.word	0x08001951
 8001794:	08001979 	.word	0x08001979
 8001798:	080019b9 	.word	0x080019b9
 800179c:	080019dd 	.word	0x080019dd
 80017a0:	00010009 	.word	0x00010009
 80017a4:	00020012 	.word	0x00020012

080017a8 <__sfp>:
 80017a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017aa:	4606      	mov	r6, r0
 80017ac:	482a      	ldr	r0, [pc, #168]	@ (8001858 <__sfp+0xb0>)
 80017ae:	f000 fa09 	bl	8001bc4 <__retarget_lock_acquire_recursive>
 80017b2:	4b2a      	ldr	r3, [pc, #168]	@ (800185c <__sfp+0xb4>)
 80017b4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d043      	beq.n	8001844 <__sfp+0x9c>
 80017bc:	4f28      	ldr	r7, [pc, #160]	@ (8001860 <__sfp+0xb8>)
 80017be:	e9d7 3401 	ldrd	r3, r4, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	d504      	bpl.n	80017d0 <__sfp+0x28>
 80017c6:	e024      	b.n	8001812 <__sfp+0x6a>
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	f104 0468 	add.w	r4, r4, #104	@ 0x68
 80017ce:	d020      	beq.n	8001812 <__sfp+0x6a>
 80017d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	2d00      	cmp	r5, #0
 80017d8:	d1f6      	bne.n	80017c8 <__sfp+0x20>
 80017da:	4b22      	ldr	r3, [pc, #136]	@ (8001864 <__sfp+0xbc>)
 80017dc:	60e3      	str	r3, [r4, #12]
 80017de:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80017e2:	6665      	str	r5, [r4, #100]	@ 0x64
 80017e4:	f000 f9e6 	bl	8001bb4 <__retarget_lock_init_recursive>
 80017e8:	481b      	ldr	r0, [pc, #108]	@ (8001858 <__sfp+0xb0>)
 80017ea:	f000 f9f3 	bl	8001bd4 <__retarget_lock_release_recursive>
 80017ee:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80017f2:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80017f6:	6025      	str	r5, [r4, #0]
 80017f8:	61a5      	str	r5, [r4, #24]
 80017fa:	2208      	movs	r2, #8
 80017fc:	4629      	mov	r1, r5
 80017fe:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 8001802:	f000 f8ef 	bl	80019e4 <memset>
 8001806:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800180a:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 800180e:	4620      	mov	r0, r4
 8001810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001812:	683d      	ldr	r5, [r7, #0]
 8001814:	b10d      	cbz	r5, 800181a <__sfp+0x72>
 8001816:	462f      	mov	r7, r5
 8001818:	e7d1      	b.n	80017be <__sfp+0x16>
 800181a:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800181e:	4630      	mov	r0, r6
 8001820:	f7ff fe04 	bl	800142c <_malloc_r>
 8001824:	4604      	mov	r4, r0
 8001826:	b180      	cbz	r0, 800184a <__sfp+0xa2>
 8001828:	2304      	movs	r3, #4
 800182a:	6005      	str	r5, [r0, #0]
 800182c:	6043      	str	r3, [r0, #4]
 800182e:	300c      	adds	r0, #12
 8001830:	4629      	mov	r1, r5
 8001832:	60a0      	str	r0, [r4, #8]
 8001834:	4625      	mov	r5, r4
 8001836:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 800183a:	f000 f8d3 	bl	80019e4 <memset>
 800183e:	603c      	str	r4, [r7, #0]
 8001840:	462f      	mov	r7, r5
 8001842:	e7bc      	b.n	80017be <__sfp+0x16>
 8001844:	f7ff ff3a 	bl	80016bc <global_stdio_init.part.0>
 8001848:	e7b8      	b.n	80017bc <__sfp+0x14>
 800184a:	4803      	ldr	r0, [pc, #12]	@ (8001858 <__sfp+0xb0>)
 800184c:	603c      	str	r4, [r7, #0]
 800184e:	f000 f9c1 	bl	8001bd4 <__retarget_lock_release_recursive>
 8001852:	230c      	movs	r3, #12
 8001854:	6033      	str	r3, [r6, #0]
 8001856:	e7da      	b.n	800180e <__sfp+0x66>
 8001858:	20000314 	.word	0x20000314
 800185c:	200001b8 	.word	0x200001b8
 8001860:	20000010 	.word	0x20000010
 8001864:	ffff0001 	.word	0xffff0001

08001868 <__sinit>:
 8001868:	b510      	push	{r4, lr}
 800186a:	4604      	mov	r4, r0
 800186c:	480b      	ldr	r0, [pc, #44]	@ (800189c <__sinit+0x34>)
 800186e:	f000 f9a9 	bl	8001bc4 <__retarget_lock_acquire_recursive>
 8001872:	6a23      	ldr	r3, [r4, #32]
 8001874:	b92b      	cbnz	r3, 8001882 <__sinit+0x1a>
 8001876:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <__sinit+0x38>)
 8001878:	4a0a      	ldr	r2, [pc, #40]	@ (80018a4 <__sinit+0x3c>)
 800187a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800187e:	6222      	str	r2, [r4, #32]
 8001880:	b123      	cbz	r3, 800188c <__sinit+0x24>
 8001882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001886:	4805      	ldr	r0, [pc, #20]	@ (800189c <__sinit+0x34>)
 8001888:	f000 b9a4 	b.w	8001bd4 <__retarget_lock_release_recursive>
 800188c:	f7ff ff16 	bl	80016bc <global_stdio_init.part.0>
 8001890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001894:	4801      	ldr	r0, [pc, #4]	@ (800189c <__sinit+0x34>)
 8001896:	f000 b99d 	b.w	8001bd4 <__retarget_lock_release_recursive>
 800189a:	bf00      	nop
 800189c:	20000314 	.word	0x20000314
 80018a0:	200001b8 	.word	0x200001b8
 80018a4:	08001645 	.word	0x08001645

080018a8 <__sfp_lock_acquire>:
 80018a8:	4801      	ldr	r0, [pc, #4]	@ (80018b0 <__sfp_lock_acquire+0x8>)
 80018aa:	f000 b98b 	b.w	8001bc4 <__retarget_lock_acquire_recursive>
 80018ae:	bf00      	nop
 80018b0:	20000314 	.word	0x20000314

080018b4 <__sfp_lock_release>:
 80018b4:	4801      	ldr	r0, [pc, #4]	@ (80018bc <__sfp_lock_release+0x8>)
 80018b6:	f000 b98d 	b.w	8001bd4 <__retarget_lock_release_recursive>
 80018ba:	bf00      	nop
 80018bc:	20000314 	.word	0x20000314

080018c0 <__fp_lock_all>:
 80018c0:	b508      	push	{r3, lr}
 80018c2:	4805      	ldr	r0, [pc, #20]	@ (80018d8 <__fp_lock_all+0x18>)
 80018c4:	f000 f97e 	bl	8001bc4 <__retarget_lock_acquire_recursive>
 80018c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80018cc:	4a03      	ldr	r2, [pc, #12]	@ (80018dc <__fp_lock_all+0x1c>)
 80018ce:	4904      	ldr	r1, [pc, #16]	@ (80018e0 <__fp_lock_all+0x20>)
 80018d0:	2000      	movs	r0, #0
 80018d2:	f000 b819 	b.w	8001908 <_fwalk_sglue>
 80018d6:	bf00      	nop
 80018d8:	20000314 	.word	0x20000314
 80018dc:	20000010 	.word	0x20000010
 80018e0:	08001685 	.word	0x08001685

080018e4 <__fp_unlock_all>:
 80018e4:	b508      	push	{r3, lr}
 80018e6:	4a05      	ldr	r2, [pc, #20]	@ (80018fc <__fp_unlock_all+0x18>)
 80018e8:	4905      	ldr	r1, [pc, #20]	@ (8001900 <__fp_unlock_all+0x1c>)
 80018ea:	2000      	movs	r0, #0
 80018ec:	f000 f80c 	bl	8001908 <_fwalk_sglue>
 80018f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80018f4:	4803      	ldr	r0, [pc, #12]	@ (8001904 <__fp_unlock_all+0x20>)
 80018f6:	f000 b96d 	b.w	8001bd4 <__retarget_lock_release_recursive>
 80018fa:	bf00      	nop
 80018fc:	20000010 	.word	0x20000010
 8001900:	080016a1 	.word	0x080016a1
 8001904:	20000314 	.word	0x20000314

08001908 <_fwalk_sglue>:
 8001908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800190c:	4680      	mov	r8, r0
 800190e:	460f      	mov	r7, r1
 8001910:	4616      	mov	r6, r2
 8001912:	f04f 0900 	mov.w	r9, #0
 8001916:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 800191a:	3d01      	subs	r5, #1
 800191c:	d411      	bmi.n	8001942 <_fwalk_sglue+0x3a>
 800191e:	89a3      	ldrh	r3, [r4, #12]
 8001920:	2b01      	cmp	r3, #1
 8001922:	f105 35ff 	add.w	r5, r5, #4294967295
 8001926:	d908      	bls.n	800193a <_fwalk_sglue+0x32>
 8001928:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800192c:	3301      	adds	r3, #1
 800192e:	4621      	mov	r1, r4
 8001930:	d003      	beq.n	800193a <_fwalk_sglue+0x32>
 8001932:	4640      	mov	r0, r8
 8001934:	47b8      	blx	r7
 8001936:	ea49 0900 	orr.w	r9, r9, r0
 800193a:	1c6b      	adds	r3, r5, #1
 800193c:	f104 0468 	add.w	r4, r4, #104	@ 0x68
 8001940:	d1ed      	bne.n	800191e <_fwalk_sglue+0x16>
 8001942:	6836      	ldr	r6, [r6, #0]
 8001944:	2e00      	cmp	r6, #0
 8001946:	d1e6      	bne.n	8001916 <_fwalk_sglue+0xe>
 8001948:	4648      	mov	r0, r9
 800194a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800194e:	bf00      	nop

08001950 <__sread>:
 8001950:	b510      	push	{r4, lr}
 8001952:	460c      	mov	r4, r1
 8001954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001958:	f000 f8be 	bl	8001ad8 <_read_r>
 800195c:	2800      	cmp	r0, #0
 800195e:	db03      	blt.n	8001968 <__sread+0x18>
 8001960:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001962:	4403      	add	r3, r0
 8001964:	6563      	str	r3, [r4, #84]	@ 0x54
 8001966:	bd10      	pop	{r4, pc}
 8001968:	89a3      	ldrh	r3, [r4, #12]
 800196a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800196e:	81a3      	strh	r3, [r4, #12]
 8001970:	bd10      	pop	{r4, pc}
 8001972:	bf00      	nop

08001974 <__seofread>:
 8001974:	2000      	movs	r0, #0
 8001976:	4770      	bx	lr

08001978 <__swrite>:
 8001978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800197c:	460c      	mov	r4, r1
 800197e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 8001982:	461f      	mov	r7, r3
 8001984:	05cb      	lsls	r3, r1, #23
 8001986:	4605      	mov	r5, r0
 8001988:	4616      	mov	r6, r2
 800198a:	d40b      	bmi.n	80019a4 <__swrite+0x2c>
 800198c:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8001990:	81a1      	strh	r1, [r4, #12]
 8001992:	463b      	mov	r3, r7
 8001994:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001998:	4632      	mov	r2, r6
 800199a:	4628      	mov	r0, r5
 800199c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80019a0:	f000 b8c2 	b.w	8001b28 <_write_r>
 80019a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019a8:	2302      	movs	r3, #2
 80019aa:	2200      	movs	r2, #0
 80019ac:	f000 f87e 	bl	8001aac <_lseek_r>
 80019b0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80019b4:	e7ea      	b.n	800198c <__swrite+0x14>
 80019b6:	bf00      	nop

080019b8 <__sseek>:
 80019b8:	b510      	push	{r4, lr}
 80019ba:	460c      	mov	r4, r1
 80019bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019c0:	f000 f874 	bl	8001aac <_lseek_r>
 80019c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019c8:	1c42      	adds	r2, r0, #1
 80019ca:	bf0e      	itee	eq
 80019cc:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80019d0:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80019d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80019d6:	81a3      	strh	r3, [r4, #12]
 80019d8:	bd10      	pop	{r4, pc}
 80019da:	bf00      	nop

080019dc <__sclose>:
 80019dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019e0:	f000 b852 	b.w	8001a88 <_close_r>

080019e4 <memset>:
 80019e4:	0783      	lsls	r3, r0, #30
 80019e6:	b530      	push	{r4, r5, lr}
 80019e8:	d047      	beq.n	8001a7a <memset+0x96>
 80019ea:	1e54      	subs	r4, r2, #1
 80019ec:	2a00      	cmp	r2, #0
 80019ee:	d03e      	beq.n	8001a6e <memset+0x8a>
 80019f0:	b2ca      	uxtb	r2, r1
 80019f2:	4603      	mov	r3, r0
 80019f4:	e001      	b.n	80019fa <memset+0x16>
 80019f6:	3c01      	subs	r4, #1
 80019f8:	d339      	bcc.n	8001a6e <memset+0x8a>
 80019fa:	f803 2b01 	strb.w	r2, [r3], #1
 80019fe:	079d      	lsls	r5, r3, #30
 8001a00:	d1f9      	bne.n	80019f6 <memset+0x12>
 8001a02:	2c03      	cmp	r4, #3
 8001a04:	d92c      	bls.n	8001a60 <memset+0x7c>
 8001a06:	b2cd      	uxtb	r5, r1
 8001a08:	eb05 2505 	add.w	r5, r5, r5, lsl #8
 8001a0c:	2c0f      	cmp	r4, #15
 8001a0e:	eb05 4505 	add.w	r5, r5, r5, lsl #16
 8001a12:	d935      	bls.n	8001a80 <memset+0x9c>
 8001a14:	f1a4 0210 	sub.w	r2, r4, #16
 8001a18:	f022 0c0f 	bic.w	ip, r2, #15
 8001a1c:	f103 0e10 	add.w	lr, r3, #16
 8001a20:	44e6      	add	lr, ip
 8001a22:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 8001a26:	461a      	mov	r2, r3
 8001a28:	6015      	str	r5, [r2, #0]
 8001a2a:	6055      	str	r5, [r2, #4]
 8001a2c:	6095      	str	r5, [r2, #8]
 8001a2e:	60d5      	str	r5, [r2, #12]
 8001a30:	3210      	adds	r2, #16
 8001a32:	4572      	cmp	r2, lr
 8001a34:	d1f8      	bne.n	8001a28 <memset+0x44>
 8001a36:	f10c 0201 	add.w	r2, ip, #1
 8001a3a:	f014 0f0c 	tst.w	r4, #12
 8001a3e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001a42:	f004 0c0f 	and.w	ip, r4, #15
 8001a46:	d013      	beq.n	8001a70 <memset+0x8c>
 8001a48:	f1ac 0304 	sub.w	r3, ip, #4
 8001a4c:	f023 0303 	bic.w	r3, r3, #3
 8001a50:	3304      	adds	r3, #4
 8001a52:	4413      	add	r3, r2
 8001a54:	f842 5b04 	str.w	r5, [r2], #4
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d1fb      	bne.n	8001a54 <memset+0x70>
 8001a5c:	f00c 0403 	and.w	r4, ip, #3
 8001a60:	b12c      	cbz	r4, 8001a6e <memset+0x8a>
 8001a62:	b2c9      	uxtb	r1, r1
 8001a64:	441c      	add	r4, r3
 8001a66:	f803 1b01 	strb.w	r1, [r3], #1
 8001a6a:	429c      	cmp	r4, r3
 8001a6c:	d1fb      	bne.n	8001a66 <memset+0x82>
 8001a6e:	bd30      	pop	{r4, r5, pc}
 8001a70:	4664      	mov	r4, ip
 8001a72:	4613      	mov	r3, r2
 8001a74:	2c00      	cmp	r4, #0
 8001a76:	d1f4      	bne.n	8001a62 <memset+0x7e>
 8001a78:	e7f9      	b.n	8001a6e <memset+0x8a>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4614      	mov	r4, r2
 8001a7e:	e7c0      	b.n	8001a02 <memset+0x1e>
 8001a80:	461a      	mov	r2, r3
 8001a82:	46a4      	mov	ip, r4
 8001a84:	e7e0      	b.n	8001a48 <memset+0x64>
 8001a86:	bf00      	nop

08001a88 <_close_r>:
 8001a88:	b538      	push	{r3, r4, r5, lr}
 8001a8a:	4d07      	ldr	r5, [pc, #28]	@ (8001aa8 <_close_r+0x20>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	4604      	mov	r4, r0
 8001a90:	4608      	mov	r0, r1
 8001a92:	602a      	str	r2, [r5, #0]
 8001a94:	f001 fb62 	bl	800315c <_close>
 8001a98:	1c43      	adds	r3, r0, #1
 8001a9a:	d000      	beq.n	8001a9e <_close_r+0x16>
 8001a9c:	bd38      	pop	{r3, r4, r5, pc}
 8001a9e:	682b      	ldr	r3, [r5, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0fb      	beq.n	8001a9c <_close_r+0x14>
 8001aa4:	6023      	str	r3, [r4, #0]
 8001aa6:	bd38      	pop	{r3, r4, r5, pc}
 8001aa8:	200002f4 	.word	0x200002f4

08001aac <_lseek_r>:
 8001aac:	b538      	push	{r3, r4, r5, lr}
 8001aae:	460c      	mov	r4, r1
 8001ab0:	4d08      	ldr	r5, [pc, #32]	@ (8001ad4 <_lseek_r+0x28>)
 8001ab2:	4684      	mov	ip, r0
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	4620      	mov	r0, r4
 8001ab8:	461a      	mov	r2, r3
 8001aba:	2300      	movs	r3, #0
 8001abc:	602b      	str	r3, [r5, #0]
 8001abe:	4664      	mov	r4, ip
 8001ac0:	f001 fb74 	bl	80031ac <_lseek>
 8001ac4:	1c43      	adds	r3, r0, #1
 8001ac6:	d000      	beq.n	8001aca <_lseek_r+0x1e>
 8001ac8:	bd38      	pop	{r3, r4, r5, pc}
 8001aca:	682b      	ldr	r3, [r5, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0fb      	beq.n	8001ac8 <_lseek_r+0x1c>
 8001ad0:	6023      	str	r3, [r4, #0]
 8001ad2:	bd38      	pop	{r3, r4, r5, pc}
 8001ad4:	200002f4 	.word	0x200002f4

08001ad8 <_read_r>:
 8001ad8:	b538      	push	{r3, r4, r5, lr}
 8001ada:	460c      	mov	r4, r1
 8001adc:	4d08      	ldr	r5, [pc, #32]	@ (8001b00 <_read_r+0x28>)
 8001ade:	4684      	mov	ip, r0
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	602b      	str	r3, [r5, #0]
 8001aea:	4664      	mov	r4, ip
 8001aec:	f001 fb66 	bl	80031bc <_read>
 8001af0:	1c43      	adds	r3, r0, #1
 8001af2:	d000      	beq.n	8001af6 <_read_r+0x1e>
 8001af4:	bd38      	pop	{r3, r4, r5, pc}
 8001af6:	682b      	ldr	r3, [r5, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0fb      	beq.n	8001af4 <_read_r+0x1c>
 8001afc:	6023      	str	r3, [r4, #0]
 8001afe:	bd38      	pop	{r3, r4, r5, pc}
 8001b00:	200002f4 	.word	0x200002f4

08001b04 <_sbrk_r>:
 8001b04:	b538      	push	{r3, r4, r5, lr}
 8001b06:	4d07      	ldr	r5, [pc, #28]	@ (8001b24 <_sbrk_r+0x20>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	4608      	mov	r0, r1
 8001b0e:	602a      	str	r2, [r5, #0]
 8001b10:	f002 fcb6 	bl	8004480 <_sbrk>
 8001b14:	1c43      	adds	r3, r0, #1
 8001b16:	d000      	beq.n	8001b1a <_sbrk_r+0x16>
 8001b18:	bd38      	pop	{r3, r4, r5, pc}
 8001b1a:	682b      	ldr	r3, [r5, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0fb      	beq.n	8001b18 <_sbrk_r+0x14>
 8001b20:	6023      	str	r3, [r4, #0]
 8001b22:	bd38      	pop	{r3, r4, r5, pc}
 8001b24:	200002f4 	.word	0x200002f4

08001b28 <_write_r>:
 8001b28:	b538      	push	{r3, r4, r5, lr}
 8001b2a:	460c      	mov	r4, r1
 8001b2c:	4d08      	ldr	r5, [pc, #32]	@ (8001b50 <_write_r+0x28>)
 8001b2e:	4684      	mov	ip, r0
 8001b30:	4611      	mov	r1, r2
 8001b32:	4620      	mov	r0, r4
 8001b34:	461a      	mov	r2, r3
 8001b36:	2300      	movs	r3, #0
 8001b38:	602b      	str	r3, [r5, #0]
 8001b3a:	4664      	mov	r4, ip
 8001b3c:	f001 fb46 	bl	80031cc <_write>
 8001b40:	1c43      	adds	r3, r0, #1
 8001b42:	d000      	beq.n	8001b46 <_write_r+0x1e>
 8001b44:	bd38      	pop	{r3, r4, r5, pc}
 8001b46:	682b      	ldr	r3, [r5, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0fb      	beq.n	8001b44 <_write_r+0x1c>
 8001b4c:	6023      	str	r3, [r4, #0]
 8001b4e:	bd38      	pop	{r3, r4, r5, pc}
 8001b50:	200002f4 	.word	0x200002f4

08001b54 <__errno>:
 8001b54:	4b01      	ldr	r3, [pc, #4]	@ (8001b5c <__errno+0x8>)
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	2000001c 	.word	0x2000001c

08001b60 <__libc_init_array>:
 8001b60:	b570      	push	{r4, r5, r6, lr}
 8001b62:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba0 <__libc_init_array+0x40>)
 8001b64:	4d0f      	ldr	r5, [pc, #60]	@ (8001ba4 <__libc_init_array+0x44>)
 8001b66:	42ab      	cmp	r3, r5
 8001b68:	eba3 0605 	sub.w	r6, r3, r5
 8001b6c:	d007      	beq.n	8001b7e <__libc_init_array+0x1e>
 8001b6e:	10b6      	asrs	r6, r6, #2
 8001b70:	2400      	movs	r4, #0
 8001b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b76:	3401      	adds	r4, #1
 8001b78:	4798      	blx	r3
 8001b7a:	42a6      	cmp	r6, r4
 8001b7c:	d8f9      	bhi.n	8001b72 <__libc_init_array+0x12>
 8001b7e:	f002 fcbf 	bl	8004500 <_init>
 8001b82:	4d09      	ldr	r5, [pc, #36]	@ (8001ba8 <__libc_init_array+0x48>)
 8001b84:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <__libc_init_array+0x4c>)
 8001b86:	1b5e      	subs	r6, r3, r5
 8001b88:	42ab      	cmp	r3, r5
 8001b8a:	ea4f 06a6 	mov.w	r6, r6, asr #2
 8001b8e:	d006      	beq.n	8001b9e <__libc_init_array+0x3e>
 8001b90:	2400      	movs	r4, #0
 8001b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b96:	3401      	adds	r4, #1
 8001b98:	4798      	blx	r3
 8001b9a:	42a6      	cmp	r6, r4
 8001b9c:	d8f9      	bhi.n	8001b92 <__libc_init_array+0x32>
 8001b9e:	bd70      	pop	{r4, r5, r6, pc}
 8001ba0:	08004620 	.word	0x08004620
 8001ba4:	08004620 	.word	0x08004620
 8001ba8:	08004620 	.word	0x08004620
 8001bac:	08004624 	.word	0x08004624

08001bb0 <__retarget_lock_init>:
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop

08001bb4 <__retarget_lock_init_recursive>:
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop

08001bb8 <__retarget_lock_close>:
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop

08001bbc <__retarget_lock_close_recursive>:
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop

08001bc0 <__retarget_lock_acquire>:
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop

08001bc4 <__retarget_lock_acquire_recursive>:
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop

08001bc8 <__retarget_lock_try_acquire>:
 8001bc8:	2001      	movs	r0, #1
 8001bca:	4770      	bx	lr

08001bcc <__retarget_lock_try_acquire_recursive>:
 8001bcc:	2001      	movs	r0, #1
 8001bce:	4770      	bx	lr

08001bd0 <__retarget_lock_release>:
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop

08001bd4 <__retarget_lock_release_recursive>:
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop

08001bd8 <memcpy>:
 8001bd8:	4684      	mov	ip, r0
 8001bda:	ea41 0300 	orr.w	r3, r1, r0
 8001bde:	f013 0303 	ands.w	r3, r3, #3
 8001be2:	d16d      	bne.n	8001cc0 <memcpy+0xe8>
 8001be4:	3a40      	subs	r2, #64	@ 0x40
 8001be6:	d341      	bcc.n	8001c6c <memcpy+0x94>
 8001be8:	f851 3b04 	ldr.w	r3, [r1], #4
 8001bec:	f840 3b04 	str.w	r3, [r0], #4
 8001bf0:	f851 3b04 	ldr.w	r3, [r1], #4
 8001bf4:	f840 3b04 	str.w	r3, [r0], #4
 8001bf8:	f851 3b04 	ldr.w	r3, [r1], #4
 8001bfc:	f840 3b04 	str.w	r3, [r0], #4
 8001c00:	f851 3b04 	ldr.w	r3, [r1], #4
 8001c04:	f840 3b04 	str.w	r3, [r0], #4
 8001c08:	f851 3b04 	ldr.w	r3, [r1], #4
 8001c0c:	f840 3b04 	str.w	r3, [r0], #4
 8001c10:	f851 3b04 	ldr.w	r3, [r1], #4
 8001c14:	f840 3b04 	str.w	r3, [r0], #4
 8001c18:	f851 3b04 	ldr.w	r3, [r1], #4
 8001c1c:	f840 3b04 	str.w	r3, [r0], #4
 8001c20:	f851 3b04 	ldr.w	r3, [r1], #4
 8001c24:	f840 3b04 	str.w	r3, [r0], #4
 8001c28:	f851 3b04 	ldr.w	r3, [r1], #4
 8001c2c:	f840 3b04 	str.w	r3, [r0], #4
 8001c30:	f851 3b04 	ldr.w	r3, [r1], #4
 8001c34:	f840 3b04 	str.w	r3, [r0], #4
 8001c38:	f851 3b04 	ldr.w	r3, [r1], #4
 8001c3c:	f840 3b04 	str.w	r3, [r0], #4
 8001c40:	f851 3b04 	ldr.w	r3, [r1], #4
 8001c44:	f840 3b04 	str.w	r3, [r0], #4
 8001c48:	f851 3b04 	ldr.w	r3, [r1], #4
 8001c4c:	f840 3b04 	str.w	r3, [r0], #4
 8001c50:	f851 3b04 	ldr.w	r3, [r1], #4
 8001c54:	f840 3b04 	str.w	r3, [r0], #4
 8001c58:	f851 3b04 	ldr.w	r3, [r1], #4
 8001c5c:	f840 3b04 	str.w	r3, [r0], #4
 8001c60:	f851 3b04 	ldr.w	r3, [r1], #4
 8001c64:	f840 3b04 	str.w	r3, [r0], #4
 8001c68:	3a40      	subs	r2, #64	@ 0x40
 8001c6a:	d2bd      	bcs.n	8001be8 <memcpy+0x10>
 8001c6c:	3230      	adds	r2, #48	@ 0x30
 8001c6e:	d311      	bcc.n	8001c94 <memcpy+0xbc>
 8001c70:	f851 3b04 	ldr.w	r3, [r1], #4
 8001c74:	f840 3b04 	str.w	r3, [r0], #4
 8001c78:	f851 3b04 	ldr.w	r3, [r1], #4
 8001c7c:	f840 3b04 	str.w	r3, [r0], #4
 8001c80:	f851 3b04 	ldr.w	r3, [r1], #4
 8001c84:	f840 3b04 	str.w	r3, [r0], #4
 8001c88:	f851 3b04 	ldr.w	r3, [r1], #4
 8001c8c:	f840 3b04 	str.w	r3, [r0], #4
 8001c90:	3a10      	subs	r2, #16
 8001c92:	d2ed      	bcs.n	8001c70 <memcpy+0x98>
 8001c94:	320c      	adds	r2, #12
 8001c96:	d305      	bcc.n	8001ca4 <memcpy+0xcc>
 8001c98:	f851 3b04 	ldr.w	r3, [r1], #4
 8001c9c:	f840 3b04 	str.w	r3, [r0], #4
 8001ca0:	3a04      	subs	r2, #4
 8001ca2:	d2f9      	bcs.n	8001c98 <memcpy+0xc0>
 8001ca4:	3204      	adds	r2, #4
 8001ca6:	d008      	beq.n	8001cba <memcpy+0xe2>
 8001ca8:	07d2      	lsls	r2, r2, #31
 8001caa:	bf1c      	itt	ne
 8001cac:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001cb0:	f800 3b01 	strbne.w	r3, [r0], #1
 8001cb4:	d301      	bcc.n	8001cba <memcpy+0xe2>
 8001cb6:	880b      	ldrh	r3, [r1, #0]
 8001cb8:	8003      	strh	r3, [r0, #0]
 8001cba:	4660      	mov	r0, ip
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	2a08      	cmp	r2, #8
 8001cc2:	d313      	bcc.n	8001cec <memcpy+0x114>
 8001cc4:	078b      	lsls	r3, r1, #30
 8001cc6:	d08d      	beq.n	8001be4 <memcpy+0xc>
 8001cc8:	f010 0303 	ands.w	r3, r0, #3
 8001ccc:	d08a      	beq.n	8001be4 <memcpy+0xc>
 8001cce:	f1c3 0304 	rsb	r3, r3, #4
 8001cd2:	1ad2      	subs	r2, r2, r3
 8001cd4:	07db      	lsls	r3, r3, #31
 8001cd6:	bf1c      	itt	ne
 8001cd8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001cdc:	f800 3b01 	strbne.w	r3, [r0], #1
 8001ce0:	d380      	bcc.n	8001be4 <memcpy+0xc>
 8001ce2:	f831 3b02 	ldrh.w	r3, [r1], #2
 8001ce6:	f820 3b02 	strh.w	r3, [r0], #2
 8001cea:	e77b      	b.n	8001be4 <memcpy+0xc>
 8001cec:	3a04      	subs	r2, #4
 8001cee:	d3d9      	bcc.n	8001ca4 <memcpy+0xcc>
 8001cf0:	3a01      	subs	r2, #1
 8001cf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001cf6:	f800 3b01 	strb.w	r3, [r0], #1
 8001cfa:	d2f9      	bcs.n	8001cf0 <memcpy+0x118>
 8001cfc:	780b      	ldrb	r3, [r1, #0]
 8001cfe:	7003      	strb	r3, [r0, #0]
 8001d00:	784b      	ldrb	r3, [r1, #1]
 8001d02:	7043      	strb	r3, [r0, #1]
 8001d04:	788b      	ldrb	r3, [r1, #2]
 8001d06:	7083      	strb	r3, [r0, #2]
 8001d08:	4660      	mov	r0, ip
 8001d0a:	4770      	bx	lr

08001d0c <__assert_func>:
 8001d0c:	b500      	push	{lr}
 8001d0e:	4c0b      	ldr	r4, [pc, #44]	@ (8001d3c <__assert_func+0x30>)
 8001d10:	6825      	ldr	r5, [r4, #0]
 8001d12:	4614      	mov	r4, r2
 8001d14:	68ee      	ldr	r6, [r5, #12]
 8001d16:	461a      	mov	r2, r3
 8001d18:	b085      	sub	sp, #20
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	460d      	mov	r5, r1
 8001d1e:	b14c      	cbz	r4, 8001d34 <__assert_func+0x28>
 8001d20:	4907      	ldr	r1, [pc, #28]	@ (8001d40 <__assert_func+0x34>)
 8001d22:	9500      	str	r5, [sp, #0]
 8001d24:	e9cd 1401 	strd	r1, r4, [sp, #4]
 8001d28:	4630      	mov	r0, r6
 8001d2a:	4906      	ldr	r1, [pc, #24]	@ (8001d44 <__assert_func+0x38>)
 8001d2c:	f000 f948 	bl	8001fc0 <fiprintf>
 8001d30:	f000 f95a 	bl	8001fe8 <abort>
 8001d34:	4904      	ldr	r1, [pc, #16]	@ (8001d48 <__assert_func+0x3c>)
 8001d36:	460c      	mov	r4, r1
 8001d38:	e7f3      	b.n	8001d22 <__assert_func+0x16>
 8001d3a:	bf00      	nop
 8001d3c:	2000001c 	.word	0x2000001c
 8001d40:	0800459c 	.word	0x0800459c
 8001d44:	080045ac 	.word	0x080045ac
 8001d48:	080045a8 	.word	0x080045a8

08001d4c <__assert>:
 8001d4c:	b508      	push	{r3, lr}
 8001d4e:	4613      	mov	r3, r2
 8001d50:	2200      	movs	r2, #0
 8001d52:	f7ff ffdb 	bl	8001d0c <__assert_func>
 8001d56:	bf00      	nop

08001d58 <_free_r>:
 8001d58:	2900      	cmp	r1, #0
 8001d5a:	d050      	beq.n	8001dfe <_free_r+0xa6>
 8001d5c:	b538      	push	{r3, r4, r5, lr}
 8001d5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d62:	1f0c      	subs	r4, r1, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	bfb8      	it	lt
 8001d68:	18e4      	addlt	r4, r4, r3
 8001d6a:	4605      	mov	r5, r0
 8001d6c:	f7ff fbda 	bl	8001524 <__malloc_lock>
 8001d70:	4a27      	ldr	r2, [pc, #156]	@ (8001e10 <_free_r+0xb8>)
 8001d72:	6813      	ldr	r3, [r2, #0]
 8001d74:	b12b      	cbz	r3, 8001d82 <_free_r+0x2a>
 8001d76:	42a3      	cmp	r3, r4
 8001d78:	d90c      	bls.n	8001d94 <_free_r+0x3c>
 8001d7a:	6821      	ldr	r1, [r4, #0]
 8001d7c:	1860      	adds	r0, r4, r1
 8001d7e:	4283      	cmp	r3, r0
 8001d80:	d02c      	beq.n	8001ddc <_free_r+0x84>
 8001d82:	6063      	str	r3, [r4, #4]
 8001d84:	4628      	mov	r0, r5
 8001d86:	6014      	str	r4, [r2, #0]
 8001d88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d8c:	f7ff bbd0 	b.w	8001530 <__malloc_unlock>
 8001d90:	42a3      	cmp	r3, r4
 8001d92:	d80f      	bhi.n	8001db4 <_free_r+0x5c>
 8001d94:	461a      	mov	r2, r3
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f9      	bne.n	8001d90 <_free_r+0x38>
 8001d9c:	6811      	ldr	r1, [r2, #0]
 8001d9e:	1850      	adds	r0, r2, r1
 8001da0:	4284      	cmp	r4, r0
 8001da2:	d017      	beq.n	8001dd4 <_free_r+0x7c>
 8001da4:	d32c      	bcc.n	8001e00 <_free_r+0xa8>
 8001da6:	6063      	str	r3, [r4, #4]
 8001da8:	6054      	str	r4, [r2, #4]
 8001daa:	4628      	mov	r0, r5
 8001dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001db0:	f7ff bbbe 	b.w	8001530 <__malloc_unlock>
 8001db4:	6811      	ldr	r1, [r2, #0]
 8001db6:	1850      	adds	r0, r2, r1
 8001db8:	42a0      	cmp	r0, r4
 8001dba:	d014      	beq.n	8001de6 <_free_r+0x8e>
 8001dbc:	d820      	bhi.n	8001e00 <_free_r+0xa8>
 8001dbe:	6821      	ldr	r1, [r4, #0]
 8001dc0:	1860      	adds	r0, r4, r1
 8001dc2:	4283      	cmp	r3, r0
 8001dc4:	d1ef      	bne.n	8001da6 <_free_r+0x4e>
 8001dc6:	6818      	ldr	r0, [r3, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	4408      	add	r0, r1
 8001dcc:	e9c4 0300 	strd	r0, r3, [r4]
 8001dd0:	6054      	str	r4, [r2, #4]
 8001dd2:	e7ea      	b.n	8001daa <_free_r+0x52>
 8001dd4:	6823      	ldr	r3, [r4, #0]
 8001dd6:	440b      	add	r3, r1
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e7e6      	b.n	8001daa <_free_r+0x52>
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	4408      	add	r0, r1
 8001de2:	6020      	str	r0, [r4, #0]
 8001de4:	e7cd      	b.n	8001d82 <_free_r+0x2a>
 8001de6:	6820      	ldr	r0, [r4, #0]
 8001de8:	4401      	add	r1, r0
 8001dea:	1850      	adds	r0, r2, r1
 8001dec:	4283      	cmp	r3, r0
 8001dee:	6011      	str	r1, [r2, #0]
 8001df0:	d1db      	bne.n	8001daa <_free_r+0x52>
 8001df2:	e9d3 0400 	ldrd	r0, r4, [r3]
 8001df6:	4401      	add	r1, r0
 8001df8:	e9c2 1400 	strd	r1, r4, [r2]
 8001dfc:	e7d5      	b.n	8001daa <_free_r+0x52>
 8001dfe:	4770      	bx	lr
 8001e00:	230c      	movs	r3, #12
 8001e02:	602b      	str	r3, [r5, #0]
 8001e04:	4628      	mov	r0, r5
 8001e06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e0a:	f7ff bb91 	b.w	8001530 <__malloc_unlock>
 8001e0e:	bf00      	nop
 8001e10:	200001b4 	.word	0x200001b4

08001e14 <__sflush_r>:
 8001e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e16:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8001e1a:	4607      	mov	r7, r0
 8001e1c:	0718      	lsls	r0, r3, #28
 8001e1e:	460c      	mov	r4, r1
 8001e20:	d439      	bmi.n	8001e96 <__sflush_r+0x82>
 8001e22:	684a      	ldr	r2, [r1, #4]
 8001e24:	2a00      	cmp	r2, #0
 8001e26:	dd53      	ble.n	8001ed0 <__sflush_r+0xbc>
 8001e28:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8001e2a:	2d00      	cmp	r5, #0
 8001e2c:	d031      	beq.n	8001e92 <__sflush_r+0x7e>
 8001e2e:	2200      	movs	r2, #0
 8001e30:	683e      	ldr	r6, [r7, #0]
 8001e32:	603a      	str	r2, [r7, #0]
 8001e34:	f413 5280 	ands.w	r2, r3, #4096	@ 0x1000
 8001e38:	6a21      	ldr	r1, [r4, #32]
 8001e3a:	d155      	bne.n	8001ee8 <__sflush_r+0xd4>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	4638      	mov	r0, r7
 8001e40:	47a8      	blx	r5
 8001e42:	1c41      	adds	r1, r0, #1
 8001e44:	4602      	mov	r2, r0
 8001e46:	d05e      	beq.n	8001f06 <__sflush_r+0xf2>
 8001e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e4c:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8001e4e:	6a21      	ldr	r1, [r4, #32]
 8001e50:	075b      	lsls	r3, r3, #29
 8001e52:	d505      	bpl.n	8001e60 <__sflush_r+0x4c>
 8001e54:	6863      	ldr	r3, [r4, #4]
 8001e56:	1ad2      	subs	r2, r2, r3
 8001e58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001e5a:	b10b      	cbz	r3, 8001e60 <__sflush_r+0x4c>
 8001e5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e5e:	1ad2      	subs	r2, r2, r3
 8001e60:	2300      	movs	r3, #0
 8001e62:	4638      	mov	r0, r7
 8001e64:	47a8      	blx	r5
 8001e66:	1c45      	adds	r5, r0, #1
 8001e68:	d040      	beq.n	8001eec <__sflush_r+0xd8>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	6063      	str	r3, [r4, #4]
 8001e6e:	6923      	ldr	r3, [r4, #16]
 8001e70:	6023      	str	r3, [r4, #0]
 8001e72:	89a3      	ldrh	r3, [r4, #12]
 8001e74:	04d9      	lsls	r1, r3, #19
 8001e76:	d500      	bpl.n	8001e7a <__sflush_r+0x66>
 8001e78:	6560      	str	r0, [r4, #84]	@ 0x54
 8001e7a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001e7c:	603e      	str	r6, [r7, #0]
 8001e7e:	b141      	cbz	r1, 8001e92 <__sflush_r+0x7e>
 8001e80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001e84:	4299      	cmp	r1, r3
 8001e86:	d002      	beq.n	8001e8e <__sflush_r+0x7a>
 8001e88:	4638      	mov	r0, r7
 8001e8a:	f7ff ff65 	bl	8001d58 <_free_r>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	6363      	str	r3, [r4, #52]	@ 0x34
 8001e92:	2000      	movs	r0, #0
 8001e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e96:	690e      	ldr	r6, [r1, #16]
 8001e98:	2e00      	cmp	r6, #0
 8001e9a:	d0fa      	beq.n	8001e92 <__sflush_r+0x7e>
 8001e9c:	079b      	lsls	r3, r3, #30
 8001e9e:	680d      	ldr	r5, [r1, #0]
 8001ea0:	bf08      	it	eq
 8001ea2:	694b      	ldreq	r3, [r1, #20]
 8001ea4:	600e      	str	r6, [r1, #0]
 8001ea6:	bf18      	it	ne
 8001ea8:	2300      	movne	r3, #0
 8001eaa:	1bad      	subs	r5, r5, r6
 8001eac:	608b      	str	r3, [r1, #8]
 8001eae:	e00c      	b.n	8001eca <__sflush_r+0xb6>
 8001eb0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001eb4:	6a21      	ldr	r1, [r4, #32]
 8001eb6:	462b      	mov	r3, r5
 8001eb8:	4632      	mov	r2, r6
 8001eba:	4638      	mov	r0, r7
 8001ebc:	47e0      	blx	ip
 8001ebe:	f1b0 0c00 	subs.w	ip, r0, #0
 8001ec2:	eba5 050c 	sub.w	r5, r5, ip
 8001ec6:	4466      	add	r6, ip
 8001ec8:	dd06      	ble.n	8001ed8 <__sflush_r+0xc4>
 8001eca:	2d00      	cmp	r5, #0
 8001ecc:	dcf0      	bgt.n	8001eb0 <__sflush_r+0x9c>
 8001ece:	e7e0      	b.n	8001e92 <__sflush_r+0x7e>
 8001ed0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8001ed2:	2a00      	cmp	r2, #0
 8001ed4:	dca8      	bgt.n	8001e28 <__sflush_r+0x14>
 8001ed6:	e7dc      	b.n	8001e92 <__sflush_r+0x7e>
 8001ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001edc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ee0:	81a3      	strh	r3, [r4, #12]
 8001ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ee8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001eea:	e7b1      	b.n	8001e50 <__sflush_r+0x3c>
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ef2:	b18a      	cbz	r2, 8001f18 <__sflush_r+0x104>
 8001ef4:	2a1d      	cmp	r2, #29
 8001ef6:	d001      	beq.n	8001efc <__sflush_r+0xe8>
 8001ef8:	2a16      	cmp	r2, #22
 8001efa:	d1ef      	bne.n	8001edc <__sflush_r+0xc8>
 8001efc:	6923      	ldr	r3, [r4, #16]
 8001efe:	2200      	movs	r2, #0
 8001f00:	e9c4 3200 	strd	r3, r2, [r4]
 8001f04:	e7b9      	b.n	8001e7a <__sflush_r+0x66>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d09d      	beq.n	8001e48 <__sflush_r+0x34>
 8001f0c:	2b1d      	cmp	r3, #29
 8001f0e:	d001      	beq.n	8001f14 <__sflush_r+0x100>
 8001f10:	2b16      	cmp	r3, #22
 8001f12:	d1e1      	bne.n	8001ed8 <__sflush_r+0xc4>
 8001f14:	603e      	str	r6, [r7, #0]
 8001f16:	e7bc      	b.n	8001e92 <__sflush_r+0x7e>
 8001f18:	6062      	str	r2, [r4, #4]
 8001f1a:	6922      	ldr	r2, [r4, #16]
 8001f1c:	6022      	str	r2, [r4, #0]
 8001f1e:	04da      	lsls	r2, r3, #19
 8001f20:	d4aa      	bmi.n	8001e78 <__sflush_r+0x64>
 8001f22:	e7aa      	b.n	8001e7a <__sflush_r+0x66>

08001f24 <_fflush_r>:
 8001f24:	b538      	push	{r3, r4, r5, lr}
 8001f26:	690b      	ldr	r3, [r1, #16]
 8001f28:	b1cb      	cbz	r3, 8001f5e <_fflush_r+0x3a>
 8001f2a:	460c      	mov	r4, r1
 8001f2c:	4605      	mov	r5, r0
 8001f2e:	b108      	cbz	r0, 8001f34 <_fflush_r+0x10>
 8001f30:	6a03      	ldr	r3, [r0, #32]
 8001f32:	b1bb      	cbz	r3, 8001f64 <_fflush_r+0x40>
 8001f34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f38:	b18b      	cbz	r3, 8001f5e <_fflush_r+0x3a>
 8001f3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001f3c:	07d0      	lsls	r0, r2, #31
 8001f3e:	d401      	bmi.n	8001f44 <_fflush_r+0x20>
 8001f40:	0599      	lsls	r1, r3, #22
 8001f42:	d512      	bpl.n	8001f6a <_fflush_r+0x46>
 8001f44:	4628      	mov	r0, r5
 8001f46:	4621      	mov	r1, r4
 8001f48:	f7ff ff64 	bl	8001e14 <__sflush_r>
 8001f4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f4e:	07da      	lsls	r2, r3, #31
 8001f50:	4605      	mov	r5, r0
 8001f52:	d402      	bmi.n	8001f5a <_fflush_r+0x36>
 8001f54:	89a3      	ldrh	r3, [r4, #12]
 8001f56:	059b      	lsls	r3, r3, #22
 8001f58:	d50b      	bpl.n	8001f72 <_fflush_r+0x4e>
 8001f5a:	4628      	mov	r0, r5
 8001f5c:	bd38      	pop	{r3, r4, r5, pc}
 8001f5e:	2500      	movs	r5, #0
 8001f60:	4628      	mov	r0, r5
 8001f62:	bd38      	pop	{r3, r4, r5, pc}
 8001f64:	f7ff fc80 	bl	8001868 <__sinit>
 8001f68:	e7e4      	b.n	8001f34 <_fflush_r+0x10>
 8001f6a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f6c:	f7ff fe2a 	bl	8001bc4 <__retarget_lock_acquire_recursive>
 8001f70:	e7e8      	b.n	8001f44 <_fflush_r+0x20>
 8001f72:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f74:	f7ff fe2e 	bl	8001bd4 <__retarget_lock_release_recursive>
 8001f78:	e7ef      	b.n	8001f5a <_fflush_r+0x36>
 8001f7a:	bf00      	nop

08001f7c <fflush>:
 8001f7c:	4601      	mov	r1, r0
 8001f7e:	b118      	cbz	r0, 8001f88 <fflush+0xc>
 8001f80:	4b04      	ldr	r3, [pc, #16]	@ (8001f94 <fflush+0x18>)
 8001f82:	6818      	ldr	r0, [r3, #0]
 8001f84:	f7ff bfce 	b.w	8001f24 <_fflush_r>
 8001f88:	4a03      	ldr	r2, [pc, #12]	@ (8001f98 <fflush+0x1c>)
 8001f8a:	4904      	ldr	r1, [pc, #16]	@ (8001f9c <fflush+0x20>)
 8001f8c:	4804      	ldr	r0, [pc, #16]	@ (8001fa0 <fflush+0x24>)
 8001f8e:	f7ff bcbb 	b.w	8001908 <_fwalk_sglue>
 8001f92:	bf00      	nop
 8001f94:	2000001c 	.word	0x2000001c
 8001f98:	20000010 	.word	0x20000010
 8001f9c:	08001f25 	.word	0x08001f25
 8001fa0:	20000020 	.word	0x20000020

08001fa4 <_fiprintf_r>:
 8001fa4:	b40c      	push	{r2, r3}
 8001fa6:	b500      	push	{lr}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	ab04      	add	r3, sp, #16
 8001fac:	f853 2b04 	ldr.w	r2, [r3], #4
 8001fb0:	9301      	str	r3, [sp, #4]
 8001fb2:	f000 f85d 	bl	8002070 <_vfiprintf_r>
 8001fb6:	b003      	add	sp, #12
 8001fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8001fbc:	b002      	add	sp, #8
 8001fbe:	4770      	bx	lr

08001fc0 <fiprintf>:
 8001fc0:	b40e      	push	{r1, r2, r3}
 8001fc2:	b510      	push	{r4, lr}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	ab05      	add	r3, sp, #20
 8001fc8:	4c06      	ldr	r4, [pc, #24]	@ (8001fe4 <fiprintf+0x24>)
 8001fca:	f853 2b04 	ldr.w	r2, [r3], #4
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	4601      	mov	r1, r0
 8001fd2:	6820      	ldr	r0, [r4, #0]
 8001fd4:	f000 f84c 	bl	8002070 <_vfiprintf_r>
 8001fd8:	b003      	add	sp, #12
 8001fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fde:	b003      	add	sp, #12
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	2000001c 	.word	0x2000001c

08001fe8 <abort>:
 8001fe8:	b508      	push	{r3, lr}
 8001fea:	2006      	movs	r0, #6
 8001fec:	f000 febe 	bl	8002d6c <raise>
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	f001 f8f3 	bl	80031dc <_exit>
 8001ff6:	bf00      	nop

08001ff8 <__sfputc_r>:
 8001ff8:	6893      	ldr	r3, [r2, #8]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	6093      	str	r3, [r2, #8]
 8002000:	da05      	bge.n	800200e <__sfputc_r+0x16>
 8002002:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8002006:	4563      	cmp	r3, ip
 8002008:	db07      	blt.n	800201a <__sfputc_r+0x22>
 800200a:	290a      	cmp	r1, #10
 800200c:	d005      	beq.n	800201a <__sfputc_r+0x22>
 800200e:	6813      	ldr	r3, [r2, #0]
 8002010:	1c58      	adds	r0, r3, #1
 8002012:	6010      	str	r0, [r2, #0]
 8002014:	7019      	strb	r1, [r3, #0]
 8002016:	4608      	mov	r0, r1
 8002018:	4770      	bx	lr
 800201a:	f000 bce3 	b.w	80029e4 <__swbuf_r>
 800201e:	bf00      	nop

08002020 <__sfputs_r>:
 8002020:	b19b      	cbz	r3, 800204a <__sfputs_r+0x2a>
 8002022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002024:	4413      	add	r3, r2
 8002026:	4606      	mov	r6, r0
 8002028:	460f      	mov	r7, r1
 800202a:	1e54      	subs	r4, r2, #1
 800202c:	1e5d      	subs	r5, r3, #1
 800202e:	e001      	b.n	8002034 <__sfputs_r+0x14>
 8002030:	42ac      	cmp	r4, r5
 8002032:	d008      	beq.n	8002046 <__sfputs_r+0x26>
 8002034:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002038:	463a      	mov	r2, r7
 800203a:	4630      	mov	r0, r6
 800203c:	f7ff ffdc 	bl	8001ff8 <__sfputc_r>
 8002040:	1c43      	adds	r3, r0, #1
 8002042:	d1f5      	bne.n	8002030 <__sfputs_r+0x10>
 8002044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002046:	2000      	movs	r0, #0
 8002048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800204a:	2000      	movs	r0, #0
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop

08002050 <__sprint_r>:
 8002050:	6893      	ldr	r3, [r2, #8]
 8002052:	b510      	push	{r4, lr}
 8002054:	4614      	mov	r4, r2
 8002056:	b91b      	cbnz	r3, 8002060 <__sprint_r+0x10>
 8002058:	4618      	mov	r0, r3
 800205a:	2300      	movs	r3, #0
 800205c:	6063      	str	r3, [r4, #4]
 800205e:	bd10      	pop	{r4, pc}
 8002060:	f000 fb44 	bl	80026ec <__sfvwrite_r>
 8002064:	2300      	movs	r3, #0
 8002066:	60a3      	str	r3, [r4, #8]
 8002068:	2300      	movs	r3, #0
 800206a:	6063      	str	r3, [r4, #4]
 800206c:	bd10      	pop	{r4, pc}
 800206e:	bf00      	nop

08002070 <_vfiprintf_r>:
 8002070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002074:	b0a1      	sub	sp, #132	@ 0x84
 8002076:	468b      	mov	fp, r1
 8002078:	4691      	mov	r9, r2
 800207a:	461c      	mov	r4, r3
 800207c:	9004      	str	r0, [sp, #16]
 800207e:	b118      	cbz	r0, 8002088 <_vfiprintf_r+0x18>
 8002080:	6a03      	ldr	r3, [r0, #32]
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 8147 	beq.w	8002316 <_vfiprintf_r+0x2a6>
 8002088:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 800208c:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8002090:	07d2      	lsls	r2, r2, #31
 8002092:	d402      	bmi.n	800209a <_vfiprintf_r+0x2a>
 8002094:	059f      	lsls	r7, r3, #22
 8002096:	f140 8137 	bpl.w	8002308 <_vfiprintf_r+0x298>
 800209a:	071e      	lsls	r6, r3, #28
 800209c:	f140 809e 	bpl.w	80021dc <_vfiprintf_r+0x16c>
 80020a0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 8099 	beq.w	80021dc <_vfiprintf_r+0x16c>
 80020aa:	2300      	movs	r3, #0
 80020ac:	46ca      	mov	sl, r9
 80020ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80020b0:	f243 0320 	movw	r3, #12320	@ 0x3020
 80020b4:	f8ad 3039 	strh.w	r3, [sp, #57]	@ 0x39
 80020b8:	f89a 3000 	ldrb.w	r3, [sl]
 80020bc:	4e97      	ldr	r6, [pc, #604]	@ (800231c <_vfiprintf_r+0x2ac>)
 80020be:	9407      	str	r4, [sp, #28]
 80020c0:	2701      	movs	r7, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d07a      	beq.n	80021bc <_vfiprintf_r+0x14c>
 80020c6:	46d1      	mov	r9, sl
 80020c8:	e004      	b.n	80020d4 <_vfiprintf_r+0x64>
 80020ca:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 809a 	beq.w	8002208 <_vfiprintf_r+0x198>
 80020d4:	2b25      	cmp	r3, #37	@ 0x25
 80020d6:	d1f8      	bne.n	80020ca <_vfiprintf_r+0x5a>
 80020d8:	ebb9 080a 	subs.w	r8, r9, sl
 80020dc:	f040 8097 	bne.w	800220e <_vfiprintf_r+0x19e>
 80020e0:	f899 3000 	ldrb.w	r3, [r9]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d069      	beq.n	80021bc <_vfiprintf_r+0x14c>
 80020e8:	2300      	movs	r3, #0
 80020ea:	f04f 32ff 	mov.w	r2, #4294967295
 80020ee:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
 80020f2:	f109 0901 	add.w	r9, r9, #1
 80020f6:	9308      	str	r3, [sp, #32]
 80020f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80020fa:	f88d 3063 	strb.w	r3, [sp, #99]	@ 0x63
 80020fe:	931e      	str	r3, [sp, #120]	@ 0x78
 8002100:	e005      	b.n	800210e <_vfiprintf_r+0x9e>
 8002102:	9a08      	ldr	r2, [sp, #32]
 8002104:	fa07 f303 	lsl.w	r3, r7, r3
 8002108:	431a      	orrs	r2, r3
 800210a:	9208      	str	r2, [sp, #32]
 800210c:	46a1      	mov	r9, r4
 800210e:	464c      	mov	r4, r9
 8002110:	2205      	movs	r2, #5
 8002112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002116:	4630      	mov	r0, r6
 8002118:	f000 fee2 	bl	8002ee0 <memchr>
 800211c:	46a2      	mov	sl, r4
 800211e:	1b83      	subs	r3, r0, r6
 8002120:	2800      	cmp	r0, #0
 8002122:	d1ee      	bne.n	8002102 <_vfiprintf_r+0x92>
 8002124:	9b08      	ldr	r3, [sp, #32]
 8002126:	06d8      	lsls	r0, r3, #27
 8002128:	bf44      	itt	mi
 800212a:	2220      	movmi	r2, #32
 800212c:	f88d 2063 	strbmi.w	r2, [sp, #99]	@ 0x63
 8002130:	0719      	lsls	r1, r3, #28
 8002132:	f899 1000 	ldrb.w	r1, [r9]
 8002136:	bf44      	itt	mi
 8002138:	222b      	movmi	r2, #43	@ 0x2b
 800213a:	f88d 2063 	strbmi.w	r2, [sp, #99]	@ 0x63
 800213e:	292a      	cmp	r1, #42	@ 0x2a
 8002140:	d17b      	bne.n	800223a <_vfiprintf_r+0x1ca>
 8002142:	9a07      	ldr	r2, [sp, #28]
 8002144:	6811      	ldr	r1, [r2, #0]
 8002146:	3204      	adds	r2, #4
 8002148:	2900      	cmp	r1, #0
 800214a:	9207      	str	r2, [sp, #28]
 800214c:	f2c0 80b0 	blt.w	80022b0 <_vfiprintf_r+0x240>
 8002150:	910b      	str	r1, [sp, #44]	@ 0x2c
 8002152:	f899 1001 	ldrb.w	r1, [r9, #1]
 8002156:	292e      	cmp	r1, #46	@ 0x2e
 8002158:	f000 8086 	beq.w	8002268 <_vfiprintf_r+0x1f8>
 800215c:	4c70      	ldr	r4, [pc, #448]	@ (8002320 <_vfiprintf_r+0x2b0>)
 800215e:	2203      	movs	r2, #3
 8002160:	4620      	mov	r0, r4
 8002162:	f000 febd 	bl	8002ee0 <memchr>
 8002166:	b138      	cbz	r0, 8002178 <_vfiprintf_r+0x108>
 8002168:	9b08      	ldr	r3, [sp, #32]
 800216a:	1b00      	subs	r0, r0, r4
 800216c:	2240      	movs	r2, #64	@ 0x40
 800216e:	4082      	lsls	r2, r0
 8002170:	4313      	orrs	r3, r2
 8002172:	f10a 0a01 	add.w	sl, sl, #1
 8002176:	9308      	str	r3, [sp, #32]
 8002178:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800217c:	4869      	ldr	r0, [pc, #420]	@ (8002324 <_vfiprintf_r+0x2b4>)
 800217e:	f88d 1038 	strb.w	r1, [sp, #56]	@ 0x38
 8002182:	2206      	movs	r2, #6
 8002184:	f000 feac 	bl	8002ee0 <memchr>
 8002188:	2800      	cmp	r0, #0
 800218a:	f000 8097 	beq.w	80022bc <_vfiprintf_r+0x24c>
 800218e:	4b66      	ldr	r3, [pc, #408]	@ (8002328 <_vfiprintf_r+0x2b8>)
 8002190:	2b00      	cmp	r3, #0
 8002192:	d07e      	beq.n	8002292 <_vfiprintf_r+0x222>
 8002194:	aa07      	add	r2, sp, #28
 8002196:	9200      	str	r2, [sp, #0]
 8002198:	4b64      	ldr	r3, [pc, #400]	@ (800232c <_vfiprintf_r+0x2bc>)
 800219a:	9804      	ldr	r0, [sp, #16]
 800219c:	465a      	mov	r2, fp
 800219e:	a908      	add	r1, sp, #32
 80021a0:	f3af 8000 	nop.w
 80021a4:	9003      	str	r0, [sp, #12]
 80021a6:	9b03      	ldr	r3, [sp, #12]
 80021a8:	3301      	adds	r3, #1
 80021aa:	d007      	beq.n	80021bc <_vfiprintf_r+0x14c>
 80021ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80021ae:	9a03      	ldr	r2, [sp, #12]
 80021b0:	4413      	add	r3, r2
 80021b2:	930d      	str	r3, [sp, #52]	@ 0x34
 80021b4:	f89a 3000 	ldrb.w	r3, [sl]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d184      	bne.n	80020c6 <_vfiprintf_r+0x56>
 80021bc:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80021c0:	f013 0f01 	tst.w	r3, #1
 80021c4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80021c8:	d102      	bne.n	80021d0 <_vfiprintf_r+0x160>
 80021ca:	059a      	lsls	r2, r3, #22
 80021cc:	f140 8095 	bpl.w	80022fa <_vfiprintf_r+0x28a>
 80021d0:	065b      	lsls	r3, r3, #25
 80021d2:	d416      	bmi.n	8002202 <_vfiprintf_r+0x192>
 80021d4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80021d6:	b021      	add	sp, #132	@ 0x84
 80021d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021dc:	9804      	ldr	r0, [sp, #16]
 80021de:	4659      	mov	r1, fp
 80021e0:	f000 fc50 	bl	8002a84 <__swsetup_r>
 80021e4:	2800      	cmp	r0, #0
 80021e6:	f43f af60 	beq.w	80020aa <_vfiprintf_r+0x3a>
 80021ea:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80021ee:	07dd      	lsls	r5, r3, #31
 80021f0:	d407      	bmi.n	8002202 <_vfiprintf_r+0x192>
 80021f2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80021f6:	059c      	lsls	r4, r3, #22
 80021f8:	d403      	bmi.n	8002202 <_vfiprintf_r+0x192>
 80021fa:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 80021fe:	f7ff fce9 	bl	8001bd4 <__retarget_lock_release_recursive>
 8002202:	f04f 30ff 	mov.w	r0, #4294967295
 8002206:	e7e6      	b.n	80021d6 <_vfiprintf_r+0x166>
 8002208:	ebb9 080a 	subs.w	r8, r9, sl
 800220c:	d0d6      	beq.n	80021bc <_vfiprintf_r+0x14c>
 800220e:	f10a 35ff 	add.w	r5, sl, #4294967295
 8002212:	f8cd 9014 	str.w	r9, [sp, #20]
 8002216:	46a9      	mov	r9, r5
 8002218:	9d04      	ldr	r5, [sp, #16]
 800221a:	e001      	b.n	8002220 <_vfiprintf_r+0x1b0>
 800221c:	45a0      	cmp	r8, r4
 800221e:	d93f      	bls.n	80022a0 <_vfiprintf_r+0x230>
 8002220:	464c      	mov	r4, r9
 8002222:	465a      	mov	r2, fp
 8002224:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8002228:	4628      	mov	r0, r5
 800222a:	f7ff fee5 	bl	8001ff8 <__sfputc_r>
 800222e:	3402      	adds	r4, #2
 8002230:	3001      	adds	r0, #1
 8002232:	eba4 040a 	sub.w	r4, r4, sl
 8002236:	d1f1      	bne.n	800221c <_vfiprintf_r+0x1ac>
 8002238:	e7c0      	b.n	80021bc <_vfiprintf_r+0x14c>
 800223a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800223e:	2a09      	cmp	r2, #9
 8002240:	bf88      	it	hi
 8002242:	46ca      	movhi	sl, r9
 8002244:	d887      	bhi.n	8002156 <_vfiprintf_r+0xe6>
 8002246:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002248:	e000      	b.n	800224c <_vfiprintf_r+0x1dc>
 800224a:	3401      	adds	r4, #1
 800224c:	7821      	ldrb	r1, [r4, #0]
 800224e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002252:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002256:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800225a:	2a09      	cmp	r2, #9
 800225c:	d9f5      	bls.n	800224a <_vfiprintf_r+0x1da>
 800225e:	292e      	cmp	r1, #46	@ 0x2e
 8002260:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002262:	46a2      	mov	sl, r4
 8002264:	f47f af7a 	bne.w	800215c <_vfiprintf_r+0xec>
 8002268:	f89a 1001 	ldrb.w	r1, [sl, #1]
 800226c:	292a      	cmp	r1, #42	@ 0x2a
 800226e:	d12f      	bne.n	80022d0 <_vfiprintf_r+0x260>
 8002270:	9b07      	ldr	r3, [sp, #28]
 8002272:	f89a 1002 	ldrb.w	r1, [sl, #2]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	9209      	str	r2, [sp, #36]	@ 0x24
 800227a:	3304      	adds	r3, #4
 800227c:	2a00      	cmp	r2, #0
 800227e:	f10a 0002 	add.w	r0, sl, #2
 8002282:	9307      	str	r3, [sp, #28]
 8002284:	bfb8      	it	lt
 8002286:	f04f 33ff 	movlt.w	r3, #4294967295
 800228a:	4682      	mov	sl, r0
 800228c:	bfb8      	it	lt
 800228e:	9309      	strlt	r3, [sp, #36]	@ 0x24
 8002290:	e764      	b.n	800215c <_vfiprintf_r+0xec>
 8002292:	9b07      	ldr	r3, [sp, #28]
 8002294:	3307      	adds	r3, #7
 8002296:	f023 0307 	bic.w	r3, r3, #7
 800229a:	3308      	adds	r3, #8
 800229c:	9307      	str	r3, [sp, #28]
 800229e:	e785      	b.n	80021ac <_vfiprintf_r+0x13c>
 80022a0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80022a2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80022a6:	4441      	add	r1, r8
 80022a8:	f899 3000 	ldrb.w	r3, [r9]
 80022ac:	910d      	str	r1, [sp, #52]	@ 0x34
 80022ae:	e719      	b.n	80020e4 <_vfiprintf_r+0x74>
 80022b0:	4249      	negs	r1, r1
 80022b2:	f043 0302 	orr.w	r3, r3, #2
 80022b6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80022b8:	9308      	str	r3, [sp, #32]
 80022ba:	e74a      	b.n	8002152 <_vfiprintf_r+0xe2>
 80022bc:	aa07      	add	r2, sp, #28
 80022be:	9200      	str	r2, [sp, #0]
 80022c0:	4b1a      	ldr	r3, [pc, #104]	@ (800232c <_vfiprintf_r+0x2bc>)
 80022c2:	9804      	ldr	r0, [sp, #16]
 80022c4:	465a      	mov	r2, fp
 80022c6:	a908      	add	r1, sp, #32
 80022c8:	f000 f8d0 	bl	800246c <_printf_i>
 80022cc:	9003      	str	r0, [sp, #12]
 80022ce:	e76a      	b.n	80021a6 <_vfiprintf_r+0x136>
 80022d0:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80022d4:	2300      	movs	r3, #0
 80022d6:	2a09      	cmp	r2, #9
 80022d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80022da:	f10a 0a01 	add.w	sl, sl, #1
 80022de:	f63f af3d 	bhi.w	800215c <_vfiprintf_r+0xec>
 80022e2:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 80022e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80022ea:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80022ee:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80022f2:	2a09      	cmp	r2, #9
 80022f4:	d9f5      	bls.n	80022e2 <_vfiprintf_r+0x272>
 80022f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80022f8:	e730      	b.n	800215c <_vfiprintf_r+0xec>
 80022fa:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 80022fe:	f7ff fc69 	bl	8001bd4 <__retarget_lock_release_recursive>
 8002302:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8002306:	e763      	b.n	80021d0 <_vfiprintf_r+0x160>
 8002308:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 800230c:	f7ff fc5a 	bl	8001bc4 <__retarget_lock_acquire_recursive>
 8002310:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8002314:	e6c1      	b.n	800209a <_vfiprintf_r+0x2a>
 8002316:	f7ff faa7 	bl	8001868 <__sinit>
 800231a:	e6b5      	b.n	8002088 <_vfiprintf_r+0x18>
 800231c:	080045dc 	.word	0x080045dc
 8002320:	080045e4 	.word	0x080045e4
 8002324:	080045e8 	.word	0x080045e8
 8002328:	00000000 	.word	0x00000000
 800232c:	08002021 	.word	0x08002021

08002330 <vfiprintf>:
 8002330:	b410      	push	{r4}
 8002332:	4c04      	ldr	r4, [pc, #16]	@ (8002344 <vfiprintf+0x14>)
 8002334:	4684      	mov	ip, r0
 8002336:	4613      	mov	r3, r2
 8002338:	6820      	ldr	r0, [r4, #0]
 800233a:	bc10      	pop	{r4}
 800233c:	460a      	mov	r2, r1
 800233e:	4661      	mov	r1, ip
 8002340:	f7ff be96 	b.w	8002070 <_vfiprintf_r>
 8002344:	2000001c 	.word	0x2000001c

08002348 <_printf_common>:
 8002348:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800234c:	4692      	mov	sl, r2
 800234e:	461f      	mov	r7, r3
 8002350:	690a      	ldr	r2, [r1, #16]
 8002352:	688b      	ldr	r3, [r1, #8]
 8002354:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8002358:	429a      	cmp	r2, r3
 800235a:	bfb8      	it	lt
 800235c:	461a      	movlt	r2, r3
 800235e:	f8ca 2000 	str.w	r2, [sl]
 8002362:	f891 3043 	ldrb.w	r3, [r1, #67]	@ 0x43
 8002366:	460c      	mov	r4, r1
 8002368:	4606      	mov	r6, r0
 800236a:	b113      	cbz	r3, 8002372 <_printf_common+0x2a>
 800236c:	3201      	adds	r2, #1
 800236e:	f8ca 2000 	str.w	r2, [sl]
 8002372:	6822      	ldr	r2, [r4, #0]
 8002374:	0691      	lsls	r1, r2, #26
 8002376:	d55f      	bpl.n	8002438 <_printf_common+0xf0>
 8002378:	f8da 3000 	ldr.w	r3, [sl]
 800237c:	3302      	adds	r3, #2
 800237e:	f8ca 3000 	str.w	r3, [sl]
 8002382:	6822      	ldr	r2, [r4, #0]
 8002384:	f012 0f06 	tst.w	r2, #6
 8002388:	4611      	mov	r1, r2
 800238a:	d11d      	bne.n	80023c8 <_printf_common+0x80>
 800238c:	68e1      	ldr	r1, [r4, #12]
 800238e:	4299      	cmp	r1, r3
 8002390:	bfd8      	it	le
 8002392:	4611      	movle	r1, r2
 8002394:	dd18      	ble.n	80023c8 <_printf_common+0x80>
 8002396:	f104 0b19 	add.w	fp, r4, #25
 800239a:	f04f 0800 	mov.w	r8, #0
 800239e:	e005      	b.n	80023ac <_printf_common+0x64>
 80023a0:	68e5      	ldr	r5, [r4, #12]
 80023a2:	f8da 3000 	ldr.w	r3, [sl]
 80023a6:	1aed      	subs	r5, r5, r3
 80023a8:	4545      	cmp	r5, r8
 80023aa:	dd0c      	ble.n	80023c6 <_printf_common+0x7e>
 80023ac:	2301      	movs	r3, #1
 80023ae:	465a      	mov	r2, fp
 80023b0:	4639      	mov	r1, r7
 80023b2:	4630      	mov	r0, r6
 80023b4:	47c8      	blx	r9
 80023b6:	3001      	adds	r0, #1
 80023b8:	f108 0801 	add.w	r8, r8, #1
 80023bc:	d1f0      	bne.n	80023a0 <_printf_common+0x58>
 80023be:	f04f 30ff 	mov.w	r0, #4294967295
 80023c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023c6:	6821      	ldr	r1, [r4, #0]
 80023c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80023cc:	3b00      	subs	r3, #0
 80023ce:	bf18      	it	ne
 80023d0:	2301      	movne	r3, #1
 80023d2:	068a      	lsls	r2, r1, #26
 80023d4:	d50a      	bpl.n	80023ec <_printf_common+0xa4>
 80023d6:	18e1      	adds	r1, r4, r3
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	2030      	movs	r0, #48	@ 0x30
 80023dc:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80023e0:	4422      	add	r2, r4
 80023e2:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80023e6:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80023ea:	3302      	adds	r3, #2
 80023ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80023f0:	4639      	mov	r1, r7
 80023f2:	4630      	mov	r0, r6
 80023f4:	47c8      	blx	r9
 80023f6:	3001      	adds	r0, #1
 80023f8:	d0e1      	beq.n	80023be <_printf_common+0x76>
 80023fa:	6823      	ldr	r3, [r4, #0]
 80023fc:	f8da 5000 	ldr.w	r5, [sl]
 8002400:	6921      	ldr	r1, [r4, #16]
 8002402:	f003 0306 	and.w	r3, r3, #6
 8002406:	2b04      	cmp	r3, #4
 8002408:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 800240c:	d01b      	beq.n	8002446 <_printf_common+0xfe>
 800240e:	428a      	cmp	r2, r1
 8002410:	dd20      	ble.n	8002454 <_printf_common+0x10c>
 8002412:	f04f 0800 	mov.w	r8, #0
 8002416:	1a52      	subs	r2, r2, r1
 8002418:	4490      	add	r8, r2
 800241a:	341a      	adds	r4, #26
 800241c:	2500      	movs	r5, #0
 800241e:	e001      	b.n	8002424 <_printf_common+0xdc>
 8002420:	4545      	cmp	r5, r8
 8002422:	da17      	bge.n	8002454 <_printf_common+0x10c>
 8002424:	2301      	movs	r3, #1
 8002426:	4622      	mov	r2, r4
 8002428:	4639      	mov	r1, r7
 800242a:	4630      	mov	r0, r6
 800242c:	47c8      	blx	r9
 800242e:	3001      	adds	r0, #1
 8002430:	f105 0501 	add.w	r5, r5, #1
 8002434:	d1f4      	bne.n	8002420 <_printf_common+0xd8>
 8002436:	e7c2      	b.n	80023be <_printf_common+0x76>
 8002438:	f012 0f06 	tst.w	r2, #6
 800243c:	d00d      	beq.n	800245a <_printf_common+0x112>
 800243e:	3b00      	subs	r3, #0
 8002440:	bf18      	it	ne
 8002442:	2301      	movne	r3, #1
 8002444:	e7d2      	b.n	80023ec <_printf_common+0xa4>
 8002446:	1b40      	subs	r0, r0, r5
 8002448:	428a      	cmp	r2, r1
 800244a:	ea20 78e0 	bic.w	r8, r0, r0, asr #31
 800244e:	dce2      	bgt.n	8002416 <_printf_common+0xce>
 8002450:	2800      	cmp	r0, #0
 8002452:	dce2      	bgt.n	800241a <_printf_common+0xd2>
 8002454:	2000      	movs	r0, #0
 8002456:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800245a:	68e1      	ldr	r1, [r4, #12]
 800245c:	f8da 3000 	ldr.w	r3, [sl]
 8002460:	4299      	cmp	r1, r3
 8002462:	bfd8      	it	le
 8002464:	4611      	movle	r1, r2
 8002466:	dc96      	bgt.n	8002396 <_printf_common+0x4e>
 8002468:	e7ae      	b.n	80023c8 <_printf_common+0x80>
 800246a:	bf00      	nop

0800246c <_printf_i>:
 800246c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002470:	460c      	mov	r4, r1
 8002472:	b084      	sub	sp, #16
 8002474:	4617      	mov	r7, r2
 8002476:	7e22      	ldrb	r2, [r4, #24]
 8002478:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800247a:	4606      	mov	r6, r0
 800247c:	4698      	mov	r8, r3
 800247e:	f104 0c43 	add.w	ip, r4, #67	@ 0x43
 8002482:	2a00      	cmp	r2, #0
 8002484:	d035      	beq.n	80024f2 <_printf_i+0x86>
 8002486:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
 800248a:	b2d8      	uxtb	r0, r3
 800248c:	2820      	cmp	r0, #32
 800248e:	d869      	bhi.n	8002564 <_printf_i+0xf8>
 8002490:	2b20      	cmp	r3, #32
 8002492:	d867      	bhi.n	8002564 <_printf_i+0xf8>
 8002494:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002498:	006600e0 	.word	0x006600e0
 800249c:	00660066 	.word	0x00660066
 80024a0:	00660066 	.word	0x00660066
 80024a4:	00660066 	.word	0x00660066
 80024a8:	00660066 	.word	0x00660066
 80024ac:	00940066 	.word	0x00940066
 80024b0:	00660070 	.word	0x00660070
 80024b4:	00660066 	.word	0x00660066
 80024b8:	00700066 	.word	0x00700066
 80024bc:	00660066 	.word	0x00660066
 80024c0:	00660066 	.word	0x00660066
 80024c4:	00830021 	.word	0x00830021
 80024c8:	006600ae 	.word	0x006600ae
 80024cc:	009e0066 	.word	0x009e0066
 80024d0:	00830066 	.word	0x00830066
 80024d4:	00660066 	.word	0x00660066
 80024d8:	00e6      	.short	0x00e6
 80024da:	680b      	ldr	r3, [r1, #0]
 80024dc:	6822      	ldr	r2, [r4, #0]
 80024de:	6960      	ldr	r0, [r4, #20]
 80024e0:	1d1d      	adds	r5, r3, #4
 80024e2:	600d      	str	r5, [r1, #0]
 80024e4:	0611      	lsls	r1, r2, #24
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	d402      	bmi.n	80024f0 <_printf_i+0x84>
 80024ea:	0652      	lsls	r2, r2, #25
 80024ec:	f100 80dc 	bmi.w	80026a8 <_printf_i+0x23c>
 80024f0:	6018      	str	r0, [r3, #0]
 80024f2:	2300      	movs	r3, #0
 80024f4:	46e1      	mov	r9, ip
 80024f6:	6123      	str	r3, [r4, #16]
 80024f8:	f8cd 8000 	str.w	r8, [sp]
 80024fc:	463b      	mov	r3, r7
 80024fe:	aa03      	add	r2, sp, #12
 8002500:	4621      	mov	r1, r4
 8002502:	4630      	mov	r0, r6
 8002504:	f7ff ff20 	bl	8002348 <_printf_common>
 8002508:	3001      	adds	r0, #1
 800250a:	d020      	beq.n	800254e <_printf_i+0xe2>
 800250c:	6923      	ldr	r3, [r4, #16]
 800250e:	464a      	mov	r2, r9
 8002510:	4639      	mov	r1, r7
 8002512:	4630      	mov	r0, r6
 8002514:	47c0      	blx	r8
 8002516:	3001      	adds	r0, #1
 8002518:	d019      	beq.n	800254e <_printf_i+0xe2>
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	68e0      	ldr	r0, [r4, #12]
 800251e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8002522:	079b      	lsls	r3, r3, #30
 8002524:	d518      	bpl.n	8002558 <_printf_i+0xec>
 8002526:	4548      	cmp	r0, r9
 8002528:	dd16      	ble.n	8002558 <_printf_i+0xec>
 800252a:	f104 0a19 	add.w	sl, r4, #25
 800252e:	2500      	movs	r5, #0
 8002530:	e004      	b.n	800253c <_printf_i+0xd0>
 8002532:	68e0      	ldr	r0, [r4, #12]
 8002534:	eba0 0309 	sub.w	r3, r0, r9
 8002538:	42ab      	cmp	r3, r5
 800253a:	dd0d      	ble.n	8002558 <_printf_i+0xec>
 800253c:	2301      	movs	r3, #1
 800253e:	4652      	mov	r2, sl
 8002540:	4639      	mov	r1, r7
 8002542:	4630      	mov	r0, r6
 8002544:	47c0      	blx	r8
 8002546:	3001      	adds	r0, #1
 8002548:	f105 0501 	add.w	r5, r5, #1
 800254c:	d1f1      	bne.n	8002532 <_printf_i+0xc6>
 800254e:	f04f 30ff 	mov.w	r0, #4294967295
 8002552:	b004      	add	sp, #16
 8002554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002558:	4548      	cmp	r0, r9
 800255a:	bfb8      	it	lt
 800255c:	4648      	movlt	r0, r9
 800255e:	b004      	add	sp, #16
 8002560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002564:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 8002568:	2001      	movs	r0, #1
 800256a:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 800256e:	2300      	movs	r3, #0
 8002570:	6120      	str	r0, [r4, #16]
 8002572:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002576:	e7bf      	b.n	80024f8 <_printf_i+0x8c>
 8002578:	680a      	ldr	r2, [r1, #0]
 800257a:	6823      	ldr	r3, [r4, #0]
 800257c:	1d10      	adds	r0, r2, #4
 800257e:	6008      	str	r0, [r1, #0]
 8002580:	0618      	lsls	r0, r3, #24
 8002582:	d402      	bmi.n	800258a <_printf_i+0x11e>
 8002584:	0659      	lsls	r1, r3, #25
 8002586:	f100 8093 	bmi.w	80026b0 <_printf_i+0x244>
 800258a:	6810      	ldr	r0, [r2, #0]
 800258c:	4601      	mov	r1, r0
 800258e:	2800      	cmp	r0, #0
 8002590:	6862      	ldr	r2, [r4, #4]
 8002592:	f2c0 8091 	blt.w	80026b8 <_printf_i+0x24c>
 8002596:	4853      	ldr	r0, [pc, #332]	@ (80026e4 <_printf_i+0x278>)
 8002598:	f04f 0e0a 	mov.w	lr, #10
 800259c:	e04a      	b.n	8002634 <_printf_i+0x1c8>
 800259e:	680b      	ldr	r3, [r1, #0]
 80025a0:	6820      	ldr	r0, [r4, #0]
 80025a2:	1d1d      	adds	r5, r3, #4
 80025a4:	600d      	str	r5, [r1, #0]
 80025a6:	0605      	lsls	r5, r0, #24
 80025a8:	d401      	bmi.n	80025ae <_printf_i+0x142>
 80025aa:	0641      	lsls	r1, r0, #25
 80025ac:	d47e      	bmi.n	80026ac <_printf_i+0x240>
 80025ae:	6819      	ldr	r1, [r3, #0]
 80025b0:	484c      	ldr	r0, [pc, #304]	@ (80026e4 <_printf_i+0x278>)
 80025b2:	2a6f      	cmp	r2, #111	@ 0x6f
 80025b4:	bf14      	ite	ne
 80025b6:	f04f 0e0a 	movne.w	lr, #10
 80025ba:	f04f 0e08 	moveq.w	lr, #8
 80025be:	e035      	b.n	800262c <_printf_i+0x1c0>
 80025c0:	680b      	ldr	r3, [r1, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	3304      	adds	r3, #4
 80025c6:	600b      	str	r3, [r1, #0]
 80025c8:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 80025cc:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
 80025d0:	2001      	movs	r0, #1
 80025d2:	e7cc      	b.n	800256e <_printf_i+0x102>
 80025d4:	680b      	ldr	r3, [r1, #0]
 80025d6:	6862      	ldr	r2, [r4, #4]
 80025d8:	1d18      	adds	r0, r3, #4
 80025da:	6008      	str	r0, [r1, #0]
 80025dc:	f8d3 9000 	ldr.w	r9, [r3]
 80025e0:	2100      	movs	r1, #0
 80025e2:	4648      	mov	r0, r9
 80025e4:	f000 fc7c 	bl	8002ee0 <memchr>
 80025e8:	2800      	cmp	r0, #0
 80025ea:	d079      	beq.n	80026e0 <_printf_i+0x274>
 80025ec:	eba0 0009 	sub.w	r0, r0, r9
 80025f0:	6060      	str	r0, [r4, #4]
 80025f2:	e7bc      	b.n	800256e <_printf_i+0x102>
 80025f4:	6823      	ldr	r3, [r4, #0]
 80025f6:	f043 0320 	orr.w	r3, r3, #32
 80025fa:	6023      	str	r3, [r4, #0]
 80025fc:	2278      	movs	r2, #120	@ 0x78
 80025fe:	483a      	ldr	r0, [pc, #232]	@ (80026e8 <_printf_i+0x27c>)
 8002600:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
 8002604:	680a      	ldr	r2, [r1, #0]
 8002606:	1d15      	adds	r5, r2, #4
 8002608:	600d      	str	r5, [r1, #0]
 800260a:	061d      	lsls	r5, r3, #24
 800260c:	d44a      	bmi.n	80026a4 <_printf_i+0x238>
 800260e:	0659      	lsls	r1, r3, #25
 8002610:	d548      	bpl.n	80026a4 <_printf_i+0x238>
 8002612:	8811      	ldrh	r1, [r2, #0]
 8002614:	07dd      	lsls	r5, r3, #31
 8002616:	bf44      	itt	mi
 8002618:	f043 0320 	orrmi.w	r3, r3, #32
 800261c:	6023      	strmi	r3, [r4, #0]
 800261e:	b919      	cbnz	r1, 8002628 <_printf_i+0x1bc>
 8002620:	6823      	ldr	r3, [r4, #0]
 8002622:	f023 0320 	bic.w	r3, r3, #32
 8002626:	6023      	str	r3, [r4, #0]
 8002628:	f04f 0e10 	mov.w	lr, #16
 800262c:	2300      	movs	r3, #0
 800262e:	6862      	ldr	r2, [r4, #4]
 8002630:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002634:	2a00      	cmp	r2, #0
 8002636:	60a2      	str	r2, [r4, #8]
 8002638:	db16      	blt.n	8002668 <_printf_i+0x1fc>
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	f023 0304 	bic.w	r3, r3, #4
 8002640:	6023      	str	r3, [r4, #0]
 8002642:	b989      	cbnz	r1, 8002668 <_printf_i+0x1fc>
 8002644:	2a00      	cmp	r2, #0
 8002646:	d145      	bne.n	80026d4 <_printf_i+0x268>
 8002648:	46e1      	mov	r9, ip
 800264a:	f1be 0f08 	cmp.w	lr, #8
 800264e:	d01c      	beq.n	800268a <_printf_i+0x21e>
 8002650:	ebac 0309 	sub.w	r3, ip, r9
 8002654:	6123      	str	r3, [r4, #16]
 8002656:	e74f      	b.n	80024f8 <_printf_i+0x8c>
 8002658:	2358      	movs	r3, #88	@ 0x58
 800265a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800265e:	4821      	ldr	r0, [pc, #132]	@ (80026e4 <_printf_i+0x278>)
 8002660:	6823      	ldr	r3, [r4, #0]
 8002662:	e7cf      	b.n	8002604 <_printf_i+0x198>
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	e7c9      	b.n	80025fc <_printf_i+0x190>
 8002668:	4675      	mov	r5, lr
 800266a:	46e1      	mov	r9, ip
 800266c:	fbb1 f3f5 	udiv	r3, r1, r5
 8002670:	fb05 1a13 	mls	sl, r5, r3, r1
 8002674:	460a      	mov	r2, r1
 8002676:	42aa      	cmp	r2, r5
 8002678:	f810 100a 	ldrb.w	r1, [r0, sl]
 800267c:	f809 1d01 	strb.w	r1, [r9, #-1]!
 8002680:	4619      	mov	r1, r3
 8002682:	d2f3      	bcs.n	800266c <_printf_i+0x200>
 8002684:	f1be 0f08 	cmp.w	lr, #8
 8002688:	d1e2      	bne.n	8002650 <_printf_i+0x1e4>
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	07d8      	lsls	r0, r3, #31
 800268e:	d5df      	bpl.n	8002650 <_printf_i+0x1e4>
 8002690:	6862      	ldr	r2, [r4, #4]
 8002692:	6923      	ldr	r3, [r4, #16]
 8002694:	429a      	cmp	r2, r3
 8002696:	dcdb      	bgt.n	8002650 <_printf_i+0x1e4>
 8002698:	2330      	movs	r3, #48	@ 0x30
 800269a:	f809 3c01 	strb.w	r3, [r9, #-1]
 800269e:	f109 39ff 	add.w	r9, r9, #4294967295
 80026a2:	e7d5      	b.n	8002650 <_printf_i+0x1e4>
 80026a4:	6811      	ldr	r1, [r2, #0]
 80026a6:	e7b5      	b.n	8002614 <_printf_i+0x1a8>
 80026a8:	8018      	strh	r0, [r3, #0]
 80026aa:	e722      	b.n	80024f2 <_printf_i+0x86>
 80026ac:	8819      	ldrh	r1, [r3, #0]
 80026ae:	e77f      	b.n	80025b0 <_printf_i+0x144>
 80026b0:	f9b2 1000 	ldrsh.w	r1, [r2]
 80026b4:	4608      	mov	r0, r1
 80026b6:	e76a      	b.n	800258e <_printf_i+0x122>
 80026b8:	202d      	movs	r0, #45	@ 0x2d
 80026ba:	2a00      	cmp	r2, #0
 80026bc:	60a2      	str	r2, [r4, #8]
 80026be:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
 80026c2:	db02      	blt.n	80026ca <_printf_i+0x25e>
 80026c4:	f023 0304 	bic.w	r3, r3, #4
 80026c8:	6023      	str	r3, [r4, #0]
 80026ca:	250a      	movs	r5, #10
 80026cc:	4805      	ldr	r0, [pc, #20]	@ (80026e4 <_printf_i+0x278>)
 80026ce:	4249      	negs	r1, r1
 80026d0:	46ae      	mov	lr, r5
 80026d2:	e7ca      	b.n	800266a <_printf_i+0x1fe>
 80026d4:	7803      	ldrb	r3, [r0, #0]
 80026d6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80026da:	f104 0942 	add.w	r9, r4, #66	@ 0x42
 80026de:	e7b4      	b.n	800264a <_printf_i+0x1de>
 80026e0:	6860      	ldr	r0, [r4, #4]
 80026e2:	e744      	b.n	800256e <_printf_i+0x102>
 80026e4:	080045f0 	.word	0x080045f0
 80026e8:	08004604 	.word	0x08004604

080026ec <__sfvwrite_r>:
 80026ec:	6893      	ldr	r3, [r2, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 80f6 	beq.w	80028e0 <__sfvwrite_r+0x1f4>
 80026f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026f8:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
 80026fc:	f01c 0f08 	tst.w	ip, #8
 8002700:	b083      	sub	sp, #12
 8002702:	4690      	mov	r8, r2
 8002704:	4681      	mov	r9, r0
 8002706:	460c      	mov	r4, r1
 8002708:	d031      	beq.n	800276e <__sfvwrite_r+0x82>
 800270a:	690b      	ldr	r3, [r1, #16]
 800270c:	b37b      	cbz	r3, 800276e <__sfvwrite_r+0x82>
 800270e:	f01c 0702 	ands.w	r7, ip, #2
 8002712:	f8d8 6000 	ldr.w	r6, [r8]
 8002716:	d038      	beq.n	800278a <__sfvwrite_r+0x9e>
 8002718:	2700      	movs	r7, #0
 800271a:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 800271e:	6a21      	ldr	r1, [r4, #32]
 8002720:	f8df a2bc 	ldr.w	sl, [pc, #700]	@ 80029e0 <__sfvwrite_r+0x2f4>
 8002724:	463d      	mov	r5, r7
 8002726:	4555      	cmp	r5, sl
 8002728:	462b      	mov	r3, r5
 800272a:	463a      	mov	r2, r7
 800272c:	bf28      	it	cs
 800272e:	4653      	movcs	r3, sl
 8002730:	4648      	mov	r0, r9
 8002732:	b1c5      	cbz	r5, 8002766 <__sfvwrite_r+0x7a>
 8002734:	47d8      	blx	fp
 8002736:	2800      	cmp	r0, #0
 8002738:	f340 80c8 	ble.w	80028cc <__sfvwrite_r+0x1e0>
 800273c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8002740:	1a1b      	subs	r3, r3, r0
 8002742:	4407      	add	r7, r0
 8002744:	1a2d      	subs	r5, r5, r0
 8002746:	f8c8 3008 	str.w	r3, [r8, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 80b4 	beq.w	80028b8 <__sfvwrite_r+0x1cc>
 8002750:	4555      	cmp	r5, sl
 8002752:	462b      	mov	r3, r5
 8002754:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
 8002758:	6a21      	ldr	r1, [r4, #32]
 800275a:	bf28      	it	cs
 800275c:	4653      	movcs	r3, sl
 800275e:	463a      	mov	r2, r7
 8002760:	4648      	mov	r0, r9
 8002762:	2d00      	cmp	r5, #0
 8002764:	d1e6      	bne.n	8002734 <__sfvwrite_r+0x48>
 8002766:	e9d6 7500 	ldrd	r7, r5, [r6]
 800276a:	3608      	adds	r6, #8
 800276c:	e7db      	b.n	8002726 <__sfvwrite_r+0x3a>
 800276e:	4621      	mov	r1, r4
 8002770:	4648      	mov	r0, r9
 8002772:	f000 f987 	bl	8002a84 <__swsetup_r>
 8002776:	2800      	cmp	r0, #0
 8002778:	f040 80ad 	bne.w	80028d6 <__sfvwrite_r+0x1ea>
 800277c:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8002780:	f8d8 6000 	ldr.w	r6, [r8]
 8002784:	f01c 0702 	ands.w	r7, ip, #2
 8002788:	d1c6      	bne.n	8002718 <__sfvwrite_r+0x2c>
 800278a:	f01c 0a01 	ands.w	sl, ip, #1
 800278e:	d163      	bne.n	8002858 <__sfvwrite_r+0x16c>
 8002790:	6823      	ldr	r3, [r4, #0]
 8002792:	68a1      	ldr	r1, [r4, #8]
 8002794:	4657      	mov	r7, sl
 8002796:	4618      	mov	r0, r3
 8002798:	468b      	mov	fp, r1
 800279a:	2f00      	cmp	r7, #0
 800279c:	d058      	beq.n	8002850 <__sfvwrite_r+0x164>
 800279e:	f41c 7f00 	tst.w	ip, #512	@ 0x200
 80027a2:	f000 80b1 	beq.w	8002908 <__sfvwrite_r+0x21c>
 80027a6:	42b9      	cmp	r1, r7
 80027a8:	460a      	mov	r2, r1
 80027aa:	f200 80dd 	bhi.w	8002968 <__sfvwrite_r+0x27c>
 80027ae:	f41c 6f90 	tst.w	ip, #1152	@ 0x480
 80027b2:	d02f      	beq.n	8002814 <__sfvwrite_r+0x128>
 80027b4:	6921      	ldr	r1, [r4, #16]
 80027b6:	6962      	ldr	r2, [r4, #20]
 80027b8:	1a5d      	subs	r5, r3, r1
 80027ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80027be:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80027c2:	1c6b      	adds	r3, r5, #1
 80027c4:	1052      	asrs	r2, r2, #1
 80027c6:	443b      	add	r3, r7
 80027c8:	4293      	cmp	r3, r2
 80027ca:	bf92      	itee	ls
 80027cc:	4693      	movls	fp, r2
 80027ce:	469b      	movhi	fp, r3
 80027d0:	461a      	movhi	r2, r3
 80027d2:	f41c 6f80 	tst.w	ip, #1024	@ 0x400
 80027d6:	f000 80e6 	beq.w	80029a6 <__sfvwrite_r+0x2ba>
 80027da:	4611      	mov	r1, r2
 80027dc:	4648      	mov	r0, r9
 80027de:	f7fe fe25 	bl	800142c <_malloc_r>
 80027e2:	2800      	cmp	r0, #0
 80027e4:	f000 80f5 	beq.w	80029d2 <__sfvwrite_r+0x2e6>
 80027e8:	462a      	mov	r2, r5
 80027ea:	6921      	ldr	r1, [r4, #16]
 80027ec:	9001      	str	r0, [sp, #4]
 80027ee:	f7ff f9f3 	bl	8001bd8 <memcpy>
 80027f2:	89a2      	ldrh	r2, [r4, #12]
 80027f4:	9b01      	ldr	r3, [sp, #4]
 80027f6:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 80027fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80027fe:	81a2      	strh	r2, [r4, #12]
 8002800:	1958      	adds	r0, r3, r5
 8002802:	ebab 0505 	sub.w	r5, fp, r5
 8002806:	f8c4 b014 	str.w	fp, [r4, #20]
 800280a:	6123      	str	r3, [r4, #16]
 800280c:	60a5      	str	r5, [r4, #8]
 800280e:	6020      	str	r0, [r4, #0]
 8002810:	46bb      	mov	fp, r7
 8002812:	463a      	mov	r2, r7
 8002814:	4651      	mov	r1, sl
 8002816:	9201      	str	r2, [sp, #4]
 8002818:	f000 f994 	bl	8002b44 <memmove>
 800281c:	68a1      	ldr	r1, [r4, #8]
 800281e:	6823      	ldr	r3, [r4, #0]
 8002820:	9a01      	ldr	r2, [sp, #4]
 8002822:	eba1 010b 	sub.w	r1, r1, fp
 8002826:	441a      	add	r2, r3
 8002828:	463d      	mov	r5, r7
 800282a:	60a1      	str	r1, [r4, #8]
 800282c:	6022      	str	r2, [r4, #0]
 800282e:	2700      	movs	r7, #0
 8002830:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8002834:	1b5b      	subs	r3, r3, r5
 8002836:	44aa      	add	sl, r5
 8002838:	f8c8 3008 	str.w	r3, [r8, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d03b      	beq.n	80028b8 <__sfvwrite_r+0x1cc>
 8002840:	6823      	ldr	r3, [r4, #0]
 8002842:	68a1      	ldr	r1, [r4, #8]
 8002844:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
 8002848:	4618      	mov	r0, r3
 800284a:	468b      	mov	fp, r1
 800284c:	2f00      	cmp	r7, #0
 800284e:	d1a6      	bne.n	800279e <__sfvwrite_r+0xb2>
 8002850:	e9d6 a700 	ldrd	sl, r7, [r6]
 8002854:	3608      	adds	r6, #8
 8002856:	e79e      	b.n	8002796 <__sfvwrite_r+0xaa>
 8002858:	4638      	mov	r0, r7
 800285a:	46bb      	mov	fp, r7
 800285c:	463d      	mov	r5, r7
 800285e:	2d00      	cmp	r5, #0
 8002860:	d040      	beq.n	80028e4 <__sfvwrite_r+0x1f8>
 8002862:	2800      	cmp	r0, #0
 8002864:	d045      	beq.n	80028f2 <__sfvwrite_r+0x206>
 8002866:	463a      	mov	r2, r7
 8002868:	e9d4 c304 	ldrd	ip, r3, [r4, #16]
 800286c:	6820      	ldr	r0, [r4, #0]
 800286e:	68a1      	ldr	r1, [r4, #8]
 8002870:	42aa      	cmp	r2, r5
 8002872:	bf28      	it	cs
 8002874:	462a      	movcs	r2, r5
 8002876:	4560      	cmp	r0, ip
 8002878:	d904      	bls.n	8002884 <__sfvwrite_r+0x198>
 800287a:	eb01 0a03 	add.w	sl, r1, r3
 800287e:	4552      	cmp	r2, sl
 8002880:	f300 8082 	bgt.w	8002988 <__sfvwrite_r+0x29c>
 8002884:	4293      	cmp	r3, r2
 8002886:	dc72      	bgt.n	800296e <__sfvwrite_r+0x282>
 8002888:	6a21      	ldr	r1, [r4, #32]
 800288a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800288e:	465a      	mov	r2, fp
 8002890:	4648      	mov	r0, r9
 8002892:	47e0      	blx	ip
 8002894:	f1b0 0a00 	subs.w	sl, r0, #0
 8002898:	dd18      	ble.n	80028cc <__sfvwrite_r+0x1e0>
 800289a:	ebb7 070a 	subs.w	r7, r7, sl
 800289e:	d00f      	beq.n	80028c0 <__sfvwrite_r+0x1d4>
 80028a0:	2001      	movs	r0, #1
 80028a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80028a6:	eba3 030a 	sub.w	r3, r3, sl
 80028aa:	44d3      	add	fp, sl
 80028ac:	eba5 050a 	sub.w	r5, r5, sl
 80028b0:	f8c8 3008 	str.w	r3, [r8, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1d2      	bne.n	800285e <__sfvwrite_r+0x172>
 80028b8:	2000      	movs	r0, #0
 80028ba:	b003      	add	sp, #12
 80028bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028c0:	4621      	mov	r1, r4
 80028c2:	4648      	mov	r0, r9
 80028c4:	f7ff fb2e 	bl	8001f24 <_fflush_r>
 80028c8:	2800      	cmp	r0, #0
 80028ca:	d0ea      	beq.n	80028a2 <__sfvwrite_r+0x1b6>
 80028cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028d4:	81a3      	strh	r3, [r4, #12]
 80028d6:	f04f 30ff 	mov.w	r0, #4294967295
 80028da:	b003      	add	sp, #12
 80028dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028e0:	2000      	movs	r0, #0
 80028e2:	4770      	bx	lr
 80028e4:	6875      	ldr	r5, [r6, #4]
 80028e6:	4633      	mov	r3, r6
 80028e8:	3608      	adds	r6, #8
 80028ea:	2d00      	cmp	r5, #0
 80028ec:	d0fa      	beq.n	80028e4 <__sfvwrite_r+0x1f8>
 80028ee:	f8d3 b000 	ldr.w	fp, [r3]
 80028f2:	462a      	mov	r2, r5
 80028f4:	210a      	movs	r1, #10
 80028f6:	4658      	mov	r0, fp
 80028f8:	f000 faf2 	bl	8002ee0 <memchr>
 80028fc:	2800      	cmp	r0, #0
 80028fe:	d065      	beq.n	80029cc <__sfvwrite_r+0x2e0>
 8002900:	3001      	adds	r0, #1
 8002902:	eba0 070b 	sub.w	r7, r0, fp
 8002906:	e7ae      	b.n	8002866 <__sfvwrite_r+0x17a>
 8002908:	6922      	ldr	r2, [r4, #16]
 800290a:	429a      	cmp	r2, r3
 800290c:	d314      	bcc.n	8002938 <__sfvwrite_r+0x24c>
 800290e:	6962      	ldr	r2, [r4, #20]
 8002910:	42ba      	cmp	r2, r7
 8002912:	d811      	bhi.n	8002938 <__sfvwrite_r+0x24c>
 8002914:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8002918:	42bb      	cmp	r3, r7
 800291a:	bf28      	it	cs
 800291c:	463b      	movcs	r3, r7
 800291e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8002920:	fb93 f3f2 	sdiv	r3, r3, r2
 8002924:	6a21      	ldr	r1, [r4, #32]
 8002926:	fb02 f303 	mul.w	r3, r2, r3
 800292a:	4648      	mov	r0, r9
 800292c:	4652      	mov	r2, sl
 800292e:	47a8      	blx	r5
 8002930:	1e05      	subs	r5, r0, #0
 8002932:	ddcb      	ble.n	80028cc <__sfvwrite_r+0x1e0>
 8002934:	1b7f      	subs	r7, r7, r5
 8002936:	e77b      	b.n	8002830 <__sfvwrite_r+0x144>
 8002938:	42b9      	cmp	r1, r7
 800293a:	bf28      	it	cs
 800293c:	4639      	movcs	r1, r7
 800293e:	460d      	mov	r5, r1
 8002940:	4618      	mov	r0, r3
 8002942:	460a      	mov	r2, r1
 8002944:	4651      	mov	r1, sl
 8002946:	f000 f8fd 	bl	8002b44 <memmove>
 800294a:	68a1      	ldr	r1, [r4, #8]
 800294c:	6823      	ldr	r3, [r4, #0]
 800294e:	1b49      	subs	r1, r1, r5
 8002950:	442b      	add	r3, r5
 8002952:	60a1      	str	r1, [r4, #8]
 8002954:	6023      	str	r3, [r4, #0]
 8002956:	2900      	cmp	r1, #0
 8002958:	d1ec      	bne.n	8002934 <__sfvwrite_r+0x248>
 800295a:	4621      	mov	r1, r4
 800295c:	4648      	mov	r0, r9
 800295e:	f7ff fae1 	bl	8001f24 <_fflush_r>
 8002962:	2800      	cmp	r0, #0
 8002964:	d0e6      	beq.n	8002934 <__sfvwrite_r+0x248>
 8002966:	e7b1      	b.n	80028cc <__sfvwrite_r+0x1e0>
 8002968:	46bb      	mov	fp, r7
 800296a:	463a      	mov	r2, r7
 800296c:	e752      	b.n	8002814 <__sfvwrite_r+0x128>
 800296e:	4659      	mov	r1, fp
 8002970:	9201      	str	r2, [sp, #4]
 8002972:	f000 f8e7 	bl	8002b44 <memmove>
 8002976:	9a01      	ldr	r2, [sp, #4]
 8002978:	68a3      	ldr	r3, [r4, #8]
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	60a3      	str	r3, [r4, #8]
 800297e:	6823      	ldr	r3, [r4, #0]
 8002980:	4413      	add	r3, r2
 8002982:	6023      	str	r3, [r4, #0]
 8002984:	4692      	mov	sl, r2
 8002986:	e788      	b.n	800289a <__sfvwrite_r+0x1ae>
 8002988:	4659      	mov	r1, fp
 800298a:	4652      	mov	r2, sl
 800298c:	f000 f8da 	bl	8002b44 <memmove>
 8002990:	6823      	ldr	r3, [r4, #0]
 8002992:	4453      	add	r3, sl
 8002994:	6023      	str	r3, [r4, #0]
 8002996:	4621      	mov	r1, r4
 8002998:	4648      	mov	r0, r9
 800299a:	f7ff fac3 	bl	8001f24 <_fflush_r>
 800299e:	2800      	cmp	r0, #0
 80029a0:	f43f af7b 	beq.w	800289a <__sfvwrite_r+0x1ae>
 80029a4:	e792      	b.n	80028cc <__sfvwrite_r+0x1e0>
 80029a6:	4648      	mov	r0, r9
 80029a8:	f000 faea 	bl	8002f80 <_realloc_r>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2800      	cmp	r0, #0
 80029b0:	f47f af26 	bne.w	8002800 <__sfvwrite_r+0x114>
 80029b4:	6921      	ldr	r1, [r4, #16]
 80029b6:	4648      	mov	r0, r9
 80029b8:	f7ff f9ce 	bl	8001d58 <_free_r>
 80029bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029c0:	220c      	movs	r2, #12
 80029c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80029c6:	f8c9 2000 	str.w	r2, [r9]
 80029ca:	e781      	b.n	80028d0 <__sfvwrite_r+0x1e4>
 80029cc:	1c6a      	adds	r2, r5, #1
 80029ce:	4617      	mov	r7, r2
 80029d0:	e74a      	b.n	8002868 <__sfvwrite_r+0x17c>
 80029d2:	220c      	movs	r2, #12
 80029d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029d8:	f8c9 2000 	str.w	r2, [r9]
 80029dc:	e778      	b.n	80028d0 <__sfvwrite_r+0x1e4>
 80029de:	bf00      	nop
 80029e0:	7ffffc00 	.word	0x7ffffc00

080029e4 <__swbuf_r>:
 80029e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e6:	460d      	mov	r5, r1
 80029e8:	4614      	mov	r4, r2
 80029ea:	4606      	mov	r6, r0
 80029ec:	b110      	cbz	r0, 80029f4 <__swbuf_r+0x10>
 80029ee:	6a03      	ldr	r3, [r0, #32]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d037      	beq.n	8002a64 <__swbuf_r+0x80>
 80029f4:	89a3      	ldrh	r3, [r4, #12]
 80029f6:	69a2      	ldr	r2, [r4, #24]
 80029f8:	60a2      	str	r2, [r4, #8]
 80029fa:	071a      	lsls	r2, r3, #28
 80029fc:	d519      	bpl.n	8002a32 <__swbuf_r+0x4e>
 80029fe:	6923      	ldr	r3, [r4, #16]
 8002a00:	b1bb      	cbz	r3, 8002a32 <__swbuf_r+0x4e>
 8002a02:	6822      	ldr	r2, [r4, #0]
 8002a04:	6961      	ldr	r1, [r4, #20]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	b2ed      	uxtb	r5, r5
 8002a0a:	4299      	cmp	r1, r3
 8002a0c:	462f      	mov	r7, r5
 8002a0e:	dd20      	ble.n	8002a52 <__swbuf_r+0x6e>
 8002a10:	3301      	adds	r3, #1
 8002a12:	68a1      	ldr	r1, [r4, #8]
 8002a14:	3901      	subs	r1, #1
 8002a16:	60a1      	str	r1, [r4, #8]
 8002a18:	1c51      	adds	r1, r2, #1
 8002a1a:	6021      	str	r1, [r4, #0]
 8002a1c:	7015      	strb	r5, [r2, #0]
 8002a1e:	6962      	ldr	r2, [r4, #20]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d00d      	beq.n	8002a40 <__swbuf_r+0x5c>
 8002a24:	89a3      	ldrh	r3, [r4, #12]
 8002a26:	07db      	lsls	r3, r3, #31
 8002a28:	d501      	bpl.n	8002a2e <__swbuf_r+0x4a>
 8002a2a:	2d0a      	cmp	r5, #10
 8002a2c:	d008      	beq.n	8002a40 <__swbuf_r+0x5c>
 8002a2e:	4638      	mov	r0, r7
 8002a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a32:	4621      	mov	r1, r4
 8002a34:	4630      	mov	r0, r6
 8002a36:	f000 f825 	bl	8002a84 <__swsetup_r>
 8002a3a:	b938      	cbnz	r0, 8002a4c <__swbuf_r+0x68>
 8002a3c:	6923      	ldr	r3, [r4, #16]
 8002a3e:	e7e0      	b.n	8002a02 <__swbuf_r+0x1e>
 8002a40:	4621      	mov	r1, r4
 8002a42:	4630      	mov	r0, r6
 8002a44:	f7ff fa6e 	bl	8001f24 <_fflush_r>
 8002a48:	2800      	cmp	r0, #0
 8002a4a:	d0f0      	beq.n	8002a2e <__swbuf_r+0x4a>
 8002a4c:	f04f 37ff 	mov.w	r7, #4294967295
 8002a50:	e7ed      	b.n	8002a2e <__swbuf_r+0x4a>
 8002a52:	4621      	mov	r1, r4
 8002a54:	4630      	mov	r0, r6
 8002a56:	f7ff fa65 	bl	8001f24 <_fflush_r>
 8002a5a:	2800      	cmp	r0, #0
 8002a5c:	d1f6      	bne.n	8002a4c <__swbuf_r+0x68>
 8002a5e:	6822      	ldr	r2, [r4, #0]
 8002a60:	2301      	movs	r3, #1
 8002a62:	e7d6      	b.n	8002a12 <__swbuf_r+0x2e>
 8002a64:	f7fe ff00 	bl	8001868 <__sinit>
 8002a68:	e7c4      	b.n	80029f4 <__swbuf_r+0x10>
 8002a6a:	bf00      	nop

08002a6c <__swbuf>:
 8002a6c:	b410      	push	{r4}
 8002a6e:	4c04      	ldr	r4, [pc, #16]	@ (8002a80 <__swbuf+0x14>)
 8002a70:	4603      	mov	r3, r0
 8002a72:	460a      	mov	r2, r1
 8002a74:	6820      	ldr	r0, [r4, #0]
 8002a76:	bc10      	pop	{r4}
 8002a78:	4619      	mov	r1, r3
 8002a7a:	f7ff bfb3 	b.w	80029e4 <__swbuf_r>
 8002a7e:	bf00      	nop
 8002a80:	2000001c 	.word	0x2000001c

08002a84 <__swsetup_r>:
 8002a84:	b538      	push	{r3, r4, r5, lr}
 8002a86:	4b2e      	ldr	r3, [pc, #184]	@ (8002b40 <__swsetup_r+0xbc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4605      	mov	r5, r0
 8002a8c:	460c      	mov	r4, r1
 8002a8e:	b113      	cbz	r3, 8002a96 <__swsetup_r+0x12>
 8002a90:	6a1a      	ldr	r2, [r3, #32]
 8002a92:	2a00      	cmp	r2, #0
 8002a94:	d04b      	beq.n	8002b2e <__swsetup_r+0xaa>
 8002a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a9a:	0718      	lsls	r0, r3, #28
 8002a9c:	d51c      	bpl.n	8002ad8 <__swsetup_r+0x54>
 8002a9e:	6922      	ldr	r2, [r4, #16]
 8002aa0:	b322      	cbz	r2, 8002aec <__swsetup_r+0x68>
 8002aa2:	f013 0101 	ands.w	r1, r3, #1
 8002aa6:	d007      	beq.n	8002ab8 <__swsetup_r+0x34>
 8002aa8:	6961      	ldr	r1, [r4, #20]
 8002aaa:	2000      	movs	r0, #0
 8002aac:	4249      	negs	r1, r1
 8002aae:	60a0      	str	r0, [r4, #8]
 8002ab0:	61a1      	str	r1, [r4, #24]
 8002ab2:	b13a      	cbz	r2, 8002ac4 <__swsetup_r+0x40>
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	bd38      	pop	{r3, r4, r5, pc}
 8002ab8:	0798      	lsls	r0, r3, #30
 8002aba:	bf58      	it	pl
 8002abc:	6961      	ldrpl	r1, [r4, #20]
 8002abe:	60a1      	str	r1, [r4, #8]
 8002ac0:	2a00      	cmp	r2, #0
 8002ac2:	d1f7      	bne.n	8002ab4 <__swsetup_r+0x30>
 8002ac4:	0619      	lsls	r1, r3, #24
 8002ac6:	bf58      	it	pl
 8002ac8:	4610      	movpl	r0, r2
 8002aca:	d5f4      	bpl.n	8002ab6 <__swsetup_r+0x32>
 8002acc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ad0:	81a3      	strh	r3, [r4, #12]
 8002ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad6:	bd38      	pop	{r3, r4, r5, pc}
 8002ad8:	06d9      	lsls	r1, r3, #27
 8002ada:	d52c      	bpl.n	8002b36 <__swsetup_r+0xb2>
 8002adc:	075a      	lsls	r2, r3, #29
 8002ade:	d412      	bmi.n	8002b06 <__swsetup_r+0x82>
 8002ae0:	6922      	ldr	r2, [r4, #16]
 8002ae2:	f043 0308 	orr.w	r3, r3, #8
 8002ae6:	81a3      	strh	r3, [r4, #12]
 8002ae8:	2a00      	cmp	r2, #0
 8002aea:	d1da      	bne.n	8002aa2 <__swsetup_r+0x1e>
 8002aec:	f403 7120 	and.w	r1, r3, #640	@ 0x280
 8002af0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8002af4:	d0d5      	beq.n	8002aa2 <__swsetup_r+0x1e>
 8002af6:	4621      	mov	r1, r4
 8002af8:	4628      	mov	r0, r5
 8002afa:	f000 fa75 	bl	8002fe8 <__smakebuf_r>
 8002afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b02:	6922      	ldr	r2, [r4, #16]
 8002b04:	e7cd      	b.n	8002aa2 <__swsetup_r+0x1e>
 8002b06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002b08:	b151      	cbz	r1, 8002b20 <__swsetup_r+0x9c>
 8002b0a:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 8002b0e:	4291      	cmp	r1, r2
 8002b10:	d004      	beq.n	8002b1c <__swsetup_r+0x98>
 8002b12:	4628      	mov	r0, r5
 8002b14:	f7ff f920 	bl	8001d58 <_free_r>
 8002b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	6362      	str	r2, [r4, #52]	@ 0x34
 8002b20:	6922      	ldr	r2, [r4, #16]
 8002b22:	2100      	movs	r1, #0
 8002b24:	e9c4 2100 	strd	r2, r1, [r4]
 8002b28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002b2c:	e7d9      	b.n	8002ae2 <__swsetup_r+0x5e>
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe fe9a 	bl	8001868 <__sinit>
 8002b34:	e7af      	b.n	8002a96 <__swsetup_r+0x12>
 8002b36:	2209      	movs	r2, #9
 8002b38:	602a      	str	r2, [r5, #0]
 8002b3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b3e:	e7c7      	b.n	8002ad0 <__swsetup_r+0x4c>
 8002b40:	2000001c 	.word	0x2000001c

08002b44 <memmove>:
 8002b44:	4288      	cmp	r0, r1
 8002b46:	d90e      	bls.n	8002b66 <memmove+0x22>
 8002b48:	188b      	adds	r3, r1, r2
 8002b4a:	4283      	cmp	r3, r0
 8002b4c:	d90b      	bls.n	8002b66 <memmove+0x22>
 8002b4e:	eb00 0c02 	add.w	ip, r0, r2
 8002b52:	2a00      	cmp	r2, #0
 8002b54:	d06e      	beq.n	8002c34 <memmove+0xf0>
 8002b56:	4662      	mov	r2, ip
 8002b58:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 8002b5c:	f802 cd01 	strb.w	ip, [r2, #-1]!
 8002b60:	4299      	cmp	r1, r3
 8002b62:	d1f9      	bne.n	8002b58 <memmove+0x14>
 8002b64:	4770      	bx	lr
 8002b66:	2a0f      	cmp	r2, #15
 8002b68:	d80f      	bhi.n	8002b8a <memmove+0x46>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f102 3cff 	add.w	ip, r2, #4294967295
 8002b70:	2a00      	cmp	r2, #0
 8002b72:	d05f      	beq.n	8002c34 <memmove+0xf0>
 8002b74:	f10c 0c01 	add.w	ip, ip, #1
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	448c      	add	ip, r1
 8002b7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b80:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002b84:	4561      	cmp	r1, ip
 8002b86:	d1f9      	bne.n	8002b7c <memmove+0x38>
 8002b88:	4770      	bx	lr
 8002b8a:	ea40 0301 	orr.w	r3, r0, r1
 8002b8e:	079b      	lsls	r3, r3, #30
 8002b90:	d151      	bne.n	8002c36 <memmove+0xf2>
 8002b92:	f1a2 0310 	sub.w	r3, r2, #16
 8002b96:	b570      	push	{r4, r5, r6, lr}
 8002b98:	f101 0c20 	add.w	ip, r1, #32
 8002b9c:	f023 050f 	bic.w	r5, r3, #15
 8002ba0:	f101 0e10 	add.w	lr, r1, #16
 8002ba4:	f100 0410 	add.w	r4, r0, #16
 8002ba8:	44ac      	add	ip, r5
 8002baa:	091b      	lsrs	r3, r3, #4
 8002bac:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 8002bb0:	f844 5c10 	str.w	r5, [r4, #-16]
 8002bb4:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 8002bb8:	f844 5c0c 	str.w	r5, [r4, #-12]
 8002bbc:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 8002bc0:	f844 5c08 	str.w	r5, [r4, #-8]
 8002bc4:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 8002bc8:	f844 5c04 	str.w	r5, [r4, #-4]
 8002bcc:	f10e 0e10 	add.w	lr, lr, #16
 8002bd0:	45e6      	cmp	lr, ip
 8002bd2:	f104 0410 	add.w	r4, r4, #16
 8002bd6:	d1e9      	bne.n	8002bac <memmove+0x68>
 8002bd8:	3301      	adds	r3, #1
 8002bda:	f012 0f0c 	tst.w	r2, #12
 8002bde:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8002be2:	f002 040f 	and.w	r4, r2, #15
 8002be6:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8002bea:	d028      	beq.n	8002c3e <memmove+0xfa>
 8002bec:	3c04      	subs	r4, #4
 8002bee:	f024 0603 	bic.w	r6, r4, #3
 8002bf2:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 8002bf6:	441e      	add	r6, r3
 8002bf8:	1f1c      	subs	r4, r3, #4
 8002bfa:	468e      	mov	lr, r1
 8002bfc:	f85e 5b04 	ldr.w	r5, [lr], #4
 8002c00:	f844 5f04 	str.w	r5, [r4, #4]!
 8002c04:	42b4      	cmp	r4, r6
 8002c06:	d1f9      	bne.n	8002bfc <memmove+0xb8>
 8002c08:	f10c 0401 	add.w	r4, ip, #1
 8002c0c:	f002 0203 	and.w	r2, r2, #3
 8002c10:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002c14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8002c18:	f102 3cff 	add.w	ip, r2, #4294967295
 8002c1c:	b14a      	cbz	r2, 8002c32 <memmove+0xee>
 8002c1e:	f10c 0c01 	add.w	ip, ip, #1
 8002c22:	3b01      	subs	r3, #1
 8002c24:	448c      	add	ip, r1
 8002c26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002c2e:	4561      	cmp	r1, ip
 8002c30:	d1f9      	bne.n	8002c26 <memmove+0xe2>
 8002c32:	bd70      	pop	{r4, r5, r6, pc}
 8002c34:	4770      	bx	lr
 8002c36:	f102 3cff 	add.w	ip, r2, #4294967295
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	e79a      	b.n	8002b74 <memmove+0x30>
 8002c3e:	4622      	mov	r2, r4
 8002c40:	e7ea      	b.n	8002c18 <memmove+0xd4>
 8002c42:	bf00      	nop

08002c44 <_init_signal_r>:
 8002c44:	b538      	push	{r3, r4, r5, lr}
 8002c46:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8002c48:	b10c      	cbz	r4, 8002c4e <_init_signal_r+0xa>
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	bd38      	pop	{r3, r4, r5, pc}
 8002c4e:	2180      	movs	r1, #128	@ 0x80
 8002c50:	4605      	mov	r5, r0
 8002c52:	f7fe fbeb 	bl	800142c <_malloc_r>
 8002c56:	4602      	mov	r2, r0
 8002c58:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8002c5a:	b130      	cbz	r0, 8002c6a <_init_signal_r+0x26>
 8002c5c:	1f03      	subs	r3, r0, #4
 8002c5e:	327c      	adds	r2, #124	@ 0x7c
 8002c60:	f843 4f04 	str.w	r4, [r3, #4]!
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d1fb      	bne.n	8002c60 <_init_signal_r+0x1c>
 8002c68:	e7ef      	b.n	8002c4a <_init_signal_r+0x6>
 8002c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c6e:	bd38      	pop	{r3, r4, r5, pc}

08002c70 <_signal_r>:
 8002c70:	b530      	push	{r4, r5, lr}
 8002c72:	291f      	cmp	r1, #31
 8002c74:	b083      	sub	sp, #12
 8002c76:	4605      	mov	r5, r0
 8002c78:	d808      	bhi.n	8002c8c <_signal_r+0x1c>
 8002c7a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002c7c:	460c      	mov	r4, r1
 8002c7e:	b153      	cbz	r3, 8002c96 <_signal_r+0x26>
 8002c80:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002c84:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8002c88:	b003      	add	sp, #12
 8002c8a:	bd30      	pop	{r4, r5, pc}
 8002c8c:	2316      	movs	r3, #22
 8002c8e:	6003      	str	r3, [r0, #0]
 8002c90:	f04f 30ff 	mov.w	r0, #4294967295
 8002c94:	e7f8      	b.n	8002c88 <_signal_r+0x18>
 8002c96:	2180      	movs	r1, #128	@ 0x80
 8002c98:	9201      	str	r2, [sp, #4]
 8002c9a:	f7fe fbc7 	bl	800142c <_malloc_r>
 8002c9e:	9a01      	ldr	r2, [sp, #4]
 8002ca0:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2800      	cmp	r0, #0
 8002ca6:	d0f3      	beq.n	8002c90 <_signal_r+0x20>
 8002ca8:	1f01      	subs	r1, r0, #4
 8002caa:	f100 057c 	add.w	r5, r0, #124	@ 0x7c
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f841 0f04 	str.w	r0, [r1, #4]!
 8002cb4:	42a9      	cmp	r1, r5
 8002cb6:	d1fb      	bne.n	8002cb0 <_signal_r+0x40>
 8002cb8:	e7e2      	b.n	8002c80 <_signal_r+0x10>
 8002cba:	bf00      	nop

08002cbc <_raise_r>:
 8002cbc:	291f      	cmp	r1, #31
 8002cbe:	b538      	push	{r3, r4, r5, lr}
 8002cc0:	4605      	mov	r5, r0
 8002cc2:	d81e      	bhi.n	8002d02 <_raise_r+0x46>
 8002cc4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002cc6:	460c      	mov	r4, r1
 8002cc8:	b16a      	cbz	r2, 8002ce6 <_raise_r+0x2a>
 8002cca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002cce:	b153      	cbz	r3, 8002ce6 <_raise_r+0x2a>
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d006      	beq.n	8002ce2 <_raise_r+0x26>
 8002cd4:	1c59      	adds	r1, r3, #1
 8002cd6:	d010      	beq.n	8002cfa <_raise_r+0x3e>
 8002cd8:	2100      	movs	r1, #0
 8002cda:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8002cde:	4620      	mov	r0, r4
 8002ce0:	4798      	blx	r3
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	bd38      	pop	{r3, r4, r5, pc}
 8002ce6:	4628      	mov	r0, r5
 8002ce8:	f000 f8f2 	bl	8002ed0 <_getpid_r>
 8002cec:	4622      	mov	r2, r4
 8002cee:	4601      	mov	r1, r0
 8002cf0:	4628      	mov	r0, r5
 8002cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002cf6:	f000 b8d5 	b.w	8002ea4 <_kill_r>
 8002cfa:	2316      	movs	r3, #22
 8002cfc:	6003      	str	r3, [r0, #0]
 8002cfe:	2001      	movs	r0, #1
 8002d00:	bd38      	pop	{r3, r4, r5, pc}
 8002d02:	2316      	movs	r3, #22
 8002d04:	6003      	str	r3, [r0, #0]
 8002d06:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0a:	bd38      	pop	{r3, r4, r5, pc}

08002d0c <__sigtramp_r>:
 8002d0c:	291f      	cmp	r1, #31
 8002d0e:	d82a      	bhi.n	8002d66 <__sigtramp_r+0x5a>
 8002d10:	b538      	push	{r3, r4, r5, lr}
 8002d12:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002d14:	460c      	mov	r4, r1
 8002d16:	4605      	mov	r5, r0
 8002d18:	b1a3      	cbz	r3, 8002d44 <__sigtramp_r+0x38>
 8002d1a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8002d1e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002d22:	b14a      	cbz	r2, 8002d38 <__sigtramp_r+0x2c>
 8002d24:	1c51      	adds	r1, r2, #1
 8002d26:	d00b      	beq.n	8002d40 <__sigtramp_r+0x34>
 8002d28:	2a01      	cmp	r2, #1
 8002d2a:	d007      	beq.n	8002d3c <__sigtramp_r+0x30>
 8002d2c:	2500      	movs	r5, #0
 8002d2e:	4620      	mov	r0, r4
 8002d30:	601d      	str	r5, [r3, #0]
 8002d32:	4790      	blx	r2
 8002d34:	4628      	mov	r0, r5
 8002d36:	bd38      	pop	{r3, r4, r5, pc}
 8002d38:	2001      	movs	r0, #1
 8002d3a:	bd38      	pop	{r3, r4, r5, pc}
 8002d3c:	2003      	movs	r0, #3
 8002d3e:	bd38      	pop	{r3, r4, r5, pc}
 8002d40:	2002      	movs	r0, #2
 8002d42:	bd38      	pop	{r3, r4, r5, pc}
 8002d44:	2180      	movs	r1, #128	@ 0x80
 8002d46:	f7fe fb71 	bl	800142c <_malloc_r>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8002d4e:	b138      	cbz	r0, 8002d60 <__sigtramp_r+0x54>
 8002d50:	1f02      	subs	r2, r0, #4
 8002d52:	2100      	movs	r1, #0
 8002d54:	307c      	adds	r0, #124	@ 0x7c
 8002d56:	f842 1f04 	str.w	r1, [r2, #4]!
 8002d5a:	4290      	cmp	r0, r2
 8002d5c:	d1fb      	bne.n	8002d56 <__sigtramp_r+0x4a>
 8002d5e:	e7dc      	b.n	8002d1a <__sigtramp_r+0xe>
 8002d60:	f04f 30ff 	mov.w	r0, #4294967295
 8002d64:	bd38      	pop	{r3, r4, r5, pc}
 8002d66:	f04f 30ff 	mov.w	r0, #4294967295
 8002d6a:	4770      	bx	lr

08002d6c <raise>:
 8002d6c:	b538      	push	{r3, r4, r5, lr}
 8002d6e:	4b13      	ldr	r3, [pc, #76]	@ (8002dbc <raise+0x50>)
 8002d70:	281f      	cmp	r0, #31
 8002d72:	681d      	ldr	r5, [r3, #0]
 8002d74:	d81d      	bhi.n	8002db2 <raise+0x46>
 8002d76:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8002d78:	4604      	mov	r4, r0
 8002d7a:	b162      	cbz	r2, 8002d96 <raise+0x2a>
 8002d7c:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8002d80:	b14b      	cbz	r3, 8002d96 <raise+0x2a>
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d005      	beq.n	8002d92 <raise+0x26>
 8002d86:	1c59      	adds	r1, r3, #1
 8002d88:	d00f      	beq.n	8002daa <raise+0x3e>
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 8002d90:	4798      	blx	r3
 8002d92:	2000      	movs	r0, #0
 8002d94:	bd38      	pop	{r3, r4, r5, pc}
 8002d96:	4628      	mov	r0, r5
 8002d98:	f000 f89a 	bl	8002ed0 <_getpid_r>
 8002d9c:	4622      	mov	r2, r4
 8002d9e:	4601      	mov	r1, r0
 8002da0:	4628      	mov	r0, r5
 8002da2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002da6:	f000 b87d 	b.w	8002ea4 <_kill_r>
 8002daa:	2316      	movs	r3, #22
 8002dac:	602b      	str	r3, [r5, #0]
 8002dae:	2001      	movs	r0, #1
 8002db0:	bd38      	pop	{r3, r4, r5, pc}
 8002db2:	2316      	movs	r3, #22
 8002db4:	602b      	str	r3, [r5, #0]
 8002db6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dba:	bd38      	pop	{r3, r4, r5, pc}
 8002dbc:	2000001c 	.word	0x2000001c

08002dc0 <signal>:
 8002dc0:	4b11      	ldr	r3, [pc, #68]	@ (8002e08 <signal+0x48>)
 8002dc2:	281f      	cmp	r0, #31
 8002dc4:	b570      	push	{r4, r5, r6, lr}
 8002dc6:	681e      	ldr	r6, [r3, #0]
 8002dc8:	d808      	bhi.n	8002ddc <signal+0x1c>
 8002dca:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 8002dcc:	4604      	mov	r4, r0
 8002dce:	460d      	mov	r5, r1
 8002dd0:	b14b      	cbz	r3, 8002de6 <signal+0x26>
 8002dd2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8002dd6:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
 8002dda:	bd70      	pop	{r4, r5, r6, pc}
 8002ddc:	2316      	movs	r3, #22
 8002dde:	6033      	str	r3, [r6, #0]
 8002de0:	f04f 30ff 	mov.w	r0, #4294967295
 8002de4:	bd70      	pop	{r4, r5, r6, pc}
 8002de6:	2180      	movs	r1, #128	@ 0x80
 8002de8:	4630      	mov	r0, r6
 8002dea:	f7fe fb1f 	bl	800142c <_malloc_r>
 8002dee:	4603      	mov	r3, r0
 8002df0:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8002df2:	2800      	cmp	r0, #0
 8002df4:	d0f4      	beq.n	8002de0 <signal+0x20>
 8002df6:	1f02      	subs	r2, r0, #4
 8002df8:	2100      	movs	r1, #0
 8002dfa:	307c      	adds	r0, #124	@ 0x7c
 8002dfc:	f842 1f04 	str.w	r1, [r2, #4]!
 8002e00:	4290      	cmp	r0, r2
 8002e02:	d1fb      	bne.n	8002dfc <signal+0x3c>
 8002e04:	e7e5      	b.n	8002dd2 <signal+0x12>
 8002e06:	bf00      	nop
 8002e08:	2000001c 	.word	0x2000001c

08002e0c <_init_signal>:
 8002e0c:	b538      	push	{r3, r4, r5, lr}
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e3c <_init_signal+0x30>)
 8002e10:	681d      	ldr	r5, [r3, #0]
 8002e12:	6bec      	ldr	r4, [r5, #60]	@ 0x3c
 8002e14:	b10c      	cbz	r4, 8002e1a <_init_signal+0xe>
 8002e16:	2000      	movs	r0, #0
 8002e18:	bd38      	pop	{r3, r4, r5, pc}
 8002e1a:	2180      	movs	r1, #128	@ 0x80
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	f7fe fb05 	bl	800142c <_malloc_r>
 8002e22:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8002e24:	b138      	cbz	r0, 8002e36 <_init_signal+0x2a>
 8002e26:	1f03      	subs	r3, r0, #4
 8002e28:	f100 027c 	add.w	r2, r0, #124	@ 0x7c
 8002e2c:	f843 4f04 	str.w	r4, [r3, #4]!
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d1fb      	bne.n	8002e2c <_init_signal+0x20>
 8002e34:	e7ef      	b.n	8002e16 <_init_signal+0xa>
 8002e36:	f04f 30ff 	mov.w	r0, #4294967295
 8002e3a:	bd38      	pop	{r3, r4, r5, pc}
 8002e3c:	2000001c 	.word	0x2000001c

08002e40 <__sigtramp>:
 8002e40:	b538      	push	{r3, r4, r5, lr}
 8002e42:	4b17      	ldr	r3, [pc, #92]	@ (8002ea0 <__sigtramp+0x60>)
 8002e44:	281f      	cmp	r0, #31
 8002e46:	681d      	ldr	r5, [r3, #0]
 8002e48:	d826      	bhi.n	8002e98 <__sigtramp+0x58>
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 8002e4e:	b1a0      	cbz	r0, 8002e7a <__sigtramp+0x3a>
 8002e50:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8002e54:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8002e58:	b14b      	cbz	r3, 8002e6e <__sigtramp+0x2e>
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	d00b      	beq.n	8002e76 <__sigtramp+0x36>
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d007      	beq.n	8002e72 <__sigtramp+0x32>
 8002e62:	2500      	movs	r5, #0
 8002e64:	6005      	str	r5, [r0, #0]
 8002e66:	4620      	mov	r0, r4
 8002e68:	4798      	blx	r3
 8002e6a:	4628      	mov	r0, r5
 8002e6c:	bd38      	pop	{r3, r4, r5, pc}
 8002e6e:	2001      	movs	r0, #1
 8002e70:	bd38      	pop	{r3, r4, r5, pc}
 8002e72:	2003      	movs	r0, #3
 8002e74:	bd38      	pop	{r3, r4, r5, pc}
 8002e76:	2002      	movs	r0, #2
 8002e78:	bd38      	pop	{r3, r4, r5, pc}
 8002e7a:	2180      	movs	r1, #128	@ 0x80
 8002e7c:	4628      	mov	r0, r5
 8002e7e:	f7fe fad5 	bl	800142c <_malloc_r>
 8002e82:	63e8      	str	r0, [r5, #60]	@ 0x3c
 8002e84:	b140      	cbz	r0, 8002e98 <__sigtramp+0x58>
 8002e86:	1f03      	subs	r3, r0, #4
 8002e88:	f100 017c 	add.w	r1, r0, #124	@ 0x7c
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f843 2f04 	str.w	r2, [r3, #4]!
 8002e92:	4299      	cmp	r1, r3
 8002e94:	d1fb      	bne.n	8002e8e <__sigtramp+0x4e>
 8002e96:	e7db      	b.n	8002e50 <__sigtramp+0x10>
 8002e98:	f04f 30ff 	mov.w	r0, #4294967295
 8002e9c:	bd38      	pop	{r3, r4, r5, pc}
 8002e9e:	bf00      	nop
 8002ea0:	2000001c 	.word	0x2000001c

08002ea4 <_kill_r>:
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	460c      	mov	r4, r1
 8002ea8:	4d08      	ldr	r5, [pc, #32]	@ (8002ecc <_kill_r+0x28>)
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2600      	movs	r6, #0
 8002eae:	4620      	mov	r0, r4
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	461c      	mov	r4, r3
 8002eb4:	602e      	str	r6, [r5, #0]
 8002eb6:	f000 f971 	bl	800319c <_kill>
 8002eba:	1c43      	adds	r3, r0, #1
 8002ebc:	d000      	beq.n	8002ec0 <_kill_r+0x1c>
 8002ebe:	bd70      	pop	{r4, r5, r6, pc}
 8002ec0:	682b      	ldr	r3, [r5, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0fb      	beq.n	8002ebe <_kill_r+0x1a>
 8002ec6:	6023      	str	r3, [r4, #0]
 8002ec8:	bd70      	pop	{r4, r5, r6, pc}
 8002eca:	bf00      	nop
 8002ecc:	200002f4 	.word	0x200002f4

08002ed0 <_getpid_r>:
 8002ed0:	f000 b954 	b.w	800317c <_getpid>
 8002ed4:	0000      	movs	r0, r0
 8002ed6:	0000      	movs	r0, r0
 8002ed8:	0000      	movs	r0, r0
 8002eda:	0000      	movs	r0, r0
 8002edc:	0000      	movs	r0, r0
 8002ede:	0000      	movs	r0, r0

08002ee0 <memchr>:
 8002ee0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8002ee4:	2a10      	cmp	r2, #16
 8002ee6:	db2b      	blt.n	8002f40 <memchr+0x60>
 8002ee8:	f010 0f07 	tst.w	r0, #7
 8002eec:	d008      	beq.n	8002f00 <memchr+0x20>
 8002eee:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002ef2:	3a01      	subs	r2, #1
 8002ef4:	428b      	cmp	r3, r1
 8002ef6:	d02d      	beq.n	8002f54 <memchr+0x74>
 8002ef8:	f010 0f07 	tst.w	r0, #7
 8002efc:	b342      	cbz	r2, 8002f50 <memchr+0x70>
 8002efe:	d1f6      	bne.n	8002eee <memchr+0xe>
 8002f00:	b4f0      	push	{r4, r5, r6, r7}
 8002f02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002f06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8002f0a:	f022 0407 	bic.w	r4, r2, #7
 8002f0e:	f07f 0700 	mvns.w	r7, #0
 8002f12:	2300      	movs	r3, #0
 8002f14:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002f18:	3c08      	subs	r4, #8
 8002f1a:	ea85 0501 	eor.w	r5, r5, r1
 8002f1e:	ea86 0601 	eor.w	r6, r6, r1
 8002f22:	fa85 f547 	uadd8	r5, r5, r7
 8002f26:	faa3 f587 	sel	r5, r3, r7
 8002f2a:	fa86 f647 	uadd8	r6, r6, r7
 8002f2e:	faa5 f687 	sel	r6, r5, r7
 8002f32:	b98e      	cbnz	r6, 8002f58 <memchr+0x78>
 8002f34:	d1ee      	bne.n	8002f14 <memchr+0x34>
 8002f36:	bcf0      	pop	{r4, r5, r6, r7}
 8002f38:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8002f3c:	f002 0207 	and.w	r2, r2, #7
 8002f40:	b132      	cbz	r2, 8002f50 <memchr+0x70>
 8002f42:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002f46:	3a01      	subs	r2, #1
 8002f48:	ea83 0301 	eor.w	r3, r3, r1
 8002f4c:	b113      	cbz	r3, 8002f54 <memchr+0x74>
 8002f4e:	d1f8      	bne.n	8002f42 <memchr+0x62>
 8002f50:	2000      	movs	r0, #0
 8002f52:	4770      	bx	lr
 8002f54:	3801      	subs	r0, #1
 8002f56:	4770      	bx	lr
 8002f58:	2d00      	cmp	r5, #0
 8002f5a:	bf06      	itte	eq
 8002f5c:	4635      	moveq	r5, r6
 8002f5e:	3803      	subeq	r0, #3
 8002f60:	3807      	subne	r0, #7
 8002f62:	f015 0f01 	tst.w	r5, #1
 8002f66:	d107      	bne.n	8002f78 <memchr+0x98>
 8002f68:	3001      	adds	r0, #1
 8002f6a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8002f6e:	bf02      	ittt	eq
 8002f70:	3001      	addeq	r0, #1
 8002f72:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8002f76:	3001      	addeq	r0, #1
 8002f78:	bcf0      	pop	{r4, r5, r6, r7}
 8002f7a:	3801      	subs	r0, #1
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop

08002f80 <_realloc_r>:
 8002f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f84:	4614      	mov	r4, r2
 8002f86:	b349      	cbz	r1, 8002fdc <_realloc_r+0x5c>
 8002f88:	b1ea      	cbz	r2, 8002fc6 <_realloc_r+0x46>
 8002f8a:	4606      	mov	r6, r0
 8002f8c:	460d      	mov	r5, r1
 8002f8e:	f000 f8dd 	bl	800314c <_malloc_usable_size_r>
 8002f92:	4284      	cmp	r4, r0
 8002f94:	4607      	mov	r7, r0
 8002f96:	d802      	bhi.n	8002f9e <_realloc_r+0x1e>
 8002f98:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002f9c:	d81a      	bhi.n	8002fd4 <_realloc_r+0x54>
 8002f9e:	4621      	mov	r1, r4
 8002fa0:	4630      	mov	r0, r6
 8002fa2:	f7fe fa43 	bl	800142c <_malloc_r>
 8002fa6:	4680      	mov	r8, r0
 8002fa8:	b178      	cbz	r0, 8002fca <_realloc_r+0x4a>
 8002faa:	42bc      	cmp	r4, r7
 8002fac:	4622      	mov	r2, r4
 8002fae:	4629      	mov	r1, r5
 8002fb0:	bf28      	it	cs
 8002fb2:	463a      	movcs	r2, r7
 8002fb4:	f7fe fe10 	bl	8001bd8 <memcpy>
 8002fb8:	4630      	mov	r0, r6
 8002fba:	4629      	mov	r1, r5
 8002fbc:	f7fe fecc 	bl	8001d58 <_free_r>
 8002fc0:	4640      	mov	r0, r8
 8002fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fc6:	f7fe fec7 	bl	8001d58 <_free_r>
 8002fca:	f04f 0800 	mov.w	r8, #0
 8002fce:	4640      	mov	r0, r8
 8002fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fd4:	46a8      	mov	r8, r5
 8002fd6:	4640      	mov	r0, r8
 8002fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	f7fe ba23 	b.w	800142c <_malloc_r>
 8002fe6:	bf00      	nop

08002fe8 <__smakebuf_r>:
 8002fe8:	b570      	push	{r4, r5, r6, lr}
 8002fea:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8002fee:	460c      	mov	r4, r1
 8002ff0:	0799      	lsls	r1, r3, #30
 8002ff2:	b096      	sub	sp, #88	@ 0x58
 8002ff4:	d507      	bpl.n	8003006 <__smakebuf_r+0x1e>
 8002ff6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8003000:	6023      	str	r3, [r4, #0]
 8003002:	b016      	add	sp, #88	@ 0x58
 8003004:	bd70      	pop	{r4, r5, r6, pc}
 8003006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800300a:	2900      	cmp	r1, #0
 800300c:	4605      	mov	r5, r0
 800300e:	db29      	blt.n	8003064 <__smakebuf_r+0x7c>
 8003010:	466a      	mov	r2, sp
 8003012:	f000 f873 	bl	80030fc <_fstat_r>
 8003016:	2800      	cmp	r0, #0
 8003018:	db22      	blt.n	8003060 <__smakebuf_r+0x78>
 800301a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800301e:	4628      	mov	r0, r5
 8003020:	9e01      	ldr	r6, [sp, #4]
 8003022:	f7fe fa03 	bl	800142c <_malloc_r>
 8003026:	b388      	cbz	r0, 800308c <__smakebuf_r+0xa4>
 8003028:	89a3      	ldrh	r3, [r4, #12]
 800302a:	6020      	str	r0, [r4, #0]
 800302c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003030:	f406 4670 	and.w	r6, r6, #61440	@ 0xf000
 8003034:	81a3      	strh	r3, [r4, #12]
 8003036:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
 800303a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800303e:	e9c4 0304 	strd	r0, r3, [r4, #16]
 8003042:	d1de      	bne.n	8003002 <__smakebuf_r+0x1a>
 8003044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003048:	4628      	mov	r0, r5
 800304a:	f000 f86d 	bl	8003128 <_isatty_r>
 800304e:	2800      	cmp	r0, #0
 8003050:	d0d7      	beq.n	8003002 <__smakebuf_r+0x1a>
 8003052:	89a3      	ldrh	r3, [r4, #12]
 8003054:	f023 0303 	bic.w	r3, r3, #3
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	81a3      	strh	r3, [r4, #12]
 800305e:	e7d0      	b.n	8003002 <__smakebuf_r+0x1a>
 8003060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003064:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003068:	bf14      	ite	ne
 800306a:	2640      	movne	r6, #64	@ 0x40
 800306c:	f44f 6680 	moveq.w	r6, #1024	@ 0x400
 8003070:	4631      	mov	r1, r6
 8003072:	4628      	mov	r0, r5
 8003074:	f7fe f9da 	bl	800142c <_malloc_r>
 8003078:	b140      	cbz	r0, 800308c <__smakebuf_r+0xa4>
 800307a:	89a3      	ldrh	r3, [r4, #12]
 800307c:	6020      	str	r0, [r4, #0]
 800307e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003082:	e9c4 0604 	strd	r0, r6, [r4, #16]
 8003086:	81a3      	strh	r3, [r4, #12]
 8003088:	b016      	add	sp, #88	@ 0x58
 800308a:	bd70      	pop	{r4, r5, r6, pc}
 800308c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003090:	059a      	lsls	r2, r3, #22
 8003092:	d4b6      	bmi.n	8003002 <__smakebuf_r+0x1a>
 8003094:	f023 0303 	bic.w	r3, r3, #3
 8003098:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800309c:	f043 0302 	orr.w	r3, r3, #2
 80030a0:	2101      	movs	r1, #1
 80030a2:	e9c4 2104 	strd	r2, r1, [r4, #16]
 80030a6:	81a3      	strh	r3, [r4, #12]
 80030a8:	6022      	str	r2, [r4, #0]
 80030aa:	e7aa      	b.n	8003002 <__smakebuf_r+0x1a>

080030ac <__swhatbuf_r>:
 80030ac:	b570      	push	{r4, r5, r6, lr}
 80030ae:	460c      	mov	r4, r1
 80030b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030b4:	2900      	cmp	r1, #0
 80030b6:	b096      	sub	sp, #88	@ 0x58
 80030b8:	4615      	mov	r5, r2
 80030ba:	461e      	mov	r6, r3
 80030bc:	db0f      	blt.n	80030de <__swhatbuf_r+0x32>
 80030be:	466a      	mov	r2, sp
 80030c0:	f000 f81c 	bl	80030fc <_fstat_r>
 80030c4:	2800      	cmp	r0, #0
 80030c6:	db0a      	blt.n	80030de <__swhatbuf_r+0x32>
 80030c8:	9b01      	ldr	r3, [sp, #4]
 80030ca:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80030ce:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 80030d2:	fab3 f383 	clz	r3, r3
 80030d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	e008      	b.n	80030f0 <__swhatbuf_r+0x44>
 80030de:	89a2      	ldrh	r2, [r4, #12]
 80030e0:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	bf14      	ite	ne
 80030ea:	2240      	movne	r2, #64	@ 0x40
 80030ec:	f44f 6280 	moveq.w	r2, #1024	@ 0x400
 80030f0:	2000      	movs	r0, #0
 80030f2:	6033      	str	r3, [r6, #0]
 80030f4:	602a      	str	r2, [r5, #0]
 80030f6:	b016      	add	sp, #88	@ 0x58
 80030f8:	bd70      	pop	{r4, r5, r6, pc}
 80030fa:	bf00      	nop

080030fc <_fstat_r>:
 80030fc:	b570      	push	{r4, r5, r6, lr}
 80030fe:	460c      	mov	r4, r1
 8003100:	4d08      	ldr	r5, [pc, #32]	@ (8003124 <_fstat_r+0x28>)
 8003102:	4603      	mov	r3, r0
 8003104:	2600      	movs	r6, #0
 8003106:	4620      	mov	r0, r4
 8003108:	4611      	mov	r1, r2
 800310a:	461c      	mov	r4, r3
 800310c:	602e      	str	r6, [r5, #0]
 800310e:	f000 f82d 	bl	800316c <_fstat>
 8003112:	1c43      	adds	r3, r0, #1
 8003114:	d000      	beq.n	8003118 <_fstat_r+0x1c>
 8003116:	bd70      	pop	{r4, r5, r6, pc}
 8003118:	682b      	ldr	r3, [r5, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0fb      	beq.n	8003116 <_fstat_r+0x1a>
 800311e:	6023      	str	r3, [r4, #0]
 8003120:	bd70      	pop	{r4, r5, r6, pc}
 8003122:	bf00      	nop
 8003124:	200002f4 	.word	0x200002f4

08003128 <_isatty_r>:
 8003128:	b538      	push	{r3, r4, r5, lr}
 800312a:	4d07      	ldr	r5, [pc, #28]	@ (8003148 <_isatty_r+0x20>)
 800312c:	2200      	movs	r2, #0
 800312e:	4604      	mov	r4, r0
 8003130:	4608      	mov	r0, r1
 8003132:	602a      	str	r2, [r5, #0]
 8003134:	f000 f82a 	bl	800318c <_isatty>
 8003138:	1c43      	adds	r3, r0, #1
 800313a:	d000      	beq.n	800313e <_isatty_r+0x16>
 800313c:	bd38      	pop	{r3, r4, r5, pc}
 800313e:	682b      	ldr	r3, [r5, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0fb      	beq.n	800313c <_isatty_r+0x14>
 8003144:	6023      	str	r3, [r4, #0]
 8003146:	bd38      	pop	{r3, r4, r5, pc}
 8003148:	200002f4 	.word	0x200002f4

0800314c <_malloc_usable_size_r>:
 800314c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003150:	1f18      	subs	r0, r3, #4
 8003152:	2b00      	cmp	r3, #0
 8003154:	bfbc      	itt	lt
 8003156:	580b      	ldrlt	r3, [r1, r0]
 8003158:	18c0      	addlt	r0, r0, r3
 800315a:	4770      	bx	lr

0800315c <_close>:
 800315c:	4b02      	ldr	r3, [pc, #8]	@ (8003168 <_close+0xc>)
 800315e:	2258      	movs	r2, #88	@ 0x58
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	f04f 30ff 	mov.w	r0, #4294967295
 8003166:	4770      	bx	lr
 8003168:	200002f4 	.word	0x200002f4

0800316c <_fstat>:
 800316c:	4b02      	ldr	r3, [pc, #8]	@ (8003178 <_fstat+0xc>)
 800316e:	2258      	movs	r2, #88	@ 0x58
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	f04f 30ff 	mov.w	r0, #4294967295
 8003176:	4770      	bx	lr
 8003178:	200002f4 	.word	0x200002f4

0800317c <_getpid>:
 800317c:	4b02      	ldr	r3, [pc, #8]	@ (8003188 <_getpid+0xc>)
 800317e:	2258      	movs	r2, #88	@ 0x58
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	f04f 30ff 	mov.w	r0, #4294967295
 8003186:	4770      	bx	lr
 8003188:	200002f4 	.word	0x200002f4

0800318c <_isatty>:
 800318c:	4b02      	ldr	r3, [pc, #8]	@ (8003198 <_isatty+0xc>)
 800318e:	2258      	movs	r2, #88	@ 0x58
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	2000      	movs	r0, #0
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	200002f4 	.word	0x200002f4

0800319c <_kill>:
 800319c:	4b02      	ldr	r3, [pc, #8]	@ (80031a8 <_kill+0xc>)
 800319e:	2258      	movs	r2, #88	@ 0x58
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	f04f 30ff 	mov.w	r0, #4294967295
 80031a6:	4770      	bx	lr
 80031a8:	200002f4 	.word	0x200002f4

080031ac <_lseek>:
 80031ac:	4b02      	ldr	r3, [pc, #8]	@ (80031b8 <_lseek+0xc>)
 80031ae:	2258      	movs	r2, #88	@ 0x58
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	f04f 30ff 	mov.w	r0, #4294967295
 80031b6:	4770      	bx	lr
 80031b8:	200002f4 	.word	0x200002f4

080031bc <_read>:
 80031bc:	4b02      	ldr	r3, [pc, #8]	@ (80031c8 <_read+0xc>)
 80031be:	2258      	movs	r2, #88	@ 0x58
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	f04f 30ff 	mov.w	r0, #4294967295
 80031c6:	4770      	bx	lr
 80031c8:	200002f4 	.word	0x200002f4

080031cc <_write>:
 80031cc:	4b02      	ldr	r3, [pc, #8]	@ (80031d8 <_write+0xc>)
 80031ce:	2258      	movs	r2, #88	@ 0x58
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	f04f 30ff 	mov.w	r0, #4294967295
 80031d6:	4770      	bx	lr
 80031d8:	200002f4 	.word	0x200002f4

080031dc <_exit>:
 80031dc:	e7fe      	b.n	80031dc <_exit>
 80031de:	bf00      	nop

080031e0 <__do_global_dtors_aux>:
 80031e0:	b510      	push	{r4, lr}
 80031e2:	4c05      	ldr	r4, [pc, #20]	@ (80031f8 <__do_global_dtors_aux+0x18>)
 80031e4:	7823      	ldrb	r3, [r4, #0]
 80031e6:	b933      	cbnz	r3, 80031f6 <__do_global_dtors_aux+0x16>
 80031e8:	4b04      	ldr	r3, [pc, #16]	@ (80031fc <__do_global_dtors_aux+0x1c>)
 80031ea:	b113      	cbz	r3, 80031f2 <__do_global_dtors_aux+0x12>
 80031ec:	4804      	ldr	r0, [pc, #16]	@ (8003200 <__do_global_dtors_aux+0x20>)
 80031ee:	f3af 8000 	nop.w
 80031f2:	2301      	movs	r3, #1
 80031f4:	7023      	strb	r3, [r4, #0]
 80031f6:	bd10      	pop	{r4, pc}
 80031f8:	20000315 	.word	0x20000315
 80031fc:	00000000 	.word	0x00000000
 8003200:	08004500 	.word	0x08004500

08003204 <frame_dummy>:
 8003204:	b508      	push	{r3, lr}
 8003206:	4b03      	ldr	r3, [pc, #12]	@ (8003214 <frame_dummy+0x10>)
 8003208:	b11b      	cbz	r3, 8003212 <frame_dummy+0xe>
 800320a:	4903      	ldr	r1, [pc, #12]	@ (8003218 <frame_dummy+0x14>)
 800320c:	4803      	ldr	r0, [pc, #12]	@ (800321c <frame_dummy+0x18>)
 800320e:	f3af 8000 	nop.w
 8003212:	bd08      	pop	{r3, pc}
 8003214:	00000000 	.word	0x00000000
 8003218:	20000318 	.word	0x20000318
 800321c:	08004500 	.word	0x08004500

08003220 <handle>:
/// This function will handle the 'p' command send from the capture board.
/// It returns the squared version of the scmd given.
/// It does this in approximately equal time, which allows us to see clear
/// differences between different scmd values.
uint8_t handle(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 8003220:	b5f0      	push	{r4, r5, r6, r7, lr}
  int return_string_len =  ((arr[1] + 1) * arr[0]) + 1;
  char string[return_string_len];

  // expects an input of byte lenght, of number neurons in first layer
  for(int x = 0; x < arr[0]; x++){
      net->layers[0].neurons[x].a = (signed char)(buf[x]);
 8003222:	4d24      	ldr	r5, [pc, #144]	@ (80032b4 <handle+0x94>)
{
 8003224:	460c      	mov	r4, r1
      net->layers[0].neurons[x].a = (signed char)(buf[x]);
 8003226:	6829      	ldr	r1, [r5, #0]
 8003228:	6849      	ldr	r1, [r1, #4]
{
 800322a:	b08d      	sub	sp, #52	@ 0x34
  volatile uint8_t result = 0;
 800322c:	2200      	movs	r2, #0
 800322e:	6849      	ldr	r1, [r1, #4]
 8003230:	f88d 2003 	strb.w	r2, [sp, #3]
  for(int x = 0; x < arr[0]; x++){
 8003234:	1e5a      	subs	r2, r3, #1
 8003236:	3306      	adds	r3, #6
      net->layers[0].neurons[x].a = (signed char)(buf[x]);
 8003238:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800323c:	7288      	strb	r0, [r1, #10]
  for(int x = 0; x < arr[0]; x++){
 800323e:	429a      	cmp	r2, r3
 8003240:	f101 010c 	add.w	r1, r1, #12
 8003244:	d1f8      	bne.n	8003238 <handle+0x18>
  //}

  //int ****random_indices = generate_random_indices(net);

  // Start measurement.
  trigger_high();
 8003246:	f000 fb01 	bl	800384c <trigger_high>

  forward(*net,0);
 800324a:	682b      	ldr	r3, [r5, #0]

  // Stop measurement.
  trigger_low();

  // For now we can just return the result back to the user.
  result = scmd*scmd;
 800324c:	fb14 f404 	smulbb	r4, r4, r4
  forward(*net,0);
 8003250:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003254:	2200      	movs	r2, #0
  result = scmd*scmd;
 8003256:	b2e4      	uxtb	r4, r4
  forward(*net,0);
 8003258:	f000 f8dc 	bl	8003414 <forward>
  trigger_low();
 800325c:	f000 fafd 	bl	800385a <trigger_low>
  result = scmd*scmd;
 8003260:	f88d 4003 	strb.w	r4, [sp, #3]
  uint8_t buff[1] = { result };
 8003264:	f89d 3003 	ldrb.w	r3, [sp, #3]

  // char string[] = "Hello";
    for(int x = 0; x < arr[0]; x++){
        for(int y = 0;y<arr[1];y++){
            string[(x*(arr[1]+1)) + y] = net->layers[0].neurons[x].weights[y];
 8003268:	682f      	ldr	r7, [r5, #0]
 800326a:	ab01      	add	r3, sp, #4
 800326c:	2000      	movs	r0, #0
 800326e:	461a      	mov	r2, r3
        for(int y = 0;y<arr[1];y++){
 8003270:	0046      	lsls	r6, r0, #1
{
 8003272:	461d      	mov	r5, r3
        for(int y = 0;y<arr[1];y++){
 8003274:	2100      	movs	r1, #0
            string[(x*(arr[1]+1)) + y] = net->layers[0].neurons[x].weights[y];
 8003276:	687c      	ldr	r4, [r7, #4]
 8003278:	6864      	ldr	r4, [r4, #4]
 800327a:	4434      	add	r4, r6
 800327c:	6864      	ldr	r4, [r4, #4]
 800327e:	5c64      	ldrb	r4, [r4, r1]
 8003280:	f805 4b01 	strb.w	r4, [r5], #1
        for(int y = 0;y<arr[1];y++){
 8003284:	3101      	adds	r1, #1
 8003286:	2905      	cmp	r1, #5
 8003288:	d1f5      	bne.n	8003276 <handle+0x56>
        }
        string[(x*(arr[1]+1)) + arr[1]] = net->layers[0].neurons[x].bias;
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	6849      	ldr	r1, [r1, #4]
 800328e:	4431      	add	r1, r6
    for(int x = 0; x < arr[0]; x++){
 8003290:	3006      	adds	r0, #6
        string[(x*(arr[1]+1)) + arr[1]] = net->layers[0].neurons[x].bias;
 8003292:	7a09      	ldrb	r1, [r1, #8]
 8003294:	7159      	strb	r1, [r3, #5]
    for(int x = 0; x < arr[0]; x++){
 8003296:	282a      	cmp	r0, #42	@ 0x2a
 8003298:	f103 0306 	add.w	r3, r3, #6
 800329c:	d1e8      	bne.n	8003270 <handle+0x50>
    }
    string[return_string_len - 1] = 0;
 800329e:	2400      	movs	r4, #0
    uint8_t return_len = return_string_len;
  simpleserial_put('r', return_len, string);
 80032a0:	212b      	movs	r1, #43	@ 0x2b
 80032a2:	2072      	movs	r0, #114	@ 0x72
    string[return_string_len - 1] = 0;
 80032a4:	f88d 402e 	strb.w	r4, [sp, #46]	@ 0x2e
  simpleserial_put('r', return_len, string);
 80032a8:	f000 f96a 	bl	8003580 <simpleserial_put>

  return 0;
}
 80032ac:	4620      	mov	r0, r4
 80032ae:	b00d      	add	sp, #52	@ 0x34
 80032b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032b2:	bf00      	nop
 80032b4:	2000006c 	.word	0x2000006c

080032b8 <main>:

int main(void) {
 80032b8:	b507      	push	{r0, r1, r2, lr}
    // Setup the specific chipset.
  platform_init();
 80032ba:	f000 fa25 	bl	8003708 <platform_init>
  // Setup serial communication line.
  init_uart();
 80032be:	f000 fa63 	bl	8003788 <init_uart>
  // Setup measurement trigger.
  trigger_setup();
 80032c2:	f000 fa9f 	bl	8003804 <trigger_setup>

  simpleserial_init();
 80032c6:	f000 f949 	bl	800355c <simpleserial_init>

  // Insert your handlers here.
  simpleserial_addcmd('p', 16, handle);
 80032ca:	4a0b      	ldr	r2, [pc, #44]	@ (80032f8 <main+0x40>)
 80032cc:	2110      	movs	r1, #16
 80032ce:	2070      	movs	r0, #112	@ 0x70
 80032d0:	f000 f92a 	bl	8003528 <simpleserial_addcmd>

  arr[0] = 7;
 80032d4:	4a09      	ldr	r2, [pc, #36]	@ (80032fc <main+0x44>)
  arr[1] = 5;
 80032d6:	2107      	movs	r1, #7
 80032d8:	2305      	movs	r3, #5
 80032da:	e9c2 1300 	strd	r1, r3, [r2]
  arr[2] = 4;
  arr[3] = 2;
  network ann = construct_quantized_network2(4,arr);
 80032de:	4668      	mov	r0, sp
  arr[3] = 2;
 80032e0:	2302      	movs	r3, #2
 80032e2:	2104      	movs	r1, #4
 80032e4:	e9c2 1302 	strd	r1, r3, [r2, #8]
  network ann = construct_quantized_network2(4,arr);
 80032e8:	f000 f842 	bl	8003370 <construct_quantized_network2>
  net = &ann;
 80032ec:	4b04      	ldr	r3, [pc, #16]	@ (8003300 <main+0x48>)
 80032ee:	f8c3 d000 	str.w	sp, [r3]
  // What for the capture board to send commands and handle them.
  while (1)
    simpleserial_get();
 80032f2:	f000 f99d 	bl	8003630 <simpleserial_get>
  while (1)
 80032f6:	e7fc      	b.n	80032f2 <main+0x3a>
 80032f8:	08003221 	.word	0x08003221
 80032fc:	20000000 	.word	0x20000000
 8003300:	2000006c 	.word	0x2000006c

08003304 <quantized_create_neuron>:
    return new_neuron;
}



neuron quantized_create_neuron(int num_out_weights){
 8003304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003308:	4604      	mov	r4, r0
    neuron new_neuron;
    new_neuron.bias = 0;
    new_neuron.z = 0;
    new_neuron.a = 0;
    new_neuron.weights = (char*) malloc(num_out_weights * sizeof(char));
 800330a:	4608      	mov	r0, r1
neuron quantized_create_neuron(int num_out_weights){
 800330c:	460d      	mov	r5, r1
    new_neuron.weights = (char*) malloc(num_out_weights * sizeof(char));
 800330e:	f7fe f859 	bl	80013c4 <malloc>
    new_neuron.num_weights = num_out_weights;

    for (int i=0; i<num_out_weights; i++){
 8003312:	2700      	movs	r7, #0
    new_neuron.weights = (char*) malloc(num_out_weights * sizeof(char));
 8003314:	4606      	mov	r6, r0
        new_neuron.weights[i] = ((float)rand())/((float)RAND_MAX);
 8003316:	f04f 5840 	mov.w	r8, #805306368	@ 0x30000000
    for (int i=0; i<num_out_weights; i++){
 800331a:	42af      	cmp	r7, r5
 800331c:	db07      	blt.n	800332e <quantized_create_neuron+0x2a>
    }
    return new_neuron;
 800331e:	2300      	movs	r3, #0
 8003320:	8123      	strh	r3, [r4, #8]
 8003322:	72a3      	strb	r3, [r4, #10]
 8003324:	e9c4 5600 	strd	r5, r6, [r4]
}
 8003328:	4620      	mov	r0, r4
 800332a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        new_neuron.weights[i] = ((float)rand())/((float)RAND_MAX);
 800332e:	f7fe f937 	bl	80015a0 <rand>
 8003332:	f7fd ffd3 	bl	80012dc <__aeabi_i2f>
 8003336:	4641      	mov	r1, r8
 8003338:	f7fd f9ae 	bl	8000698 <__aeabi_fmul>
 800333c:	f7fe f822 	bl	8001384 <__aeabi_f2uiz>
 8003340:	55f0      	strb	r0, [r6, r7]
    for (int i=0; i<num_out_weights; i++){
 8003342:	3701      	adds	r7, #1
 8003344:	e7e9      	b.n	800331a <quantized_create_neuron+0x16>

08003346 <create_layer>:



layer create_layer(int num_neurons){
 8003346:	b538      	push	{r3, r4, r5, lr}
 8003348:	4604      	mov	r4, r0
    layer lay;
    lay.num_neurons = num_neurons;
    lay.neurons = (neuron*) malloc(num_neurons * sizeof(neuron));
 800334a:	200c      	movs	r0, #12
 800334c:	4348      	muls	r0, r1
layer create_layer(int num_neurons){
 800334e:	460d      	mov	r5, r1
    lay.neurons = (neuron*) malloc(num_neurons * sizeof(neuron));
 8003350:	f7fe f838 	bl	80013c4 <malloc>
    return lay;
 8003354:	e9c4 5000 	strd	r5, r0, [r4]
}
 8003358:	4620      	mov	r0, r4
 800335a:	bd38      	pop	{r3, r4, r5, pc}

0800335c <create_network>:

network create_network(int num_layers){
 800335c:	b538      	push	{r3, r4, r5, lr}
 800335e:	4604      	mov	r4, r0
    network net;
    net.num_layers = num_layers;
    net.layers = (layer*) malloc(num_layers * sizeof(layer));
 8003360:	00c8      	lsls	r0, r1, #3
network create_network(int num_layers){
 8003362:	460d      	mov	r5, r1
    net.layers = (layer*) malloc(num_layers * sizeof(layer));
 8003364:	f7fe f82e 	bl	80013c4 <malloc>
    return net;
 8003368:	e9c4 5000 	strd	r5, r0, [r4]
}
 800336c:	4620      	mov	r0, r4
 800336e:	bd38      	pop	{r3, r4, r5, pc}

08003370 <construct_quantized_network2>:
    return net;
}



network construct_quantized_network2(int num_layers, int *num_neurons) {
 8003370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003374:	4607      	mov	r7, r0
 8003376:	b085      	sub	sp, #20
 8003378:	460c      	mov	r4, r1
 800337a:	4690      	mov	r8, r2
    network net = create_network(num_layers);
 800337c:	f7ff ffee 	bl	800335c <create_network>
 8003380:	687d      	ldr	r5, [r7, #4]
    int i, j;
    for (i=0; i<num_layers; i++){
 8003382:	2600      	movs	r6, #0
 8003384:	42a6      	cmp	r6, r4
 8003386:	db16      	blt.n	80033b6 <construct_quantized_network2+0x46>
        net.layers[i] = create_layer(num_neurons[i]);
    }
    // For each layer create neurons with number of weights eqaual to the number of neurons in the following layer,
    // wherein the last layer is the output layer
    for (i=1; i<num_layers; i++){
 8003388:	2601      	movs	r6, #1
        for (j=0; j<net.layers[i - 1].num_neurons; j++){
 800338a:	f1a5 0a08 	sub.w	sl, r5, #8
            net.layers[i - 1].neurons[j] = quantized_create_neuron(net.layers[i].num_neurons);
 800338e:	f1a5 0b04 	sub.w	fp, r5, #4
    for (i=1; i<num_layers; i++){
 8003392:	42a6      	cmp	r6, r4
 8003394:	db2e      	blt.n	80033f4 <construct_quantized_network2+0x84>
        }
    }
    for (j=0; j<net.layers[num_layers - 1].num_neurons; j++){
 8003396:	f104 5400 	add.w	r4, r4, #536870912	@ 0x20000000
 800339a:	3c01      	subs	r4, #1
 800339c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80033a0:	2600      	movs	r6, #0
            net.layers[num_layers - 1].neurons[j] = quantized_create_neuron(0);
 80033a2:	f04f 090c 	mov.w	r9, #12
 80033a6:	46e8      	mov	r8, sp
    for (j=0; j<net.layers[num_layers - 1].num_neurons; j++){
 80033a8:	682b      	ldr	r3, [r5, #0]
 80033aa:	42b3      	cmp	r3, r6
 80033ac:	dc25      	bgt.n	80033fa <construct_quantized_network2+0x8a>
    }
    return net;
}
 80033ae:	4638      	mov	r0, r7
 80033b0:	b005      	add	sp, #20
 80033b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        net.layers[i] = create_layer(num_neurons[i]);
 80033b6:	f858 1026 	ldr.w	r1, [r8, r6, lsl #2]
 80033ba:	eb05 00c6 	add.w	r0, r5, r6, lsl #3
 80033be:	f7ff ffc2 	bl	8003346 <create_layer>
    for (i=0; i<num_layers; i++){
 80033c2:	3601      	adds	r6, #1
 80033c4:	e7de      	b.n	8003384 <construct_quantized_network2+0x14>
            net.layers[i - 1].neurons[j] = quantized_create_neuron(net.layers[i].num_neurons);
 80033c6:	f85b 2036 	ldr.w	r2, [fp, r6, lsl #3]
 80033ca:	f855 1036 	ldr.w	r1, [r5, r6, lsl #3]
 80033ce:	4668      	mov	r0, sp
 80033d0:	fb03 2809 	mla	r8, r3, r9, r2
 80033d4:	f7ff ff96 	bl	8003304 <quantized_create_neuron>
 80033d8:	4668      	mov	r0, sp
 80033da:	c807      	ldmia	r0, {r0, r1, r2}
 80033dc:	e888 0007 	stmia.w	r8, {r0, r1, r2}
        for (j=0; j<net.layers[i - 1].num_neurons; j++){
 80033e0:	f109 0901 	add.w	r9, r9, #1
 80033e4:	f85a 2036 	ldr.w	r2, [sl, r6, lsl #3]
 80033e8:	454a      	cmp	r2, r9
            net.layers[i - 1].neurons[j] = quantized_create_neuron(net.layers[i].num_neurons);
 80033ea:	f04f 030c 	mov.w	r3, #12
        for (j=0; j<net.layers[i - 1].num_neurons; j++){
 80033ee:	dcea      	bgt.n	80033c6 <construct_quantized_network2+0x56>
    for (i=1; i<num_layers; i++){
 80033f0:	3601      	adds	r6, #1
 80033f2:	e7ce      	b.n	8003392 <construct_quantized_network2+0x22>
        for (j=0; j<net.layers[i - 1].num_neurons; j++){
 80033f4:	f04f 0900 	mov.w	r9, #0
 80033f8:	e7f4      	b.n	80033e4 <construct_quantized_network2+0x74>
            net.layers[num_layers - 1].neurons[j] = quantized_create_neuron(0);
 80033fa:	2100      	movs	r1, #0
 80033fc:	4640      	mov	r0, r8
 80033fe:	686c      	ldr	r4, [r5, #4]
 8003400:	f7ff ff80 	bl	8003304 <quantized_create_neuron>
 8003404:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003408:	fb09 4406 	mla	r4, r9, r6, r4
 800340c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    for (j=0; j<net.layers[num_layers - 1].num_neurons; j++){
 8003410:	3601      	adds	r6, #1
 8003412:	e7c9      	b.n	80033a8 <construct_quantized_network2+0x38>

08003414 <forward>:

void forward(network net, int dummy_operations){
 8003414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003418:	466b      	mov	r3, sp
 800341a:	e883 0003 	stmia.w	r3, {r0, r1}
 800341e:	4690      	mov	r8, r2
 8003420:	4681      	mov	r9, r0
    int i, j, k;
    uint8_t result, scmd = 16;
    // for each layer
    for (i=1; i<net.num_layers; i++){
 8003422:	460d      	mov	r5, r1
 8003424:	2701      	movs	r7, #1
        
        // for each neuron in this layer
        for (j=0; j<net.layers[i].num_neurons; j++){   
            net.layers[i].neurons[j].z = net.layers[i].neurons[j].bias;
 8003426:	f04f 0a0c 	mov.w	sl, #12
    for (i=1; i<net.num_layers; i++){
 800342a:	454f      	cmp	r7, r9
 800342c:	db39      	blt.n	80034a2 <forward+0x8e>
                result = scmd *scmd;
                result = scmd *scmd;
            }
        }
    }
}
 800342e:	b004      	add	sp, #16
 8003430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            net.layers[i].neurons[j].z = net.layers[i].neurons[j].bias;
 8003434:	68ec      	ldr	r4, [r5, #12]
 8003436:	fb0a 4406 	mla	r4, sl, r6, r4
 800343a:	7a23      	ldrb	r3, [r4, #8]
 800343c:	7263      	strb	r3, [r4, #9]
            for (k=0; k<net.layers[i - 1].num_neurons; k++){
 800343e:	f8d5 c000 	ldr.w	ip, [r5]
 8003442:	2300      	movs	r3, #0
 8003444:	459c      	cmp	ip, r3
                net.layers[i].neurons[j].z = net.layers[i].neurons[j].z +
 8003446:	7a60      	ldrb	r0, [r4, #9]
            for (k=0; k<net.layers[i - 1].num_neurons; k++){
 8003448:	dc20      	bgt.n	800348c <forward+0x78>
            if(i < net.num_layers-1){
 800344a:	f109 33ff 	add.w	r3, r9, #4294967295
 800344e:	42bb      	cmp	r3, r7
            net.layers[i].neurons[j].a = net.layers[i].neurons[j].z;
 8003450:	72a0      	strb	r0, [r4, #10]
            if(i < net.num_layers-1){
 8003452:	dc11      	bgt.n	8003478 <forward+0x64>
                net.layers[i].neurons[j].a = 1/(1+exp(-net.layers[i].neurons[j].z));
 8003454:	4240      	negs	r0, r0
 8003456:	f7fd fb25 	bl	8000aa4 <__aeabi_i2d>
 800345a:	f7fc fe99 	bl	8000190 <exp>
 800345e:	4b16      	ldr	r3, [pc, #88]	@ (80034b8 <forward+0xa4>)
 8003460:	2200      	movs	r2, #0
 8003462:	f7fd f9d3 	bl	800080c <__adddf3>
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	2000      	movs	r0, #0
 800346c:	4912      	ldr	r1, [pc, #72]	@ (80034b8 <forward+0xa4>)
 800346e:	f7fd fcad 	bl	8000dcc <__aeabi_ddiv>
 8003472:	f7fd fe59 	bl	8001128 <__aeabi_d2uiz>
 8003476:	72a0      	strb	r0, [r4, #10]
        for (j=0; j<net.layers[i].num_neurons; j++){   
 8003478:	3601      	adds	r6, #1
 800347a:	68ab      	ldr	r3, [r5, #8]
 800347c:	429e      	cmp	r6, r3
 800347e:	dbd9      	blt.n	8003434 <forward+0x20>
        if (dummy_operations > 0){
 8003480:	f1b8 0f00 	cmp.w	r8, #0
 8003484:	dc0f      	bgt.n	80034a6 <forward+0x92>
    for (i=1; i<net.num_layers; i++){
 8003486:	3701      	adds	r7, #1
 8003488:	3508      	adds	r5, #8
 800348a:	e7ce      	b.n	800342a <forward+0x16>
                ((net.layers[i-1].neurons[k].weights[j]) * (net.layers[i-1].neurons[k].a));
 800348c:	686a      	ldr	r2, [r5, #4]
 800348e:	fb0a 2203 	mla	r2, sl, r3, r2
            for (k=0; k<net.layers[i - 1].num_neurons; k++){
 8003492:	3301      	adds	r3, #1
                ((net.layers[i-1].neurons[k].weights[j]) * (net.layers[i-1].neurons[k].a));
 8003494:	6851      	ldr	r1, [r2, #4]
 8003496:	7a92      	ldrb	r2, [r2, #10]
 8003498:	5d89      	ldrb	r1, [r1, r6]
                net.layers[i].neurons[j].z = net.layers[i].neurons[j].z +
 800349a:	fb01 0202 	mla	r2, r1, r2, r0
 800349e:	7262      	strb	r2, [r4, #9]
            for (k=0; k<net.layers[i - 1].num_neurons; k++){
 80034a0:	e7d0      	b.n	8003444 <forward+0x30>
        for (j=0; j<net.layers[i].num_neurons; j++){   
 80034a2:	2600      	movs	r6, #0
 80034a4:	e7e9      	b.n	800347a <forward+0x66>
            for (volatile int dummy_i = 0; dummy_i<10; dummy_i++) {
 80034a6:	2300      	movs	r3, #0
 80034a8:	9303      	str	r3, [sp, #12]
 80034aa:	9b03      	ldr	r3, [sp, #12]
 80034ac:	2b09      	cmp	r3, #9
 80034ae:	dcea      	bgt.n	8003486 <forward+0x72>
 80034b0:	9b03      	ldr	r3, [sp, #12]
 80034b2:	3301      	adds	r3, #1
 80034b4:	e7f8      	b.n	80034a8 <forward+0x94>
 80034b6:	bf00      	nop
 80034b8:	3ff00000 	.word	0x3ff00000

080034bc <ss_crc>:


// 0xA6 formerly 
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 80034bc:	b510      	push	{r4, lr}
 80034be:	4602      	mov	r2, r0
	unsigned int k = 0;
	uint8_t crc = 0x00;
	while (len--) {
 80034c0:	4401      	add	r1, r0
	uint8_t crc = 0x00;
 80034c2:	2000      	movs	r0, #0
	while (len--) {
 80034c4:	428a      	cmp	r2, r1
 80034c6:	d100      	bne.n	80034ca <ss_crc+0xe>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
		}
	}
	return crc;

}
 80034c8:	bd10      	pop	{r4, pc}
		crc ^= *buf++;
 80034ca:	f812 3b01 	ldrb.w	r3, [r2], #1
 80034ce:	2408      	movs	r4, #8
 80034d0:	4058      	eors	r0, r3
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 80034d2:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80034d6:	ea4f 0340 	mov.w	r3, r0, lsl #1
 80034da:	bf18      	it	ne
 80034dc:	f083 034d 	eorne.w	r3, r3, #77	@ 0x4d
		for (k = 0; k < 8; k++) {
 80034e0:	3c01      	subs	r4, #1
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 80034e2:	b2d8      	uxtb	r0, r3
		for (k = 0; k < 8; k++) {
 80034e4:	d1f5      	bne.n	80034d2 <ss_crc+0x16>
 80034e6:	e7ed      	b.n	80034c4 <ss_crc+0x8>

080034e8 <stuff_data>:
    return 0x00;

}

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
 80034e8:	b530      	push	{r4, r5, lr}
	uint8_t i = 1;
	uint8_t last = 0;
 80034ea:	2200      	movs	r2, #0
 80034ec:	4604      	mov	r4, r0
	uint8_t i = 1;
 80034ee:	2301      	movs	r3, #1
	for (; i < len; i++) {
 80034f0:	428b      	cmp	r3, r1
 80034f2:	d301      	bcc.n	80034f8 <stuff_data+0x10>
			buf[last] = i - last;
			last = i;
		}
	}
	return 0x00;
}
 80034f4:	2000      	movs	r0, #0
 80034f6:	bd30      	pop	{r4, r5, pc}
		if (buf[i] == FRAME_BYTE) {
 80034f8:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80034fc:	b915      	cbnz	r5, 8003504 <stuff_data+0x1c>
			buf[last] = i - last;
 80034fe:	1a9d      	subs	r5, r3, r2
 8003500:	5485      	strb	r5, [r0, r2]
 8003502:	461a      	mov	r2, r3
	for (; i < len; i++) {
 8003504:	3301      	adds	r3, #1
 8003506:	b2db      	uxtb	r3, r3
 8003508:	e7f2      	b.n	80034f0 <stuff_data+0x8>

0800350a <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 800350a:	b530      	push	{r4, r5, lr}
	uint8_t next = buf[0];
 800350c:	7804      	ldrb	r4, [r0, #0]
	buf[0] = 0x00;
 800350e:	2500      	movs	r5, #0
{
 8003510:	4602      	mov	r2, r0
	buf[0] = 0x00;
 8003512:	7005      	strb	r5, [r0, #0]
	uint8_t next = buf[0];
 8003514:	4620      	mov	r0, r4
	//len -= 1;
	uint8_t tmp = next;
	while ((next < len) && tmp != 0) {
 8003516:	4288      	cmp	r0, r1
 8003518:	d200      	bcs.n	800351c <unstuff_data+0x12>
 800351a:	b904      	cbnz	r4, 800351e <unstuff_data+0x14>
		tmp = buf[next];
		buf[next] = FRAME_BYTE;
		next += tmp;
	}
	return next;
}
 800351c:	bd30      	pop	{r4, r5, pc}
		tmp = buf[next];
 800351e:	5c14      	ldrb	r4, [r2, r0]
		buf[next] = FRAME_BYTE;
 8003520:	5415      	strb	r5, [r2, r0]
		next += tmp;
 8003522:	1903      	adds	r3, r0, r4
 8003524:	b2d8      	uxtb	r0, r3
 8003526:	e7f6      	b.n	8003516 <unstuff_data+0xc>

08003528 <simpleserial_addcmd>:
	simpleserial_addcmd('v', 0, check_version);
    simpleserial_addcmd('w', 0, ss_get_commands);
}

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 8003528:	b538      	push	{r3, r4, r5, lr}
	if(num_commands >= MAX_SS_CMDS) {
 800352a:	4d0b      	ldr	r5, [pc, #44]	@ (8003558 <simpleserial_addcmd+0x30>)
 800352c:	682b      	ldr	r3, [r5, #0]
 800352e:	2b0f      	cmp	r3, #15
 8003530:	dd04      	ble.n	800353c <simpleserial_addcmd+0x14>
		putch('a');
 8003532:	2061      	movs	r0, #97	@ 0x61
		return 1;
	}

	if(len >= MAX_SS_LEN) {
		putch('b');
 8003534:	f000 f9b2 	bl	800389c <putch>
		return 1;
 8003538:	2001      	movs	r0, #1
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
	num_commands++;

	return 0;
}
 800353a:	bd38      	pop	{r3, r4, r5, pc}
	if(len >= MAX_SS_LEN) {
 800353c:	29ff      	cmp	r1, #255	@ 0xff
 800353e:	d901      	bls.n	8003544 <simpleserial_addcmd+0x1c>
		putch('b');
 8003540:	2062      	movs	r0, #98	@ 0x62
 8003542:	e7f7      	b.n	8003534 <simpleserial_addcmd+0xc>
	commands[num_commands].c   = c;
 8003544:	240c      	movs	r4, #12
 8003546:	fb04 5403 	mla	r4, r4, r3, r5
	num_commands++;
 800354a:	3301      	adds	r3, #1
	commands[num_commands].c   = c;
 800354c:	7120      	strb	r0, [r4, #4]
	commands[num_commands].fp  = fp;
 800354e:	e9c4 1202 	strd	r1, r2, [r4, #8]
	num_commands++;
 8003552:	602b      	str	r3, [r5, #0]
	return 0;
 8003554:	2000      	movs	r0, #0
 8003556:	e7f0      	b.n	800353a <simpleserial_addcmd+0x12>
 8003558:	20000070 	.word	0x20000070

0800355c <simpleserial_init>:
{
 800355c:	b508      	push	{r3, lr}
	simpleserial_addcmd('v', 0, check_version);
 800355e:	4a06      	ldr	r2, [pc, #24]	@ (8003578 <simpleserial_init+0x1c>)
 8003560:	2100      	movs	r1, #0
 8003562:	2076      	movs	r0, #118	@ 0x76
 8003564:	f7ff ffe0 	bl	8003528 <simpleserial_addcmd>
}
 8003568:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    simpleserial_addcmd('w', 0, ss_get_commands);
 800356c:	4a03      	ldr	r2, [pc, #12]	@ (800357c <simpleserial_init+0x20>)
 800356e:	2100      	movs	r1, #0
 8003570:	2077      	movs	r0, #119	@ 0x77
 8003572:	f7ff bfd9 	b.w	8003528 <simpleserial_addcmd>
 8003576:	bf00      	nop
 8003578:	080035d7 	.word	0x080035d7
 800357c:	080035f5 	.word	0x080035f5

08003580 <simpleserial_put>:
	simpleserial_put('e', 0x01, &err);
	return;
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8003580:	b570      	push	{r4, r5, r6, lr}
 8003582:	b0c0      	sub	sp, #256	@ 0x100
 8003584:	460c      	mov	r4, r1
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 8003586:	2500      	movs	r5, #0
{
 8003588:	4611      	mov	r1, r2
	data_buf[1] = c;
 800358a:	f88d 0001 	strb.w	r0, [sp, #1]
	data_buf[2] = size;
	int i = 0;
	for (; i < size; i++) {
		data_buf[i + 3] = output[i];
 800358e:	4622      	mov	r2, r4
 8003590:	f10d 0003 	add.w	r0, sp, #3
	data_buf[2] = size;
 8003594:	f88d 4002 	strb.w	r4, [sp, #2]
	data_buf[0] = 0x00;
 8003598:	f88d 5000 	strb.w	r5, [sp]
		data_buf[i + 3] = output[i];
 800359c:	f7fe fb1c 	bl	8001bd8 <memcpy>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 80035a0:	1ca1      	adds	r1, r4, #2
 80035a2:	b2c9      	uxtb	r1, r1
 80035a4:	f10d 0001 	add.w	r0, sp, #1
 80035a8:	f7ff ff88 	bl	80034bc <ss_crc>
 80035ac:	eb0d 0304 	add.w	r3, sp, r4
	data_buf[i + 4] = 0x00;
 80035b0:	1d26      	adds	r6, r4, #4
	stuff_data(data_buf, i + 5);
 80035b2:	1d61      	adds	r1, r4, #5
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 80035b4:	70d8      	strb	r0, [r3, #3]
	stuff_data(data_buf, i + 5);
 80035b6:	b2c9      	uxtb	r1, r1
 80035b8:	4668      	mov	r0, sp
	data_buf[i + 4] = 0x00;
 80035ba:	f80d 5006 	strb.w	r5, [sp, r6]
	stuff_data(data_buf, i + 5);
 80035be:	f7ff ff93 	bl	80034e8 <stuff_data>
	for (int i = 0; i < size + 5; i++) {
 80035c2:	466c      	mov	r4, sp
		putch(data_buf[i]);
 80035c4:	f814 0b01 	ldrb.w	r0, [r4], #1
	for (int i = 0; i < size + 5; i++) {
 80035c8:	3501      	adds	r5, #1
		putch(data_buf[i]);
 80035ca:	f000 f967 	bl	800389c <putch>
	for (int i = 0; i < size + 5; i++) {
 80035ce:	42ae      	cmp	r6, r5
 80035d0:	daf8      	bge.n	80035c4 <simpleserial_put+0x44>
	}
}
 80035d2:	b040      	add	sp, #256	@ 0x100
 80035d4:	bd70      	pop	{r4, r5, r6, pc}

080035d6 <check_version>:
{
 80035d6:	b507      	push	{r0, r1, r2, lr}
	uint8_t ver = SS_VER;
 80035d8:	2303      	movs	r3, #3
	simpleserial_put('r', 1, &ver);
 80035da:	f10d 0207 	add.w	r2, sp, #7
 80035de:	2101      	movs	r1, #1
 80035e0:	2072      	movs	r0, #114	@ 0x72
	uint8_t ver = SS_VER;
 80035e2:	f88d 3007 	strb.w	r3, [sp, #7]
	simpleserial_put('r', 1, &ver);
 80035e6:	f7ff ffcb 	bl	8003580 <simpleserial_put>
}
 80035ea:	2000      	movs	r0, #0
 80035ec:	b003      	add	sp, #12
 80035ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80035f2:	0000      	movs	r0, r0

080035f4 <ss_get_commands>:
{
 80035f4:	b530      	push	{r4, r5, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80035f6:	480d      	ldr	r0, [pc, #52]	@ (800362c <ss_get_commands+0x38>)
 80035f8:	7801      	ldrb	r1, [r0, #0]
{
 80035fa:	b085      	sub	sp, #20
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80035fc:	2200      	movs	r2, #0
        cmd_chars[i] = commands[i].c;
 80035fe:	240c      	movs	r4, #12
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8003600:	b2d3      	uxtb	r3, r2
 8003602:	428b      	cmp	r3, r1
 8003604:	f102 0201 	add.w	r2, r2, #1
 8003608:	db06      	blt.n	8003618 <ss_get_commands+0x24>
    simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 800360a:	466a      	mov	r2, sp
 800360c:	2072      	movs	r0, #114	@ 0x72
 800360e:	f7ff ffb7 	bl	8003580 <simpleserial_put>
}
 8003612:	2000      	movs	r0, #0
 8003614:	b005      	add	sp, #20
 8003616:	bd30      	pop	{r4, r5, pc}
        cmd_chars[i] = commands[i].c;
 8003618:	f103 0510 	add.w	r5, r3, #16
 800361c:	fb04 0303 	mla	r3, r4, r3, r0
 8003620:	446d      	add	r5, sp
 8003622:	791b      	ldrb	r3, [r3, #4]
 8003624:	f805 3c10 	strb.w	r3, [r5, #-16]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8003628:	e7ea      	b.n	8003600 <ss_get_commands+0xc>
 800362a:	bf00      	nop
 800362c:	20000070 	.word	0x20000070

08003630 <simpleserial_get>:
{
 8003630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003634:	b0c2      	sub	sp, #264	@ 0x108
	uint8_t err = 0;
 8003636:	2500      	movs	r5, #0
 8003638:	ae02      	add	r6, sp, #8
 800363a:	f88d 5007 	strb.w	r5, [sp, #7]
	for (int i = 0; i < 4; i++) {
 800363e:	4634      	mov	r4, r6
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 8003640:	f000 f912 	bl	8003868 <getch>
 8003644:	f806 0b01 	strb.w	r0, [r6], #1
		if (data_buf[i] == FRAME_BYTE) {
 8003648:	b958      	cbnz	r0, 8003662 <simpleserial_get+0x32>
			goto ERROR;
 800364a:	2005      	movs	r0, #5
			err = SS_ERR_FRAME_BYTE;
 800364c:	f88d 0007 	strb.w	r0, [sp, #7]
	simpleserial_put('e', 0x01, &err);
 8003650:	f10d 0207 	add.w	r2, sp, #7
 8003654:	2101      	movs	r1, #1
 8003656:	2065      	movs	r0, #101	@ 0x65
 8003658:	f7ff ff92 	bl	8003580 <simpleserial_put>
}
 800365c:	b042      	add	sp, #264	@ 0x108
 800365e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < 4; i++) {
 8003662:	3501      	adds	r5, #1
 8003664:	2d04      	cmp	r5, #4
 8003666:	d1eb      	bne.n	8003640 <simpleserial_get+0x10>
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8003668:	4629      	mov	r1, r5
 800366a:	4620      	mov	r0, r4
 800366c:	f7ff ff4d 	bl	800350a <unstuff_data>
	for(c = 0; c < num_commands; c++)
 8003670:	4f24      	ldr	r7, [pc, #144]	@ (8003704 <simpleserial_get+0xd4>)
		if(commands[c].c == data_buf[1])
 8003672:	7861      	ldrb	r1, [r4, #1]
	for(c = 0; c < num_commands; c++)
 8003674:	683a      	ldr	r2, [r7, #0]
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8003676:	4680      	mov	r8, r0
	for(c = 0; c < num_commands; c++)
 8003678:	2300      	movs	r3, #0
		if(commands[c].c == data_buf[1])
 800367a:	200c      	movs	r0, #12
	for(c = 0; c < num_commands; c++)
 800367c:	fa5f f983 	uxtb.w	r9, r3
 8003680:	4591      	cmp	r9, r2
 8003682:	db02      	blt.n	800368a <simpleserial_get+0x5a>
	if (c == num_commands) {
 8003684:	d107      	bne.n	8003696 <simpleserial_get+0x66>
 8003686:	2001      	movs	r0, #1
 8003688:	e7e0      	b.n	800364c <simpleserial_get+0x1c>
		if(commands[c].c == data_buf[1])
 800368a:	fb00 7609 	mla	r6, r0, r9, r7
 800368e:	3301      	adds	r3, #1
 8003690:	7936      	ldrb	r6, [r6, #4]
 8003692:	428e      	cmp	r6, r1
 8003694:	d1f2      	bne.n	800367c <simpleserial_get+0x4c>
	if ((data_buf[3] + 5) < next_frame) {
 8003696:	78e3      	ldrb	r3, [r4, #3]
 8003698:	3305      	adds	r3, #5
 800369a:	4543      	cmp	r3, r8
 800369c:	da02      	bge.n	80036a4 <simpleserial_get+0x74>
		goto ERROR;
 800369e:	2004      	movs	r0, #4
 80036a0:	e7d4      	b.n	800364c <simpleserial_get+0x1c>
	for (; i < data_buf[3] + 5; i++) {
 80036a2:	4635      	mov	r5, r6
		data_buf[i] = getch();
 80036a4:	f000 f8e0 	bl	8003868 <getch>
 80036a8:	5560      	strb	r0, [r4, r5]
		if (data_buf[i] == FRAME_BYTE) {
 80036aa:	2800      	cmp	r0, #0
 80036ac:	d0cd      	beq.n	800364a <simpleserial_get+0x1a>
	for (; i < data_buf[3] + 5; i++) {
 80036ae:	78e3      	ldrb	r3, [r4, #3]
 80036b0:	1c6e      	adds	r6, r5, #1
 80036b2:	3304      	adds	r3, #4
 80036b4:	42b3      	cmp	r3, r6
 80036b6:	daf4      	bge.n	80036a2 <simpleserial_get+0x72>
	data_buf[i] = getch();
 80036b8:	f000 f8d6 	bl	8003868 <getch>
 80036bc:	55a0      	strb	r0, [r4, r6]
	if (data_buf[i] != FRAME_BYTE) {
 80036be:	2800      	cmp	r0, #0
 80036c0:	d1ed      	bne.n	800369e <simpleserial_get+0x6e>
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 80036c2:	f1c8 0301 	rsb	r3, r8, #1
 80036c6:	fa53 f186 	uxtab	r1, r3, r6
 80036ca:	b2c9      	uxtb	r1, r1
 80036cc:	fa5f fa86 	uxtb.w	sl, r6
 80036d0:	eb04 0008 	add.w	r0, r4, r8
 80036d4:	f7ff ff19 	bl	800350a <unstuff_data>
	uint8_t crc = ss_crc(data_buf+1, i-2);
 80036d8:	f1aa 0102 	sub.w	r1, sl, #2
 80036dc:	b2c9      	uxtb	r1, r1
 80036de:	f10d 0009 	add.w	r0, sp, #9
 80036e2:	f7ff feeb 	bl	80034bc <ss_crc>
	if (crc != data_buf[i-1]) {
 80036e6:	5d63      	ldrb	r3, [r4, r5]
 80036e8:	4283      	cmp	r3, r0
 80036ea:	d109      	bne.n	8003700 <simpleserial_get+0xd0>
	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 80036ec:	230c      	movs	r3, #12
 80036ee:	fb03 7709 	mla	r7, r3, r9, r7
 80036f2:	78e2      	ldrb	r2, [r4, #3]
 80036f4:	68fd      	ldr	r5, [r7, #12]
 80036f6:	78a1      	ldrb	r1, [r4, #2]
 80036f8:	7860      	ldrb	r0, [r4, #1]
 80036fa:	446b      	add	r3, sp
 80036fc:	47a8      	blx	r5
 80036fe:	e7a5      	b.n	800364c <simpleserial_get+0x1c>
 8003700:	2002      	movs	r0, #2
 8003702:	e7a3      	b.n	800364c <simpleserial_get+0x1c>
 8003704:	20000070 	.word	0x20000070

08003708 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8003708:	b570      	push	{r4, r5, r6, lr}
 800370a:	b096      	sub	sp, #88	@ 0x58
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 800370c:	2400      	movs	r4, #0
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 800370e:	2603      	movs	r6, #3
 8003710:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003714:	a80c      	add	r0, sp, #48	@ 0x30

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8003716:	2501      	movs	r5, #1
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8003718:	e9cd 630c 	strd	r6, r3, [sp, #48]	@ 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 800371c:	9410      	str	r4, [sp, #64]	@ 0x40
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 800371e:	9414      	str	r4, [sp, #80]	@ 0x50
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8003720:	f000 f8d4 	bl	80038cc <HAL_RCC_OscConfig>
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8003724:	230f      	movs	r3, #15
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8003726:	4621      	mov	r1, r4
 8003728:	a802      	add	r0, sp, #8
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 800372a:	e9cd 3502 	strd	r3, r5, [sp, #8]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800372e:	e9cd 4404 	strd	r4, r4, [sp, #16]
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003732:	9406      	str	r4, [sp, #24]
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8003734:	f000 fb1c 	bl	8003d70 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003738:	4b11      	ldr	r3, [pc, #68]	@ (8003780 <platform_init+0x78>)
 800373a:	695a      	ldr	r2, [r3, #20]
 800373c:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8003740:	615a      	str	r2, [r3, #20]
 8003742:	695b      	ldr	r3, [r3, #20]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003744:	e9cd 4609 	strd	r4, r6, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003748:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 800374c:	4c0d      	ldr	r4, [pc, #52]	@ (8003784 <platform_init+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800374e:	9301      	str	r3, [sp, #4]
 8003750:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8003752:	a907      	add	r1, sp, #28
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8003754:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8003758:	4620      	mov	r0, r4
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800375a:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 800375e:	f000 fba7 	bl	8003eb0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8003762:	462a      	mov	r2, r5
 8003764:	4620      	mov	r0, r4
 8003766:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800376a:	f000 fc61 	bl	8004030 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 800376e:	462a      	mov	r2, r5
 8003770:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003774:	4620      	mov	r0, r4
 8003776:	f000 fc5b 	bl	8004030 <HAL_GPIO_WritePin>
#endif
}
 800377a:	b016      	add	sp, #88	@ 0x58
 800377c:	bd70      	pop	{r4, r5, r6, pc}
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000
 8003784:	48000800 	.word	0x48000800

08003788 <init_uart>:

void init_uart(void)
{
 8003788:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 800378a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
{
 800378e:	b088      	sub	sp, #32
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8003790:	2302      	movs	r3, #2
 8003792:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GpioInit.Pull      = GPIO_PULLUP;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003796:	2101      	movs	r1, #1
 8003798:	2303      	movs	r3, #3
 800379a:	e9cd 1305 	strd	r1, r3, [sp, #20]
  GpioInit.Alternate = GPIO_AF7_USART1;
  __GPIOA_CLK_ENABLE();
 800379e:	4c16      	ldr	r4, [pc, #88]	@ (80037f8 <init_uart+0x70>)
  GpioInit.Alternate = GPIO_AF7_USART1;
 80037a0:	2307      	movs	r3, #7
 80037a2:	9307      	str	r3, [sp, #28]
  __GPIOA_CLK_ENABLE();
 80037a4:	6963      	ldr	r3, [r4, #20]
 80037a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037aa:	6163      	str	r3, [r4, #20]
 80037ac:	6963      	ldr	r3, [r4, #20]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b2:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80037b4:	a903      	add	r1, sp, #12
 80037b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  __GPIOA_CLK_ENABLE();
 80037ba:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 80037bc:	f000 fb78 	bl	8003eb0 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 80037c0:	480e      	ldr	r0, [pc, #56]	@ (80037fc <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 80037c2:	f8df c03c 	ldr.w	ip, [pc, #60]	@ 8003800 <init_uart+0x78>
 80037c6:	f44f 3361 	mov.w	r3, #230400	@ 0x38400
 80037ca:	e9c0 c300 	strd	ip, r3, [r0]
  #else
  UartHandle.Init.BaudRate   = 38400;
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80037ce:	2300      	movs	r3, #0
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80037d0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 80037d4:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80037d6:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80037d8:	230c      	movs	r3, #12
 80037da:	6143      	str	r3, [r0, #20]
  __USART1_CLK_ENABLE();
 80037dc:	69a3      	ldr	r3, [r4, #24]
 80037de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037e2:	61a3      	str	r3, [r4, #24]
 80037e4:	69a3      	ldr	r3, [r4, #24]
 80037e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037ea:	9302      	str	r3, [sp, #8]
 80037ec:	9b02      	ldr	r3, [sp, #8]
  HAL_UART_Init(&UartHandle);
 80037ee:	f000 fd5b 	bl	80042a8 <HAL_UART_Init>
}
 80037f2:	b008      	add	sp, #32
 80037f4:	bd10      	pop	{r4, pc}
 80037f6:	bf00      	nop
 80037f8:	40021000 	.word	0x40021000
 80037fc:	20000134 	.word	0x20000134
 8003800:	40013800 	.word	0x40013800

08003804 <trigger_setup>:

void trigger_setup(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003804:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <trigger_setup+0x44>)
{
 8003806:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800380e:	615a      	str	r2, [r3, #20]
 8003810:	695b      	ldr	r3, [r3, #20]
{
 8003812:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	9b00      	ldr	r3, [sp, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 800381c:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8003820:	2301      	movs	r3, #1
 8003822:	e9cd 4301 	strd	r4, r3, [sp, #4]
  GpioInit.Pull      = GPIO_NOPULL;
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003826:	2500      	movs	r5, #0
 8003828:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GpioInit);
 800382a:	a901      	add	r1, sp, #4
 800382c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003830:	e9cd 5303 	strd	r5, r3, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8003834:	f000 fb3c 	bl	8003eb0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8003838:	462a      	mov	r2, r5
 800383a:	4621      	mov	r1, r4
 800383c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003840:	f000 fbf6 	bl	8004030 <HAL_GPIO_WritePin>
}
 8003844:	b007      	add	sp, #28
 8003846:	bd30      	pop	{r4, r5, pc}
 8003848:	40021000 	.word	0x40021000

0800384c <trigger_high>:

void trigger_high(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 800384c:	2201      	movs	r2, #1
 800384e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003852:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003856:	f000 bbeb 	b.w	8004030 <HAL_GPIO_WritePin>

0800385a <trigger_low>:
}

void trigger_low(void)
{
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 800385a:	2200      	movs	r2, #0
 800385c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003860:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003864:	f000 bbe4 	b.w	8004030 <HAL_GPIO_WritePin>

08003868 <getch>:
}

char getch(void)
{
 8003868:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 800386a:	4d0a      	ldr	r5, [pc, #40]	@ (8003894 <getch+0x2c>)
    USART1->ICR |= (1 << 3);
 800386c:	4c0a      	ldr	r4, [pc, #40]	@ (8003898 <getch+0x30>)
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 800386e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003872:	2201      	movs	r2, #1
 8003874:	f10d 0107 	add.w	r1, sp, #7
 8003878:	4628      	mov	r0, r5
 800387a:	f000 fd95 	bl	80043a8 <HAL_UART_Receive>
 800387e:	b918      	cbnz	r0, 8003888 <getch+0x20>
  //putch(d);
  return d;
}
 8003880:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003884:	b003      	add	sp, #12
 8003886:	bd30      	pop	{r4, r5, pc}
    USART1->ICR |= (1 << 3);
 8003888:	6a23      	ldr	r3, [r4, #32]
 800388a:	f043 0308 	orr.w	r3, r3, #8
 800388e:	6223      	str	r3, [r4, #32]
 8003890:	e7ed      	b.n	800386e <getch+0x6>
 8003892:	bf00      	nop
 8003894:	20000134 	.word	0x20000134
 8003898:	40013800 	.word	0x40013800

0800389c <putch>:

void putch(char c)
{
 800389c:	b507      	push	{r0, r1, r2, lr}
  uint8_t d  = c;
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 800389e:	f241 3388 	movw	r3, #5000	@ 0x1388
  uint8_t d  = c;
 80038a2:	f88d 0007 	strb.w	r0, [sp, #7]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 80038a6:	2201      	movs	r2, #1
 80038a8:	f10d 0107 	add.w	r1, sp, #7
 80038ac:	4802      	ldr	r0, [pc, #8]	@ (80038b8 <putch+0x1c>)
 80038ae:	f000 fd25 	bl	80042fc <HAL_UART_Transmit>
}
 80038b2:	b003      	add	sp, #12
 80038b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80038b8:	20000134 	.word	0x20000134

080038bc <HAL_GetTick>:
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
	return hal_sys_tick++;
 80038bc:	4b02      	ldr	r3, [pc, #8]	@ (80038c8 <HAL_GetTick+0xc>)
 80038be:	6818      	ldr	r0, [r3, #0]
 80038c0:	1c42      	adds	r2, r0, #1
 80038c2:	601a      	str	r2, [r3, #0]
}
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	200001a4 	.word	0x200001a4

080038cc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038cc:	6803      	ldr	r3, [r0, #0]
{
 80038ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d2:	07d9      	lsls	r1, r3, #31
{
 80038d4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d6:	d411      	bmi.n	80038fc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d8:	6823      	ldr	r3, [r4, #0]
 80038da:	079a      	lsls	r2, r3, #30
 80038dc:	f100 808b 	bmi.w	80039f6 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	071e      	lsls	r6, r3, #28
 80038e4:	f100 80f3 	bmi.w	8003ace <HAL_RCC_OscConfig+0x202>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	075d      	lsls	r5, r3, #29
 80038ec:	f100 8136 	bmi.w	8003b5c <HAL_RCC_OscConfig+0x290>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038f0:	69e2      	ldr	r2, [r4, #28]
 80038f2:	2a00      	cmp	r2, #0
 80038f4:	f040 81b8 	bne.w	8003c68 <HAL_RCC_OscConfig+0x39c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80038f8:	2000      	movs	r0, #0
 80038fa:	e01f      	b.n	800393c <HAL_RCC_OscConfig+0x70>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80038fc:	49b3      	ldr	r1, [pc, #716]	@ (8003bcc <HAL_RCC_OscConfig+0x300>)
 80038fe:	684b      	ldr	r3, [r1, #4]
 8003900:	f003 030c 	and.w	r3, r3, #12
 8003904:	2b04      	cmp	r3, #4
 8003906:	d007      	beq.n	8003918 <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003908:	684b      	ldr	r3, [r1, #4]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	2b08      	cmp	r3, #8
 8003910:	d117      	bne.n	8003942 <HAL_RCC_OscConfig+0x76>
 8003912:	684b      	ldr	r3, [r1, #4]
 8003914:	03db      	lsls	r3, r3, #15
 8003916:	d514      	bpl.n	8003942 <HAL_RCC_OscConfig+0x76>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800391c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003920:	6809      	ldr	r1, [r1, #0]
 8003922:	fa93 f3a3 	rbit	r3, r3
 8003926:	2201      	movs	r2, #1
 8003928:	fab3 f383 	clz	r3, r3
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	420b      	tst	r3, r1
 8003932:	d0d1      	beq.n	80038d8 <HAL_RCC_OscConfig+0xc>
 8003934:	6863      	ldr	r3, [r4, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1ce      	bne.n	80038d8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800393a:	2001      	movs	r0, #1
}
 800393c:	b003      	add	sp, #12
 800393e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003942:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003946:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800394a:	d120      	bne.n	800398e <HAL_RCC_OscConfig+0xc2>
 800394c:	680b      	ldr	r3, [r1, #0]
 800394e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003952:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003954:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8003956:	f023 030f 	bic.w	r3, r3, #15
 800395a:	4313      	orrs	r3, r2
 800395c:	62cb      	str	r3, [r1, #44]	@ 0x2c
        tickstart = HAL_GetTick();
 800395e:	f7ff ffad 	bl	80038bc <HAL_GetTick>
 8003962:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
 8003966:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003968:	2701      	movs	r7, #1
 800396a:	fa96 f3a6 	rbit	r3, r6
 800396e:	680a      	ldr	r2, [r1, #0]
 8003970:	fa96 f3a6 	rbit	r3, r6
 8003974:	fab3 f383 	clz	r3, r3
 8003978:	fa07 f303 	lsl.w	r3, r7, r3
 800397c:	4213      	tst	r3, r2
 800397e:	d1ab      	bne.n	80038d8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003980:	f7ff ff9c 	bl	80038bc <HAL_GetTick>
 8003984:	1b40      	subs	r0, r0, r5
 8003986:	2864      	cmp	r0, #100	@ 0x64
 8003988:	d9ef      	bls.n	800396a <HAL_RCC_OscConfig+0x9e>
            return HAL_TIMEOUT;
 800398a:	2003      	movs	r0, #3
 800398c:	e7d6      	b.n	800393c <HAL_RCC_OscConfig+0x70>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800398e:	bb1b      	cbnz	r3, 80039d8 <HAL_RCC_OscConfig+0x10c>
 8003990:	680b      	ldr	r3, [r1, #0]
 8003992:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003996:	600b      	str	r3, [r1, #0]
 8003998:	680b      	ldr	r3, [r1, #0]
 800399a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800399e:	600b      	str	r3, [r1, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039a0:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80039a2:	f023 030f 	bic.w	r3, r3, #15
 80039a6:	4313      	orrs	r3, r2
 80039a8:	62cb      	str	r3, [r1, #44]	@ 0x2c
        tickstart = HAL_GetTick();
 80039aa:	f7ff ff87 	bl	80038bc <HAL_GetTick>
 80039ae:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
 80039b2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039b4:	2701      	movs	r7, #1
 80039b6:	fa96 f3a6 	rbit	r3, r6
 80039ba:	680a      	ldr	r2, [r1, #0]
 80039bc:	fa96 f3a6 	rbit	r3, r6
 80039c0:	fab3 f383 	clz	r3, r3
 80039c4:	fa07 f303 	lsl.w	r3, r7, r3
 80039c8:	4213      	tst	r3, r2
 80039ca:	d085      	beq.n	80038d8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039cc:	f7ff ff76 	bl	80038bc <HAL_GetTick>
 80039d0:	1b40      	subs	r0, r0, r5
 80039d2:	2864      	cmp	r0, #100	@ 0x64
 80039d4:	d9ef      	bls.n	80039b6 <HAL_RCC_OscConfig+0xea>
 80039d6:	e7d8      	b.n	800398a <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039dc:	680b      	ldr	r3, [r1, #0]
 80039de:	d103      	bne.n	80039e8 <HAL_RCC_OscConfig+0x11c>
 80039e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039e4:	600b      	str	r3, [r1, #0]
 80039e6:	e7b1      	b.n	800394c <HAL_RCC_OscConfig+0x80>
 80039e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ec:	600b      	str	r3, [r1, #0]
 80039ee:	680b      	ldr	r3, [r1, #0]
 80039f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039f4:	e7ad      	b.n	8003952 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80039f6:	4975      	ldr	r1, [pc, #468]	@ (8003bcc <HAL_RCC_OscConfig+0x300>)
 80039f8:	684b      	ldr	r3, [r1, #4]
 80039fa:	f013 0f0c 	tst.w	r3, #12
 80039fe:	d007      	beq.n	8003a10 <HAL_RCC_OscConfig+0x144>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a00:	684b      	ldr	r3, [r1, #4]
 8003a02:	f003 030c 	and.w	r3, r3, #12
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d11f      	bne.n	8003a4a <HAL_RCC_OscConfig+0x17e>
 8003a0a:	684b      	ldr	r3, [r1, #4]
 8003a0c:	03df      	lsls	r7, r3, #15
 8003a0e:	d41c      	bmi.n	8003a4a <HAL_RCC_OscConfig+0x17e>
 8003a10:	2302      	movs	r3, #2
 8003a12:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a16:	6808      	ldr	r0, [r1, #0]
 8003a18:	fa93 f3a3 	rbit	r3, r3
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	fab3 f383 	clz	r3, r3
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	4203      	tst	r3, r0
 8003a28:	d002      	beq.n	8003a30 <HAL_RCC_OscConfig+0x164>
 8003a2a:	6923      	ldr	r3, [r4, #16]
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d184      	bne.n	800393a <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a30:	6808      	ldr	r0, [r1, #0]
 8003a32:	22f8      	movs	r2, #248	@ 0xf8
 8003a34:	fa92 f2a2 	rbit	r2, r2
 8003a38:	6963      	ldr	r3, [r4, #20]
 8003a3a:	fab2 f282 	clz	r2, r2
 8003a3e:	4093      	lsls	r3, r2
 8003a40:	f020 02f8 	bic.w	r2, r0, #248	@ 0xf8
 8003a44:	4313      	orrs	r3, r2
 8003a46:	600b      	str	r3, [r1, #0]
 8003a48:	e74a      	b.n	80038e0 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a4a:	6922      	ldr	r2, [r4, #16]
 8003a4c:	2501      	movs	r5, #1
 8003a4e:	b1f2      	cbz	r2, 8003a8e <HAL_RCC_OscConfig+0x1c2>
 8003a50:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8003a54:	fab3 f383 	clz	r3, r3
 8003a58:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a5c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	2702      	movs	r7, #2
 8003a64:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8003a66:	f7ff ff29 	bl	80038bc <HAL_GetTick>
 8003a6a:	4606      	mov	r6, r0
 8003a6c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a70:	680a      	ldr	r2, [r1, #0]
 8003a72:	fa97 f3a7 	rbit	r3, r7
 8003a76:	fab3 f383 	clz	r3, r3
 8003a7a:	fa05 f303 	lsl.w	r3, r5, r3
 8003a7e:	4213      	tst	r3, r2
 8003a80:	d1d6      	bne.n	8003a30 <HAL_RCC_OscConfig+0x164>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a82:	f7ff ff1b 	bl	80038bc <HAL_GetTick>
 8003a86:	1b80      	subs	r0, r0, r6
 8003a88:	2802      	cmp	r0, #2
 8003a8a:	d9ef      	bls.n	8003a6c <HAL_RCC_OscConfig+0x1a0>
 8003a8c:	e77d      	b.n	800398a <HAL_RCC_OscConfig+0xbe>
 8003a8e:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8003a92:	fab3 f383 	clz	r3, r3
 8003a96:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a9a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	2702      	movs	r7, #2
 8003aa2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003aa4:	f7ff ff0a 	bl	80038bc <HAL_GetTick>
 8003aa8:	4606      	mov	r6, r0
 8003aaa:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aae:	680a      	ldr	r2, [r1, #0]
 8003ab0:	fa97 f3a7 	rbit	r3, r7
 8003ab4:	fab3 f383 	clz	r3, r3
 8003ab8:	fa05 f303 	lsl.w	r3, r5, r3
 8003abc:	4213      	tst	r3, r2
 8003abe:	f43f af0f 	beq.w	80038e0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac2:	f7ff fefb 	bl	80038bc <HAL_GetTick>
 8003ac6:	1b80      	subs	r0, r0, r6
 8003ac8:	2802      	cmp	r0, #2
 8003aca:	d9ee      	bls.n	8003aaa <HAL_RCC_OscConfig+0x1de>
 8003acc:	e75d      	b.n	800398a <HAL_RCC_OscConfig+0xbe>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ace:	69a2      	ldr	r2, [r4, #24]
 8003ad0:	4d3e      	ldr	r5, [pc, #248]	@ (8003bcc <HAL_RCC_OscConfig+0x300>)
 8003ad2:	483f      	ldr	r0, [pc, #252]	@ (8003bd0 <HAL_RCC_OscConfig+0x304>)
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	b302      	cbz	r2, 8003b1a <HAL_RCC_OscConfig+0x24e>
 8003ad8:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_ENABLE();
 8003adc:	fab3 f383 	clz	r3, r3
 8003ae0:	4403      	add	r3, r0
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	2602      	movs	r6, #2
 8003ae6:	6019      	str	r1, [r3, #0]
      tickstart = HAL_GetTick();
 8003ae8:	f7ff fee8 	bl	80038bc <HAL_GetTick>
 8003aec:	4607      	mov	r7, r0
 8003aee:	fa96 f3a6 	rbit	r3, r6
 8003af2:	fa96 f3a6 	rbit	r3, r6
 8003af6:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afa:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8003afc:	fa96 f3a6 	rbit	r3, r6
 8003b00:	fab3 f383 	clz	r3, r3
 8003b04:	fa01 f303 	lsl.w	r3, r1, r3
 8003b08:	4213      	tst	r3, r2
 8003b0a:	f47f aeed 	bne.w	80038e8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b0e:	f7ff fed5 	bl	80038bc <HAL_GetTick>
 8003b12:	1bc0      	subs	r0, r0, r7
 8003b14:	2802      	cmp	r0, #2
 8003b16:	d9ea      	bls.n	8003aee <HAL_RCC_OscConfig+0x222>
 8003b18:	e737      	b.n	800398a <HAL_RCC_OscConfig+0xbe>
 8003b1a:	fa91 f3a1 	rbit	r3, r1
      __HAL_RCC_LSI_DISABLE();
 8003b1e:	fab3 f383 	clz	r3, r3
 8003b22:	4403      	add	r3, r0
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	2602      	movs	r6, #2
 8003b28:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003b2a:	f7ff fec7 	bl	80038bc <HAL_GetTick>
 8003b2e:	4607      	mov	r7, r0
 8003b30:	fa96 f3a6 	rbit	r3, r6
 8003b34:	fa96 f3a6 	rbit	r3, r6
 8003b38:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b3c:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8003b3e:	fa96 f3a6 	rbit	r3, r6
 8003b42:	fab3 f383 	clz	r3, r3
 8003b46:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4a:	4213      	tst	r3, r2
 8003b4c:	f43f aecc 	beq.w	80038e8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b50:	f7ff feb4 	bl	80038bc <HAL_GetTick>
 8003b54:	1bc0      	subs	r0, r0, r7
 8003b56:	2802      	cmp	r0, #2
 8003b58:	d9ea      	bls.n	8003b30 <HAL_RCC_OscConfig+0x264>
 8003b5a:	e716      	b.n	800398a <HAL_RCC_OscConfig+0xbe>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b5c:	491b      	ldr	r1, [pc, #108]	@ (8003bcc <HAL_RCC_OscConfig+0x300>)
 8003b5e:	69cb      	ldr	r3, [r1, #28]
 8003b60:	00d8      	lsls	r0, r3, #3
 8003b62:	d431      	bmi.n	8003bc8 <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b64:	69cb      	ldr	r3, [r1, #28]
 8003b66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b6a:	61cb      	str	r3, [r1, #28]
 8003b6c:	69cb      	ldr	r3, [r1, #28]
 8003b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b72:	9301      	str	r3, [sp, #4]
 8003b74:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003b76:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b78:	4e16      	ldr	r6, [pc, #88]	@ (8003bd4 <HAL_RCC_OscConfig+0x308>)
 8003b7a:	6833      	ldr	r3, [r6, #0]
 8003b7c:	05da      	lsls	r2, r3, #23
 8003b7e:	d52b      	bpl.n	8003bd8 <HAL_RCC_OscConfig+0x30c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b80:	68e3      	ldr	r3, [r4, #12]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d138      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x32c>
 8003b86:	6a0b      	ldr	r3, [r1, #32]
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8003b8e:	f7ff fe95 	bl	80038bc <HAL_GetTick>
 8003b92:	2602      	movs	r6, #2
 8003b94:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b96:	f04f 0801 	mov.w	r8, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b9a:	f241 3988 	movw	r9, #5000	@ 0x1388
 8003b9e:	fa96 f3a6 	rbit	r3, r6
 8003ba2:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba6:	6a0a      	ldr	r2, [r1, #32]
 8003ba8:	fa96 f3a6 	rbit	r3, r6
 8003bac:	fab3 f383 	clz	r3, r3
 8003bb0:	fa08 f303 	lsl.w	r3, r8, r3
 8003bb4:	4213      	tst	r3, r2
 8003bb6:	d051      	beq.n	8003c5c <HAL_RCC_OscConfig+0x390>
    if(pwrclkchanged == SET)
 8003bb8:	2d00      	cmp	r5, #0
 8003bba:	f43f ae99 	beq.w	80038f0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bbe:	69cb      	ldr	r3, [r1, #28]
 8003bc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bc4:	61cb      	str	r3, [r1, #28]
 8003bc6:	e693      	b.n	80038f0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8003bc8:	2500      	movs	r5, #0
 8003bca:	e7d5      	b.n	8003b78 <HAL_RCC_OscConfig+0x2ac>
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	10908120 	.word	0x10908120
 8003bd4:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bd8:	6833      	ldr	r3, [r6, #0]
 8003bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bde:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003be0:	f7ff fe6c 	bl	80038bc <HAL_GetTick>
 8003be4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be6:	6833      	ldr	r3, [r6, #0]
 8003be8:	05db      	lsls	r3, r3, #23
 8003bea:	d4c9      	bmi.n	8003b80 <HAL_RCC_OscConfig+0x2b4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bec:	f7ff fe66 	bl	80038bc <HAL_GetTick>
 8003bf0:	1bc0      	subs	r0, r0, r7
 8003bf2:	2864      	cmp	r0, #100	@ 0x64
 8003bf4:	d9f7      	bls.n	8003be6 <HAL_RCC_OscConfig+0x31a>
 8003bf6:	e6c8      	b.n	800398a <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bf8:	bb13      	cbnz	r3, 8003c40 <HAL_RCC_OscConfig+0x374>
 8003bfa:	6a0b      	ldr	r3, [r1, #32]
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	620b      	str	r3, [r1, #32]
 8003c02:	6a0b      	ldr	r3, [r1, #32]
 8003c04:	f023 0304 	bic.w	r3, r3, #4
 8003c08:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8003c0a:	f7ff fe57 	bl	80038bc <HAL_GetTick>
 8003c0e:	2602      	movs	r6, #2
 8003c10:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c12:	f04f 0801 	mov.w	r8, #1
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c16:	f241 3988 	movw	r9, #5000	@ 0x1388
 8003c1a:	fa96 f3a6 	rbit	r3, r6
 8003c1e:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c22:	6a0a      	ldr	r2, [r1, #32]
 8003c24:	fa96 f3a6 	rbit	r3, r6
 8003c28:	fab3 f383 	clz	r3, r3
 8003c2c:	fa08 f303 	lsl.w	r3, r8, r3
 8003c30:	4213      	tst	r3, r2
 8003c32:	d0c1      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c34:	f7ff fe42 	bl	80038bc <HAL_GetTick>
 8003c38:	1bc0      	subs	r0, r0, r7
 8003c3a:	4548      	cmp	r0, r9
 8003c3c:	d9ed      	bls.n	8003c1a <HAL_RCC_OscConfig+0x34e>
 8003c3e:	e6a4      	b.n	800398a <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c40:	2b05      	cmp	r3, #5
 8003c42:	6a0b      	ldr	r3, [r1, #32]
 8003c44:	d103      	bne.n	8003c4e <HAL_RCC_OscConfig+0x382>
 8003c46:	f043 0304 	orr.w	r3, r3, #4
 8003c4a:	620b      	str	r3, [r1, #32]
 8003c4c:	e79b      	b.n	8003b86 <HAL_RCC_OscConfig+0x2ba>
 8003c4e:	f023 0301 	bic.w	r3, r3, #1
 8003c52:	620b      	str	r3, [r1, #32]
 8003c54:	6a0b      	ldr	r3, [r1, #32]
 8003c56:	f023 0304 	bic.w	r3, r3, #4
 8003c5a:	e797      	b.n	8003b8c <HAL_RCC_OscConfig+0x2c0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c5c:	f7ff fe2e 	bl	80038bc <HAL_GetTick>
 8003c60:	1bc0      	subs	r0, r0, r7
 8003c62:	4548      	cmp	r0, r9
 8003c64:	d99b      	bls.n	8003b9e <HAL_RCC_OscConfig+0x2d2>
 8003c66:	e690      	b.n	800398a <HAL_RCC_OscConfig+0xbe>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c68:	493f      	ldr	r1, [pc, #252]	@ (8003d68 <HAL_RCC_OscConfig+0x49c>)
 8003c6a:	684b      	ldr	r3, [r1, #4]
 8003c6c:	f003 030c 	and.w	r3, r3, #12
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	f43f ae62 	beq.w	800393a <HAL_RCC_OscConfig+0x6e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c76:	2a02      	cmp	r2, #2
 8003c78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c7c:	d150      	bne.n	8003d20 <HAL_RCC_OscConfig+0x454>
 8003c7e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8003c82:	fab3 f383 	clz	r3, r3
 8003c86:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003c8a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003c94:	f7ff fe12 	bl	80038bc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c98:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8003d6c <HAL_RCC_OscConfig+0x4a0>
        tickstart = HAL_GetTick();
 8003c9c:	4606      	mov	r6, r0
 8003c9e:	f04f 7700 	mov.w	r7, #33554432	@ 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ca2:	2501      	movs	r5, #1
 8003ca4:	fa97 f3a7 	rbit	r3, r7
 8003ca8:	680a      	ldr	r2, [r1, #0]
 8003caa:	fa97 f3a7 	rbit	r3, r7
 8003cae:	fab3 f383 	clz	r3, r3
 8003cb2:	fa05 f303 	lsl.w	r3, r5, r3
 8003cb6:	4213      	tst	r3, r2
 8003cb8:	d12c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x448>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cba:	e9d4 0308 	ldrd	r0, r3, [r4, #32]
 8003cbe:	684a      	ldr	r2, [r1, #4]
 8003cc0:	4303      	orrs	r3, r0
 8003cc2:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	604b      	str	r3, [r1, #4]
 8003cca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cce:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8003cd2:	fab3 f383 	clz	r3, r3
 8003cd6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003cda:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003cde:	009b      	lsls	r3, r3, #2
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce0:	4f22      	ldr	r7, [pc, #136]	@ (8003d6c <HAL_RCC_OscConfig+0x4a0>)
        __HAL_RCC_PLL_ENABLE();
 8003ce2:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8003ce4:	f7ff fdea 	bl	80038bc <HAL_GetTick>
 8003ce8:	f04f 7500 	mov.w	r5, #33554432	@ 0x2000000
 8003cec:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cee:	2601      	movs	r6, #1
 8003cf0:	fa95 f3a5 	rbit	r3, r5
 8003cf4:	680a      	ldr	r2, [r1, #0]
 8003cf6:	fa95 f3a5 	rbit	r3, r5
 8003cfa:	fab3 f383 	clz	r3, r3
 8003cfe:	fa06 f303 	lsl.w	r3, r6, r3
 8003d02:	4213      	tst	r3, r2
 8003d04:	f47f adf8 	bne.w	80038f8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d08:	f7ff fdd8 	bl	80038bc <HAL_GetTick>
 8003d0c:	1b00      	subs	r0, r0, r4
 8003d0e:	42b8      	cmp	r0, r7
 8003d10:	d9ee      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x424>
 8003d12:	e63a      	b.n	800398a <HAL_RCC_OscConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d14:	f7ff fdd2 	bl	80038bc <HAL_GetTick>
 8003d18:	1b83      	subs	r3, r0, r6
 8003d1a:	4543      	cmp	r3, r8
 8003d1c:	d9c2      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x3d8>
 8003d1e:	e634      	b.n	800398a <HAL_RCC_OscConfig+0xbe>
 8003d20:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8003d24:	fab3 f383 	clz	r3, r3
 8003d28:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d2c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003d36:	f7ff fdc1 	bl	80038bc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d3a:	4f0c      	ldr	r7, [pc, #48]	@ (8003d6c <HAL_RCC_OscConfig+0x4a0>)
        tickstart = HAL_GetTick();
 8003d3c:	4604      	mov	r4, r0
 8003d3e:	f04f 7500 	mov.w	r5, #33554432	@ 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d42:	2601      	movs	r6, #1
 8003d44:	fa95 f3a5 	rbit	r3, r5
 8003d48:	680a      	ldr	r2, [r1, #0]
 8003d4a:	fa95 f3a5 	rbit	r3, r5
 8003d4e:	fab3 f383 	clz	r3, r3
 8003d52:	fa06 f303 	lsl.w	r3, r6, r3
 8003d56:	4213      	tst	r3, r2
 8003d58:	f43f adce 	beq.w	80038f8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d5c:	f7ff fdae 	bl	80038bc <HAL_GetTick>
 8003d60:	1b00      	subs	r0, r0, r4
 8003d62:	42b8      	cmp	r0, r7
 8003d64:	d9ee      	bls.n	8003d44 <HAL_RCC_OscConfig+0x478>
 8003d66:	e610      	b.n	800398a <HAL_RCC_OscConfig+0xbe>
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	00030d40 	.word	0x00030d40

08003d70 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003d70:	4a4d      	ldr	r2, [pc, #308]	@ (8003ea8 <HAL_RCC_ClockConfig+0x138>)
{
 8003d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003d74:	6813      	ldr	r3, [r2, #0]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	428b      	cmp	r3, r1
{
 8003d7c:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8003d7e:	d311      	bcc.n	8003da4 <HAL_RCC_ClockConfig+0x34>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d80:	6822      	ldr	r2, [r4, #0]
 8003d82:	0795      	lsls	r5, r2, #30
 8003d84:	d41a      	bmi.n	8003dbc <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d86:	07d0      	lsls	r0, r2, #31
 8003d88:	d420      	bmi.n	8003dcc <HAL_RCC_ClockConfig+0x5c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003d8a:	4a47      	ldr	r2, [pc, #284]	@ (8003ea8 <HAL_RCC_ClockConfig+0x138>)
 8003d8c:	6813      	ldr	r3, [r2, #0]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	428b      	cmp	r3, r1
 8003d94:	d86c      	bhi.n	8003e70 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d96:	6822      	ldr	r2, [r4, #0]
 8003d98:	0751      	lsls	r1, r2, #29
 8003d9a:	d474      	bmi.n	8003e86 <HAL_RCC_ClockConfig+0x116>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d9c:	0713      	lsls	r3, r2, #28
 8003d9e:	d47a      	bmi.n	8003e96 <HAL_RCC_ClockConfig+0x126>
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8003da0:	2000      	movs	r0, #0
 8003da2:	e00a      	b.n	8003dba <HAL_RCC_ClockConfig+0x4a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da4:	6813      	ldr	r3, [r2, #0]
 8003da6:	f023 0307 	bic.w	r3, r3, #7
 8003daa:	430b      	orrs	r3, r1
 8003dac:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003dae:	6813      	ldr	r3, [r2, #0]
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	428b      	cmp	r3, r1
 8003db6:	d0e3      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 8003db8:	2001      	movs	r0, #1
}
 8003dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dbc:	483b      	ldr	r0, [pc, #236]	@ (8003eac <HAL_RCC_ClockConfig+0x13c>)
 8003dbe:	68a5      	ldr	r5, [r4, #8]
 8003dc0:	6843      	ldr	r3, [r0, #4]
 8003dc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dc6:	432b      	orrs	r3, r5
 8003dc8:	6043      	str	r3, [r0, #4]
 8003dca:	e7dc      	b.n	8003d86 <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dcc:	6862      	ldr	r2, [r4, #4]
 8003dce:	4d37      	ldr	r5, [pc, #220]	@ (8003eac <HAL_RCC_ClockConfig+0x13c>)
 8003dd0:	2a01      	cmp	r2, #1
 8003dd2:	d125      	bne.n	8003e20 <HAL_RCC_ClockConfig+0xb0>
 8003dd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003dd8:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ddc:	6828      	ldr	r0, [r5, #0]
 8003dde:	fa93 f3a3 	rbit	r3, r3
 8003de2:	fab3 f383 	clz	r3, r3
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	4203      	tst	r3, r0
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dec:	d0e4      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x48>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dee:	686b      	ldr	r3, [r5, #4]
 8003df0:	f023 0303 	bic.w	r3, r3, #3
 8003df4:	4313      	orrs	r3, r2
 8003df6:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8003df8:	f7ff fd60 	bl	80038bc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dfc:	6863      	ldr	r3, [r4, #4]
 8003dfe:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8003e00:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e02:	f241 3788 	movw	r7, #5000	@ 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e06:	d11c      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e08:	686b      	ldr	r3, [r5, #4]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d0bb      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e12:	f7ff fd53 	bl	80038bc <HAL_GetTick>
 8003e16:	1b80      	subs	r0, r0, r6
 8003e18:	42b8      	cmp	r0, r7
 8003e1a:	d9f5      	bls.n	8003e08 <HAL_RCC_ClockConfig+0x98>
          return HAL_TIMEOUT;
 8003e1c:	2003      	movs	r0, #3
 8003e1e:	e7cc      	b.n	8003dba <HAL_RCC_ClockConfig+0x4a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e20:	2a02      	cmp	r2, #2
 8003e22:	bf0c      	ite	eq
 8003e24:	f04f 7300 	moveq.w	r3, #33554432	@ 0x2000000
 8003e28:	2302      	movne	r3, #2
 8003e2a:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e2e:	682e      	ldr	r6, [r5, #0]
 8003e30:	fa93 f3a3 	rbit	r3, r3
 8003e34:	2001      	movs	r0, #1
 8003e36:	fab3 f383 	clz	r3, r3
 8003e3a:	fa00 f303 	lsl.w	r3, r0, r3
 8003e3e:	4233      	tst	r3, r6
 8003e40:	e7d4      	b.n	8003dec <HAL_RCC_ClockConfig+0x7c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d10f      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xf6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e46:	686b      	ldr	r3, [r5, #4]
 8003e48:	f003 030c 	and.w	r3, r3, #12
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d09c      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e50:	f7ff fd34 	bl	80038bc <HAL_GetTick>
 8003e54:	1b80      	subs	r0, r0, r6
 8003e56:	42b8      	cmp	r0, r7
 8003e58:	d9f5      	bls.n	8003e46 <HAL_RCC_ClockConfig+0xd6>
 8003e5a:	e7df      	b.n	8003e1c <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e5c:	f7ff fd2e 	bl	80038bc <HAL_GetTick>
 8003e60:	1b80      	subs	r0, r0, r6
 8003e62:	42b8      	cmp	r0, r7
 8003e64:	d8da      	bhi.n	8003e1c <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e66:	686b      	ldr	r3, [r5, #4]
 8003e68:	f013 0f0c 	tst.w	r3, #12
 8003e6c:	d1f6      	bne.n	8003e5c <HAL_RCC_ClockConfig+0xec>
 8003e6e:	e78c      	b.n	8003d8a <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e70:	6813      	ldr	r3, [r2, #0]
 8003e72:	f023 0307 	bic.w	r3, r3, #7
 8003e76:	430b      	orrs	r3, r1
 8003e78:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e7a:	6813      	ldr	r3, [r2, #0]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	428b      	cmp	r3, r1
 8003e82:	d199      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x48>
 8003e84:	e787      	b.n	8003d96 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e86:	4909      	ldr	r1, [pc, #36]	@ (8003eac <HAL_RCC_ClockConfig+0x13c>)
 8003e88:	68e0      	ldr	r0, [r4, #12]
 8003e8a:	684b      	ldr	r3, [r1, #4]
 8003e8c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003e90:	4303      	orrs	r3, r0
 8003e92:	604b      	str	r3, [r1, #4]
 8003e94:	e782      	b.n	8003d9c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e96:	4a05      	ldr	r2, [pc, #20]	@ (8003eac <HAL_RCC_ClockConfig+0x13c>)
 8003e98:	6921      	ldr	r1, [r4, #16]
 8003e9a:	6853      	ldr	r3, [r2, #4]
 8003e9c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8003ea0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003ea4:	6053      	str	r3, [r2, #4]
 8003ea6:	e77b      	b.n	8003da0 <HAL_RCC_ClockConfig+0x30>
 8003ea8:	40022000 	.word	0x40022000
 8003eac:	40021000 	.word	0x40021000

08003eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eb4:	f8df 816c 	ldr.w	r8, [pc, #364]	@ 8004024 <HAL_GPIO_Init+0x174>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003eb8:	4c5b      	ldr	r4, [pc, #364]	@ (8004028 <HAL_GPIO_Init+0x178>)
  uint32_t position = 0x00U;
 8003eba:	2300      	movs	r3, #0
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8003ebc:	f04f 090f 	mov.w	r9, #15
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003ec0:	680a      	ldr	r2, [r1, #0]
 8003ec2:	fa32 f503 	lsrs.w	r5, r2, r3
 8003ec6:	d102      	bne.n	8003ece <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8003ec8:	b003      	add	sp, #12
 8003eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003ece:	2501      	movs	r5, #1
 8003ed0:	fa05 fa03 	lsl.w	sl, r5, r3
    if(iocurrent)
 8003ed4:	ea1a 0202 	ands.w	r2, sl, r2
 8003ed8:	f000 8099 	beq.w	800400e <HAL_GPIO_Init+0x15e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003edc:	684d      	ldr	r5, [r1, #4]
 8003ede:	f025 0e10 	bic.w	lr, r5, #16
 8003ee2:	f1be 0f02 	cmp.w	lr, #2
 8003ee6:	d111      	bne.n	8003f0c <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3];
 8003ee8:	08df      	lsrs	r7, r3, #3
 8003eea:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003eee:	f003 0c07 	and.w	ip, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8003ef2:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ef4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003ef8:	fa09 fb0c 	lsl.w	fp, r9, ip
 8003efc:	ea26 0b0b 	bic.w	fp, r6, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f00:	690e      	ldr	r6, [r1, #16]
 8003f02:	fa06 f60c 	lsl.w	r6, r6, ip
 8003f06:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->AFR[position >> 3] = temp;
 8003f0a:	623e      	str	r6, [r7, #32]
      temp = GPIOx->MODER;
 8003f0c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003f14:	2603      	movs	r6, #3
 8003f16:	fa06 f70c 	lsl.w	r7, r6, ip
 8003f1a:	ea2b 0b07 	bic.w	fp, fp, r7
 8003f1e:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f20:	f005 0703 	and.w	r7, r5, #3
 8003f24:	fa07 f70c 	lsl.w	r7, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f28:	f10e 3eff 	add.w	lr, lr, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f2c:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f30:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 8003f34:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f36:	d811      	bhi.n	8003f5c <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8003f38:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f3a:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f3e:	68cf      	ldr	r7, [r1, #12]
 8003f40:	fa07 f70c 	lsl.w	r7, r7, ip
 8003f44:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8003f48:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003f4a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f4c:	ea27 0e0a 	bic.w	lr, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f50:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8003f54:	409f      	lsls	r7, r3
 8003f56:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8003f5a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8003f5c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f5e:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f60:	688e      	ldr	r6, [r1, #8]
 8003f62:	fa06 f60c 	lsl.w	r6, r6, ip
 8003f66:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8003f68:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f6a:	00ee      	lsls	r6, r5, #3
 8003f6c:	d54f      	bpl.n	800400e <HAL_GPIO_Init+0x15e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f6e:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8003f72:	f046 0601 	orr.w	r6, r6, #1
 8003f76:	f8c8 6018 	str.w	r6, [r8, #24]
 8003f7a:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8003f7e:	f023 0703 	bic.w	r7, r3, #3
 8003f82:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8003f86:	f006 0601 	and.w	r6, r6, #1
 8003f8a:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 8003f8e:	9601      	str	r6, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8003f90:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f94:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8003f96:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8003f98:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003f9c:	fa09 fe0c 	lsl.w	lr, r9, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003fa0:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8003fa4:	ea26 0e0e 	bic.w	lr, r6, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003fa8:	d033      	beq.n	8004012 <HAL_GPIO_Init+0x162>
 8003faa:	4e20      	ldr	r6, [pc, #128]	@ (800402c <HAL_GPIO_Init+0x17c>)
 8003fac:	42b0      	cmp	r0, r6
 8003fae:	d032      	beq.n	8004016 <HAL_GPIO_Init+0x166>
 8003fb0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003fb4:	42b0      	cmp	r0, r6
 8003fb6:	d030      	beq.n	800401a <HAL_GPIO_Init+0x16a>
 8003fb8:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003fbc:	42b0      	cmp	r0, r6
 8003fbe:	d02e      	beq.n	800401e <HAL_GPIO_Init+0x16e>
 8003fc0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003fc4:	42b0      	cmp	r0, r6
 8003fc6:	bf14      	ite	ne
 8003fc8:	2605      	movne	r6, #5
 8003fca:	2604      	moveq	r6, #4
 8003fcc:	fa06 f60c 	lsl.w	r6, r6, ip
 8003fd0:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8003fd4:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8003fd6:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8003fd8:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fda:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
        temp &= ~((uint32_t)iocurrent);
 8003fde:	bf0c      	ite	eq
 8003fe0:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8003fe2:	4316      	orrne	r6, r2
        EXTI->IMR = temp;
 8003fe4:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8003fe6:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fe8:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8003fec:	bf0c      	ite	eq
 8003fee:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8003ff0:	4316      	orrne	r6, r2
        EXTI->EMR = temp;
 8003ff2:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8003ff4:	68a6      	ldr	r6, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ff6:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8003ffa:	bf0c      	ite	eq
 8003ffc:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8003ffe:	4316      	orrne	r6, r2
        EXTI->RTSR = temp;
 8004000:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8004002:	68e6      	ldr	r6, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004004:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8004006:	bf54      	ite	pl
 8004008:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800400a:	4316      	orrmi	r6, r2
        EXTI->FTSR = temp;
 800400c:	60e6      	str	r6, [r4, #12]
    position++;
 800400e:	3301      	adds	r3, #1
 8004010:	e756      	b.n	8003ec0 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004012:	2600      	movs	r6, #0
 8004014:	e7da      	b.n	8003fcc <HAL_GPIO_Init+0x11c>
 8004016:	2601      	movs	r6, #1
 8004018:	e7d8      	b.n	8003fcc <HAL_GPIO_Init+0x11c>
 800401a:	2602      	movs	r6, #2
 800401c:	e7d6      	b.n	8003fcc <HAL_GPIO_Init+0x11c>
 800401e:	2603      	movs	r6, #3
 8004020:	e7d4      	b.n	8003fcc <HAL_GPIO_Init+0x11c>
 8004022:	bf00      	nop
 8004024:	40021000 	.word	0x40021000
 8004028:	40010400 	.word	0x40010400
 800402c:	48000400 	.word	0x48000400

08004030 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004030:	b10a      	cbz	r2, 8004036 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004032:	6181      	str	r1, [r0, #24]
 8004034:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004036:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8004038:	4770      	bx	lr
 800403a:	0000      	movs	r0, r0

0800403c <UART_SetConfig>:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800403c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800403e:	6883      	ldr	r3, [r0, #8]
 8004040:	69c1      	ldr	r1, [r0, #28]
{
 8004042:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004044:	6905      	ldr	r5, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004046:	6814      	ldr	r4, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004048:	432b      	orrs	r3, r5
 800404a:	6945      	ldr	r5, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800404c:	f424 4416 	bic.w	r4, r4, #38400	@ 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004050:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004052:	f024 040c 	bic.w	r4, r4, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004056:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8004058:	4323      	orrs	r3, r4
 800405a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800405c:	6853      	ldr	r3, [r2, #4]
 800405e:	68c4      	ldr	r4, [r0, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004060:	6a05      	ldr	r5, [r0, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004062:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004066:	4323      	orrs	r3, r4
 8004068:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800406a:	6894      	ldr	r4, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800406c:	6983      	ldr	r3, [r0, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800406e:	f424 6430 	bic.w	r4, r4, #2816	@ 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004072:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004074:	4323      	orrs	r3, r4
 8004076:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004078:	4b54      	ldr	r3, [pc, #336]	@ (80041cc <UART_SetConfig+0x190>)
 800407a:	429a      	cmp	r2, r3
 800407c:	d112      	bne.n	80040a4 <UART_SetConfig+0x68>
 800407e:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 8004082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d06b      	beq.n	8004164 <UART_SetConfig+0x128>
 800408c:	2b03      	cmp	r3, #3
 800408e:	d01e      	beq.n	80040ce <UART_SetConfig+0x92>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004090:	6840      	ldr	r0, [r0, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004092:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004096:	ea4f 0350 	mov.w	r3, r0, lsr #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800409a:	f040 8089 	bne.w	80041b0 <UART_SetConfig+0x174>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800409e:	f503 0361 	add.w	r3, r3, #14745600	@ 0xe10000
 80040a2:	e01e      	b.n	80040e2 <UART_SetConfig+0xa6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040a4:	4b4a      	ldr	r3, [pc, #296]	@ (80041d0 <UART_SetConfig+0x194>)
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d11e      	bne.n	80040e8 <UART_SetConfig+0xac>
 80040aa:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 80040ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040b8:	d054      	beq.n	8004164 <UART_SetConfig+0x128>
 80040ba:	d805      	bhi.n	80040c8 <UART_SetConfig+0x8c>
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d05a      	beq.n	8004176 <UART_SetConfig+0x13a>
 80040c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040c4:	d0e4      	beq.n	8004090 <UART_SetConfig+0x54>
 80040c6:	e038      	b.n	800413a <UART_SetConfig+0xfe>
 80040c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040cc:	d135      	bne.n	800413a <UART_SetConfig+0xfe>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80040ce:	6840      	ldr	r0, [r0, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040d0:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80040d4:	ea4f 0350 	mov.w	r3, r0, lsr #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040d8:	d16f      	bne.n	80041ba <UART_SetConfig+0x17e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80040da:	f103 73f4 	add.w	r3, r3, #31981568	@ 0x1e80000
 80040de:	f503 4390 	add.w	r3, r3, #18432	@ 0x4800
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80040e2:	fbb3 f3f0 	udiv	r3, r3, r0
 80040e6:	e050      	b.n	800418a <UART_SetConfig+0x14e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040e8:	4b3a      	ldr	r3, [pc, #232]	@ (80041d4 <UART_SetConfig+0x198>)
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d10f      	bne.n	800410e <UART_SetConfig+0xd2>
 80040ee:	f503 33e4 	add.w	r3, r3, #116736	@ 0x1c800
 80040f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80040f8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80040fc:	d032      	beq.n	8004164 <UART_SetConfig+0x128>
 80040fe:	d803      	bhi.n	8004108 <UART_SetConfig+0xcc>
 8004100:	b3cb      	cbz	r3, 8004176 <UART_SetConfig+0x13a>
 8004102:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004106:	e7dd      	b.n	80040c4 <UART_SetConfig+0x88>
 8004108:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800410c:	e7de      	b.n	80040cc <UART_SetConfig+0x90>
 800410e:	4b32      	ldr	r3, [pc, #200]	@ (80041d8 <UART_SetConfig+0x19c>)
 8004110:	429a      	cmp	r2, r3
 8004112:	d10f      	bne.n	8004134 <UART_SetConfig+0xf8>
 8004114:	f503 33e2 	add.w	r3, r3, #115712	@ 0x1c400
 8004118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800411e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004122:	d01f      	beq.n	8004164 <UART_SetConfig+0x128>
 8004124:	d803      	bhi.n	800412e <UART_SetConfig+0xf2>
 8004126:	b333      	cbz	r3, 8004176 <UART_SetConfig+0x13a>
 8004128:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800412c:	e7ca      	b.n	80040c4 <UART_SetConfig+0x88>
 800412e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004132:	e7cb      	b.n	80040cc <UART_SetConfig+0x90>
 8004134:	4b29      	ldr	r3, [pc, #164]	@ (80041dc <UART_SetConfig+0x1a0>)
 8004136:	429a      	cmp	r2, r3
 8004138:	d005      	beq.n	8004146 <UART_SetConfig+0x10a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800413a:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800413e:	f04f 0001 	mov.w	r0, #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004142:	d02b      	beq.n	800419c <UART_SetConfig+0x160>
    }
  }

  return ret;

}
 8004144:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004146:	4b26      	ldr	r3, [pc, #152]	@ (80041e0 <UART_SetConfig+0x1a4>)
 8004148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800414e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004152:	d007      	beq.n	8004164 <UART_SetConfig+0x128>
 8004154:	d803      	bhi.n	800415e <UART_SetConfig+0x122>
 8004156:	b173      	cbz	r3, 8004176 <UART_SetConfig+0x13a>
 8004158:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800415c:	e7b2      	b.n	80040c4 <UART_SetConfig+0x88>
 800415e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004162:	e7b3      	b.n	80040cc <UART_SetConfig+0x90>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004164:	6840      	ldr	r0, [r0, #4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004166:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800416a:	ea4f 0350 	mov.w	r3, r0, lsr #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800416e:	d129      	bne.n	80041c4 <UART_SetConfig+0x188>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004170:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8004174:	e7b5      	b.n	80040e2 <UART_SetConfig+0xa6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004176:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800417a:	6841      	ldr	r1, [r0, #4]
 800417c:	ea4f 0351 	mov.w	r3, r1, lsr #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004180:	d10e      	bne.n	80041a0 <UART_SetConfig+0x164>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004182:	f503 0361 	add.w	r3, r3, #14745600	@ 0xe10000
 8004186:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800418a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800418c:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 800418e:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004192:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8004196:	430b      	orrs	r3, r1
 8004198:	60d3      	str	r3, [r2, #12]
 800419a:	e7d3      	b.n	8004144 <UART_SetConfig+0x108>
  uint16_t usartdiv                   = 0x0000U;
 800419c:	2300      	movs	r3, #0
 800419e:	e7f6      	b.n	800418e <UART_SetConfig+0x152>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80041a0:	f503 03e1 	add.w	r3, r3, #7372800	@ 0x708000
 80041a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80041a8:	b29b      	uxth	r3, r3
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80041aa:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80041ac:	2000      	movs	r0, #0
 80041ae:	e7c9      	b.n	8004144 <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80041b0:	f503 03e1 	add.w	r3, r3, #7372800	@ 0x708000
 80041b4:	fbb3 f3f0 	udiv	r3, r3, r0
 80041b8:	e7f6      	b.n	80041a8 <UART_SetConfig+0x16c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80041ba:	f503 0374 	add.w	r3, r3, #15990784	@ 0xf40000
 80041be:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80041c2:	e7f7      	b.n	80041b4 <UART_SetConfig+0x178>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80041c4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80041c8:	e7f4      	b.n	80041b4 <UART_SetConfig+0x178>
 80041ca:	bf00      	nop
 80041cc:	40013800 	.word	0x40013800
 80041d0:	40004400 	.word	0x40004400
 80041d4:	40004800 	.word	0x40004800
 80041d8:	40004c00 	.word	0x40004c00
 80041dc:	40005000 	.word	0x40005000
 80041e0:	40021000 	.word	0x40021000

080041e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041e8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80041ec:	4604      	mov	r4, r0
 80041ee:	4616      	mov	r6, r2
 80041f0:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f2:	6825      	ldr	r5, [r4, #0]
 80041f4:	69eb      	ldr	r3, [r5, #28]
 80041f6:	ea31 0303 	bics.w	r3, r1, r3
 80041fa:	bf0c      	ite	eq
 80041fc:	2301      	moveq	r3, #1
 80041fe:	2300      	movne	r3, #0
 8004200:	42b3      	cmp	r3, r6
 8004202:	d001      	beq.n	8004208 <UART_WaitOnFlagUntilTimeout+0x24>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004204:	2000      	movs	r0, #0
 8004206:	e016      	b.n	8004236 <UART_WaitOnFlagUntilTimeout+0x52>
    if(Timeout != HAL_MAX_DELAY)
 8004208:	f1b8 3fff 	cmp.w	r8, #4294967295
 800420c:	d0f2      	beq.n	80041f4 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800420e:	f1b8 0f00 	cmp.w	r8, #0
 8004212:	d112      	bne.n	800423a <UART_WaitOnFlagUntilTimeout+0x56>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004214:	682b      	ldr	r3, [r5, #0]
 8004216:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800421a:	602b      	str	r3, [r5, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800421c:	68ab      	ldr	r3, [r5, #8]
 800421e:	f023 0301 	bic.w	r3, r3, #1
 8004222:	60ab      	str	r3, [r5, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8004224:	2320      	movs	r3, #32
 8004226:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800422a:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
        __HAL_UNLOCK(huart);
 800422e:	2300      	movs	r3, #0
 8004230:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
        return HAL_TIMEOUT;
 8004234:	2003      	movs	r0, #3
}
 8004236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800423a:	f7ff fb3f 	bl	80038bc <HAL_GetTick>
 800423e:	1bc0      	subs	r0, r0, r7
 8004240:	4540      	cmp	r0, r8
 8004242:	d9d6      	bls.n	80041f2 <UART_WaitOnFlagUntilTimeout+0xe>
 8004244:	e7e6      	b.n	8004214 <UART_WaitOnFlagUntilTimeout+0x30>

08004246 <UART_CheckIdleState>:
{
 8004246:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004248:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424a:	2100      	movs	r1, #0
 800424c:	66c1      	str	r1, [r0, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 800424e:	f7ff fb35 	bl	80038bc <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004252:	6826      	ldr	r6, [r4, #0]
 8004254:	6833      	ldr	r3, [r6, #0]
 8004256:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8004258:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800425a:	d416      	bmi.n	800428a <UART_CheckIdleState+0x44>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800425c:	6833      	ldr	r3, [r6, #0]
 800425e:	075b      	lsls	r3, r3, #29
 8004260:	d50a      	bpl.n	8004278 <UART_CheckIdleState+0x32>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004262:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	2200      	movs	r2, #0
 800426a:	462b      	mov	r3, r5
 800426c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004270:	4620      	mov	r0, r4
 8004272:	f7ff ffb7 	bl	80041e4 <UART_WaitOnFlagUntilTimeout>
 8004276:	b9a0      	cbnz	r0, 80042a2 <UART_CheckIdleState+0x5c>
  huart->gState  = HAL_UART_STATE_READY;
 8004278:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800427a:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800427c:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
  __HAL_UNLOCK(huart);
 8004280:	f884 0068 	strb.w	r0, [r4, #104]	@ 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8004284:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a
  return HAL_OK;
 8004288:	e00c      	b.n	80042a4 <UART_CheckIdleState+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800428a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	460a      	mov	r2, r1
 8004292:	4603      	mov	r3, r0
 8004294:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004298:	4620      	mov	r0, r4
 800429a:	f7ff ffa3 	bl	80041e4 <UART_WaitOnFlagUntilTimeout>
 800429e:	2800      	cmp	r0, #0
 80042a0:	d0dc      	beq.n	800425c <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80042a2:	2003      	movs	r0, #3
}
 80042a4:	b002      	add	sp, #8
 80042a6:	bd70      	pop	{r4, r5, r6, pc}

080042a8 <HAL_UART_Init>:
{
 80042a8:	b538      	push	{r3, r4, r5, lr}
  if(huart == NULL)
 80042aa:	4604      	mov	r4, r0
 80042ac:	b320      	cbz	r0, 80042f8 <HAL_UART_Init+0x50>
  if(huart->gState == HAL_UART_STATE_RESET)
 80042ae:	f890 3069 	ldrb.w	r3, [r0, #105]	@ 0x69
 80042b2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80042b6:	b90b      	cbnz	r3, 80042bc <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 80042b8:	f880 2068 	strb.w	r2, [r0, #104]	@ 0x68
  __HAL_UART_DISABLE(huart);
 80042bc:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80042be:	2324      	movs	r3, #36	@ 0x24
 80042c0:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
  __HAL_UART_DISABLE(huart);
 80042c4:	682b      	ldr	r3, [r5, #0]
 80042c6:	f023 0301 	bic.w	r3, r3, #1
 80042ca:	602b      	str	r3, [r5, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042cc:	4620      	mov	r0, r4
 80042ce:	f7ff feb5 	bl	800403c <UART_SetConfig>
 80042d2:	2801      	cmp	r0, #1
 80042d4:	d010      	beq.n	80042f8 <HAL_UART_Init+0x50>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042d6:	686b      	ldr	r3, [r5, #4]
 80042d8:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80042dc:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042de:	68ab      	ldr	r3, [r5, #8]
 80042e0:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80042e4:	60ab      	str	r3, [r5, #8]
  __HAL_UART_ENABLE(huart);
 80042e6:	682b      	ldr	r3, [r5, #0]
 80042e8:	f043 0301 	orr.w	r3, r3, #1
 80042ec:	602b      	str	r3, [r5, #0]
  return UART_CheckIdleState(huart);
 80042ee:	4620      	mov	r0, r4
}
 80042f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return UART_CheckIdleState(huart);
 80042f4:	f7ff bfa7 	b.w	8004246 <UART_CheckIdleState>
}
 80042f8:	2001      	movs	r0, #1
 80042fa:	bd38      	pop	{r3, r4, r5, pc}

080042fc <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042fe:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004300:	f890 3069 	ldrb.w	r3, [r0, #105]	@ 0x69
 8004304:	2b20      	cmp	r3, #32
{
 8004306:	460d      	mov	r5, r1
 8004308:	4604      	mov	r4, r0
 800430a:	4611      	mov	r1, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800430c:	d14a      	bne.n	80043a4 <HAL_UART_Transmit+0xa8>
  {
    if((pData == NULL ) || (Size == 0U))
 800430e:	2d00      	cmp	r5, #0
 8004310:	d046      	beq.n	80043a0 <HAL_UART_Transmit+0xa4>
 8004312:	2a00      	cmp	r2, #0
 8004314:	d044      	beq.n	80043a0 <HAL_UART_Transmit+0xa4>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004316:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 800431a:	2b01      	cmp	r3, #1
 800431c:	d042      	beq.n	80043a4 <HAL_UART_Transmit+0xa8>
 800431e:	2301      	movs	r3, #1
 8004320:	f880 3068 	strb.w	r3, [r0, #104]	@ 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004324:	2300      	movs	r3, #0
 8004326:	66c3      	str	r3, [r0, #108]	@ 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004328:	2321      	movs	r3, #33	@ 0x21
 800432a:	f880 3069 	strb.w	r3, [r0, #105]	@ 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800432e:	f7ff fac5 	bl	80038bc <HAL_GetTick>

    huart->TxXferSize = Size;
 8004332:	f8a4 1050 	strh.w	r1, [r4, #80]	@ 0x50
    tickstart = HAL_GetTick();
 8004336:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8004338:	f8a4 1052 	strh.w	r1, [r4, #82]	@ 0x52
    while(huart->TxXferCount > 0U)
 800433c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8004340:	b292      	uxth	r2, r2
 8004342:	b962      	cbnz	r2, 800435e <HAL_UART_Transmit+0x62>
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004344:	9600      	str	r6, [sp, #0]
 8004346:	463b      	mov	r3, r7
 8004348:	2140      	movs	r1, #64	@ 0x40
 800434a:	4620      	mov	r0, r4
 800434c:	f7ff ff4a 	bl	80041e4 <UART_WaitOnFlagUntilTimeout>
 8004350:	b998      	cbnz	r0, 800437a <HAL_UART_Transmit+0x7e>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004352:	2320      	movs	r3, #32
 8004354:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004358:	f884 0068 	strb.w	r0, [r4, #104]	@ 0x68

    return HAL_OK;
 800435c:	e00e      	b.n	800437c <HAL_UART_Transmit+0x80>
      huart->TxXferCount--;
 800435e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8004362:	3a01      	subs	r2, #1
 8004364:	b292      	uxth	r2, r2
 8004366:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800436a:	463b      	mov	r3, r7
 800436c:	9600      	str	r6, [sp, #0]
 800436e:	2200      	movs	r2, #0
 8004370:	2180      	movs	r1, #128	@ 0x80
 8004372:	4620      	mov	r0, r4
 8004374:	f7ff ff36 	bl	80041e4 <UART_WaitOnFlagUntilTimeout>
 8004378:	b110      	cbz	r0, 8004380 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800437a:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800437c:	b003      	add	sp, #12
 800437e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004380:	68a3      	ldr	r3, [r4, #8]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8004382:	6822      	ldr	r2, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004388:	d107      	bne.n	800439a <HAL_UART_Transmit+0x9e>
 800438a:	6923      	ldr	r3, [r4, #16]
 800438c:	b92b      	cbnz	r3, 800439a <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800438e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8004392:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8004396:	8513      	strh	r3, [r2, #40]	@ 0x28
 8004398:	e7d0      	b.n	800433c <HAL_UART_Transmit+0x40>
 800439a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800439e:	e7fa      	b.n	8004396 <HAL_UART_Transmit+0x9a>
      return  HAL_ERROR;
 80043a0:	2001      	movs	r0, #1
 80043a2:	e7eb      	b.n	800437c <HAL_UART_Transmit+0x80>
    __HAL_LOCK(huart);
 80043a4:	2002      	movs	r0, #2
 80043a6:	e7e9      	b.n	800437c <HAL_UART_Transmit+0x80>

080043a8 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80043ac:	461e      	mov	r6, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80043ae:	f890 306a 	ldrb.w	r3, [r0, #106]	@ 0x6a
 80043b2:	2b20      	cmp	r3, #32
{
 80043b4:	460d      	mov	r5, r1
 80043b6:	4604      	mov	r4, r0
 80043b8:	4611      	mov	r1, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 80043ba:	d15c      	bne.n	8004476 <HAL_UART_Receive+0xce>
  {
    if((pData == NULL ) || (Size == 0U))
 80043bc:	2d00      	cmp	r5, #0
 80043be:	d058      	beq.n	8004472 <HAL_UART_Receive+0xca>
 80043c0:	2a00      	cmp	r2, #0
 80043c2:	d056      	beq.n	8004472 <HAL_UART_Receive+0xca>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043c4:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d054      	beq.n	8004476 <HAL_UART_Receive+0xce>
 80043cc:	2301      	movs	r3, #1
 80043ce:	f880 3068 	strb.w	r3, [r0, #104]	@ 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 80043d2:	6803      	ldr	r3, [r0, #0]
 80043d4:	f04f 32ff 	mov.w	r2, #4294967295
 80043d8:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043da:	2300      	movs	r3, #0
 80043dc:	66c3      	str	r3, [r0, #108]	@ 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043de:	2322      	movs	r3, #34	@ 0x22
 80043e0:	f880 306a 	strb.w	r3, [r0, #106]	@ 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80043e4:	f7ff fa6a 	bl	80038bc <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80043e8:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 80043ea:	f8a4 1058 	strh.w	r1, [r4, #88]	@ 0x58
    UART_MASK_COMPUTATION(huart);
 80043ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 80043f2:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 80043f4:	f8a4 105a 	strh.w	r1, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 80043f8:	d115      	bne.n	8004426 <HAL_UART_Receive+0x7e>
 80043fa:	6923      	ldr	r3, [r4, #16]
 80043fc:	b98b      	cbnz	r3, 8004422 <HAL_UART_Receive+0x7a>
 80043fe:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8004402:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004406:	f8b4 705c 	ldrh.w	r7, [r4, #92]	@ 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 800440a:	f8b4 005a 	ldrh.w	r0, [r4, #90]	@ 0x5a
 800440e:	b280      	uxth	r0, r0
 8004410:	b980      	cbnz	r0, 8004434 <HAL_UART_Receive+0x8c>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004412:	2320      	movs	r3, #32
 8004414:	f884 306a 	strb.w	r3, [r4, #106]	@ 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004418:	f884 0068 	strb.w	r0, [r4, #104]	@ 0x68
  }
  else
  {
    return HAL_BUSY;
  }
}
 800441c:	b002      	add	sp, #8
 800441e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8004422:	23ff      	movs	r3, #255	@ 0xff
 8004424:	e7ed      	b.n	8004402 <HAL_UART_Receive+0x5a>
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1ed      	bne.n	8004406 <HAL_UART_Receive+0x5e>
 800442a:	6923      	ldr	r3, [r4, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0f8      	beq.n	8004422 <HAL_UART_Receive+0x7a>
 8004430:	237f      	movs	r3, #127	@ 0x7f
 8004432:	e7e6      	b.n	8004402 <HAL_UART_Receive+0x5a>
      huart->RxXferCount--;
 8004434:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 8004438:	3a01      	subs	r2, #1
 800443a:	b292      	uxth	r2, r2
 800443c:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004440:	4643      	mov	r3, r8
 8004442:	9600      	str	r6, [sp, #0]
 8004444:	2200      	movs	r2, #0
 8004446:	2120      	movs	r1, #32
 8004448:	4620      	mov	r0, r4
 800444a:	f7ff fecb 	bl	80041e4 <UART_WaitOnFlagUntilTimeout>
 800444e:	b9a0      	cbnz	r0, 800447a <HAL_UART_Receive+0xd2>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004450:	68a2      	ldr	r2, [r4, #8]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8004452:	6823      	ldr	r3, [r4, #0]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004454:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8004458:	d106      	bne.n	8004468 <HAL_UART_Receive+0xc0>
 800445a:	6922      	ldr	r2, [r4, #16]
 800445c:	b922      	cbnz	r2, 8004468 <HAL_UART_Receive+0xc0>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 800445e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004460:	403b      	ands	r3, r7
 8004462:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8004466:	e7d0      	b.n	800440a <HAL_UART_Receive+0x62>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004468:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800446a:	403b      	ands	r3, r7
 800446c:	f805 3b01 	strb.w	r3, [r5], #1
 8004470:	e7cb      	b.n	800440a <HAL_UART_Receive+0x62>
      return  HAL_ERROR;
 8004472:	2001      	movs	r0, #1
 8004474:	e7d2      	b.n	800441c <HAL_UART_Receive+0x74>
    __HAL_LOCK(huart);
 8004476:	2002      	movs	r0, #2
 8004478:	e7d0      	b.n	800441c <HAL_UART_Receive+0x74>
        return HAL_TIMEOUT;
 800447a:	2003      	movs	r0, #3
 800447c:	e7ce      	b.n	800441c <HAL_UART_Receive+0x74>
 800447e:	0000      	movs	r0, r0

08004480 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004480:	4a0a      	ldr	r2, [pc, #40]	@ (80044ac <_sbrk+0x2c>)
 8004482:	6811      	ldr	r1, [r2, #0]
{
 8004484:	b508      	push	{r3, lr}
 8004486:	4603      	mov	r3, r0
	if (heap_end == 0)
 8004488:	b909      	cbnz	r1, 800448e <_sbrk+0xe>
		heap_end = &end;
 800448a:	4909      	ldr	r1, [pc, #36]	@ (80044b0 <_sbrk+0x30>)
 800448c:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 800448e:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8004490:	4669      	mov	r1, sp
 8004492:	4403      	add	r3, r0
 8004494:	428b      	cmp	r3, r1
 8004496:	d906      	bls.n	80044a6 <_sbrk+0x26>
	{
		errno = ENOMEM;
 8004498:	f7fd fb5c 	bl	8001b54 <__errno>
 800449c:	230c      	movs	r3, #12
 800449e:	6003      	str	r3, [r0, #0]
		return (char *) -1;
 80044a0:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (char *) prev_heap_end;
}
 80044a4:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80044a6:	6013      	str	r3, [r2, #0]
	return (char *) prev_heap_end;
 80044a8:	e7fc      	b.n	80044a4 <_sbrk+0x24>
 80044aa:	bf00      	nop
 80044ac:	200001ac 	.word	0x200001ac
 80044b0:	20000330 	.word	0x20000330

080044b4 <Reset_Handler>:
 80044b4:	2100      	movs	r1, #0
 80044b6:	e003      	b.n	80044c0 <LoopCopyDataInit>

080044b8 <CopyDataInit>:
 80044b8:	4b0b      	ldr	r3, [pc, #44]	@ (80044e8 <LoopForever+0x2>)
 80044ba:	585b      	ldr	r3, [r3, r1]
 80044bc:	5043      	str	r3, [r0, r1]
 80044be:	3104      	adds	r1, #4

080044c0 <LoopCopyDataInit>:
 80044c0:	480a      	ldr	r0, [pc, #40]	@ (80044ec <LoopForever+0x6>)
 80044c2:	4b0b      	ldr	r3, [pc, #44]	@ (80044f0 <LoopForever+0xa>)
 80044c4:	1842      	adds	r2, r0, r1
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d3f6      	bcc.n	80044b8 <CopyDataInit>
 80044ca:	4a0a      	ldr	r2, [pc, #40]	@ (80044f4 <LoopForever+0xe>)
 80044cc:	e002      	b.n	80044d4 <LoopFillZerobss>

080044ce <FillZerobss>:
 80044ce:	2300      	movs	r3, #0
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	3204      	adds	r2, #4

080044d4 <LoopFillZerobss>:
 80044d4:	4b08      	ldr	r3, [pc, #32]	@ (80044f8 <LoopForever+0x12>)
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d3f9      	bcc.n	80044ce <FillZerobss>
 80044da:	f3af 8000 	nop.w
 80044de:	f7fd fb3f 	bl	8001b60 <__libc_init_array>
 80044e2:	f7fe fee9 	bl	80032b8 <main>

080044e6 <LoopForever>:
 80044e6:	e7fe      	b.n	80044e6 <LoopForever>
 80044e8:	08004628 	.word	0x08004628
 80044ec:	20000000 	.word	0x20000000
 80044f0:	2000006c 	.word	0x2000006c
 80044f4:	2000006c 	.word	0x2000006c
 80044f8:	20000330 	.word	0x20000330

080044fc <BusFault_Handler>:
 80044fc:	e7fe      	b.n	80044fc <BusFault_Handler>
 80044fe:	0000      	movs	r0, r0

08004500 <_init>:
 8004500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004502:	bf00      	nop
 8004504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004506:	bc08      	pop	{r3}
 8004508:	469e      	mov	lr, r3
 800450a:	4770      	bx	lr

0800450c <_fini>:
 800450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450e:	bf00      	nop
 8004510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004512:	bc08      	pop	{r3}
 8004514:	469e      	mov	lr, r3
 8004516:	4770      	bx	lr
