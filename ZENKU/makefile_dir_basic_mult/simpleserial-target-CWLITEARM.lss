
simpleserial-target-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b2c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002cb4  08002cb4  00003cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cc4  08002cc4  00003ccc  2**0
                  CONTENTS
  4 .ARM          00000000  08002cc4  08002cc4  00003ccc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cc4  08002ccc  00003ccc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cc4  08002cc4  00003cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cc8  08002cc8  00003cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00003ccc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000000  08002ccc  00004000  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000158  08002ccc  00004158  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00003ccc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f43  00000000  00000000  00003cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009b9  00000000  00000000  00007c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000e6a  00000000  00000000  000085f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f8  00000000  00000000  0000945c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000198  00000000  00000000  00009654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001fe3  00000000  00000000  000097ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000014e0  00000000  00000000  0000b7cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000012  00000000  00000000  0000ccaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000072c  00000000  00000000  0000ccc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  0000d3f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000070  00000000  00000000  0000d534  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loclists 00000065  00000000  00000000  0000d5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__libc_init_array>:
 8000188:	b570      	push	{r4, r5, r6, lr}
 800018a:	4b0f      	ldr	r3, [pc, #60]	@ (80001c8 <__libc_init_array+0x40>)
 800018c:	4d0f      	ldr	r5, [pc, #60]	@ (80001cc <__libc_init_array+0x44>)
 800018e:	42ab      	cmp	r3, r5
 8000190:	eba3 0605 	sub.w	r6, r3, r5
 8000194:	d007      	beq.n	80001a6 <__libc_init_array+0x1e>
 8000196:	10b6      	asrs	r6, r6, #2
 8000198:	2400      	movs	r4, #0
 800019a:	f855 3b04 	ldr.w	r3, [r5], #4
 800019e:	3401      	adds	r4, #1
 80001a0:	4798      	blx	r3
 80001a2:	42a6      	cmp	r6, r4
 80001a4:	d8f9      	bhi.n	800019a <__libc_init_array+0x12>
 80001a6:	f002 fd79 	bl	8002c9c <_init>
 80001aa:	4d09      	ldr	r5, [pc, #36]	@ (80001d0 <__libc_init_array+0x48>)
 80001ac:	4b09      	ldr	r3, [pc, #36]	@ (80001d4 <__libc_init_array+0x4c>)
 80001ae:	1b5e      	subs	r6, r3, r5
 80001b0:	42ab      	cmp	r3, r5
 80001b2:	ea4f 06a6 	mov.w	r6, r6, asr #2
 80001b6:	d006      	beq.n	80001c6 <__libc_init_array+0x3e>
 80001b8:	2400      	movs	r4, #0
 80001ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80001be:	3401      	adds	r4, #1
 80001c0:	4798      	blx	r3
 80001c2:	42a6      	cmp	r6, r4
 80001c4:	d8f9      	bhi.n	80001ba <__libc_init_array+0x32>
 80001c6:	bd70      	pop	{r4, r5, r6, pc}
 80001c8:	08002cc4 	.word	0x08002cc4
 80001cc:	08002cc4 	.word	0x08002cc4
 80001d0:	08002cc4 	.word	0x08002cc4
 80001d4:	08002cc8 	.word	0x08002cc8

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000013c 	.word	0x2000013c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002c9c 	.word	0x08002c9c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000140 	.word	0x20000140
 8000214:	08002c9c 	.word	0x08002c9c

08000218 <one_mult>:
/// This function will handle the 'p' command send from the capture board.
/// It returns the squared version of the scmd given.
/// It does this in approximately equal time, which allows us to see clear
/// differences between different scmd values.
uint8_t one_mult(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 8000218:	b590      	push	{r4, r7, lr}
 800021a:	b08b      	sub	sp, #44	@ 0x2c
 800021c:	af00      	add	r7, sp, #0
 800021e:	603b      	str	r3, [r7, #0]
 8000220:	4603      	mov	r3, r0
 8000222:	71fb      	strb	r3, [r7, #7]
 8000224:	460b      	mov	r3, r1
 8000226:	71bb      	strb	r3, [r7, #6]
 8000228:	4613      	mov	r3, r2
 800022a:	717b      	strb	r3, [r7, #5]
  volatile uint8_t result = 0;
 800022c:	2300      	movs	r3, #0
 800022e:	777b      	strb	r3, [r7, #29]
  int arr[4] = {7,5,4,2};
 8000230:	4b1d      	ldr	r3, [pc, #116]	@ (80002a8 <one_mult+0x90>)
 8000232:	f107 040c 	add.w	r4, r7, #12
 8000236:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000238:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  unsigned char weight = 5;
 800023c:	2305      	movs	r3, #5
 800023e:	77fb      	strb	r3, [r7, #31]
    
  trigger_high();                                          // Start measurement!!!
 8000240:	f000 fd4c 	bl	8000cdc <trigger_high>
  for(int x = 0;x<100;x++){
 8000244:	2300      	movs	r3, #0
 8000246:	627b      	str	r3, [r7, #36]	@ 0x24
 8000248:	e003      	b.n	8000252 <one_mult+0x3a>
      __asm__("nop");
 800024a:	bf00      	nop
  for(int x = 0;x<100;x++){
 800024c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800024e:	3301      	adds	r3, #1
 8000250:	627b      	str	r3, [r7, #36]	@ 0x24
 8000252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000254:	2b63      	cmp	r3, #99	@ 0x63
 8000256:	ddf8      	ble.n	800024a <one_mult+0x32>
  }
  unsigned char num = (unsigned char)(weight * buf[0]);
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	7ffa      	ldrb	r2, [r7, #31]
 800025e:	fb12 f303 	smulbb	r3, r2, r3
 8000262:	77bb      	strb	r3, [r7, #30]
  for(int x = 0;x<100;x++){
 8000264:	2300      	movs	r3, #0
 8000266:	623b      	str	r3, [r7, #32]
 8000268:	e003      	b.n	8000272 <one_mult+0x5a>
      __asm__("nop");
 800026a:	bf00      	nop
  for(int x = 0;x<100;x++){
 800026c:	6a3b      	ldr	r3, [r7, #32]
 800026e:	3301      	adds	r3, #1
 8000270:	623b      	str	r3, [r7, #32]
 8000272:	6a3b      	ldr	r3, [r7, #32]
 8000274:	2b63      	cmp	r3, #99	@ 0x63
 8000276:	ddf8      	ble.n	800026a <one_mult+0x52>
  }
  trigger_low();                                             // Stop measurement!!!
 8000278:	f000 fd3b 	bl	8000cf2 <trigger_low>
    
  result = scmd*scmd;
 800027c:	79ba      	ldrb	r2, [r7, #6]
 800027e:	79bb      	ldrb	r3, [r7, #6]
 8000280:	fb12 f303 	smulbb	r3, r2, r3
 8000284:	b2db      	uxtb	r3, r3
 8000286:	777b      	strb	r3, [r7, #29]
  // For now we can just return the result back to the user.
  uint8_t buff[1] = { result };
 8000288:	7f7b      	ldrb	r3, [r7, #29]
 800028a:	b2db      	uxtb	r3, r3
 800028c:	723b      	strb	r3, [r7, #8]
  simpleserial_put('r', 1, buff);
 800028e:	f107 0308 	add.w	r3, r7, #8
 8000292:	461a      	mov	r2, r3
 8000294:	2101      	movs	r1, #1
 8000296:	2072      	movs	r0, #114	@ 0x72
 8000298:	f000 fbb2 	bl	8000a00 <simpleserial_put>

  return 0;
 800029c:	2300      	movs	r3, #0
}
 800029e:	4618      	mov	r0, r3
 80002a0:	372c      	adds	r7, #44	@ 0x2c
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd90      	pop	{r4, r7, pc}
 80002a6:	bf00      	nop
 80002a8:	08002cb4 	.word	0x08002cb4

080002ac <reversed_one_mult>:


uint8_t reversed_one_mult(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b08b      	sub	sp, #44	@ 0x2c
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	603b      	str	r3, [r7, #0]
 80002b4:	4603      	mov	r3, r0
 80002b6:	71fb      	strb	r3, [r7, #7]
 80002b8:	460b      	mov	r3, r1
 80002ba:	71bb      	strb	r3, [r7, #6]
 80002bc:	4613      	mov	r3, r2
 80002be:	717b      	strb	r3, [r7, #5]
  volatile uint8_t result = 0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	777b      	strb	r3, [r7, #29]
  int arr[4] = {7,5,4,2};
 80002c4:	4b1d      	ldr	r3, [pc, #116]	@ (800033c <reversed_one_mult+0x90>)
 80002c6:	f107 040c 	add.w	r4, r7, #12
 80002ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  unsigned char weight = 5;
 80002d0:	2305      	movs	r3, #5
 80002d2:	77fb      	strb	r3, [r7, #31]
    
  // Start measurement.
  trigger_low();                                              // Start measurement!!!
 80002d4:	f000 fd0d 	bl	8000cf2 <trigger_low>
  for(int x = 0;x<100;x++){
 80002d8:	2300      	movs	r3, #0
 80002da:	627b      	str	r3, [r7, #36]	@ 0x24
 80002dc:	e003      	b.n	80002e6 <reversed_one_mult+0x3a>
      __asm__("nop");
 80002de:	bf00      	nop
  for(int x = 0;x<100;x++){
 80002e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002e2:	3301      	adds	r3, #1
 80002e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80002e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002e8:	2b63      	cmp	r3, #99	@ 0x63
 80002ea:	ddf8      	ble.n	80002de <reversed_one_mult+0x32>
  }
  unsigned char num = (unsigned char)(weight * buf[0]);
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	7ffa      	ldrb	r2, [r7, #31]
 80002f2:	fb12 f303 	smulbb	r3, r2, r3
 80002f6:	77bb      	strb	r3, [r7, #30]
  for(int x = 0;x<100;x++){
 80002f8:	2300      	movs	r3, #0
 80002fa:	623b      	str	r3, [r7, #32]
 80002fc:	e003      	b.n	8000306 <reversed_one_mult+0x5a>
      __asm__("nop");
 80002fe:	bf00      	nop
  for(int x = 0;x<100;x++){
 8000300:	6a3b      	ldr	r3, [r7, #32]
 8000302:	3301      	adds	r3, #1
 8000304:	623b      	str	r3, [r7, #32]
 8000306:	6a3b      	ldr	r3, [r7, #32]
 8000308:	2b63      	cmp	r3, #99	@ 0x63
 800030a:	ddf8      	ble.n	80002fe <reversed_one_mult+0x52>
  }
  trigger_high();                                             // Stop measurement!!!
 800030c:	f000 fce6 	bl	8000cdc <trigger_high>
    
  result = scmd*scmd;
 8000310:	79ba      	ldrb	r2, [r7, #6]
 8000312:	79bb      	ldrb	r3, [r7, #6]
 8000314:	fb12 f303 	smulbb	r3, r2, r3
 8000318:	b2db      	uxtb	r3, r3
 800031a:	777b      	strb	r3, [r7, #29]
  // For now we can just return the result back to the user.
  uint8_t buff[1] = { result };
 800031c:	7f7b      	ldrb	r3, [r7, #29]
 800031e:	b2db      	uxtb	r3, r3
 8000320:	723b      	strb	r3, [r7, #8]
  simpleserial_put('r', 1, buff);
 8000322:	f107 0308 	add.w	r3, r7, #8
 8000326:	461a      	mov	r2, r3
 8000328:	2101      	movs	r1, #1
 800032a:	2072      	movs	r0, #114	@ 0x72
 800032c:	f000 fb68 	bl	8000a00 <simpleserial_put>

  return 0;
 8000330:	2300      	movs	r3, #0
}
 8000332:	4618      	mov	r0, r3
 8000334:	372c      	adds	r7, #44	@ 0x2c
 8000336:	46bd      	mov	sp, r7
 8000338:	bd90      	pop	{r4, r7, pc}
 800033a:	bf00      	nop
 800033c:	08002cb4 	.word	0x08002cb4

08000340 <hundred_mult>:



uint8_t hundred_mult(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 8000340:	b590      	push	{r4, r7, lr}
 8000342:	b08d      	sub	sp, #52	@ 0x34
 8000344:	af00      	add	r7, sp, #0
 8000346:	603b      	str	r3, [r7, #0]
 8000348:	4603      	mov	r3, r0
 800034a:	71fb      	strb	r3, [r7, #7]
 800034c:	460b      	mov	r3, r1
 800034e:	71bb      	strb	r3, [r7, #6]
 8000350:	4613      	mov	r3, r2
 8000352:	717b      	strb	r3, [r7, #5]
  volatile uint8_t result = 0;
 8000354:	2300      	movs	r3, #0
 8000356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  int arr[4] = {7,5,4,2};
 800035a:	4b2b      	ldr	r3, [pc, #172]	@ (8000408 <hundred_mult+0xc8>)
 800035c:	f107 0410 	add.w	r4, r7, #16
 8000360:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000362:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  unsigned char weight = 5;
 8000366:	2305      	movs	r3, #5
 8000368:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    
  trigger_high();                                          // Start measurement!!!
 800036c:	f000 fcb6 	bl	8000cdc <trigger_high>
  for(int x = 0;x<100;x++){
 8000370:	2300      	movs	r3, #0
 8000372:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000374:	e003      	b.n	800037e <hundred_mult+0x3e>
      __asm__("nop");
 8000376:	bf00      	nop
  for(int x = 0;x<100;x++){
 8000378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800037a:	3301      	adds	r3, #1
 800037c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800037e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000380:	2b63      	cmp	r3, #99	@ 0x63
 8000382:	ddf8      	ble.n	8000376 <hundred_mult+0x36>
  }
  unsigned char resutl;
  unsigned char val = buf[0];
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  for(int x = 0;x<50;x++){
 800038c:	2300      	movs	r3, #0
 800038e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000390:	e01e      	b.n	80003d0 <hundred_mult+0x90>
      __asm__("nop");
 8000392:	bf00      	nop
      __asm__("nop");
 8000394:	bf00      	nop
      unsigned char akt = x % 25;
 8000396:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000398:	4b1c      	ldr	r3, [pc, #112]	@ (800040c <hundred_mult+0xcc>)
 800039a:	fb83 1302 	smull	r1, r3, r3, r2
 800039e:	10d9      	asrs	r1, r3, #3
 80003a0:	17d3      	asrs	r3, r2, #31
 80003a2:	1ac9      	subs	r1, r1, r3
 80003a4:	460b      	mov	r3, r1
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	440b      	add	r3, r1
 80003aa:	0099      	lsls	r1, r3, #2
 80003ac:	440b      	add	r3, r1
 80003ae:	1ad1      	subs	r1, r2, r3
 80003b0:	460b      	mov	r3, r1
 80003b2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      unsigned char resutl = (unsigned char)(x * val);
 80003b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80003be:	fb12 f303 	smulbb	r3, r2, r3
 80003c2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
      __asm__("nop");
 80003c6:	bf00      	nop
      __asm__("nop");
 80003c8:	bf00      	nop
  for(int x = 0;x<50;x++){
 80003ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80003cc:	3301      	adds	r3, #1
 80003ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80003d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80003d2:	2b31      	cmp	r3, #49	@ 0x31
 80003d4:	dddd      	ble.n	8000392 <hundred_mult+0x52>
  }
  trigger_low();                                             // Stop measurement!!!
 80003d6:	f000 fc8c 	bl	8000cf2 <trigger_low>
    
  result = scmd*scmd;
 80003da:	79ba      	ldrb	r2, [r7, #6]
 80003dc:	79bb      	ldrb	r3, [r7, #6]
 80003de:	fb12 f303 	smulbb	r3, r2, r3
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  // For now we can just return the result back to the user.
  uint8_t buff[1] = { result };
 80003e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	733b      	strb	r3, [r7, #12]
  simpleserial_put('r', 1, buff);
 80003f0:	f107 030c 	add.w	r3, r7, #12
 80003f4:	461a      	mov	r2, r3
 80003f6:	2101      	movs	r1, #1
 80003f8:	2072      	movs	r0, #114	@ 0x72
 80003fa:	f000 fb01 	bl	8000a00 <simpleserial_put>

  return 0;
 80003fe:	2300      	movs	r3, #0
}
 8000400:	4618      	mov	r0, r3
 8000402:	3734      	adds	r7, #52	@ 0x34
 8000404:	46bd      	mov	sp, r7
 8000406:	bd90      	pop	{r4, r7, pc}
 8000408:	08002cb4 	.word	0x08002cb4
 800040c:	51eb851f 	.word	0x51eb851f

08000410 <hundred_mult_buffed>:

uint8_t hundred_mult_buffed(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 8000410:	b590      	push	{r4, r7, lr}
 8000412:	b08d      	sub	sp, #52	@ 0x34
 8000414:	af00      	add	r7, sp, #0
 8000416:	603b      	str	r3, [r7, #0]
 8000418:	4603      	mov	r3, r0
 800041a:	71fb      	strb	r3, [r7, #7]
 800041c:	460b      	mov	r3, r1
 800041e:	71bb      	strb	r3, [r7, #6]
 8000420:	4613      	mov	r3, r2
 8000422:	717b      	strb	r3, [r7, #5]
  volatile uint8_t result = 0;
 8000424:	2300      	movs	r3, #0
 8000426:	773b      	strb	r3, [r7, #28]
  int arr[4] = {7,5,4,2};
 8000428:	4b2d      	ldr	r3, [pc, #180]	@ (80004e0 <hundred_mult_buffed+0xd0>)
 800042a:	f107 040c 	add.w	r4, r7, #12
 800042e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000430:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  unsigned char weight = 5;
 8000434:	2305      	movs	r3, #5
 8000436:	77fb      	strb	r3, [r7, #31]
    
  trigger_high();                                           // Start measurement!!!
 8000438:	f000 fc50 	bl	8000cdc <trigger_high>
  for(int x = 0;x<100;x++){
 800043c:	2300      	movs	r3, #0
 800043e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000440:	e003      	b.n	800044a <hundred_mult_buffed+0x3a>
      __asm__("nop");
 8000442:	bf00      	nop
  for(int x = 0;x<100;x++){
 8000444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000446:	3301      	adds	r3, #1
 8000448:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800044a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800044c:	2b63      	cmp	r3, #99	@ 0x63
 800044e:	ddf8      	ble.n	8000442 <hundred_mult_buffed+0x32>
  }
  int x = 0;
 8000450:	2300      	movs	r3, #0
 8000452:	62bb      	str	r3, [r7, #40]	@ 0x28
  while(x<20){
 8000454:	e020      	b.n	8000498 <hundred_mult_buffed+0x88>
      unsigned char val =  x % 10;
 8000456:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000458:	4b22      	ldr	r3, [pc, #136]	@ (80004e4 <hundred_mult_buffed+0xd4>)
 800045a:	fb83 1302 	smull	r1, r3, r3, r2
 800045e:	1099      	asrs	r1, r3, #2
 8000460:	17d3      	asrs	r3, r2, #31
 8000462:	1ac9      	subs	r1, r1, r3
 8000464:	460b      	mov	r3, r1
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	440b      	add	r3, r1
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	1ad1      	subs	r1, r2, r3
 800046e:	460b      	mov	r3, r1
 8000470:	77bb      	strb	r3, [r7, #30]
      unsigned char resutl = (unsigned char)(val * buf[0]);
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	7fba      	ldrb	r2, [r7, #30]
 8000478:	fb12 f303 	smulbb	r3, r2, r3
 800047c:	777b      	strb	r3, [r7, #29]
      x++;
 800047e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000480:	3301      	adds	r3, #1
 8000482:	62bb      	str	r3, [r7, #40]	@ 0x28
      for(int y = 0;y<3;y++){
 8000484:	2300      	movs	r3, #0
 8000486:	627b      	str	r3, [r7, #36]	@ 0x24
 8000488:	e003      	b.n	8000492 <hundred_mult_buffed+0x82>
          __asm__("nop");
 800048a:	bf00      	nop
      for(int y = 0;y<3;y++){
 800048c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800048e:	3301      	adds	r3, #1
 8000490:	627b      	str	r3, [r7, #36]	@ 0x24
 8000492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000494:	2b02      	cmp	r3, #2
 8000496:	ddf8      	ble.n	800048a <hundred_mult_buffed+0x7a>
  while(x<20){
 8000498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800049a:	2b13      	cmp	r3, #19
 800049c:	dddb      	ble.n	8000456 <hundred_mult_buffed+0x46>
      }
  }
  for(int x = 0;x<100;x++){
 800049e:	2300      	movs	r3, #0
 80004a0:	623b      	str	r3, [r7, #32]
 80004a2:	e003      	b.n	80004ac <hundred_mult_buffed+0x9c>
      __asm__("nop");
 80004a4:	bf00      	nop
  for(int x = 0;x<100;x++){
 80004a6:	6a3b      	ldr	r3, [r7, #32]
 80004a8:	3301      	adds	r3, #1
 80004aa:	623b      	str	r3, [r7, #32]
 80004ac:	6a3b      	ldr	r3, [r7, #32]
 80004ae:	2b63      	cmp	r3, #99	@ 0x63
 80004b0:	ddf8      	ble.n	80004a4 <hundred_mult_buffed+0x94>
  }
  trigger_low();                                             // Stop measurement!!!
 80004b2:	f000 fc1e 	bl	8000cf2 <trigger_low>
    
  result = scmd*scmd;
 80004b6:	79ba      	ldrb	r2, [r7, #6]
 80004b8:	79bb      	ldrb	r3, [r7, #6]
 80004ba:	fb12 f303 	smulbb	r3, r2, r3
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	773b      	strb	r3, [r7, #28]
  // For now we can just return the result back to the user.
  uint8_t buff[1] = { result };
 80004c2:	7f3b      	ldrb	r3, [r7, #28]
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	723b      	strb	r3, [r7, #8]
  simpleserial_put('r', 1, buff);
 80004c8:	f107 0308 	add.w	r3, r7, #8
 80004cc:	461a      	mov	r2, r3
 80004ce:	2101      	movs	r1, #1
 80004d0:	2072      	movs	r0, #114	@ 0x72
 80004d2:	f000 fa95 	bl	8000a00 <simpleserial_put>

  return 0;
 80004d6:	2300      	movs	r3, #0
}
 80004d8:	4618      	mov	r0, r3
 80004da:	3734      	adds	r7, #52	@ 0x34
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd90      	pop	{r4, r7, pc}
 80004e0:	08002cb4 	.word	0x08002cb4
 80004e4:	66666667 	.word	0x66666667

080004e8 <main>:



int main(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  // Setup the specific chipset.
  platform_init();
 80004ec:	f000 fb28 	bl	8000b40 <platform_init>
  // Setup serial communication line.
  init_uart();
 80004f0:	f000 fb78 	bl	8000be4 <init_uart>
  // Setup measurement trigger.
  trigger_setup();
 80004f4:	f000 fbc6 	bl	8000c84 <trigger_setup>

  simpleserial_init();
 80004f8:	f000 f8f6 	bl	80006e8 <simpleserial_init>

  // Insert your handlers here.
  simpleserial_addcmd('p', 16, hundred_mult);
 80004fc:	4a0b      	ldr	r2, [pc, #44]	@ (800052c <main+0x44>)
 80004fe:	2110      	movs	r1, #16
 8000500:	2070      	movs	r0, #112	@ 0x70
 8000502:	f000 f903 	bl	800070c <simpleserial_addcmd>
  simpleserial_addcmd('z', 16, one_mult);
 8000506:	4a0a      	ldr	r2, [pc, #40]	@ (8000530 <main+0x48>)
 8000508:	2110      	movs	r1, #16
 800050a:	207a      	movs	r0, #122	@ 0x7a
 800050c:	f000 f8fe 	bl	800070c <simpleserial_addcmd>
  simpleserial_addcmd('r', 16, reversed_one_mult);
 8000510:	4a08      	ldr	r2, [pc, #32]	@ (8000534 <main+0x4c>)
 8000512:	2110      	movs	r1, #16
 8000514:	2072      	movs	r0, #114	@ 0x72
 8000516:	f000 f8f9 	bl	800070c <simpleserial_addcmd>
  simpleserial_addcmd('f', 16, hundred_mult_buffed);
 800051a:	4a07      	ldr	r2, [pc, #28]	@ (8000538 <main+0x50>)
 800051c:	2110      	movs	r1, #16
 800051e:	2066      	movs	r0, #102	@ 0x66
 8000520:	f000 f8f4 	bl	800070c <simpleserial_addcmd>

  // What for the capture board to send commands and handle them.
  while (1)
    simpleserial_get();
 8000524:	f000 f938 	bl	8000798 <simpleserial_get>
 8000528:	e7fc      	b.n	8000524 <main+0x3c>
 800052a:	bf00      	nop
 800052c:	08000341 	.word	0x08000341
 8000530:	08000219 	.word	0x08000219
 8000534:	080002ad 	.word	0x080002ad
 8000538:	08000411 	.word	0x08000411

0800053c <ss_crc>:


// 0xA6 formerly 
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	70fb      	strb	r3, [r7, #3]
	unsigned int k = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]
	uint8_t crc = 0x00;
 800054c:	2300      	movs	r3, #0
 800054e:	72fb      	strb	r3, [r7, #11]
	while (len--) {
 8000550:	e01f      	b.n	8000592 <ss_crc+0x56>
		crc ^= *buf++;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	1c5a      	adds	r2, r3, #1
 8000556:	607a      	str	r2, [r7, #4]
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	7afb      	ldrb	r3, [r7, #11]
 800055c:	4053      	eors	r3, r2
 800055e:	72fb      	strb	r3, [r7, #11]
		for (k = 0; k < 8; k++) {
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	e012      	b.n	800058c <ss_crc+0x50>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 8000566:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800056a:	2b00      	cmp	r3, #0
 800056c:	da07      	bge.n	800057e <ss_crc+0x42>
 800056e:	7afb      	ldrb	r3, [r7, #11]
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	b25b      	sxtb	r3, r3
 8000574:	f083 034d 	eor.w	r3, r3, #77	@ 0x4d
 8000578:	b25b      	sxtb	r3, r3
 800057a:	b2db      	uxtb	r3, r3
 800057c:	e002      	b.n	8000584 <ss_crc+0x48>
 800057e:	7afb      	ldrb	r3, [r7, #11]
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	b2db      	uxtb	r3, r3
 8000584:	72fb      	strb	r3, [r7, #11]
		for (k = 0; k < 8; k++) {
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	3301      	adds	r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	2b07      	cmp	r3, #7
 8000590:	d9e9      	bls.n	8000566 <ss_crc+0x2a>
	while (len--) {
 8000592:	78fb      	ldrb	r3, [r7, #3]
 8000594:	1e5a      	subs	r2, r3, #1
 8000596:	70fa      	strb	r2, [r7, #3]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1da      	bne.n	8000552 <ss_crc+0x16>
		}
	}
	return crc;
 800059c:	7afb      	ldrb	r3, [r7, #11]

}
 800059e:	4618      	mov	r0, r3
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <check_version>:
}

#define FRAME_BYTE 0x00

uint8_t check_version(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *data)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	4603      	mov	r3, r0
 80005b2:	71fb      	strb	r3, [r7, #7]
 80005b4:	460b      	mov	r3, r1
 80005b6:	71bb      	strb	r3, [r7, #6]
 80005b8:	4613      	mov	r3, r2
 80005ba:	717b      	strb	r3, [r7, #5]
	uint8_t ver = SS_VER;
 80005bc:	2303      	movs	r3, #3
 80005be:	73fb      	strb	r3, [r7, #15]
	simpleserial_put('r', 1, &ver);
 80005c0:	f107 030f 	add.w	r3, r7, #15
 80005c4:	461a      	mov	r2, r3
 80005c6:	2101      	movs	r1, #1
 80005c8:	2072      	movs	r0, #114	@ 0x72
 80005ca:	f000 fa19 	bl	8000a00 <simpleserial_put>
	return SS_ERR_OK;
 80005ce:	2300      	movs	r3, #0
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <ss_get_commands>:

uint8_t ss_get_commands(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *data)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	4603      	mov	r3, r0
 80005e2:	71fb      	strb	r3, [r7, #7]
 80005e4:	460b      	mov	r3, r1
 80005e6:	71bb      	strb	r3, [r7, #6]
 80005e8:	4613      	mov	r3, r2
 80005ea:	717b      	strb	r3, [r7, #5]
    uint8_t cmd_chars[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80005ec:	2300      	movs	r3, #0
 80005ee:	77fb      	strb	r3, [r7, #31]
 80005f0:	e010      	b.n	8000614 <ss_get_commands+0x3c>
        cmd_chars[i] = commands[i].c;
 80005f2:	7ffa      	ldrb	r2, [r7, #31]
 80005f4:	7ff9      	ldrb	r1, [r7, #31]
 80005f6:	4811      	ldr	r0, [pc, #68]	@ (800063c <ss_get_commands+0x64>)
 80005f8:	4613      	mov	r3, r2
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	4413      	add	r3, r2
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	4403      	add	r3, r0
 8000602:	781a      	ldrb	r2, [r3, #0]
 8000604:	f101 0320 	add.w	r3, r1, #32
 8000608:	443b      	add	r3, r7
 800060a:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800060e:	7ffb      	ldrb	r3, [r7, #31]
 8000610:	3301      	adds	r3, #1
 8000612:	77fb      	strb	r3, [r7, #31]
 8000614:	7ffa      	ldrb	r2, [r7, #31]
 8000616:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <ss_get_commands+0x68>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	429a      	cmp	r2, r3
 800061e:	dbe8      	blt.n	80005f2 <ss_get_commands+0x1a>
    }

    simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 8000620:	4b07      	ldr	r3, [pc, #28]	@ (8000640 <ss_get_commands+0x68>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	f107 020c 	add.w	r2, r7, #12
 800062a:	4619      	mov	r1, r3
 800062c:	2072      	movs	r0, #114	@ 0x72
 800062e:	f000 f9e7 	bl	8000a00 <simpleserial_put>
    return 0x00;
 8000632:	2300      	movs	r3, #0

}
 8000634:	4618      	mov	r0, r3
 8000636:	3720      	adds	r7, #32
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000004 	.word	0x20000004
 8000640:	20000000 	.word	0x20000000

08000644 <stuff_data>:

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	460b      	mov	r3, r1
 800064e:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 1;
 8000650:	2301      	movs	r3, #1
 8000652:	73fb      	strb	r3, [r7, #15]
	uint8_t last = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	73bb      	strb	r3, [r7, #14]
	for (; i < len; i++) {
 8000658:	e012      	b.n	8000680 <stuff_data+0x3c>
		if (buf[i] == FRAME_BYTE) {
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	4413      	add	r3, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d109      	bne.n	800067a <stuff_data+0x36>
			buf[last] = i - last;
 8000666:	7bbb      	ldrb	r3, [r7, #14]
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	4413      	add	r3, r2
 800066c:	7bf9      	ldrb	r1, [r7, #15]
 800066e:	7bba      	ldrb	r2, [r7, #14]
 8000670:	1a8a      	subs	r2, r1, r2
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	701a      	strb	r2, [r3, #0]
			last = i;
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	73bb      	strb	r3, [r7, #14]
	for (; i < len; i++) {
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	3301      	adds	r3, #1
 800067e:	73fb      	strb	r3, [r7, #15]
 8000680:	7bfa      	ldrb	r2, [r7, #15]
 8000682:	78fb      	ldrb	r3, [r7, #3]
 8000684:	429a      	cmp	r2, r3
 8000686:	d3e8      	bcc.n	800065a <stuff_data+0x16>
		}
	}
	return 0x00;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr

08000694 <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	70fb      	strb	r3, [r7, #3]
	uint8_t next = buf[0];
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	73fb      	strb	r3, [r7, #15]
	buf[0] = 0x00;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
	//len -= 1;
	uint8_t tmp = next;
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	73bb      	strb	r3, [r7, #14]
	while ((next < len) && tmp != 0) {
 80006b0:	e00d      	b.n	80006ce <unstuff_data+0x3a>
		tmp = buf[next];
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	4413      	add	r3, r2
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	73bb      	strb	r3, [r7, #14]
		buf[next] = FRAME_BYTE;
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	4413      	add	r3, r2
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
		next += tmp;
 80006c6:	7bfa      	ldrb	r2, [r7, #15]
 80006c8:	7bbb      	ldrb	r3, [r7, #14]
 80006ca:	4413      	add	r3, r2
 80006cc:	73fb      	strb	r3, [r7, #15]
	while ((next < len) && tmp != 0) {
 80006ce:	7bfa      	ldrb	r2, [r7, #15]
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d202      	bcs.n	80006dc <unstuff_data+0x48>
 80006d6:	7bbb      	ldrb	r3, [r7, #14]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d1ea      	bne.n	80006b2 <unstuff_data+0x1e>
	}
	return next;
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <simpleserial_init>:

// Set up the SimpleSerial module by preparing internal commands
// This just adds the "v" command for now...
void simpleserial_init()
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	simpleserial_addcmd('v', 0, check_version);
 80006ec:	4a05      	ldr	r2, [pc, #20]	@ (8000704 <simpleserial_init+0x1c>)
 80006ee:	2100      	movs	r1, #0
 80006f0:	2076      	movs	r0, #118	@ 0x76
 80006f2:	f000 f80b 	bl	800070c <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 80006f6:	4a04      	ldr	r2, [pc, #16]	@ (8000708 <simpleserial_init+0x20>)
 80006f8:	2100      	movs	r1, #0
 80006fa:	2077      	movs	r0, #119	@ 0x77
 80006fc:	f000 f806 	bl	800070c <simpleserial_addcmd>
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	080005a9 	.word	0x080005a9
 8000708:	080005d9 	.word	0x080005d9

0800070c <simpleserial_addcmd>:

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
 8000718:	73fb      	strb	r3, [r7, #15]
	if(num_commands >= MAX_SS_CMDS) {
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <simpleserial_addcmd+0x84>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b0f      	cmp	r3, #15
 8000720:	dd04      	ble.n	800072c <simpleserial_addcmd+0x20>
		putch('a');
 8000722:	2061      	movs	r0, #97	@ 0x61
 8000724:	f000 fb0e 	bl	8000d44 <putch>
		return 1;
 8000728:	2301      	movs	r3, #1
 800072a:	e02d      	b.n	8000788 <simpleserial_addcmd+0x7c>
	}

	if(len >= MAX_SS_LEN) {
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	2bff      	cmp	r3, #255	@ 0xff
 8000730:	d904      	bls.n	800073c <simpleserial_addcmd+0x30>
		putch('b');
 8000732:	2062      	movs	r0, #98	@ 0x62
 8000734:	f000 fb06 	bl	8000d44 <putch>
		return 1;
 8000738:	2301      	movs	r3, #1
 800073a:	e025      	b.n	8000788 <simpleserial_addcmd+0x7c>
	}

	commands[num_commands].c   = c;
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <simpleserial_addcmd+0x84>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4914      	ldr	r1, [pc, #80]	@ (8000794 <simpleserial_addcmd+0x88>)
 8000742:	4613      	mov	r3, r2
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	4413      	add	r3, r2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	440b      	add	r3, r1
 800074c:	7bfa      	ldrb	r2, [r7, #15]
 800074e:	701a      	strb	r2, [r3, #0]
	commands[num_commands].len = len;
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <simpleserial_addcmd+0x84>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	490f      	ldr	r1, [pc, #60]	@ (8000794 <simpleserial_addcmd+0x88>)
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	440b      	add	r3, r1
 8000760:	3304      	adds	r3, #4
 8000762:	68ba      	ldr	r2, [r7, #8]
 8000764:	601a      	str	r2, [r3, #0]
	commands[num_commands].fp  = fp;
 8000766:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <simpleserial_addcmd+0x84>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	490a      	ldr	r1, [pc, #40]	@ (8000794 <simpleserial_addcmd+0x88>)
 800076c:	4613      	mov	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	4413      	add	r3, r2
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	440b      	add	r3, r1
 8000776:	3308      	adds	r3, #8
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	601a      	str	r2, [r3, #0]
	num_commands++;
 800077c:	4b04      	ldr	r3, [pc, #16]	@ (8000790 <simpleserial_addcmd+0x84>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3301      	adds	r3, #1
 8000782:	4a03      	ldr	r2, [pc, #12]	@ (8000790 <simpleserial_addcmd+0x84>)
 8000784:	6013      	str	r3, [r2, #0]

	return 0;
 8000786:	2300      	movs	r3, #0
}
 8000788:	4618      	mov	r0, r3
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000000 	.word	0x20000000
 8000794:	20000004 	.word	0x20000004

08000798 <simpleserial_get>:

void simpleserial_get(void)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b0c7      	sub	sp, #284	@ 0x11c
 800079c:	af00      	add	r7, sp, #0
	uint8_t data_buf[MAX_SS_LEN];
	uint8_t err = 0;
 800079e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007a2:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 4; i++) {
 80007aa:	2300      	movs	r3, #0
 80007ac:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80007b0:	e022      	b.n	80007f8 <simpleserial_get+0x60>
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 80007b2:	f000 faa9 	bl	8000d08 <getch>
 80007b6:	4603      	mov	r3, r0
 80007b8:	4619      	mov	r1, r3
 80007ba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007be:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 80007c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80007c6:	4413      	add	r3, r2
 80007c8:	460a      	mov	r2, r1
 80007ca:	701a      	strb	r2, [r3, #0]
		if (data_buf[i] == FRAME_BYTE) {
 80007cc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007d0:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 80007d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80007d8:	4413      	add	r3, r2
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d106      	bne.n	80007ee <simpleserial_get+0x56>
			err = SS_ERR_FRAME_BYTE;
 80007e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007e4:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80007e8:	2205      	movs	r2, #5
 80007ea:	701a      	strb	r2, [r3, #0]
			goto ERROR;
 80007ec:	e0f9      	b.n	80009e2 <simpleserial_get+0x24a>
	for (int i = 0; i < 4; i++) {
 80007ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80007f2:	3301      	adds	r3, #1
 80007f4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80007f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80007fc:	2b03      	cmp	r3, #3
 80007fe:	ddd8      	ble.n	80007b2 <simpleserial_get+0x1a>
		}
	}
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8000800:	f107 0308 	add.w	r3, r7, #8
 8000804:	2104      	movs	r1, #4
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff44 	bl	8000694 <unstuff_data>
 800080c:	4603      	mov	r3, r0
 800080e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b

	// check for valid command
	uint8_t c = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
	for(c = 0; c < num_commands; c++)
 8000818:	2300      	movs	r3, #0
 800081a:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 800081e:	e014      	b.n	800084a <simpleserial_get+0xb2>
	{
		if(commands[c].c == data_buf[1])
 8000820:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 8000824:	4974      	ldr	r1, [pc, #464]	@ (80009f8 <simpleserial_get+0x260>)
 8000826:	4613      	mov	r3, r2
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	4413      	add	r3, r2
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	440b      	add	r3, r1
 8000830:	781a      	ldrb	r2, [r3, #0]
 8000832:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000836:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800083a:	785b      	ldrb	r3, [r3, #1]
 800083c:	429a      	cmp	r2, r3
 800083e:	d00b      	beq.n	8000858 <simpleserial_get+0xc0>
	for(c = 0; c < num_commands; c++)
 8000840:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8000844:	3301      	adds	r3, #1
 8000846:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 800084a:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 800084e:	4b6b      	ldr	r3, [pc, #428]	@ (80009fc <simpleserial_get+0x264>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	429a      	cmp	r2, r3
 8000854:	dbe4      	blt.n	8000820 <simpleserial_get+0x88>
 8000856:	e000      	b.n	800085a <simpleserial_get+0xc2>
			break;
 8000858:	bf00      	nop
	}

	if (c == num_commands) {
 800085a:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 800085e:	4b67      	ldr	r3, [pc, #412]	@ (80009fc <simpleserial_get+0x264>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	429a      	cmp	r2, r3
 8000864:	d106      	bne.n	8000874 <simpleserial_get+0xdc>
		err = SS_ERR_CMD;
 8000866:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800086a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800086e:	2201      	movs	r2, #1
 8000870:	701a      	strb	r2, [r3, #0]
		goto ERROR;
 8000872:	e0b6      	b.n	80009e2 <simpleserial_get+0x24a>
	}

	//check that next frame not beyond end of message
	// account for cmd, scmd, len, data, crc, end of frame
	if ((data_buf[3] + 5) < next_frame) {
 8000874:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000878:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800087c:	78db      	ldrb	r3, [r3, #3]
 800087e:	1d5a      	adds	r2, r3, #5
 8000880:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8000884:	429a      	cmp	r2, r3
 8000886:	da06      	bge.n	8000896 <simpleserial_get+0xfe>
		err = SS_ERR_LEN;
 8000888:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800088c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8000890:	2204      	movs	r2, #4
 8000892:	701a      	strb	r2, [r3, #0]
		goto ERROR;
 8000894:	e0a5      	b.n	80009e2 <simpleserial_get+0x24a>
	}

	// read in data
	// eq to len + crc + frame end
	int i = 4;
 8000896:	2304      	movs	r3, #4
 8000898:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	for (; i < data_buf[3] + 5; i++) {
 800089c:	e022      	b.n	80008e4 <simpleserial_get+0x14c>
		data_buf[i] = getch();
 800089e:	f000 fa33 	bl	8000d08 <getch>
 80008a2:	4603      	mov	r3, r0
 80008a4:	4619      	mov	r1, r3
 80008a6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008aa:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 80008ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80008b2:	4413      	add	r3, r2
 80008b4:	460a      	mov	r2, r1
 80008b6:	701a      	strb	r2, [r3, #0]
		if (data_buf[i] == FRAME_BYTE) {
 80008b8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008bc:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 80008c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80008c4:	4413      	add	r3, r2
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d106      	bne.n	80008da <simpleserial_get+0x142>
			err = SS_ERR_FRAME_BYTE;
 80008cc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008d0:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80008d4:	2205      	movs	r2, #5
 80008d6:	701a      	strb	r2, [r3, #0]
			goto ERROR;
 80008d8:	e083      	b.n	80009e2 <simpleserial_get+0x24a>
	for (; i < data_buf[3] + 5; i++) {
 80008da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80008de:	3301      	adds	r3, #1
 80008e0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80008e4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008e8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80008ec:	78db      	ldrb	r3, [r3, #3]
 80008ee:	3304      	adds	r3, #4
 80008f0:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80008f4:	429a      	cmp	r2, r3
 80008f6:	ddd2      	ble.n	800089e <simpleserial_get+0x106>
		}
	}

	//check that final byte is the FRAME_BYTE
	data_buf[i] = getch();
 80008f8:	f000 fa06 	bl	8000d08 <getch>
 80008fc:	4603      	mov	r3, r0
 80008fe:	4619      	mov	r1, r3
 8000900:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000904:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8000908:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800090c:	4413      	add	r3, r2
 800090e:	460a      	mov	r2, r1
 8000910:	701a      	strb	r2, [r3, #0]
	if (data_buf[i] != FRAME_BYTE) {
 8000912:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000916:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 800091a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800091e:	4413      	add	r3, r2
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d006      	beq.n	8000934 <simpleserial_get+0x19c>
		err = SS_ERR_LEN;
 8000926:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800092a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800092e:	2204      	movs	r2, #4
 8000930:	701a      	strb	r2, [r3, #0]
		goto ERROR;
 8000932:	e056      	b.n	80009e2 <simpleserial_get+0x24a>
	}

	//fully unstuff data now
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 8000934:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8000938:	f107 0208 	add.w	r2, r7, #8
 800093c:	18d0      	adds	r0, r2, r3
 800093e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000942:	b2da      	uxtb	r2, r3
 8000944:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	b2db      	uxtb	r3, r3
 800094c:	3301      	adds	r3, #1
 800094e:	b2db      	uxtb	r3, r3
 8000950:	4619      	mov	r1, r3
 8000952:	f7ff fe9f 	bl	8000694 <unstuff_data>

	//calc crc excluding original frame offset and frame end and crc
	uint8_t crc = ss_crc(data_buf+1, i-2);
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	3301      	adds	r3, #1
 800095c:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	3a02      	subs	r2, #2
 8000964:	b2d2      	uxtb	r2, r2
 8000966:	4611      	mov	r1, r2
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fde7 	bl	800053c <ss_crc>
 800096e:	4603      	mov	r3, r0
 8000970:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
	if (crc != data_buf[i-1]) {
 8000974:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000978:	3b01      	subs	r3, #1
 800097a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800097e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000982:	5cd3      	ldrb	r3, [r2, r3]
 8000984:	f897 210a 	ldrb.w	r2, [r7, #266]	@ 0x10a
 8000988:	429a      	cmp	r2, r3
 800098a:	d006      	beq.n	800099a <simpleserial_get+0x202>
		err = SS_ERR_CRC;
 800098c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000990:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8000994:	2202      	movs	r2, #2
 8000996:	701a      	strb	r2, [r3, #0]
		goto ERROR;
 8000998:	e023      	b.n	80009e2 <simpleserial_get+0x24a>
	}

	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 800099a:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 800099e:	4916      	ldr	r1, [pc, #88]	@ (80009f8 <simpleserial_get+0x260>)
 80009a0:	4613      	mov	r3, r2
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	4413      	add	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	440b      	add	r3, r1
 80009aa:	3308      	adds	r3, #8
 80009ac:	681c      	ldr	r4, [r3, #0]
 80009ae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80009b2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80009b6:	7858      	ldrb	r0, [r3, #1]
 80009b8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80009bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80009c0:	7899      	ldrb	r1, [r3, #2]
 80009c2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80009c6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80009ca:	78da      	ldrb	r2, [r3, #3]
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	3304      	adds	r3, #4
 80009d2:	47a0      	blx	r4
 80009d4:	4603      	mov	r3, r0
 80009d6:	461a      	mov	r2, r3
 80009d8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80009dc:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80009e0:	701a      	strb	r2, [r3, #0]

ERROR:
	simpleserial_put('e', 0x01, &err);
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	461a      	mov	r2, r3
 80009e6:	2101      	movs	r1, #1
 80009e8:	2065      	movs	r0, #101	@ 0x65
 80009ea:	f000 f809 	bl	8000a00 <simpleserial_put>
	return;
 80009ee:	bf00      	nop
}
 80009f0:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd90      	pop	{r4, r7, pc}
 80009f8:	20000004 	.word	0x20000004
 80009fc:	20000000 	.word	0x20000000

08000a00 <simpleserial_put>:

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b0c5      	sub	sp, #276	@ 0x114
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a0a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a14:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000a18:	4602      	mov	r2, r0
 8000a1a:	701a      	strb	r2, [r3, #0]
 8000a1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a20:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000a24:	460a      	mov	r2, r1
 8000a26:	701a      	strb	r2, [r3, #0]
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 8000a28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
	data_buf[1] = c;
 8000a34:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000a3c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a40:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8000a44:	7812      	ldrb	r2, [r2, #0]
 8000a46:	705a      	strb	r2, [r3, #1]
	data_buf[2] = size;
 8000a48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000a50:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a54:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000a58:	7812      	ldrb	r2, [r2, #0]
 8000a5a:	709a      	strb	r2, [r3, #2]
	int i = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	for (; i < size; i++) {
 8000a62:	e015      	b.n	8000a90 <simpleserial_put+0x90>
		data_buf[i + 3] = output[i];
 8000a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000a68:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a6c:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000a70:	6812      	ldr	r2, [r2, #0]
 8000a72:	441a      	add	r2, r3
 8000a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000a78:	3303      	adds	r3, #3
 8000a7a:	7811      	ldrb	r1, [r2, #0]
 8000a7c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000a80:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000a84:	54d1      	strb	r1, [r2, r3]
	for (; i < size; i++) {
 8000a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000a90:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a94:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	dbe0      	blt.n	8000a64 <simpleserial_put+0x64>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000aac:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000ab0:	7812      	ldrb	r2, [r2, #0]
 8000ab2:	3202      	adds	r2, #2
 8000ab4:	b2d1      	uxtb	r1, r2
 8000ab6:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8000aba:	1cd4      	adds	r4, r2, #3
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fd3d 	bl	800053c <ss_crc>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000aca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000ace:	551a      	strb	r2, [r3, r4]
	data_buf[i + 4] = 0x00;
 8000ad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000ada:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000ade:	2100      	movs	r1, #0
 8000ae0:	54d1      	strb	r1, [r2, r3]
	stuff_data(data_buf, i + 5);
 8000ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	3305      	adds	r3, #5
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	f107 0308 	add.w	r3, r7, #8
 8000af0:	4611      	mov	r1, r2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fda6 	bl	8000644 <stuff_data>
	for (int i = 0; i < size + 5; i++) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000afe:	e00f      	b.n	8000b20 <simpleserial_put+0x120>
		putch(data_buf[i]);
 8000b00:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b04:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8000b08:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000b0c:	4413      	add	r3, r2
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 f917 	bl	8000d44 <putch>
	for (int i = 0; i < size + 5; i++) {
 8000b16:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000b20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000b24:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	3304      	adds	r3, #4
 8000b2c:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8000b30:	429a      	cmp	r2, r3
 8000b32:	dde5      	ble.n	8000b00 <simpleserial_put+0x100>
	}
}
 8000b34:	bf00      	nop
 8000b36:	bf00      	nop
 8000b38:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd90      	pop	{r4, r7, pc}

08000b40 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b096      	sub	sp, #88	@ 0x58
 8000b44:	af00      	add	r7, sp, #0
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8000b46:	2303      	movs	r3, #3
 8000b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000b4a:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b4e:	633b      	str	r3, [r7, #48]	@ 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8000b50:	2300      	movs	r3, #0
 8000b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000b58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 f925 	bl	8000dac <HAL_RCC_OscConfig>

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000b62:	230f      	movs	r3, #15
 8000b64:	61bb      	str	r3, [r7, #24]
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000b66:	2301      	movs	r3, #1
 8000b68:	61fb      	str	r3, [r7, #28]
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	@ 0x24
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62bb      	str	r3, [r7, #40]	@ 0x28
     uint32_t flash_latency = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	657b      	str	r3, [r7, #84]	@ 0x54
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8000b7a:	f107 0318 	add.w	r3, r7, #24
 8000b7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 f929 	bl	8001dd8 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b86:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <platform_init+0x9c>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	4a14      	ldr	r2, [pc, #80]	@ (8000bdc <platform_init+0x9c>)
 8000b8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b90:	6153      	str	r3, [r2, #20]
 8000b92:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <platform_init+0x9c>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8000b9e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000ba2:	607b      	str	r3, [r7, #4]
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
  GpioInit.Pull      = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480a      	ldr	r0, [pc, #40]	@ (8000be0 <platform_init+0xa0>)
 8000bb6:	f001 fa99 	bl	80020ec <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bc0:	4807      	ldr	r0, [pc, #28]	@ (8000be0 <platform_init+0xa0>)
 8000bc2:	f001 fc11 	bl	80023e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bcc:	4804      	ldr	r0, [pc, #16]	@ (8000be0 <platform_init+0xa0>)
 8000bce:	f001 fc0b 	bl	80023e8 <HAL_GPIO_WritePin>
#endif
}
 8000bd2:	bf00      	nop
 8000bd4:	3758      	adds	r7, #88	@ 0x58
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	48000800 	.word	0x48000800

08000be4 <init_uart>:

void init_uart(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 8000bea:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bee:	60fb      	str	r3, [r7, #12]
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	613b      	str	r3, [r7, #16]
  GpioInit.Pull      = GPIO_PULLUP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	617b      	str	r3, [r7, #20]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	61bb      	str	r3, [r7, #24]
  GpioInit.Alternate = GPIO_AF7_USART1;
 8000bfc:	2307      	movs	r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  __GPIOA_CLK_ENABLE();
 8000c00:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <init_uart+0x94>)
 8000c02:	695b      	ldr	r3, [r3, #20]
 8000c04:	4a1c      	ldr	r2, [pc, #112]	@ (8000c78 <init_uart+0x94>)
 8000c06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c0a:	6153      	str	r3, [r2, #20]
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <init_uart+0x94>)
 8000c0e:	695b      	ldr	r3, [r3, #20]
 8000c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c22:	f001 fa63 	bl	80020ec <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <init_uart+0x98>)
 8000c28:	4a15      	ldr	r2, [pc, #84]	@ (8000c80 <init_uart+0x9c>)
 8000c2a:	601a      	str	r2, [r3, #0]
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 8000c2c:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <init_uart+0x98>)
 8000c2e:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000c32:	605a      	str	r2, [r3, #4]
  #else
  UartHandle.Init.BaudRate   = 38400;
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000c34:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <init_uart+0x98>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000c3a:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <init_uart+0x98>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000c40:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <init_uart+0x98>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000c46:	4b0d      	ldr	r3, [pc, #52]	@ (8000c7c <init_uart+0x98>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <init_uart+0x98>)
 8000c4e:	220c      	movs	r2, #12
 8000c50:	615a      	str	r2, [r3, #20]
  __USART1_CLK_ENABLE();
 8000c52:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <init_uart+0x94>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	4a08      	ldr	r2, [pc, #32]	@ (8000c78 <init_uart+0x94>)
 8000c58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c5c:	6193      	str	r3, [r2, #24]
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <init_uart+0x94>)
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  HAL_UART_Init(&UartHandle);
 8000c6a:	4804      	ldr	r0, [pc, #16]	@ (8000c7c <init_uart+0x98>)
 8000c6c:	f001 fe1d 	bl	80028aa <HAL_UART_Init>
}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	200000c4 	.word	0x200000c4
 8000c80:	40013800 	.word	0x40013800

08000c84 <trigger_setup>:

void trigger_setup(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b13      	ldr	r3, [pc, #76]	@ (8000cd8 <trigger_setup+0x54>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	4a12      	ldr	r2, [pc, #72]	@ (8000cd8 <trigger_setup+0x54>)
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c94:	6153      	str	r3, [r2, #20]
 8000c96:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <trigger_setup+0x54>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
 8000ca2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca6:	607b      	str	r3, [r7, #4]
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
  GpioInit.Pull      = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cbc:	f001 fa16 	bl	80020ec <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cca:	f001 fb8d 	bl	80023e8 <HAL_GPIO_WritePin>
}
 8000cce:	bf00      	nop
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000

08000cdc <trigger_high>:

void trigger_high(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ce6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cea:	f001 fb7d 	bl	80023e8 <HAL_GPIO_WritePin>
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <trigger_low>:

void trigger_low(void)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d00:	f001 fb72 	bl	80023e8 <HAL_GPIO_WritePin>
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <getch>:

char getch(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8000d0e:	e005      	b.n	8000d1c <getch+0x14>
    USART1->ICR |= (1 << 3);
 8000d10:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <getch+0x34>)
 8000d12:	6a1b      	ldr	r3, [r3, #32]
 8000d14:	4a09      	ldr	r2, [pc, #36]	@ (8000d3c <getch+0x34>)
 8000d16:	f043 0308 	orr.w	r3, r3, #8
 8000d1a:	6213      	str	r3, [r2, #32]
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8000d1c:	1df9      	adds	r1, r7, #7
 8000d1e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000d22:	2201      	movs	r2, #1
 8000d24:	4806      	ldr	r0, [pc, #24]	@ (8000d40 <getch+0x38>)
 8000d26:	f001 fedd 	bl	8002ae4 <HAL_UART_Receive>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1ef      	bne.n	8000d10 <getch+0x8>
  //putch(d);
  return d;
 8000d30:	79fb      	ldrb	r3, [r7, #7]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40013800 	.word	0x40013800
 8000d40:	200000c4 	.word	0x200000c4

08000d44 <putch>:

void putch(char c)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
  uint8_t d  = c;
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000d52:	f107 010f 	add.w	r1, r7, #15
 8000d56:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4803      	ldr	r0, [pc, #12]	@ (8000d6c <putch+0x28>)
 8000d5e:	f001 fe35 	bl	80029cc <HAL_UART_Transmit>
}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200000c4 	.word	0x200000c4

08000d70 <HAL_GetTick>:
{
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
	return hal_sys_tick++;
 8000d74:	4b04      	ldr	r3, [pc, #16]	@ (8000d88 <HAL_GetTick+0x18>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	1c5a      	adds	r2, r3, #1
 8000d7a:	4903      	ldr	r1, [pc, #12]	@ (8000d88 <HAL_GetTick+0x18>)
 8000d7c:	600a      	str	r2, [r1, #0]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000134 	.word	0x20000134

08000d8c <HAL_RCC_GetSysClockFreq>:

#define UART_CR1_FIELDS  ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | \
                                     USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8)) /*!< UART or USART CR1 fields of parameters set by UART_SetConfig API */

uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
	return F_CPU;
 8000d90:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr

08000d9c <HAL_RCC_GetPCLK1Freq>:

uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
	return F_CPU;
 8000da0:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000db8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dbc:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dc8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f000 8180 	beq.w	80010da <HAL_RCC_OscConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dda:	4bbe      	ldr	r3, [pc, #760]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 030c 	and.w	r3, r3, #12
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d00c      	beq.n	8000e00 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000de6:	4bbb      	ldr	r3, [pc, #748]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 030c 	and.w	r3, r3, #12
 8000dee:	2b08      	cmp	r3, #8
 8000df0:	d15d      	bne.n	8000eae <HAL_RCC_OscConfig+0x102>
 8000df2:	4bb8      	ldr	r3, [pc, #736]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dfe:	d156      	bne.n	8000eae <HAL_RCC_OscConfig+0x102>
 8000e00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e04:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e08:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000e0c:	fa93 f3a3 	rbit	r3, r3
 8000e10:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000e14:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e18:	fab3 f383 	clz	r3, r3
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	095b      	lsrs	r3, r3, #5
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d102      	bne.n	8000e32 <HAL_RCC_OscConfig+0x86>
 8000e2c:	4ba9      	ldr	r3, [pc, #676]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	e015      	b.n	8000e5e <HAL_RCC_OscConfig+0xb2>
 8000e32:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e36:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000e3e:	fa93 f3a3 	rbit	r3, r3
 8000e42:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000e46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e4a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000e4e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000e52:	fa93 f3a3 	rbit	r3, r3
 8000e56:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000e5a:	4b9e      	ldr	r3, [pc, #632]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e5e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e62:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000e66:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000e6a:	fa92 f2a2 	rbit	r2, r2
 8000e6e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return(result);
 8000e72:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000e76:	fab2 f282 	clz	r2, r2
 8000e7a:	b252      	sxtb	r2, r2
 8000e7c:	f042 0220 	orr.w	r2, r2, #32
 8000e80:	b252      	sxtb	r2, r2
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	f002 021f 	and.w	r2, r2, #31
 8000e88:	2101      	movs	r1, #1
 8000e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8e:	4013      	ands	r3, r2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 8121 	beq.w	80010d8 <HAL_RCC_OscConfig+0x32c>
 8000e96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f040 8118 	bne.w	80010d8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	f000 bf8c 	b.w	8001dc6 <HAL_RCC_OscConfig+0x101a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000eb2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ebe:	d106      	bne.n	8000ece <HAL_RCC_OscConfig+0x122>
 8000ec0:	4b84      	ldr	r3, [pc, #528]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a83      	ldr	r2, [pc, #524]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 8000ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	e036      	b.n	8000f3c <HAL_RCC_OscConfig+0x190>
 8000ece:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ed2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10c      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x14c>
 8000ede:	4b7d      	ldr	r3, [pc, #500]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a7c      	ldr	r2, [pc, #496]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 8000ee4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	4b7a      	ldr	r3, [pc, #488]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a79      	ldr	r2, [pc, #484]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 8000ef0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	e021      	b.n	8000f3c <HAL_RCC_OscConfig+0x190>
 8000ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000efc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f08:	d10c      	bne.n	8000f24 <HAL_RCC_OscConfig+0x178>
 8000f0a:	4b72      	ldr	r3, [pc, #456]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a71      	ldr	r2, [pc, #452]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 8000f10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	4b6f      	ldr	r3, [pc, #444]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a6e      	ldr	r2, [pc, #440]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 8000f1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	e00b      	b.n	8000f3c <HAL_RCC_OscConfig+0x190>
 8000f24:	4b6b      	ldr	r3, [pc, #428]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a6a      	ldr	r2, [pc, #424]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 8000f2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	4b68      	ldr	r3, [pc, #416]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a67      	ldr	r2, [pc, #412]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 8000f36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f3a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f3c:	4b65      	ldr	r3, [pc, #404]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 8000f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f40:	f023 020f 	bic.w	r2, r3, #15
 8000f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	4960      	ldr	r1, [pc, #384]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 8000f52:	4313      	orrs	r3, r2
 8000f54:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d05a      	beq.n	800101c <HAL_RCC_OscConfig+0x270>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f66:	f7ff ff03 	bl	8000d70 <HAL_GetTick>
 8000f6a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6e:	e00a      	b.n	8000f86 <HAL_RCC_OscConfig+0x1da>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f70:	f7ff fefe 	bl	8000d70 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b64      	cmp	r3, #100	@ 0x64
 8000f7e:	d902      	bls.n	8000f86 <HAL_RCC_OscConfig+0x1da>
          {
            return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	f000 bf20 	b.w	8001dc6 <HAL_RCC_OscConfig+0x101a>
 8000f86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f8a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000f92:	fa93 f3a3 	rbit	r3, r3
 8000f96:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return(result);
 8000f9a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9e:	fab3 f383 	clz	r3, r3
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	095b      	lsrs	r3, r3, #5
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d102      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x20c>
 8000fb2:	4b48      	ldr	r3, [pc, #288]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	e015      	b.n	8000fe4 <HAL_RCC_OscConfig+0x238>
 8000fb8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fbc:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000fc4:	fa93 f3a3 	rbit	r3, r3
 8000fc8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000fcc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fd0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000fd4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000fd8:	fa93 f3a3 	rbit	r3, r3
 8000fdc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000fe0:	4b3c      	ldr	r3, [pc, #240]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fe8:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000fec:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000ff0:	fa92 f2a2 	rbit	r2, r2
 8000ff4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return(result);
 8000ff8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000ffc:	fab2 f282 	clz	r2, r2
 8001000:	b252      	sxtb	r2, r2
 8001002:	f042 0220 	orr.w	r2, r2, #32
 8001006:	b252      	sxtb	r2, r2
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	f002 021f 	and.w	r2, r2, #31
 800100e:	2101      	movs	r1, #1
 8001010:	fa01 f202 	lsl.w	r2, r1, r2
 8001014:	4013      	ands	r3, r2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0aa      	beq.n	8000f70 <HAL_RCC_OscConfig+0x1c4>
 800101a:	e05e      	b.n	80010da <HAL_RCC_OscConfig+0x32e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101c:	f7ff fea8 	bl	8000d70 <HAL_GetTick>
 8001020:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001024:	e00a      	b.n	800103c <HAL_RCC_OscConfig+0x290>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001026:	f7ff fea3 	bl	8000d70 <HAL_GetTick>
 800102a:	4602      	mov	r2, r0
 800102c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b64      	cmp	r3, #100	@ 0x64
 8001034:	d902      	bls.n	800103c <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	f000 bec5 	b.w	8001dc6 <HAL_RCC_OscConfig+0x101a>
 800103c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001040:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001044:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001048:	fa93 f3a3 	rbit	r3, r3
 800104c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return(result);
 8001050:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001054:	fab3 f383 	clz	r3, r3
 8001058:	b2db      	uxtb	r3, r3
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b01      	cmp	r3, #1
 8001066:	d102      	bne.n	800106e <HAL_RCC_OscConfig+0x2c2>
 8001068:	4b1a      	ldr	r3, [pc, #104]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	e015      	b.n	800109a <HAL_RCC_OscConfig+0x2ee>
 800106e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001072:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001076:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800107a:	fa93 f3a3 	rbit	r3, r3
 800107e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8001082:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001086:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800108a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800108e:	fa93 f3a3 	rbit	r3, r3
 8001092:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001096:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <HAL_RCC_OscConfig+0x328>)
 8001098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800109a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800109e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80010a2:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80010a6:	fa92 f2a2 	rbit	r2, r2
 80010aa:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return(result);
 80010ae:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80010b2:	fab2 f282 	clz	r2, r2
 80010b6:	b252      	sxtb	r2, r2
 80010b8:	f042 0220 	orr.w	r2, r2, #32
 80010bc:	b252      	sxtb	r2, r2
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	f002 021f 	and.w	r2, r2, #31
 80010c4:	2101      	movs	r1, #1
 80010c6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ca:	4013      	ands	r3, r2
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1aa      	bne.n	8001026 <HAL_RCC_OscConfig+0x27a>
 80010d0:	e003      	b.n	80010da <HAL_RCC_OscConfig+0x32e>
 80010d2:	bf00      	nop
 80010d4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 817e 	beq.w	80013ec <HAL_RCC_OscConfig+0x640>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010f0:	4ba6      	ldr	r3, [pc, #664]	@ (800138c <HAL_RCC_OscConfig+0x5e0>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 030c 	and.w	r3, r3, #12
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00b      	beq.n	8001114 <HAL_RCC_OscConfig+0x368>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010fc:	4ba3      	ldr	r3, [pc, #652]	@ (800138c <HAL_RCC_OscConfig+0x5e0>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 030c 	and.w	r3, r3, #12
 8001104:	2b08      	cmp	r3, #8
 8001106:	d173      	bne.n	80011f0 <HAL_RCC_OscConfig+0x444>
 8001108:	4ba0      	ldr	r3, [pc, #640]	@ (800138c <HAL_RCC_OscConfig+0x5e0>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d16d      	bne.n	80011f0 <HAL_RCC_OscConfig+0x444>
 8001114:	2302      	movs	r3, #2
 8001116:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800111e:	fa93 f3a3 	rbit	r3, r3
 8001122:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return(result);
 8001126:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112a:	fab3 f383 	clz	r3, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	095b      	lsrs	r3, r3, #5
 8001132:	b2db      	uxtb	r3, r3
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	b2db      	uxtb	r3, r3
 800113a:	2b01      	cmp	r3, #1
 800113c:	d102      	bne.n	8001144 <HAL_RCC_OscConfig+0x398>
 800113e:	4b93      	ldr	r3, [pc, #588]	@ (800138c <HAL_RCC_OscConfig+0x5e0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	e013      	b.n	800116c <HAL_RCC_OscConfig+0x3c0>
 8001144:	2302      	movs	r3, #2
 8001146:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800114e:	fa93 f3a3 	rbit	r3, r3
 8001152:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001156:	2302      	movs	r3, #2
 8001158:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800115c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001160:	fa93 f3a3 	rbit	r3, r3
 8001164:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001168:	4b88      	ldr	r3, [pc, #544]	@ (800138c <HAL_RCC_OscConfig+0x5e0>)
 800116a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116c:	2202      	movs	r2, #2
 800116e:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001172:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001176:	fa92 f2a2 	rbit	r2, r2
 800117a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return(result);
 800117e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001182:	fab2 f282 	clz	r2, r2
 8001186:	b252      	sxtb	r2, r2
 8001188:	f042 0220 	orr.w	r2, r2, #32
 800118c:	b252      	sxtb	r2, r2
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	f002 021f 	and.w	r2, r2, #31
 8001194:	2101      	movs	r1, #1
 8001196:	fa01 f202 	lsl.w	r2, r1, r2
 800119a:	4013      	ands	r3, r2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d00a      	beq.n	80011b6 <HAL_RCC_OscConfig+0x40a>
 80011a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	691b      	ldr	r3, [r3, #16]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d002      	beq.n	80011b6 <HAL_RCC_OscConfig+0x40a>
      {
        return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	f000 be08 	b.w	8001dc6 <HAL_RCC_OscConfig+0x101a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b6:	4b75      	ldr	r3, [pc, #468]	@ (800138c <HAL_RCC_OscConfig+0x5e0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6959      	ldr	r1, [r3, #20]
 80011ca:	23f8      	movs	r3, #248	@ 0xf8
 80011cc:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80011d4:	fa93 f3a3 	rbit	r3, r3
 80011d8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
  return(result);
 80011dc:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80011e0:	fab3 f383 	clz	r3, r3
 80011e4:	fa01 f303 	lsl.w	r3, r1, r3
 80011e8:	4968      	ldr	r1, [pc, #416]	@ (800138c <HAL_RCC_OscConfig+0x5e0>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ee:	e0fd      	b.n	80013ec <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 8088 	beq.w	8001312 <HAL_RCC_OscConfig+0x566>
 8001202:	2301      	movs	r3, #1
 8001204:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001208:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800120c:	fa93 f3a3 	rbit	r3, r3
 8001210:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return(result);
 8001214:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001218:	fab3 f383 	clz	r3, r3
 800121c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001220:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	461a      	mov	r2, r3
 8001228:	2301      	movs	r3, #1
 800122a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff fda0 	bl	8000d70 <HAL_GetTick>
 8001230:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001234:	e00a      	b.n	800124c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001236:	f7ff fd9b 	bl	8000d70 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d902      	bls.n	800124c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	f000 bdbd 	b.w	8001dc6 <HAL_RCC_OscConfig+0x101a>
 800124c:	2302      	movs	r3, #2
 800124e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001252:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001256:	fa93 f3a3 	rbit	r3, r3
 800125a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return(result);
 800125e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001262:	fab3 f383 	clz	r3, r3
 8001266:	b2db      	uxtb	r3, r3
 8001268:	095b      	lsrs	r3, r3, #5
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b01      	cmp	r3, #1
 8001274:	d102      	bne.n	800127c <HAL_RCC_OscConfig+0x4d0>
 8001276:	4b45      	ldr	r3, [pc, #276]	@ (800138c <HAL_RCC_OscConfig+0x5e0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	e013      	b.n	80012a4 <HAL_RCC_OscConfig+0x4f8>
 800127c:	2302      	movs	r3, #2
 800127e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001282:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001286:	fa93 f3a3 	rbit	r3, r3
 800128a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800128e:	2302      	movs	r3, #2
 8001290:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001294:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001298:	fa93 f3a3 	rbit	r3, r3
 800129c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80012a0:	4b3a      	ldr	r3, [pc, #232]	@ (800138c <HAL_RCC_OscConfig+0x5e0>)
 80012a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a4:	2202      	movs	r2, #2
 80012a6:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80012aa:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80012ae:	fa92 f2a2 	rbit	r2, r2
 80012b2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return(result);
 80012b6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80012ba:	fab2 f282 	clz	r2, r2
 80012be:	b252      	sxtb	r2, r2
 80012c0:	f042 0220 	orr.w	r2, r2, #32
 80012c4:	b252      	sxtb	r2, r2
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	f002 021f 	and.w	r2, r2, #31
 80012cc:	2101      	movs	r1, #1
 80012ce:	fa01 f202 	lsl.w	r2, r1, r2
 80012d2:	4013      	ands	r3, r2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0ae      	beq.n	8001236 <HAL_RCC_OscConfig+0x48a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d8:	4b2c      	ldr	r3, [pc, #176]	@ (800138c <HAL_RCC_OscConfig+0x5e0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6959      	ldr	r1, [r3, #20]
 80012ec:	23f8      	movs	r3, #248	@ 0xf8
 80012ee:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80012f6:	fa93 f3a3 	rbit	r3, r3
 80012fa:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  return(result);
 80012fe:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001302:	fab3 f383 	clz	r3, r3
 8001306:	fa01 f303 	lsl.w	r3, r1, r3
 800130a:	4920      	ldr	r1, [pc, #128]	@ (800138c <HAL_RCC_OscConfig+0x5e0>)
 800130c:	4313      	orrs	r3, r2
 800130e:	600b      	str	r3, [r1, #0]
 8001310:	e06c      	b.n	80013ec <HAL_RCC_OscConfig+0x640>
 8001312:	2301      	movs	r3, #1
 8001314:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001318:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800131c:	fa93 f3a3 	rbit	r3, r3
 8001320:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return(result);
 8001324:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001328:	fab3 f383 	clz	r3, r3
 800132c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001330:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	461a      	mov	r2, r3
 8001338:	2300      	movs	r3, #0
 800133a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fd18 	bl	8000d70 <HAL_GetTick>
 8001340:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001344:	e00a      	b.n	800135c <HAL_RCC_OscConfig+0x5b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001346:	f7ff fd13 	bl	8000d70 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d902      	bls.n	800135c <HAL_RCC_OscConfig+0x5b0>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	f000 bd35 	b.w	8001dc6 <HAL_RCC_OscConfig+0x101a>
 800135c:	2302      	movs	r3, #2
 800135e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001362:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001366:	fa93 f3a3 	rbit	r3, r3
 800136a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return(result);
 800136e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001372:	fab3 f383 	clz	r3, r3
 8001376:	b2db      	uxtb	r3, r3
 8001378:	095b      	lsrs	r3, r3, #5
 800137a:	b2db      	uxtb	r3, r3
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b01      	cmp	r3, #1
 8001384:	d104      	bne.n	8001390 <HAL_RCC_OscConfig+0x5e4>
 8001386:	4b01      	ldr	r3, [pc, #4]	@ (800138c <HAL_RCC_OscConfig+0x5e0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	e015      	b.n	80013b8 <HAL_RCC_OscConfig+0x60c>
 800138c:	40021000 	.word	0x40021000
 8001390:	2302      	movs	r3, #2
 8001392:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001396:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800139a:	fa93 f3a3 	rbit	r3, r3
 800139e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80013a2:	2302      	movs	r3, #2
 80013a4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80013a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80013ac:	fa93 f3a3 	rbit	r3, r3
 80013b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80013b4:	4bc5      	ldr	r3, [pc, #788]	@ (80016cc <HAL_RCC_OscConfig+0x920>)
 80013b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b8:	2202      	movs	r2, #2
 80013ba:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80013be:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80013c2:	fa92 f2a2 	rbit	r2, r2
 80013c6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return(result);
 80013ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80013ce:	fab2 f282 	clz	r2, r2
 80013d2:	b252      	sxtb	r2, r2
 80013d4:	f042 0220 	orr.w	r2, r2, #32
 80013d8:	b252      	sxtb	r2, r2
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	f002 021f 	and.w	r2, r2, #31
 80013e0:	2101      	movs	r1, #1
 80013e2:	fa01 f202 	lsl.w	r2, r1, r2
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1ac      	bne.n	8001346 <HAL_RCC_OscConfig+0x59a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0308 	and.w	r3, r3, #8
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 810a 	beq.w	8001616 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001406:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d073      	beq.n	80014fa <HAL_RCC_OscConfig+0x74e>
 8001412:	2301      	movs	r3, #1
 8001414:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800141c:	fa93 f3a3 	rbit	r3, r3
 8001420:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return(result);
 8001424:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001428:	fab3 f383 	clz	r3, r3
 800142c:	461a      	mov	r2, r3
 800142e:	4ba8      	ldr	r3, [pc, #672]	@ (80016d0 <HAL_RCC_OscConfig+0x924>)
 8001430:	4413      	add	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	461a      	mov	r2, r3
 8001436:	2301      	movs	r3, #1
 8001438:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143a:	f7ff fc99 	bl	8000d70 <HAL_GetTick>
 800143e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001442:	e00a      	b.n	800145a <HAL_RCC_OscConfig+0x6ae>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001444:	f7ff fc94 	bl	8000d70 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d902      	bls.n	800145a <HAL_RCC_OscConfig+0x6ae>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	f000 bcb6 	b.w	8001dc6 <HAL_RCC_OscConfig+0x101a>
 800145a:	2302      	movs	r3, #2
 800145c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001460:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001464:	fa93 f3a3 	rbit	r3, r3
 8001468:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800146c:	2302      	movs	r3, #2
 800146e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001472:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001476:	fa93 f2a3 	rbit	r2, r3
 800147a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800147e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001488:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800148c:	2202      	movs	r2, #2
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001494:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	fa93 f2a3 	rbit	r2, r3
 800149e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80014a6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a8:	4b88      	ldr	r3, [pc, #544]	@ (80016cc <HAL_RCC_OscConfig+0x920>)
 80014aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80014b4:	2102      	movs	r1, #2
 80014b6:	6019      	str	r1, [r3, #0]
 80014b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014bc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	fa93 f1a3 	rbit	r1, r3
 80014c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80014ce:	6019      	str	r1, [r3, #0]
  return(result);
 80014d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	fab3 f383 	clz	r3, r3
 80014de:	b25b      	sxtb	r3, r3
 80014e0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80014e4:	b25b      	sxtb	r3, r3
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	f003 031f 	and.w	r3, r3, #31
 80014ec:	2101      	movs	r1, #1
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	4013      	ands	r3, r2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0a5      	beq.n	8001444 <HAL_RCC_OscConfig+0x698>
 80014f8:	e08d      	b.n	8001616 <HAL_RCC_OscConfig+0x86a>
 80014fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014fe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001502:	2201      	movs	r2, #1
 8001504:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800150a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	fa93 f2a3 	rbit	r2, r3
 8001514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001518:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800151c:	601a      	str	r2, [r3, #0]
  return(result);
 800151e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001522:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001526:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001528:	fab3 f383 	clz	r3, r3
 800152c:	461a      	mov	r2, r3
 800152e:	4b68      	ldr	r3, [pc, #416]	@ (80016d0 <HAL_RCC_OscConfig+0x924>)
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	461a      	mov	r2, r3
 8001536:	2300      	movs	r3, #0
 8001538:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153a:	f7ff fc19 	bl	8000d70 <HAL_GetTick>
 800153e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001542:	e00a      	b.n	800155a <HAL_RCC_OscConfig+0x7ae>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001544:	f7ff fc14 	bl	8000d70 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d902      	bls.n	800155a <HAL_RCC_OscConfig+0x7ae>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	f000 bc36 	b.w	8001dc6 <HAL_RCC_OscConfig+0x101a>
 800155a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800155e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001562:	2202      	movs	r2, #2
 8001564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800156a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	fa93 f2a3 	rbit	r2, r3
 8001574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001578:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001582:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001586:	2202      	movs	r2, #2
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800158e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	fa93 f2a3 	rbit	r2, r3
 8001598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800159c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80015aa:	2202      	movs	r2, #2
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	fa93 f2a3 	rbit	r2, r3
 80015bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015c0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80015c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c6:	4b41      	ldr	r3, [pc, #260]	@ (80016cc <HAL_RCC_OscConfig+0x920>)
 80015c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ce:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80015d2:	2102      	movs	r1, #2
 80015d4:	6019      	str	r1, [r3, #0]
 80015d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015da:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	fa93 f1a3 	rbit	r1, r3
 80015e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80015ec:	6019      	str	r1, [r3, #0]
  return(result);
 80015ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015f2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	fab3 f383 	clz	r3, r3
 80015fc:	b25b      	sxtb	r3, r3
 80015fe:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001602:	b25b      	sxtb	r3, r3
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f003 031f 	and.w	r3, r3, #31
 800160a:	2101      	movs	r1, #1
 800160c:	fa01 f303 	lsl.w	r3, r1, r3
 8001610:	4013      	ands	r3, r2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d196      	bne.n	8001544 <HAL_RCC_OscConfig+0x798>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800161a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 81a4 	beq.w	8001974 <HAL_RCC_OscConfig+0xbc8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800162c:	2300      	movs	r3, #0
 800162e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001632:	4b26      	ldr	r3, [pc, #152]	@ (80016cc <HAL_RCC_OscConfig+0x920>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d116      	bne.n	800166c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	4b23      	ldr	r3, [pc, #140]	@ (80016cc <HAL_RCC_OscConfig+0x920>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	4a22      	ldr	r2, [pc, #136]	@ (80016cc <HAL_RCC_OscConfig+0x920>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001648:	61d3      	str	r3, [r2, #28]
 800164a:	4b20      	ldr	r3, [pc, #128]	@ (80016cc <HAL_RCC_OscConfig+0x920>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001656:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001660:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001664:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001666:	2301      	movs	r3, #1
 8001668:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166c:	4b19      	ldr	r3, [pc, #100]	@ (80016d4 <HAL_RCC_OscConfig+0x928>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d11a      	bne.n	80016ae <HAL_RCC_OscConfig+0x902>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001678:	4b16      	ldr	r3, [pc, #88]	@ (80016d4 <HAL_RCC_OscConfig+0x928>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a15      	ldr	r2, [pc, #84]	@ (80016d4 <HAL_RCC_OscConfig+0x928>)
 800167e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001682:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001684:	f7ff fb74 	bl	8000d70 <HAL_GetTick>
 8001688:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168c:	e009      	b.n	80016a2 <HAL_RCC_OscConfig+0x8f6>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168e:	f7ff fb6f 	bl	8000d70 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	@ 0x64
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x8f6>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e391      	b.n	8001dc6 <HAL_RCC_OscConfig+0x101a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a2:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <HAL_RCC_OscConfig+0x928>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0ef      	beq.n	800168e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x92c>
 80016be:	4b03      	ldr	r3, [pc, #12]	@ (80016cc <HAL_RCC_OscConfig+0x920>)
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	4a02      	ldr	r2, [pc, #8]	@ (80016cc <HAL_RCC_OscConfig+0x920>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6213      	str	r3, [r2, #32]
 80016ca:	e03b      	b.n	8001744 <HAL_RCC_OscConfig+0x998>
 80016cc:	40021000 	.word	0x40021000
 80016d0:	10908120 	.word	0x10908120
 80016d4:	40007000 	.word	0x40007000
 80016d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10c      	bne.n	8001702 <HAL_RCC_OscConfig+0x956>
 80016e8:	4b7f      	ldr	r3, [pc, #508]	@ (80018e8 <HAL_RCC_OscConfig+0xb3c>)
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	4a7e      	ldr	r2, [pc, #504]	@ (80018e8 <HAL_RCC_OscConfig+0xb3c>)
 80016ee:	f023 0301 	bic.w	r3, r3, #1
 80016f2:	6213      	str	r3, [r2, #32]
 80016f4:	4b7c      	ldr	r3, [pc, #496]	@ (80018e8 <HAL_RCC_OscConfig+0xb3c>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	4a7b      	ldr	r2, [pc, #492]	@ (80018e8 <HAL_RCC_OscConfig+0xb3c>)
 80016fa:	f023 0304 	bic.w	r3, r3, #4
 80016fe:	6213      	str	r3, [r2, #32]
 8001700:	e020      	b.n	8001744 <HAL_RCC_OscConfig+0x998>
 8001702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001706:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	2b05      	cmp	r3, #5
 8001710:	d10c      	bne.n	800172c <HAL_RCC_OscConfig+0x980>
 8001712:	4b75      	ldr	r3, [pc, #468]	@ (80018e8 <HAL_RCC_OscConfig+0xb3c>)
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	4a74      	ldr	r2, [pc, #464]	@ (80018e8 <HAL_RCC_OscConfig+0xb3c>)
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	6213      	str	r3, [r2, #32]
 800171e:	4b72      	ldr	r3, [pc, #456]	@ (80018e8 <HAL_RCC_OscConfig+0xb3c>)
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	4a71      	ldr	r2, [pc, #452]	@ (80018e8 <HAL_RCC_OscConfig+0xb3c>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6213      	str	r3, [r2, #32]
 800172a:	e00b      	b.n	8001744 <HAL_RCC_OscConfig+0x998>
 800172c:	4b6e      	ldr	r3, [pc, #440]	@ (80018e8 <HAL_RCC_OscConfig+0xb3c>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	4a6d      	ldr	r2, [pc, #436]	@ (80018e8 <HAL_RCC_OscConfig+0xb3c>)
 8001732:	f023 0301 	bic.w	r3, r3, #1
 8001736:	6213      	str	r3, [r2, #32]
 8001738:	4b6b      	ldr	r3, [pc, #428]	@ (80018e8 <HAL_RCC_OscConfig+0xb3c>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a6a      	ldr	r2, [pc, #424]	@ (80018e8 <HAL_RCC_OscConfig+0xb3c>)
 800173e:	f023 0304 	bic.w	r3, r3, #4
 8001742:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001744:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001748:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 8082 	beq.w	800185a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001756:	f7ff fb0b 	bl	8000d70 <HAL_GetTick>
 800175a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175e:	e00b      	b.n	8001778 <HAL_RCC_OscConfig+0x9cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001760:	f7ff fb06 	bl	8000d70 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001770:	4293      	cmp	r3, r2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x9cc>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e326      	b.n	8001dc6 <HAL_RCC_OscConfig+0x101a>
 8001778:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800177c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001780:	2202      	movs	r2, #2
 8001782:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001788:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	fa93 f2a3 	rbit	r2, r3
 8001792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001796:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80017a4:	2202      	movs	r2, #2
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ac:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	fa93 f2a3 	rbit	r2, r3
 80017b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ba:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80017be:	601a      	str	r2, [r3, #0]
  return(result);
 80017c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80017c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ca:	fab3 f383 	clz	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	095b      	lsrs	r3, r3, #5
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d102      	bne.n	80017e4 <HAL_RCC_OscConfig+0xa38>
 80017de:	4b42      	ldr	r3, [pc, #264]	@ (80018e8 <HAL_RCC_OscConfig+0xb3c>)
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	e013      	b.n	800180c <HAL_RCC_OscConfig+0xa60>
 80017e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80017ec:	2202      	movs	r2, #2
 80017ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	fa93 f2a3 	rbit	r2, r3
 80017fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001802:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	4b37      	ldr	r3, [pc, #220]	@ (80018e8 <HAL_RCC_OscConfig+0xb3c>)
 800180a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001810:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 8001814:	2102      	movs	r1, #2
 8001816:	6011      	str	r1, [r2, #0]
 8001818:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800181c:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	fa92 f1a2 	rbit	r1, r2
 8001826:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800182a:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800182e:	6011      	str	r1, [r2, #0]
  return(result);
 8001830:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001834:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001838:	6812      	ldr	r2, [r2, #0]
 800183a:	fab2 f282 	clz	r2, r2
 800183e:	b252      	sxtb	r2, r2
 8001840:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001844:	b252      	sxtb	r2, r2
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	f002 021f 	and.w	r2, r2, #31
 800184c:	2101      	movs	r1, #1
 800184e:	fa01 f202 	lsl.w	r2, r1, r2
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d083      	beq.n	8001760 <HAL_RCC_OscConfig+0x9b4>
 8001858:	e082      	b.n	8001960 <HAL_RCC_OscConfig+0xbb4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185a:	f7ff fa89 	bl	8000d70 <HAL_GetTick>
 800185e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001862:	e00b      	b.n	800187c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001864:	f7ff fa84 	bl	8000d70 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001874:	4293      	cmp	r3, r2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e2a4      	b.n	8001dc6 <HAL_RCC_OscConfig+0x101a>
 800187c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001880:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001884:	2202      	movs	r2, #2
 8001886:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001888:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800188c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	fa93 f2a3 	rbit	r2, r3
 8001896:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800189a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80018a8:	2202      	movs	r2, #2
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	fa93 f2a3 	rbit	r2, r3
 80018ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018be:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80018c2:	601a      	str	r2, [r3, #0]
  return(result);
 80018c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80018cc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ce:	fab3 f383 	clz	r3, r3
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	095b      	lsrs	r3, r3, #5
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d104      	bne.n	80018ec <HAL_RCC_OscConfig+0xb40>
 80018e2:	4b01      	ldr	r3, [pc, #4]	@ (80018e8 <HAL_RCC_OscConfig+0xb3c>)
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	e015      	b.n	8001914 <HAL_RCC_OscConfig+0xb68>
 80018e8:	40021000 	.word	0x40021000
 80018ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018f4:	2202      	movs	r2, #2
 80018f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018fc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	fa93 f2a3 	rbit	r2, r3
 8001906:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800190a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	4bad      	ldr	r3, [pc, #692]	@ (8001bc8 <HAL_RCC_OscConfig+0xe1c>)
 8001912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001914:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001918:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 800191c:	2102      	movs	r1, #2
 800191e:	6011      	str	r1, [r2, #0]
 8001920:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001924:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 8001928:	6812      	ldr	r2, [r2, #0]
 800192a:	fa92 f1a2 	rbit	r1, r2
 800192e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001932:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001936:	6011      	str	r1, [r2, #0]
  return(result);
 8001938:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800193c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	fab2 f282 	clz	r2, r2
 8001946:	b252      	sxtb	r2, r2
 8001948:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800194c:	b252      	sxtb	r2, r2
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	f002 021f 	and.w	r2, r2, #31
 8001954:	2101      	movs	r1, #1
 8001956:	fa01 f202 	lsl.w	r2, r1, r2
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d181      	bne.n	8001864 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001960:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001964:	2b01      	cmp	r3, #1
 8001966:	d105      	bne.n	8001974 <HAL_RCC_OscConfig+0xbc8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001968:	4b97      	ldr	r3, [pc, #604]	@ (8001bc8 <HAL_RCC_OscConfig+0xe1c>)
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	4a96      	ldr	r2, [pc, #600]	@ (8001bc8 <HAL_RCC_OscConfig+0xe1c>)
 800196e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001972:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001978:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 821f 	beq.w	8001dc4 <HAL_RCC_OscConfig+0x1018>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001986:	4b90      	ldr	r3, [pc, #576]	@ (8001bc8 <HAL_RCC_OscConfig+0xe1c>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b08      	cmp	r3, #8
 8001990:	f000 8216 	beq.w	8001dc0 <HAL_RCC_OscConfig+0x1014>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001998:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	f040 8166 	bne.w	8001c72 <HAL_RCC_OscConfig+0xec6>
 80019a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019aa:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80019ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b8:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	fa93 f2a3 	rbit	r2, r3
 80019c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80019ca:	601a      	str	r2, [r3, #0]
  return(result);
 80019cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80019d4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d6:	fab3 f383 	clz	r3, r3
 80019da:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019de:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	461a      	mov	r2, r3
 80019e6:	2300      	movs	r3, #0
 80019e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ea:	f7ff f9c1 	bl	8000d70 <HAL_GetTick>
 80019ee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f2:	e00a      	b.n	8001a0a <HAL_RCC_OscConfig+0xc5e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f4:	f7ff f9bc 	bl	8000d70 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	4a72      	ldr	r2, [pc, #456]	@ (8001bcc <HAL_RCC_OscConfig+0xe20>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0xc5e>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e1dd      	b.n	8001dc6 <HAL_RCC_OscConfig+0x101a>
 8001a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a0e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001a12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a1c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	fa93 f2a3 	rbit	r2, r3
 8001a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a2a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001a2e:	601a      	str	r2, [r3, #0]
  return(result);
 8001a30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a34:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001a38:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3a:	fab3 f383 	clz	r3, r3
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	095b      	lsrs	r3, r3, #5
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d102      	bne.n	8001a54 <HAL_RCC_OscConfig+0xca8>
 8001a4e:	4b5e      	ldr	r3, [pc, #376]	@ (8001bc8 <HAL_RCC_OscConfig+0xe1c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	e027      	b.n	8001aa4 <HAL_RCC_OscConfig+0xcf8>
 8001a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a58:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a66:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	fa93 f2a3 	rbit	r2, r3
 8001a70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a74:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a7e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001a82:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a8c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	fa93 f2a3 	rbit	r2, r3
 8001a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a9a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	4b49      	ldr	r3, [pc, #292]	@ (8001bc8 <HAL_RCC_OscConfig+0xe1c>)
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001aa8:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 8001aac:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001ab0:	6011      	str	r1, [r2, #0]
 8001ab2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ab6:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	fa92 f1a2 	rbit	r1, r2
 8001ac0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ac4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001ac8:	6011      	str	r1, [r2, #0]
  return(result);
 8001aca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ace:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001ad2:	6812      	ldr	r2, [r2, #0]
 8001ad4:	fab2 f282 	clz	r2, r2
 8001ad8:	b252      	sxtb	r2, r2
 8001ada:	f042 0220 	orr.w	r2, r2, #32
 8001ade:	b252      	sxtb	r2, r2
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	f002 021f 	and.w	r2, r2, #31
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d180      	bne.n	80019f4 <HAL_RCC_OscConfig+0xc48>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af2:	4b35      	ldr	r3, [pc, #212]	@ (8001bc8 <HAL_RCC_OscConfig+0xe1c>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001afe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	430b      	orrs	r3, r1
 8001b14:	492c      	ldr	r1, [pc, #176]	@ (8001bc8 <HAL_RCC_OscConfig+0xe1c>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	604b      	str	r3, [r1, #4]
 8001b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b1e:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001b22:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2c:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	fa93 f2a3 	rbit	r2, r3
 8001b36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b3a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001b3e:	601a      	str	r2, [r3, #0]
  return(result);
 8001b40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b44:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001b48:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b4a:	fab3 f383 	clz	r3, r3
 8001b4e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b52:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5e:	f7ff f907 	bl	8000d70 <HAL_GetTick>
 8001b62:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b66:	e00a      	b.n	8001b7e <HAL_RCC_OscConfig+0xdd2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b68:	f7ff f902 	bl	8000d70 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	4a15      	ldr	r2, [pc, #84]	@ (8001bcc <HAL_RCC_OscConfig+0xe20>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0xdd2>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e123      	b.n	8001dc6 <HAL_RCC_OscConfig+0x101a>
 8001b7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b82:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b86:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b90:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	fa93 f2a3 	rbit	r2, r3
 8001b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b9e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001ba2:	601a      	str	r2, [r3, #0]
  return(result);
 8001ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001bac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bae:	fab3 f383 	clz	r3, r3
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	095b      	lsrs	r3, r3, #5
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d106      	bne.n	8001bd0 <HAL_RCC_OscConfig+0xe24>
 8001bc2:	4b01      	ldr	r3, [pc, #4]	@ (8001bc8 <HAL_RCC_OscConfig+0xe1c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	e02b      	b.n	8001c20 <HAL_RCC_OscConfig+0xe74>
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	00030d40 	.word	0x00030d40
 8001bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001bd8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	fa93 f2a3 	rbit	r2, r3
 8001bec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bfe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c08:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	fa93 f2a3 	rbit	r2, r3
 8001c12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c16:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	4b6c      	ldr	r3, [pc, #432]	@ (8001dd0 <HAL_RCC_OscConfig+0x1024>)
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c24:	f5a2 72e2 	sub.w	r2, r2, #452	@ 0x1c4
 8001c28:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c2c:	6011      	str	r1, [r2, #0]
 8001c2e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c32:	f5a2 72e2 	sub.w	r2, r2, #452	@ 0x1c4
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	fa92 f1a2 	rbit	r1, r2
 8001c3c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c40:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001c44:	6011      	str	r1, [r2, #0]
  return(result);
 8001c46:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c4a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001c4e:	6812      	ldr	r2, [r2, #0]
 8001c50:	fab2 f282 	clz	r2, r2
 8001c54:	b252      	sxtb	r2, r2
 8001c56:	f042 0220 	orr.w	r2, r2, #32
 8001c5a:	b252      	sxtb	r2, r2
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	f002 021f 	and.w	r2, r2, #31
 8001c62:	2101      	movs	r1, #1
 8001c64:	fa01 f202 	lsl.w	r2, r1, r2
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f43f af7c 	beq.w	8001b68 <HAL_RCC_OscConfig+0xdbc>
 8001c70:	e0a8      	b.n	8001dc4 <HAL_RCC_OscConfig+0x1018>
 8001c72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c76:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8001c7a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c84:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	fa93 f2a3 	rbit	r2, r3
 8001c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c92:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001c96:	601a      	str	r2, [r3, #0]
  return(result);
 8001c98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001ca0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001caa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff f85b 	bl	8000d70 <HAL_GetTick>
 8001cba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_OscConfig+0xf2a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7ff f856 	bl	8000d70 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	4a41      	ldr	r2, [pc, #260]	@ (8001dd4 <HAL_RCC_OscConfig+0x1028>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0xf2a>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e077      	b.n	8001dc6 <HAL_RCC_OscConfig+0x101a>
 8001cd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cda:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001cde:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ce2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	fa93 f2a3 	rbit	r2, r3
 8001cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001cfa:	601a      	str	r2, [r3, #0]
  return(result);
 8001cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d00:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001d04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	095b      	lsrs	r3, r3, #5
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d102      	bne.n	8001d20 <HAL_RCC_OscConfig+0xf74>
 8001d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd0 <HAL_RCC_OscConfig+0x1024>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	e027      	b.n	8001d70 <HAL_RCC_OscConfig+0xfc4>
 8001d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d24:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001d28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d32:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	fa93 f2a3 	rbit	r2, r3
 8001d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d40:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d4a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001d4e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d58:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	fa93 f2a3 	rbit	r2, r3
 8001d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d66:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <HAL_RCC_OscConfig+0x1024>)
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d74:	f5a2 72f6 	sub.w	r2, r2, #492	@ 0x1ec
 8001d78:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001d7c:	6011      	str	r1, [r2, #0]
 8001d7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d82:	f5a2 72f6 	sub.w	r2, r2, #492	@ 0x1ec
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	fa92 f1a2 	rbit	r1, r2
 8001d8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d90:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001d94:	6011      	str	r1, [r2, #0]
  return(result);
 8001d96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d9a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	fab2 f282 	clz	r2, r2
 8001da4:	b252      	sxtb	r2, r2
 8001da6:	f042 0220 	orr.w	r2, r2, #32
 8001daa:	b252      	sxtb	r2, r2
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	f002 021f 	and.w	r2, r2, #31
 8001db2:	2101      	movs	r1, #1
 8001db4:	fa01 f202 	lsl.w	r2, r1, r2
 8001db8:	4013      	ands	r3, r2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d180      	bne.n	8001cc0 <HAL_RCC_OscConfig+0xf14>
 8001dbe:	e001      	b.n	8001dc4 <HAL_RCC_OscConfig+0x1018>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x101a>
    }
  }
  
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	00030d40 	.word	0x00030d40

08001dd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b09c      	sub	sp, #112	@ 0x70
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001de6:	4b98      	ldr	r3, [pc, #608]	@ (8002048 <HAL_RCC_ClockConfig+0x270>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d910      	bls.n	8001e16 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df4:	4b94      	ldr	r3, [pc, #592]	@ (8002048 <HAL_RCC_ClockConfig+0x270>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f023 0207 	bic.w	r2, r3, #7
 8001dfc:	4992      	ldr	r1, [pc, #584]	@ (8002048 <HAL_RCC_ClockConfig+0x270>)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e04:	4b90      	ldr	r3, [pc, #576]	@ (8002048 <HAL_RCC_ClockConfig+0x270>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d001      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e15a      	b.n	80020cc <HAL_RCC_ClockConfig+0x2f4>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d008      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e22:	4b8a      	ldr	r3, [pc, #552]	@ (800204c <HAL_RCC_ClockConfig+0x274>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	4987      	ldr	r1, [pc, #540]	@ (800204c <HAL_RCC_ClockConfig+0x274>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 810d 	beq.w	800205c <HAL_RCC_ClockConfig+0x284>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d13d      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xee>
 8001e4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e4e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e52:	fa93 f3a3 	rbit	r3, r3
 8001e56:	667b      	str	r3, [r7, #100]	@ 0x64
  return(result);
 8001e58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	095b      	lsrs	r3, r3, #5
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d102      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x9c>
 8001e6e:	4b77      	ldr	r3, [pc, #476]	@ (800204c <HAL_RCC_ClockConfig+0x274>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	e00f      	b.n	8001e94 <HAL_RCC_ClockConfig+0xbc>
 8001e74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001e88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e90:	4b6e      	ldr	r3, [pc, #440]	@ (800204c <HAL_RCC_ClockConfig+0x274>)
 8001e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e94:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e98:	653a      	str	r2, [r7, #80]	@ 0x50
 8001e9a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001e9c:	fa92 f2a2 	rbit	r2, r2
 8001ea0:	64fa      	str	r2, [r7, #76]	@ 0x4c
  return(result);
 8001ea2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ea4:	fab2 f282 	clz	r2, r2
 8001ea8:	b252      	sxtb	r2, r2
 8001eaa:	f042 0220 	orr.w	r2, r2, #32
 8001eae:	b252      	sxtb	r2, r2
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	f002 021f 	and.w	r2, r2, #31
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d17d      	bne.n	8001fbe <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e102      	b.n	80020cc <HAL_RCC_ClockConfig+0x2f4>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d13d      	bne.n	8001f4a <HAL_RCC_ClockConfig+0x172>
 8001ece:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8001edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	095b      	lsrs	r3, r3, #5
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d102      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x120>
 8001ef2:	4b56      	ldr	r3, [pc, #344]	@ (800204c <HAL_RCC_ClockConfig+0x274>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	e00f      	b.n	8001f18 <HAL_RCC_ClockConfig+0x140>
 8001ef8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001efc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f14:	4b4d      	ldr	r3, [pc, #308]	@ (800204c <HAL_RCC_ClockConfig+0x274>)
 8001f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f1c:	633a      	str	r2, [r7, #48]	@ 0x30
 8001f1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f20:	fa92 f2a2 	rbit	r2, r2
 8001f24:	62fa      	str	r2, [r7, #44]	@ 0x2c
  return(result);
 8001f26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f28:	fab2 f282 	clz	r2, r2
 8001f2c:	b252      	sxtb	r2, r2
 8001f2e:	f042 0220 	orr.w	r2, r2, #32
 8001f32:	b252      	sxtb	r2, r2
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	f002 021f 	and.w	r2, r2, #31
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d13b      	bne.n	8001fbe <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e0c0      	b.n	80020cc <HAL_RCC_ClockConfig+0x2f4>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f50:	fa93 f3a3 	rbit	r3, r3
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f58:	fab3 f383 	clz	r3, r3
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d102      	bne.n	8001f72 <HAL_RCC_ClockConfig+0x19a>
 8001f6c:	4b37      	ldr	r3, [pc, #220]	@ (800204c <HAL_RCC_ClockConfig+0x274>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	e00d      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1b6>
 8001f72:	2302      	movs	r3, #2
 8001f74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	fa93 f3a3 	rbit	r3, r3
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	2302      	movs	r3, #2
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	fa93 f3a3 	rbit	r3, r3
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	4b30      	ldr	r3, [pc, #192]	@ (800204c <HAL_RCC_ClockConfig+0x274>)
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8e:	2202      	movs	r2, #2
 8001f90:	613a      	str	r2, [r7, #16]
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	fa92 f2a2 	rbit	r2, r2
 8001f98:	60fa      	str	r2, [r7, #12]
  return(result);
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	fab2 f282 	clz	r2, r2
 8001fa0:	b252      	sxtb	r2, r2
 8001fa2:	f042 0220 	orr.w	r2, r2, #32
 8001fa6:	b252      	sxtb	r2, r2
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	f002 021f 	and.w	r2, r2, #31
 8001fae:	2101      	movs	r1, #1
 8001fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e086      	b.n	80020cc <HAL_RCC_ClockConfig+0x2f4>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fbe:	4b23      	ldr	r3, [pc, #140]	@ (800204c <HAL_RCC_ClockConfig+0x274>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f023 0203 	bic.w	r2, r3, #3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4920      	ldr	r1, [pc, #128]	@ (800204c <HAL_RCC_ClockConfig+0x274>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fd0:	f7fe fece 	bl	8000d70 <HAL_GetTick>
 8001fd4:	66f8      	str	r0, [r7, #108]	@ 0x6c
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d112      	bne.n	8002004 <HAL_RCC_ClockConfig+0x22c>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fde:	e00a      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe0:	f7fe fec6 	bl	8000d70 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_ClockConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e06a      	b.n	80020cc <HAL_RCC_ClockConfig+0x2f4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ff6:	4b15      	ldr	r3, [pc, #84]	@ (800204c <HAL_RCC_ClockConfig+0x274>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d1ee      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x208>
 8002002:	e02b      	b.n	800205c <HAL_RCC_ClockConfig+0x284>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b02      	cmp	r3, #2
 800200a:	d121      	bne.n	8002050 <HAL_RCC_ClockConfig+0x278>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800200c:	e00a      	b.n	8002024 <HAL_RCC_ClockConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800200e:	f7fe feaf 	bl	8000d70 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	f241 3288 	movw	r2, #5000	@ 0x1388
 800201c:	4293      	cmp	r3, r2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_ClockConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e053      	b.n	80020cc <HAL_RCC_ClockConfig+0x2f4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002024:	4b09      	ldr	r3, [pc, #36]	@ (800204c <HAL_RCC_ClockConfig+0x274>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 030c 	and.w	r3, r3, #12
 800202c:	2b08      	cmp	r3, #8
 800202e:	d1ee      	bne.n	800200e <HAL_RCC_ClockConfig+0x236>
 8002030:	e014      	b.n	800205c <HAL_RCC_ClockConfig+0x284>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002032:	f7fe fe9d 	bl	8000d70 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002040:	4293      	cmp	r3, r2
 8002042:	d905      	bls.n	8002050 <HAL_RCC_ClockConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e041      	b.n	80020cc <HAL_RCC_ClockConfig+0x2f4>
 8002048:	40022000 	.word	0x40022000
 800204c:	40021000 	.word	0x40021000
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002050:	4b20      	ldr	r3, [pc, #128]	@ (80020d4 <HAL_RCC_ClockConfig+0x2fc>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1ea      	bne.n	8002032 <HAL_RCC_ClockConfig+0x25a>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800205c:	4b1e      	ldr	r3, [pc, #120]	@ (80020d8 <HAL_RCC_ClockConfig+0x300>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d210      	bcs.n	800208c <HAL_RCC_ClockConfig+0x2b4>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b1b      	ldr	r3, [pc, #108]	@ (80020d8 <HAL_RCC_ClockConfig+0x300>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 0207 	bic.w	r2, r3, #7
 8002072:	4919      	ldr	r1, [pc, #100]	@ (80020d8 <HAL_RCC_ClockConfig+0x300>)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800207a:	4b17      	ldr	r3, [pc, #92]	@ (80020d8 <HAL_RCC_ClockConfig+0x300>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_ClockConfig+0x2b4>
    {
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e01f      	b.n	80020cc <HAL_RCC_ClockConfig+0x2f4>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <HAL_RCC_ClockConfig+0x2d2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002098:	4b0e      	ldr	r3, [pc, #56]	@ (80020d4 <HAL_RCC_ClockConfig+0x2fc>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	490b      	ldr	r1, [pc, #44]	@ (80020d4 <HAL_RCC_ClockConfig+0x2fc>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d009      	beq.n	80020ca <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020b6:	4b07      	ldr	r3, [pc, #28]	@ (80020d4 <HAL_RCC_ClockConfig+0x2fc>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4903      	ldr	r1, [pc, #12]	@ (80020d4 <HAL_RCC_ClockConfig+0x2fc>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	604b      	str	r3, [r1, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3770      	adds	r7, #112	@ 0x70
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40022000 	.word	0x40022000

080020dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  //return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
  return F_CPU;
 80020e0:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002102:	e154      	b.n	80023ae <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	2101      	movs	r1, #1
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	fa01 f303 	lsl.w	r3, r1, r3
 8002110:	4013      	ands	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 8146 	beq.w	80023a8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b02      	cmp	r3, #2
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x40>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b12      	cmp	r3, #18
 800212a:	d123      	bne.n	8002174 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	08da      	lsrs	r2, r3, #3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3208      	adds	r2, #8
 8002134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002138:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	220f      	movs	r2, #15
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4013      	ands	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	08da      	lsrs	r2, r3, #3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3208      	adds	r2, #8
 800216e:	6939      	ldr	r1, [r7, #16]
 8002170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	2203      	movs	r2, #3
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0203 	and.w	r2, r3, #3
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	4313      	orrs	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d00b      	beq.n	80021c8 <HAL_GPIO_Init+0xdc>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d007      	beq.n	80021c8 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021bc:	2b11      	cmp	r3, #17
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b12      	cmp	r3, #18
 80021c6:	d130      	bne.n	800222a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	2203      	movs	r2, #3
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4013      	ands	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021fe:	2201      	movs	r2, #1
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	091b      	lsrs	r3, r3, #4
 8002214:	f003 0201 	and.w	r2, r3, #1
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	2203      	movs	r2, #3
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4013      	ands	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 80a0 	beq.w	80023a8 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002268:	4b58      	ldr	r3, [pc, #352]	@ (80023cc <HAL_GPIO_Init+0x2e0>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4a57      	ldr	r2, [pc, #348]	@ (80023cc <HAL_GPIO_Init+0x2e0>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6193      	str	r3, [r2, #24]
 8002274:	4b55      	ldr	r3, [pc, #340]	@ (80023cc <HAL_GPIO_Init+0x2e0>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002280:	4a53      	ldr	r2, [pc, #332]	@ (80023d0 <HAL_GPIO_Init+0x2e4>)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	089b      	lsrs	r3, r3, #2
 8002286:	3302      	adds	r3, #2
 8002288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	220f      	movs	r2, #15
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80022aa:	d019      	beq.n	80022e0 <HAL_GPIO_Init+0x1f4>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a49      	ldr	r2, [pc, #292]	@ (80023d4 <HAL_GPIO_Init+0x2e8>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d013      	beq.n	80022dc <HAL_GPIO_Init+0x1f0>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a48      	ldr	r2, [pc, #288]	@ (80023d8 <HAL_GPIO_Init+0x2ec>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d00d      	beq.n	80022d8 <HAL_GPIO_Init+0x1ec>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a47      	ldr	r2, [pc, #284]	@ (80023dc <HAL_GPIO_Init+0x2f0>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d007      	beq.n	80022d4 <HAL_GPIO_Init+0x1e8>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a46      	ldr	r2, [pc, #280]	@ (80023e0 <HAL_GPIO_Init+0x2f4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d101      	bne.n	80022d0 <HAL_GPIO_Init+0x1e4>
 80022cc:	2304      	movs	r3, #4
 80022ce:	e008      	b.n	80022e2 <HAL_GPIO_Init+0x1f6>
 80022d0:	2305      	movs	r3, #5
 80022d2:	e006      	b.n	80022e2 <HAL_GPIO_Init+0x1f6>
 80022d4:	2303      	movs	r3, #3
 80022d6:	e004      	b.n	80022e2 <HAL_GPIO_Init+0x1f6>
 80022d8:	2302      	movs	r3, #2
 80022da:	e002      	b.n	80022e2 <HAL_GPIO_Init+0x1f6>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <HAL_GPIO_Init+0x1f6>
 80022e0:	2300      	movs	r3, #0
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	f002 0203 	and.w	r2, r2, #3
 80022e8:	0092      	lsls	r2, r2, #2
 80022ea:	4093      	lsls	r3, r2
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022f2:	4937      	ldr	r1, [pc, #220]	@ (80023d0 <HAL_GPIO_Init+0x2e4>)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	3302      	adds	r3, #2
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002300:	4b38      	ldr	r3, [pc, #224]	@ (80023e4 <HAL_GPIO_Init+0x2f8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	43db      	mvns	r3, r3
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4013      	ands	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002324:	4a2f      	ldr	r2, [pc, #188]	@ (80023e4 <HAL_GPIO_Init+0x2f8>)
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800232a:	4b2e      	ldr	r3, [pc, #184]	@ (80023e4 <HAL_GPIO_Init+0x2f8>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	43db      	mvns	r3, r3
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4013      	ands	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800234e:	4a25      	ldr	r2, [pc, #148]	@ (80023e4 <HAL_GPIO_Init+0x2f8>)
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002354:	4b23      	ldr	r3, [pc, #140]	@ (80023e4 <HAL_GPIO_Init+0x2f8>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	43db      	mvns	r3, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4013      	ands	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002378:	4a1a      	ldr	r2, [pc, #104]	@ (80023e4 <HAL_GPIO_Init+0x2f8>)
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800237e:	4b19      	ldr	r3, [pc, #100]	@ (80023e4 <HAL_GPIO_Init+0x2f8>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	43db      	mvns	r3, r3
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4013      	ands	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023a2:	4a10      	ldr	r2, [pc, #64]	@ (80023e4 <HAL_GPIO_Init+0x2f8>)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	3301      	adds	r3, #1
 80023ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f47f aea3 	bne.w	8002104 <HAL_GPIO_Init+0x18>
  }
}
 80023be:	bf00      	nop
 80023c0:	bf00      	nop
 80023c2:	371c      	adds	r7, #28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40010000 	.word	0x40010000
 80023d4:	48000400 	.word	0x48000400
 80023d8:	48000800 	.word	0x48000800
 80023dc:	48000c00 	.word	0x48000c00
 80023e0:	48001000 	.word	0x48001000
 80023e4:	40010400 	.word	0x40010400

080023e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	807b      	strh	r3, [r7, #2]
 80023f4:	4613      	mov	r3, r2
 80023f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023f8:	787b      	ldrb	r3, [r7, #1]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023fe:	887a      	ldrh	r2, [r7, #2]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002404:	e002      	b.n	800240c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002406:	887a      	ldrh	r2, [r7, #2]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr
 8002416:	0000      	movs	r0, r0

08002418 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002420:	2300      	movs	r3, #0
 8002422:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002424:	2310      	movs	r3, #16
 8002426:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002428:	2300      	movs	r3, #0
 800242a:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 800242c:	2300      	movs	r3, #0
 800242e:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	4313      	orrs	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002456:	f023 030c 	bic.w	r3, r3, #12
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	68f9      	ldr	r1, [r7, #12]
 8002460:	430b      	orrs	r3, r1
 8002462:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699a      	ldr	r2, [r3, #24]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	4313      	orrs	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	430a      	orrs	r2, r1
 8002498:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4aa1      	ldr	r2, [pc, #644]	@ (8002724 <UART_SetConfig+0x30c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d120      	bne.n	80024e6 <UART_SetConfig+0xce>
 80024a4:	4ba0      	ldr	r3, [pc, #640]	@ (8002728 <UART_SetConfig+0x310>)
 80024a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d817      	bhi.n	80024e0 <UART_SetConfig+0xc8>
 80024b0:	a201      	add	r2, pc, #4	@ (adr r2, 80024b8 <UART_SetConfig+0xa0>)
 80024b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b6:	bf00      	nop
 80024b8:	080024c9 	.word	0x080024c9
 80024bc:	080024d5 	.word	0x080024d5
 80024c0:	080024db 	.word	0x080024db
 80024c4:	080024cf 	.word	0x080024cf
 80024c8:	2301      	movs	r3, #1
 80024ca:	75fb      	strb	r3, [r7, #23]
 80024cc:	e0b5      	b.n	800263a <UART_SetConfig+0x222>
 80024ce:	2302      	movs	r3, #2
 80024d0:	75fb      	strb	r3, [r7, #23]
 80024d2:	e0b2      	b.n	800263a <UART_SetConfig+0x222>
 80024d4:	2304      	movs	r3, #4
 80024d6:	75fb      	strb	r3, [r7, #23]
 80024d8:	e0af      	b.n	800263a <UART_SetConfig+0x222>
 80024da:	2308      	movs	r3, #8
 80024dc:	75fb      	strb	r3, [r7, #23]
 80024de:	e0ac      	b.n	800263a <UART_SetConfig+0x222>
 80024e0:	2310      	movs	r3, #16
 80024e2:	75fb      	strb	r3, [r7, #23]
 80024e4:	e0a9      	b.n	800263a <UART_SetConfig+0x222>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a90      	ldr	r2, [pc, #576]	@ (800272c <UART_SetConfig+0x314>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d124      	bne.n	800253a <UART_SetConfig+0x122>
 80024f0:	4b8d      	ldr	r3, [pc, #564]	@ (8002728 <UART_SetConfig+0x310>)
 80024f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80024fc:	d011      	beq.n	8002522 <UART_SetConfig+0x10a>
 80024fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002502:	d817      	bhi.n	8002534 <UART_SetConfig+0x11c>
 8002504:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002508:	d011      	beq.n	800252e <UART_SetConfig+0x116>
 800250a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800250e:	d811      	bhi.n	8002534 <UART_SetConfig+0x11c>
 8002510:	2b00      	cmp	r3, #0
 8002512:	d003      	beq.n	800251c <UART_SetConfig+0x104>
 8002514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002518:	d006      	beq.n	8002528 <UART_SetConfig+0x110>
 800251a:	e00b      	b.n	8002534 <UART_SetConfig+0x11c>
 800251c:	2300      	movs	r3, #0
 800251e:	75fb      	strb	r3, [r7, #23]
 8002520:	e08b      	b.n	800263a <UART_SetConfig+0x222>
 8002522:	2302      	movs	r3, #2
 8002524:	75fb      	strb	r3, [r7, #23]
 8002526:	e088      	b.n	800263a <UART_SetConfig+0x222>
 8002528:	2304      	movs	r3, #4
 800252a:	75fb      	strb	r3, [r7, #23]
 800252c:	e085      	b.n	800263a <UART_SetConfig+0x222>
 800252e:	2308      	movs	r3, #8
 8002530:	75fb      	strb	r3, [r7, #23]
 8002532:	e082      	b.n	800263a <UART_SetConfig+0x222>
 8002534:	2310      	movs	r3, #16
 8002536:	75fb      	strb	r3, [r7, #23]
 8002538:	e07f      	b.n	800263a <UART_SetConfig+0x222>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a7c      	ldr	r2, [pc, #496]	@ (8002730 <UART_SetConfig+0x318>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d124      	bne.n	800258e <UART_SetConfig+0x176>
 8002544:	4b78      	ldr	r3, [pc, #480]	@ (8002728 <UART_SetConfig+0x310>)
 8002546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002548:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800254c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002550:	d011      	beq.n	8002576 <UART_SetConfig+0x15e>
 8002552:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002556:	d817      	bhi.n	8002588 <UART_SetConfig+0x170>
 8002558:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800255c:	d011      	beq.n	8002582 <UART_SetConfig+0x16a>
 800255e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002562:	d811      	bhi.n	8002588 <UART_SetConfig+0x170>
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <UART_SetConfig+0x158>
 8002568:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800256c:	d006      	beq.n	800257c <UART_SetConfig+0x164>
 800256e:	e00b      	b.n	8002588 <UART_SetConfig+0x170>
 8002570:	2300      	movs	r3, #0
 8002572:	75fb      	strb	r3, [r7, #23]
 8002574:	e061      	b.n	800263a <UART_SetConfig+0x222>
 8002576:	2302      	movs	r3, #2
 8002578:	75fb      	strb	r3, [r7, #23]
 800257a:	e05e      	b.n	800263a <UART_SetConfig+0x222>
 800257c:	2304      	movs	r3, #4
 800257e:	75fb      	strb	r3, [r7, #23]
 8002580:	e05b      	b.n	800263a <UART_SetConfig+0x222>
 8002582:	2308      	movs	r3, #8
 8002584:	75fb      	strb	r3, [r7, #23]
 8002586:	e058      	b.n	800263a <UART_SetConfig+0x222>
 8002588:	2310      	movs	r3, #16
 800258a:	75fb      	strb	r3, [r7, #23]
 800258c:	e055      	b.n	800263a <UART_SetConfig+0x222>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a68      	ldr	r2, [pc, #416]	@ (8002734 <UART_SetConfig+0x31c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d124      	bne.n	80025e2 <UART_SetConfig+0x1ca>
 8002598:	4b63      	ldr	r3, [pc, #396]	@ (8002728 <UART_SetConfig+0x310>)
 800259a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80025a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80025a4:	d011      	beq.n	80025ca <UART_SetConfig+0x1b2>
 80025a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80025aa:	d817      	bhi.n	80025dc <UART_SetConfig+0x1c4>
 80025ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025b0:	d011      	beq.n	80025d6 <UART_SetConfig+0x1be>
 80025b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025b6:	d811      	bhi.n	80025dc <UART_SetConfig+0x1c4>
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <UART_SetConfig+0x1ac>
 80025bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025c0:	d006      	beq.n	80025d0 <UART_SetConfig+0x1b8>
 80025c2:	e00b      	b.n	80025dc <UART_SetConfig+0x1c4>
 80025c4:	2300      	movs	r3, #0
 80025c6:	75fb      	strb	r3, [r7, #23]
 80025c8:	e037      	b.n	800263a <UART_SetConfig+0x222>
 80025ca:	2302      	movs	r3, #2
 80025cc:	75fb      	strb	r3, [r7, #23]
 80025ce:	e034      	b.n	800263a <UART_SetConfig+0x222>
 80025d0:	2304      	movs	r3, #4
 80025d2:	75fb      	strb	r3, [r7, #23]
 80025d4:	e031      	b.n	800263a <UART_SetConfig+0x222>
 80025d6:	2308      	movs	r3, #8
 80025d8:	75fb      	strb	r3, [r7, #23]
 80025da:	e02e      	b.n	800263a <UART_SetConfig+0x222>
 80025dc:	2310      	movs	r3, #16
 80025de:	75fb      	strb	r3, [r7, #23]
 80025e0:	e02b      	b.n	800263a <UART_SetConfig+0x222>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a54      	ldr	r2, [pc, #336]	@ (8002738 <UART_SetConfig+0x320>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d124      	bne.n	8002636 <UART_SetConfig+0x21e>
 80025ec:	4b4e      	ldr	r3, [pc, #312]	@ (8002728 <UART_SetConfig+0x310>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80025f4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025f8:	d011      	beq.n	800261e <UART_SetConfig+0x206>
 80025fa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025fe:	d817      	bhi.n	8002630 <UART_SetConfig+0x218>
 8002600:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002604:	d011      	beq.n	800262a <UART_SetConfig+0x212>
 8002606:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800260a:	d811      	bhi.n	8002630 <UART_SetConfig+0x218>
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <UART_SetConfig+0x200>
 8002610:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002614:	d006      	beq.n	8002624 <UART_SetConfig+0x20c>
 8002616:	e00b      	b.n	8002630 <UART_SetConfig+0x218>
 8002618:	2300      	movs	r3, #0
 800261a:	75fb      	strb	r3, [r7, #23]
 800261c:	e00d      	b.n	800263a <UART_SetConfig+0x222>
 800261e:	2302      	movs	r3, #2
 8002620:	75fb      	strb	r3, [r7, #23]
 8002622:	e00a      	b.n	800263a <UART_SetConfig+0x222>
 8002624:	2304      	movs	r3, #4
 8002626:	75fb      	strb	r3, [r7, #23]
 8002628:	e007      	b.n	800263a <UART_SetConfig+0x222>
 800262a:	2308      	movs	r3, #8
 800262c:	75fb      	strb	r3, [r7, #23]
 800262e:	e004      	b.n	800263a <UART_SetConfig+0x222>
 8002630:	2310      	movs	r3, #16
 8002632:	75fb      	strb	r3, [r7, #23]
 8002634:	e001      	b.n	800263a <UART_SetConfig+0x222>
 8002636:	2310      	movs	r3, #16
 8002638:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002642:	d17b      	bne.n	800273c <UART_SetConfig+0x324>
  {
    switch (clocksource)
 8002644:	7dfb      	ldrb	r3, [r7, #23]
 8002646:	2b08      	cmp	r3, #8
 8002648:	d856      	bhi.n	80026f8 <UART_SetConfig+0x2e0>
 800264a:	a201      	add	r2, pc, #4	@ (adr r2, 8002650 <UART_SetConfig+0x238>)
 800264c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002650:	08002675 	.word	0x08002675
 8002654:	08002691 	.word	0x08002691
 8002658:	080026ad 	.word	0x080026ad
 800265c:	080026f9 	.word	0x080026f9
 8002660:	080026c7 	.word	0x080026c7
 8002664:	080026f9 	.word	0x080026f9
 8002668:	080026f9 	.word	0x080026f9
 800266c:	080026f9 	.word	0x080026f9
 8002670:	080026e3 	.word	0x080026e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002674:	f7fe fb92 	bl	8000d9c <HAL_RCC_GetPCLK1Freq>
 8002678:	4603      	mov	r3, r0
 800267a:	005a      	lsls	r2, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	085b      	lsrs	r3, r3, #1
 8002682:	441a      	add	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	fbb2 f3f3 	udiv	r3, r2, r3
 800268c:	82bb      	strh	r3, [r7, #20]
        break;
 800268e:	e036      	b.n	80026fe <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002690:	f7ff fd24 	bl	80020dc <HAL_RCC_GetPCLK2Freq>
 8002694:	4603      	mov	r3, r0
 8002696:	005a      	lsls	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	085b      	lsrs	r3, r3, #1
 800269e:	441a      	add	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	82bb      	strh	r3, [r7, #20]
        break;
 80026aa:	e028      	b.n	80026fe <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	085b      	lsrs	r3, r3, #1
 80026b2:	f103 73f4 	add.w	r3, r3, #31981568	@ 0x1e80000
 80026b6:	f503 4390 	add.w	r3, r3, #18432	@ 0x4800
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6852      	ldr	r2, [r2, #4]
 80026be:	fbb3 f3f2 	udiv	r3, r3, r2
 80026c2:	82bb      	strh	r3, [r7, #20]
        break;
 80026c4:	e01b      	b.n	80026fe <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80026c6:	f7fe fb61 	bl	8000d8c <HAL_RCC_GetSysClockFreq>
 80026ca:	4603      	mov	r3, r0
 80026cc:	005a      	lsls	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	085b      	lsrs	r3, r3, #1
 80026d4:	441a      	add	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	fbb2 f3f3 	udiv	r3, r2, r3
 80026de:	82bb      	strh	r3, [r7, #20]
        break;
 80026e0:	e00d      	b.n	80026fe <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	085b      	lsrs	r3, r3, #1
 80026e8:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f4:	82bb      	strh	r3, [r7, #20]
        break;
 80026f6:	e002      	b.n	80026fe <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	74fb      	strb	r3, [r7, #19]
        break;
 80026fc:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80026fe:	8abb      	ldrh	r3, [r7, #20]
 8002700:	f023 030f 	bic.w	r3, r3, #15
 8002704:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002706:	8abb      	ldrh	r3, [r7, #20]
 8002708:	105b      	asrs	r3, r3, #1
 800270a:	b29b      	uxth	r3, r3
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	b29a      	uxth	r2, r3
 8002712:	897b      	ldrh	r3, [r7, #10]
 8002714:	4313      	orrs	r3, r2
 8002716:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	897a      	ldrh	r2, [r7, #10]
 800271e:	60da      	str	r2, [r3, #12]
 8002720:	e075      	b.n	800280e <UART_SetConfig+0x3f6>
 8002722:	bf00      	nop
 8002724:	40013800 	.word	0x40013800
 8002728:	40021000 	.word	0x40021000
 800272c:	40004400 	.word	0x40004400
 8002730:	40004800 	.word	0x40004800
 8002734:	40004c00 	.word	0x40004c00
 8002738:	40005000 	.word	0x40005000
  }
  else
  {
    switch (clocksource)
 800273c:	7dfb      	ldrb	r3, [r7, #23]
 800273e:	2b08      	cmp	r3, #8
 8002740:	d862      	bhi.n	8002808 <UART_SetConfig+0x3f0>
 8002742:	a201      	add	r2, pc, #4	@ (adr r2, 8002748 <UART_SetConfig+0x330>)
 8002744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002748:	0800276d 	.word	0x0800276d
 800274c:	0800278d 	.word	0x0800278d
 8002750:	080027ad 	.word	0x080027ad
 8002754:	08002809 	.word	0x08002809
 8002758:	080027cd 	.word	0x080027cd
 800275c:	08002809 	.word	0x08002809
 8002760:	08002809 	.word	0x08002809
 8002764:	08002809 	.word	0x08002809
 8002768:	080027ed 	.word	0x080027ed
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800276c:	f7fe fb16 	bl	8000d9c <HAL_RCC_GetPCLK1Freq>
 8002770:	4602      	mov	r2, r0
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	085b      	lsrs	r3, r3, #1
 8002778:	441a      	add	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002782:	b29a      	uxth	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60da      	str	r2, [r3, #12]
        break;
 800278a:	e040      	b.n	800280e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800278c:	f7ff fca6 	bl	80020dc <HAL_RCC_GetPCLK2Freq>
 8002790:	4602      	mov	r2, r0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	085b      	lsrs	r3, r3, #1
 8002798:	441a      	add	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60da      	str	r2, [r3, #12]
        break;
 80027aa:	e030      	b.n	800280e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	085b      	lsrs	r3, r3, #1
 80027b2:	f503 0374 	add.w	r3, r3, #15990784	@ 0xf40000
 80027b6:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6852      	ldr	r2, [r2, #4]
 80027be:	fbb3 f3f2 	udiv	r3, r3, r2
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60da      	str	r2, [r3, #12]
        break;
 80027ca:	e020      	b.n	800280e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80027cc:	f7fe fade 	bl	8000d8c <HAL_RCC_GetSysClockFreq>
 80027d0:	4602      	mov	r2, r0
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	085b      	lsrs	r3, r3, #1
 80027d8:	441a      	add	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	60da      	str	r2, [r3, #12]
        break;
 80027ea:	e010      	b.n	800280e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	085b      	lsrs	r3, r3, #1
 80027f2:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fe:	b29a      	uxth	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60da      	str	r2, [r3, #12]
        break;
 8002806:	e002      	b.n	800280e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	74fb      	strb	r3, [r7, #19]
        break;
 800280c:	bf00      	nop
    }
  }

  return ret;
 800280e:	7cfb      	ldrb	r3, [r7, #19]

}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af02      	add	r7, sp, #8
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800282a:	f7fe faa1 	bl	8000d70 <HAL_GetTick>
 800282e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b08      	cmp	r3, #8
 800283c:	d10e      	bne.n	800285c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800283e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f873 	bl	8002938 <UART_WaitOnFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e022      	b.n	80028a2 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0304 	and.w	r3, r3, #4
 8002866:	2b04      	cmp	r3, #4
 8002868:	d10e      	bne.n	8002888 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800286a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f85d 	bl	8002938 <UART_WaitOnFlagUntilTimeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e00c      	b.n	80028a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e039      	b.n	8002930 <HAL_UART_Init+0x86>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d103      	bne.n	80028d0 <HAL_UART_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    //HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2224      	movs	r2, #36	@ 0x24
 80028d4:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff fd95 	bl	8002418 <UART_SetConfig>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e01b      	b.n	8002930 <HAL_UART_Init+0x86>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002906:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002916:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return UART_CheckIdleState(huart);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff ff75 	bl	8002818 <UART_CheckIdleState>
 800292e:	4603      	mov	r3, r0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	4613      	mov	r3, r2
 8002946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002948:	e02c      	b.n	80029a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002950:	d028      	beq.n	80029a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d007      	beq.n	8002968 <UART_WaitOnFlagUntilTimeout+0x30>
 8002958:	f7fe fa0a 	bl	8000d70 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	429a      	cmp	r2, r3
 8002966:	d21d      	bcs.n	80029a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8002976:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0201 	bic.w	r2, r2, #1
 8002986:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2220      	movs	r2, #32
 8002994:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e00f      	b.n	80029c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	69da      	ldr	r2, [r3, #28]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	4013      	ands	r3, r2
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	bf0c      	ite	eq
 80029b4:	2301      	moveq	r3, #1
 80029b6:	2300      	movne	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d0c3      	beq.n	800294a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	4613      	mov	r3, r2
 80029da:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b20      	cmp	r3, #32
 80029ea:	d176      	bne.n	8002ada <HAL_UART_Transmit+0x10e>
  {
    if((pData == NULL ) || (Size == 0U))
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <HAL_UART_Transmit+0x2c>
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e06f      	b.n	8002adc <HAL_UART_Transmit+0x110>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_UART_Transmit+0x3e>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e068      	b.n	8002adc <HAL_UART_Transmit+0x110>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2221      	movs	r2, #33	@ 0x21
 8002a1c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002a20:	f7fe f9a6 	bl	8000d70 <HAL_GetTick>
 8002a24:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	88fa      	ldrh	r2, [r7, #6]
 8002a2a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	88fa      	ldrh	r2, [r7, #6]
 8002a32:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while(huart->TxXferCount > 0U)
 8002a36:	e033      	b.n	8002aa0 <HAL_UART_Transmit+0xd4>
    {
      huart->TxXferCount--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2200      	movs	r2, #0
 8002a52:	2180      	movs	r1, #128	@ 0x80
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f7ff ff6f 	bl	8002938 <UART_WaitOnFlagUntilTimeout>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e03b      	b.n	8002adc <HAL_UART_Transmit+0x110>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a6c:	d111      	bne.n	8002a92 <HAL_UART_Transmit+0xc6>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10d      	bne.n	8002a92 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	881a      	ldrh	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a86:	b292      	uxth	r2, r2
 8002a88:	851a      	strh	r2, [r3, #40]	@ 0x28
        pData += 2U;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	3302      	adds	r3, #2
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	e006      	b.n	8002aa0 <HAL_UART_Transmit+0xd4>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	60ba      	str	r2, [r7, #8]
 8002a98:	781a      	ldrb	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    while(huart->TxXferCount > 0U)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1c5      	bne.n	8002a38 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2140      	movs	r1, #64	@ 0x40
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f7ff ff3e 	bl	8002938 <UART_WaitOnFlagUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_UART_Transmit+0xfa>
    {
      return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e00a      	b.n	8002adc <HAL_UART_Transmit+0x110>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	e000      	b.n	8002adc <HAL_UART_Transmit+0x110>
  }
  else
  {
    return HAL_BUSY;
 8002ada:	2302      	movs	r3, #2
  }
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08a      	sub	sp, #40	@ 0x28
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	4613      	mov	r3, r2
 8002af2:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b20      	cmp	r3, #32
 8002b02:	f040 809f 	bne.w	8002c44 <HAL_UART_Receive+0x160>
  {
    if((pData == NULL ) || (Size == 0U))
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <HAL_UART_Receive+0x2e>
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e097      	b.n	8002c46 <HAL_UART_Receive+0x162>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_UART_Receive+0x40>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e090      	b.n	8002c46 <HAL_UART_Receive+0x162>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f04f 32ff 	mov.w	r2, #4294967295
 8002b34:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2222      	movs	r2, #34	@ 0x22
 8002b40:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002b44:	f7fe f914 	bl	8000d70 <HAL_GetTick>
 8002b48:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize = Size;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	88fa      	ldrh	r2, [r7, #6]
 8002b4e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	88fa      	ldrh	r2, [r7, #6]
 8002b56:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b62:	d10e      	bne.n	8002b82 <HAL_UART_Receive+0x9e>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d105      	bne.n	8002b78 <HAL_UART_Receive+0x94>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002b72:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b76:	e015      	b.n	8002ba4 <HAL_UART_Receive+0xc0>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	22ff      	movs	r2, #255	@ 0xff
 8002b7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b80:	e010      	b.n	8002ba4 <HAL_UART_Receive+0xc0>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10c      	bne.n	8002ba4 <HAL_UART_Receive+0xc0>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d104      	bne.n	8002b9c <HAL_UART_Receive+0xb8>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	22ff      	movs	r2, #255	@ 0xff
 8002b96:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b9a:	e003      	b.n	8002ba4 <HAL_UART_Receive+0xc0>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	227f      	movs	r2, #127	@ 0x7f
 8002ba0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002baa:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8002bac:	e03a      	b.n	8002c24 <HAL_UART_Receive+0x140>
    {
      huart->RxXferCount--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2120      	movs	r1, #32
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f7ff feb4 	bl	8002938 <UART_WaitOnFlagUntilTimeout>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_UART_Receive+0xf6>
      {
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e035      	b.n	8002c46 <HAL_UART_Receive+0x162>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002be2:	d112      	bne.n	8002c0a <HAL_UART_Receive+0x126>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10e      	bne.n	8002c0a <HAL_UART_Receive+0x126>
      {
        tmp = (uint16_t*) pData ;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	8b7b      	ldrh	r3, [r7, #26]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	3302      	adds	r3, #2
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	e00c      	b.n	8002c24 <HAL_UART_Receive+0x140>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	b2d9      	uxtb	r1, r3
 8002c14:	8b7b      	ldrh	r3, [r7, #26]
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	1c58      	adds	r0, r3, #1
 8002c1c:	60b8      	str	r0, [r7, #8]
 8002c1e:	400a      	ands	r2, r1
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1be      	bne.n	8002bae <HAL_UART_Receive+0xca>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    return HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	e000      	b.n	8002c46 <HAL_UART_Receive+0x162>
  }
  else
  {
    return HAL_BUSY;
 8002c44:	2302      	movs	r3, #2
  }
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3720      	adds	r7, #32
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	0000      	movs	r0, r0

08002c50 <Reset_Handler>:
 8002c50:	2100      	movs	r1, #0
 8002c52:	e003      	b.n	8002c5c <LoopCopyDataInit>

08002c54 <CopyDataInit>:
 8002c54:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <LoopForever+0x2>)
 8002c56:	585b      	ldr	r3, [r3, r1]
 8002c58:	5043      	str	r3, [r0, r1]
 8002c5a:	3104      	adds	r1, #4

08002c5c <LoopCopyDataInit>:
 8002c5c:	480a      	ldr	r0, [pc, #40]	@ (8002c88 <LoopForever+0x6>)
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c8c <LoopForever+0xa>)
 8002c60:	1842      	adds	r2, r0, r1
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d3f6      	bcc.n	8002c54 <CopyDataInit>
 8002c66:	4a0a      	ldr	r2, [pc, #40]	@ (8002c90 <LoopForever+0xe>)
 8002c68:	e002      	b.n	8002c70 <LoopFillZerobss>

08002c6a <FillZerobss>:
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	3204      	adds	r2, #4

08002c70 <LoopFillZerobss>:
 8002c70:	4b08      	ldr	r3, [pc, #32]	@ (8002c94 <LoopForever+0x12>)
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d3f9      	bcc.n	8002c6a <FillZerobss>
 8002c76:	f3af 8000 	nop.w
 8002c7a:	f7fd fa85 	bl	8000188 <__libc_init_array>
 8002c7e:	f7fd fc33 	bl	80004e8 <main>

08002c82 <LoopForever>:
 8002c82:	e7fe      	b.n	8002c82 <LoopForever>
 8002c84:	08002ccc 	.word	0x08002ccc
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	20000000 	.word	0x20000000
 8002c90:	20000000 	.word	0x20000000
 8002c94:	20000158 	.word	0x20000158

08002c98 <BusFault_Handler>:
 8002c98:	e7fe      	b.n	8002c98 <BusFault_Handler>
 8002c9a:	0000      	movs	r0, r0

08002c9c <_init>:
 8002c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9e:	bf00      	nop
 8002ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ca2:	bc08      	pop	{r3}
 8002ca4:	469e      	mov	lr, r3
 8002ca6:	4770      	bx	lr

08002ca8 <_fini>:
 8002ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002caa:	bf00      	nop
 8002cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cae:	bc08      	pop	{r3}
 8002cb0:	469e      	mov	lr, r3
 8002cb2:	4770      	bx	lr
