
simpleserial-target-CWLITEARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a34  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002bbc  08002bbc  00003bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bcc  08002bcc  00003bd4  2**0
                  CONTENTS
  4 .ARM          00000000  08002bcc  08002bcc  00003bd4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bcc  08002bd4  00003bd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bcc  08002bcc  00003bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bd0  08002bd0  00003bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00003bd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000000  08002bd4  00004000  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000158  08002bd4  00004158  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00003bd4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003d56  00000000  00000000  00003bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009ad  00000000  00000000  00007954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000dc8  00000000  00000000  00008301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e8  00000000  00000000  000090c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000188  00000000  00000000  000092b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f21  00000000  00000000  00009439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000014e4  00000000  00000000  0000b35a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000012  00000000  00000000  0000c83e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006e4  00000000  00000000  0000c850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  0000cf34  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000070  00000000  00000000  0000d078  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loclists 00000065  00000000  00000000  0000d0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__libc_init_array>:
 8000188:	b570      	push	{r4, r5, r6, lr}
 800018a:	4b0f      	ldr	r3, [pc, #60]	@ (80001c8 <__libc_init_array+0x40>)
 800018c:	4d0f      	ldr	r5, [pc, #60]	@ (80001cc <__libc_init_array+0x44>)
 800018e:	42ab      	cmp	r3, r5
 8000190:	eba3 0605 	sub.w	r6, r3, r5
 8000194:	d007      	beq.n	80001a6 <__libc_init_array+0x1e>
 8000196:	10b6      	asrs	r6, r6, #2
 8000198:	2400      	movs	r4, #0
 800019a:	f855 3b04 	ldr.w	r3, [r5], #4
 800019e:	3401      	adds	r4, #1
 80001a0:	4798      	blx	r3
 80001a2:	42a6      	cmp	r6, r4
 80001a4:	d8f9      	bhi.n	800019a <__libc_init_array+0x12>
 80001a6:	f002 fcfd 	bl	8002ba4 <_init>
 80001aa:	4d09      	ldr	r5, [pc, #36]	@ (80001d0 <__libc_init_array+0x48>)
 80001ac:	4b09      	ldr	r3, [pc, #36]	@ (80001d4 <__libc_init_array+0x4c>)
 80001ae:	1b5e      	subs	r6, r3, r5
 80001b0:	42ab      	cmp	r3, r5
 80001b2:	ea4f 06a6 	mov.w	r6, r6, asr #2
 80001b6:	d006      	beq.n	80001c6 <__libc_init_array+0x3e>
 80001b8:	2400      	movs	r4, #0
 80001ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80001be:	3401      	adds	r4, #1
 80001c0:	4798      	blx	r3
 80001c2:	42a6      	cmp	r6, r4
 80001c4:	d8f9      	bhi.n	80001ba <__libc_init_array+0x32>
 80001c6:	bd70      	pop	{r4, r5, r6, pc}
 80001c8:	08002bcc 	.word	0x08002bcc
 80001cc:	08002bcc 	.word	0x08002bcc
 80001d0:	08002bcc 	.word	0x08002bcc
 80001d4:	08002bd0 	.word	0x08002bd0

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000013c 	.word	0x2000013c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002ba4 	.word	0x08002ba4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000140 	.word	0x20000140
 8000214:	08002ba4 	.word	0x08002ba4

08000218 <one_mult>:
/// This function will handle the 'p' command send from the capture board.
/// It returns the squared version of the scmd given.
/// It does this in approximately equal time, which allows us to see clear
/// differences between different scmd values.
uint8_t one_mult(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 8000218:	b590      	push	{r4, r7, lr}
 800021a:	b08b      	sub	sp, #44	@ 0x2c
 800021c:	af00      	add	r7, sp, #0
 800021e:	603b      	str	r3, [r7, #0]
 8000220:	4603      	mov	r3, r0
 8000222:	71fb      	strb	r3, [r7, #7]
 8000224:	460b      	mov	r3, r1
 8000226:	71bb      	strb	r3, [r7, #6]
 8000228:	4613      	mov	r3, r2
 800022a:	717b      	strb	r3, [r7, #5]
  volatile uint8_t result = 0;
 800022c:	2300      	movs	r3, #0
 800022e:	777b      	strb	r3, [r7, #29]
  int arr[4] = {7,5,4,2};
 8000230:	4b1e      	ldr	r3, [pc, #120]	@ (80002ac <one_mult+0x94>)
 8000232:	f107 040c 	add.w	r4, r7, #12
 8000236:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000238:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  unsigned char weight = 5;
 800023c:	2305      	movs	r3, #5
 800023e:	77fb      	strb	r3, [r7, #31]
    
  trigger_high();                                          // Start measurement!!!
 8000240:	f000 fcd0 	bl	8000be4 <trigger_high>
  for(int x = 0;x<100;x++){
 8000244:	2300      	movs	r3, #0
 8000246:	627b      	str	r3, [r7, #36]	@ 0x24
 8000248:	e003      	b.n	8000252 <one_mult+0x3a>
      __asm__("nop");
 800024a:	bf00      	nop
  for(int x = 0;x<100;x++){
 800024c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800024e:	3301      	adds	r3, #1
 8000250:	627b      	str	r3, [r7, #36]	@ 0x24
 8000252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000254:	2b63      	cmp	r3, #99	@ 0x63
 8000256:	ddf8      	ble.n	800024a <one_mult+0x32>
  }
  unsigned char num = (unsigned char)(weight * buf[0]);
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	7ffa      	ldrb	r2, [r7, #31]
 800025e:	fb12 f303 	smulbb	r3, r2, r3
 8000262:	77bb      	strb	r3, [r7, #30]
  for(int x = 0;x<100;x++){
 8000264:	2300      	movs	r3, #0
 8000266:	623b      	str	r3, [r7, #32]
 8000268:	e003      	b.n	8000272 <one_mult+0x5a>
      __asm__("nop");
 800026a:	bf00      	nop
  for(int x = 0;x<100;x++){
 800026c:	6a3b      	ldr	r3, [r7, #32]
 800026e:	3301      	adds	r3, #1
 8000270:	623b      	str	r3, [r7, #32]
 8000272:	6a3b      	ldr	r3, [r7, #32]
 8000274:	2b63      	cmp	r3, #99	@ 0x63
 8000276:	ddf8      	ble.n	800026a <one_mult+0x52>
  }
  trigger_low();                                             // Stop measurement!!!
 8000278:	f000 fcbf 	bl	8000bfa <trigger_low>
    
  result = scmd*scmd;
 800027c:	79ba      	ldrb	r2, [r7, #6]
 800027e:	79bb      	ldrb	r3, [r7, #6]
 8000280:	fb12 f303 	smulbb	r3, r2, r3
 8000284:	b2db      	uxtb	r3, r3
 8000286:	777b      	strb	r3, [r7, #29]
  // For now we can just return the result back to the user.
  uint8_t buff[2] = { weight };
 8000288:	2300      	movs	r3, #0
 800028a:	813b      	strh	r3, [r7, #8]
 800028c:	7ffb      	ldrb	r3, [r7, #31]
 800028e:	723b      	strb	r3, [r7, #8]
  buff[-1] = 0;
 8000290:	2300      	movs	r3, #0
 8000292:	71fb      	strb	r3, [r7, #7]
  simpleserial_put('r', 2, buff);
 8000294:	f107 0308 	add.w	r3, r7, #8
 8000298:	461a      	mov	r2, r3
 800029a:	2102      	movs	r1, #2
 800029c:	2072      	movs	r0, #114	@ 0x72
 800029e:	f000 fb33 	bl	8000908 <simpleserial_put>

  return 0;
 80002a2:	2300      	movs	r3, #0
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	372c      	adds	r7, #44	@ 0x2c
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd90      	pop	{r4, r7, pc}
 80002ac:	08002bbc 	.word	0x08002bbc

080002b0 <hundred_mult>:



uint8_t hundred_mult(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
{
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	b090      	sub	sp, #64	@ 0x40
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	603b      	str	r3, [r7, #0]
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
 80002be:	460b      	mov	r3, r1
 80002c0:	71bb      	strb	r3, [r7, #6]
 80002c2:	4613      	mov	r3, r2
 80002c4:	717b      	strb	r3, [r7, #5]
 80002c6:	466b      	mov	r3, sp
 80002c8:	469a      	mov	sl, r3
  volatile uint8_t result = 0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	767b      	strb	r3, [r7, #25]
  int arr[4] = {7,5,4,2};
 80002ce:	4b4e      	ldr	r3, [pc, #312]	@ (8000408 <hundred_mult+0x158>)
 80002d0:	f107 0608 	add.w	r6, r7, #8
 80002d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002d6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  unsigned char weight = 5;
 80002da:	2305      	movs	r3, #5
 80002dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  int counter = 50;
 80002e0:	2332      	movs	r3, #50	@ 0x32
 80002e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  unsigned char resutl;
  unsigned char val = buf[0];
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  int return_string_len =  ((arr[1] + 1) * arr[0]) + 1;
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	3301      	adds	r3, #1
 80002f0:	68ba      	ldr	r2, [r7, #8]
 80002f2:	fb02 f303 	mul.w	r3, r2, r3
 80002f6:	3301      	adds	r3, #1
 80002f8:	627b      	str	r3, [r7, #36]	@ 0x24
  char string[counter+1]; 
 80002fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80002fc:	1c59      	adds	r1, r3, #1
 80002fe:	1e4b      	subs	r3, r1, #1
 8000300:	623b      	str	r3, [r7, #32]
 8000302:	460a      	mov	r2, r1
 8000304:	2300      	movs	r3, #0
 8000306:	4690      	mov	r8, r2
 8000308:	4699      	mov	r9, r3
 800030a:	f04f 0200 	mov.w	r2, #0
 800030e:	f04f 0300 	mov.w	r3, #0
 8000312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800031a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800031e:	460a      	mov	r2, r1
 8000320:	2300      	movs	r3, #0
 8000322:	4614      	mov	r4, r2
 8000324:	461d      	mov	r5, r3
 8000326:	f04f 0200 	mov.w	r2, #0
 800032a:	f04f 0300 	mov.w	r3, #0
 800032e:	00eb      	lsls	r3, r5, #3
 8000330:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000334:	00e2      	lsls	r2, r4, #3
 8000336:	460b      	mov	r3, r1
 8000338:	3307      	adds	r3, #7
 800033a:	08db      	lsrs	r3, r3, #3
 800033c:	00db      	lsls	r3, r3, #3
 800033e:	ebad 0d03 	sub.w	sp, sp, r3
 8000342:	466b      	mov	r3, sp
 8000344:	3300      	adds	r3, #0
 8000346:	61fb      	str	r3, [r7, #28]


    
  trigger_high();                                          // Start measurement!!!
 8000348:	f000 fc4c 	bl	8000be4 <trigger_high>
  for(int x = 0;x<100;x++){
 800034c:	2300      	movs	r3, #0
 800034e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000350:	e003      	b.n	800035a <hundred_mult+0xaa>
      __asm__("nop");
 8000352:	bf00      	nop
  for(int x = 0;x<100;x++){
 8000354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000356:	3301      	adds	r3, #1
 8000358:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800035a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800035c:	2b63      	cmp	r3, #99	@ 0x63
 800035e:	ddf8      	ble.n	8000352 <hundred_mult+0xa2>
  }
  for(int x = 0;x<counter;x++){
 8000360:	2300      	movs	r3, #0
 8000362:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000364:	e019      	b.n	800039a <hundred_mult+0xea>
      __asm__("nop");
 8000366:	bf00      	nop
      __asm__("nop");
 8000368:	bf00      	nop
      unsigned char akt = x % (counter/2);
 800036a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800036c:	0fda      	lsrs	r2, r3, #31
 800036e:	4413      	add	r3, r2
 8000370:	105b      	asrs	r3, r3, #1
 8000372:	461a      	mov	r2, r3
 8000374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000376:	fb93 f1f2 	sdiv	r1, r3, r2
 800037a:	fb01 f202 	mul.w	r2, r1, r2
 800037e:	1a9b      	subs	r3, r3, r2
 8000380:	76fb      	strb	r3, [r7, #27]
      unsigned char result = (unsigned char)(x * val);
 8000382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000384:	b2db      	uxtb	r3, r3
 8000386:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800038a:	fb12 f303 	smulbb	r3, r2, r3
 800038e:	76bb      	strb	r3, [r7, #26]
      __asm__("nop");
 8000390:	bf00      	nop
      __asm__("nop");
 8000392:	bf00      	nop
  for(int x = 0;x<counter;x++){
 8000394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000396:	3301      	adds	r3, #1
 8000398:	63bb      	str	r3, [r7, #56]	@ 0x38
 800039a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800039c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800039e:	429a      	cmp	r2, r3
 80003a0:	dbe1      	blt.n	8000366 <hundred_mult+0xb6>
  }
  trigger_low();                                             // Stop measurement!!!
 80003a2:	f000 fc2a 	bl	8000bfa <trigger_low>
    
  //result = scmd*scmd;
  // For now we can just return the result back to the user.
  for(int x = 0; x < counter; x++){
 80003a6:	2300      	movs	r3, #0
 80003a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80003aa:	e013      	b.n	80003d4 <hundred_mult+0x124>
        string[x] = x % (counter/2);
 80003ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80003ae:	0fda      	lsrs	r2, r3, #31
 80003b0:	4413      	add	r3, r2
 80003b2:	105b      	asrs	r3, r3, #1
 80003b4:	461a      	mov	r2, r3
 80003b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80003b8:	fb93 f1f2 	sdiv	r1, r3, r2
 80003bc:	fb01 f202 	mul.w	r2, r1, r2
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	b2d9      	uxtb	r1, r3
 80003c4:	69fa      	ldr	r2, [r7, #28]
 80003c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80003c8:	4413      	add	r3, r2
 80003ca:	460a      	mov	r2, r1
 80003cc:	701a      	strb	r2, [r3, #0]
  for(int x = 0; x < counter; x++){
 80003ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80003d0:	3301      	adds	r3, #1
 80003d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80003d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80003d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80003d8:	429a      	cmp	r2, r3
 80003da:	dbe7      	blt.n	80003ac <hundred_mult+0xfc>
  }
  string[return_string_len - 1] = 0;
 80003dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003de:	3b01      	subs	r3, #1
 80003e0:	69fa      	ldr	r2, [r7, #28]
 80003e2:	2100      	movs	r1, #0
 80003e4:	54d1      	strb	r1, [r2, r3]
  simpleserial_put('r', counter+1, string);
 80003e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	3301      	adds	r3, #1
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	69fa      	ldr	r2, [r7, #28]
 80003f0:	4619      	mov	r1, r3
 80003f2:	2072      	movs	r0, #114	@ 0x72
 80003f4:	f000 fa88 	bl	8000908 <simpleserial_put>
  return 0;
 80003f8:	2300      	movs	r3, #0
 80003fa:	46d5      	mov	sp, sl
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	3740      	adds	r7, #64	@ 0x40
 8000400:	46bd      	mov	sp, r7
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	bf00      	nop
 8000408:	08002bbc 	.word	0x08002bbc

0800040c <main>:



int main(void) {
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  // Setup the specific chipset.
  platform_init();
 8000410:	f000 fb1a 	bl	8000a48 <platform_init>
  // Setup serial communication line.
  init_uart();
 8000414:	f000 fb6a 	bl	8000aec <init_uart>
  // Setup measurement trigger.
  trigger_setup();
 8000418:	f000 fbb8 	bl	8000b8c <trigger_setup>

  simpleserial_init();
 800041c:	f000 f8e8 	bl	80005f0 <simpleserial_init>

  // Insert your handlers here.
  simpleserial_addcmd('p', 16, hundred_mult);
 8000420:	4a06      	ldr	r2, [pc, #24]	@ (800043c <main+0x30>)
 8000422:	2110      	movs	r1, #16
 8000424:	2070      	movs	r0, #112	@ 0x70
 8000426:	f000 f8f5 	bl	8000614 <simpleserial_addcmd>
  simpleserial_addcmd('o', 16, one_mult);
 800042a:	4a05      	ldr	r2, [pc, #20]	@ (8000440 <main+0x34>)
 800042c:	2110      	movs	r1, #16
 800042e:	206f      	movs	r0, #111	@ 0x6f
 8000430:	f000 f8f0 	bl	8000614 <simpleserial_addcmd>

  // What for the capture board to send commands and handle them.
  while (1)
    simpleserial_get();
 8000434:	f000 f934 	bl	80006a0 <simpleserial_get>
 8000438:	e7fc      	b.n	8000434 <main+0x28>
 800043a:	bf00      	nop
 800043c:	080002b1 	.word	0x080002b1
 8000440:	08000219 	.word	0x08000219

08000444 <ss_crc>:


// 0xA6 formerly 
#define CW_CRC 0x4D 
uint8_t ss_crc(uint8_t *buf, uint8_t len)
{
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
 800044c:	460b      	mov	r3, r1
 800044e:	70fb      	strb	r3, [r7, #3]
	unsigned int k = 0;
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
	uint8_t crc = 0x00;
 8000454:	2300      	movs	r3, #0
 8000456:	72fb      	strb	r3, [r7, #11]
	while (len--) {
 8000458:	e01f      	b.n	800049a <ss_crc+0x56>
		crc ^= *buf++;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	1c5a      	adds	r2, r3, #1
 800045e:	607a      	str	r2, [r7, #4]
 8000460:	781a      	ldrb	r2, [r3, #0]
 8000462:	7afb      	ldrb	r3, [r7, #11]
 8000464:	4053      	eors	r3, r2
 8000466:	72fb      	strb	r3, [r7, #11]
		for (k = 0; k < 8; k++) {
 8000468:	2300      	movs	r3, #0
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	e012      	b.n	8000494 <ss_crc+0x50>
			crc = crc & 0x80 ? (crc << 1) ^ CW_CRC: crc << 1;
 800046e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000472:	2b00      	cmp	r3, #0
 8000474:	da07      	bge.n	8000486 <ss_crc+0x42>
 8000476:	7afb      	ldrb	r3, [r7, #11]
 8000478:	005b      	lsls	r3, r3, #1
 800047a:	b25b      	sxtb	r3, r3
 800047c:	f083 034d 	eor.w	r3, r3, #77	@ 0x4d
 8000480:	b25b      	sxtb	r3, r3
 8000482:	b2db      	uxtb	r3, r3
 8000484:	e002      	b.n	800048c <ss_crc+0x48>
 8000486:	7afb      	ldrb	r3, [r7, #11]
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	b2db      	uxtb	r3, r3
 800048c:	72fb      	strb	r3, [r7, #11]
		for (k = 0; k < 8; k++) {
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	3301      	adds	r3, #1
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	2b07      	cmp	r3, #7
 8000498:	d9e9      	bls.n	800046e <ss_crc+0x2a>
	while (len--) {
 800049a:	78fb      	ldrb	r3, [r7, #3]
 800049c:	1e5a      	subs	r2, r3, #1
 800049e:	70fa      	strb	r2, [r7, #3]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d1da      	bne.n	800045a <ss_crc+0x16>
		}
	}
	return crc;
 80004a4:	7afb      	ldrb	r3, [r7, #11]

}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <check_version>:
}

#define FRAME_BYTE 0x00

uint8_t check_version(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *data)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	603b      	str	r3, [r7, #0]
 80004b8:	4603      	mov	r3, r0
 80004ba:	71fb      	strb	r3, [r7, #7]
 80004bc:	460b      	mov	r3, r1
 80004be:	71bb      	strb	r3, [r7, #6]
 80004c0:	4613      	mov	r3, r2
 80004c2:	717b      	strb	r3, [r7, #5]
	uint8_t ver = SS_VER;
 80004c4:	2303      	movs	r3, #3
 80004c6:	73fb      	strb	r3, [r7, #15]
	simpleserial_put('r', 1, &ver);
 80004c8:	f107 030f 	add.w	r3, r7, #15
 80004cc:	461a      	mov	r2, r3
 80004ce:	2101      	movs	r1, #1
 80004d0:	2072      	movs	r0, #114	@ 0x72
 80004d2:	f000 fa19 	bl	8000908 <simpleserial_put>
	return SS_ERR_OK;
 80004d6:	2300      	movs	r3, #0
}
 80004d8:	4618      	mov	r0, r3
 80004da:	3710      	adds	r7, #16
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <ss_get_commands>:

uint8_t ss_get_commands(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *data)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b088      	sub	sp, #32
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	4603      	mov	r3, r0
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	460b      	mov	r3, r1
 80004ee:	71bb      	strb	r3, [r7, #6]
 80004f0:	4613      	mov	r3, r2
 80004f2:	717b      	strb	r3, [r7, #5]
    uint8_t cmd_chars[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 80004f4:	2300      	movs	r3, #0
 80004f6:	77fb      	strb	r3, [r7, #31]
 80004f8:	e010      	b.n	800051c <ss_get_commands+0x3c>
        cmd_chars[i] = commands[i].c;
 80004fa:	7ffa      	ldrb	r2, [r7, #31]
 80004fc:	7ff9      	ldrb	r1, [r7, #31]
 80004fe:	4811      	ldr	r0, [pc, #68]	@ (8000544 <ss_get_commands+0x64>)
 8000500:	4613      	mov	r3, r2
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	4413      	add	r3, r2
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	4403      	add	r3, r0
 800050a:	781a      	ldrb	r2, [r3, #0]
 800050c:	f101 0320 	add.w	r3, r1, #32
 8000510:	443b      	add	r3, r7
 8000512:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000516:	7ffb      	ldrb	r3, [r7, #31]
 8000518:	3301      	adds	r3, #1
 800051a:	77fb      	strb	r3, [r7, #31]
 800051c:	7ffa      	ldrb	r2, [r7, #31]
 800051e:	4b0a      	ldr	r3, [pc, #40]	@ (8000548 <ss_get_commands+0x68>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	b2db      	uxtb	r3, r3
 8000524:	429a      	cmp	r2, r3
 8000526:	dbe8      	blt.n	80004fa <ss_get_commands+0x1a>
    }

    simpleserial_put('r', num_commands & 0xFF, (void *)cmd_chars);
 8000528:	4b07      	ldr	r3, [pc, #28]	@ (8000548 <ss_get_commands+0x68>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	f107 020c 	add.w	r2, r7, #12
 8000532:	4619      	mov	r1, r3
 8000534:	2072      	movs	r0, #114	@ 0x72
 8000536:	f000 f9e7 	bl	8000908 <simpleserial_put>
    return 0x00;
 800053a:	2300      	movs	r3, #0

}
 800053c:	4618      	mov	r0, r3
 800053e:	3720      	adds	r7, #32
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000004 	.word	0x20000004
 8000548:	20000000 	.word	0x20000000

0800054c <stuff_data>:

uint8_t stuff_data(uint8_t *buf, uint8_t len)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	460b      	mov	r3, r1
 8000556:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 1;
 8000558:	2301      	movs	r3, #1
 800055a:	73fb      	strb	r3, [r7, #15]
	uint8_t last = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	73bb      	strb	r3, [r7, #14]
	for (; i < len; i++) {
 8000560:	e012      	b.n	8000588 <stuff_data+0x3c>
		if (buf[i] == FRAME_BYTE) {
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	4413      	add	r3, r2
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d109      	bne.n	8000582 <stuff_data+0x36>
			buf[last] = i - last;
 800056e:	7bbb      	ldrb	r3, [r7, #14]
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	4413      	add	r3, r2
 8000574:	7bf9      	ldrb	r1, [r7, #15]
 8000576:	7bba      	ldrb	r2, [r7, #14]
 8000578:	1a8a      	subs	r2, r1, r2
 800057a:	b2d2      	uxtb	r2, r2
 800057c:	701a      	strb	r2, [r3, #0]
			last = i;
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	73bb      	strb	r3, [r7, #14]
	for (; i < len; i++) {
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	3301      	adds	r3, #1
 8000586:	73fb      	strb	r3, [r7, #15]
 8000588:	7bfa      	ldrb	r2, [r7, #15]
 800058a:	78fb      	ldrb	r3, [r7, #3]
 800058c:	429a      	cmp	r2, r3
 800058e:	d3e8      	bcc.n	8000562 <stuff_data+0x16>
		}
	}
	return 0x00;
 8000590:	2300      	movs	r3, #0
}
 8000592:	4618      	mov	r0, r3
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr

0800059c <unstuff_data>:

uint8_t unstuff_data(uint8_t *buf, uint8_t len)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	70fb      	strb	r3, [r7, #3]
	uint8_t next = buf[0];
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	73fb      	strb	r3, [r7, #15]
	buf[0] = 0x00;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
	//len -= 1;
	uint8_t tmp = next;
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
 80005b6:	73bb      	strb	r3, [r7, #14]
	while ((next < len) && tmp != 0) {
 80005b8:	e00d      	b.n	80005d6 <unstuff_data+0x3a>
		tmp = buf[next];
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	4413      	add	r3, r2
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	73bb      	strb	r3, [r7, #14]
		buf[next] = FRAME_BYTE;
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	4413      	add	r3, r2
 80005ca:	2200      	movs	r2, #0
 80005cc:	701a      	strb	r2, [r3, #0]
		next += tmp;
 80005ce:	7bfa      	ldrb	r2, [r7, #15]
 80005d0:	7bbb      	ldrb	r3, [r7, #14]
 80005d2:	4413      	add	r3, r2
 80005d4:	73fb      	strb	r3, [r7, #15]
	while ((next < len) && tmp != 0) {
 80005d6:	7bfa      	ldrb	r2, [r7, #15]
 80005d8:	78fb      	ldrb	r3, [r7, #3]
 80005da:	429a      	cmp	r2, r3
 80005dc:	d202      	bcs.n	80005e4 <unstuff_data+0x48>
 80005de:	7bbb      	ldrb	r3, [r7, #14]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d1ea      	bne.n	80005ba <unstuff_data+0x1e>
	}
	return next;
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr

080005f0 <simpleserial_init>:

// Set up the SimpleSerial module by preparing internal commands
// This just adds the "v" command for now...
void simpleserial_init()
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	simpleserial_addcmd('v', 0, check_version);
 80005f4:	4a05      	ldr	r2, [pc, #20]	@ (800060c <simpleserial_init+0x1c>)
 80005f6:	2100      	movs	r1, #0
 80005f8:	2076      	movs	r0, #118	@ 0x76
 80005fa:	f000 f80b 	bl	8000614 <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 80005fe:	4a04      	ldr	r2, [pc, #16]	@ (8000610 <simpleserial_init+0x20>)
 8000600:	2100      	movs	r1, #0
 8000602:	2077      	movs	r0, #119	@ 0x77
 8000604:	f000 f806 	bl	8000614 <simpleserial_addcmd>
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	080004b1 	.word	0x080004b1
 8000610:	080004e1 	.word	0x080004e1

08000614 <simpleserial_addcmd>:

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t, uint8_t, uint8_t, uint8_t*))
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
 8000620:	73fb      	strb	r3, [r7, #15]
	if(num_commands >= MAX_SS_CMDS) {
 8000622:	4b1d      	ldr	r3, [pc, #116]	@ (8000698 <simpleserial_addcmd+0x84>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b0f      	cmp	r3, #15
 8000628:	dd04      	ble.n	8000634 <simpleserial_addcmd+0x20>
		putch('a');
 800062a:	2061      	movs	r0, #97	@ 0x61
 800062c:	f000 fb0e 	bl	8000c4c <putch>
		return 1;
 8000630:	2301      	movs	r3, #1
 8000632:	e02d      	b.n	8000690 <simpleserial_addcmd+0x7c>
	}

	if(len >= MAX_SS_LEN) {
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	2bff      	cmp	r3, #255	@ 0xff
 8000638:	d904      	bls.n	8000644 <simpleserial_addcmd+0x30>
		putch('b');
 800063a:	2062      	movs	r0, #98	@ 0x62
 800063c:	f000 fb06 	bl	8000c4c <putch>
		return 1;
 8000640:	2301      	movs	r3, #1
 8000642:	e025      	b.n	8000690 <simpleserial_addcmd+0x7c>
	}

	commands[num_commands].c   = c;
 8000644:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <simpleserial_addcmd+0x84>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4914      	ldr	r1, [pc, #80]	@ (800069c <simpleserial_addcmd+0x88>)
 800064a:	4613      	mov	r3, r2
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	4413      	add	r3, r2
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	440b      	add	r3, r1
 8000654:	7bfa      	ldrb	r2, [r7, #15]
 8000656:	701a      	strb	r2, [r3, #0]
	commands[num_commands].len = len;
 8000658:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <simpleserial_addcmd+0x84>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	490f      	ldr	r1, [pc, #60]	@ (800069c <simpleserial_addcmd+0x88>)
 800065e:	4613      	mov	r3, r2
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	4413      	add	r3, r2
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	440b      	add	r3, r1
 8000668:	3304      	adds	r3, #4
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	601a      	str	r2, [r3, #0]
	commands[num_commands].fp  = fp;
 800066e:	4b0a      	ldr	r3, [pc, #40]	@ (8000698 <simpleserial_addcmd+0x84>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	490a      	ldr	r1, [pc, #40]	@ (800069c <simpleserial_addcmd+0x88>)
 8000674:	4613      	mov	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	4413      	add	r3, r2
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	440b      	add	r3, r1
 800067e:	3308      	adds	r3, #8
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	601a      	str	r2, [r3, #0]
	num_commands++;
 8000684:	4b04      	ldr	r3, [pc, #16]	@ (8000698 <simpleserial_addcmd+0x84>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	3301      	adds	r3, #1
 800068a:	4a03      	ldr	r2, [pc, #12]	@ (8000698 <simpleserial_addcmd+0x84>)
 800068c:	6013      	str	r3, [r2, #0]

	return 0;
 800068e:	2300      	movs	r3, #0
}
 8000690:	4618      	mov	r0, r3
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000000 	.word	0x20000000
 800069c:	20000004 	.word	0x20000004

080006a0 <simpleserial_get>:

void simpleserial_get(void)
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b0c7      	sub	sp, #284	@ 0x11c
 80006a4:	af00      	add	r7, sp, #0
	uint8_t data_buf[MAX_SS_LEN];
	uint8_t err = 0;
 80006a6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80006aa:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 4; i++) {
 80006b2:	2300      	movs	r3, #0
 80006b4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80006b8:	e022      	b.n	8000700 <simpleserial_get+0x60>
		data_buf[i] = getch(); //PTR, cmd, scmd, len
 80006ba:	f000 faa9 	bl	8000c10 <getch>
 80006be:	4603      	mov	r3, r0
 80006c0:	4619      	mov	r1, r3
 80006c2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80006c6:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 80006ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80006ce:	4413      	add	r3, r2
 80006d0:	460a      	mov	r2, r1
 80006d2:	701a      	strb	r2, [r3, #0]
		if (data_buf[i] == FRAME_BYTE) {
 80006d4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80006d8:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 80006dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80006e0:	4413      	add	r3, r2
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d106      	bne.n	80006f6 <simpleserial_get+0x56>
			err = SS_ERR_FRAME_BYTE;
 80006e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80006ec:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80006f0:	2205      	movs	r2, #5
 80006f2:	701a      	strb	r2, [r3, #0]
			goto ERROR;
 80006f4:	e0f9      	b.n	80008ea <simpleserial_get+0x24a>
	for (int i = 0; i < 4; i++) {
 80006f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80006fa:	3301      	adds	r3, #1
 80006fc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8000700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000704:	2b03      	cmp	r3, #3
 8000706:	ddd8      	ble.n	80006ba <simpleserial_get+0x1a>
		}
	}
	uint8_t next_frame = unstuff_data(data_buf, 4);
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	2104      	movs	r1, #4
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff44 	bl	800059c <unstuff_data>
 8000714:	4603      	mov	r3, r0
 8000716:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b

	// check for valid command
	uint8_t c = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
	for(c = 0; c < num_commands; c++)
 8000720:	2300      	movs	r3, #0
 8000722:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 8000726:	e014      	b.n	8000752 <simpleserial_get+0xb2>
	{
		if(commands[c].c == data_buf[1])
 8000728:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 800072c:	4974      	ldr	r1, [pc, #464]	@ (8000900 <simpleserial_get+0x260>)
 800072e:	4613      	mov	r3, r2
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	4413      	add	r3, r2
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	440b      	add	r3, r1
 8000738:	781a      	ldrb	r2, [r3, #0]
 800073a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800073e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000742:	785b      	ldrb	r3, [r3, #1]
 8000744:	429a      	cmp	r2, r3
 8000746:	d00b      	beq.n	8000760 <simpleserial_get+0xc0>
	for(c = 0; c < num_commands; c++)
 8000748:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 800074c:	3301      	adds	r3, #1
 800074e:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 8000752:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 8000756:	4b6b      	ldr	r3, [pc, #428]	@ (8000904 <simpleserial_get+0x264>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	429a      	cmp	r2, r3
 800075c:	dbe4      	blt.n	8000728 <simpleserial_get+0x88>
 800075e:	e000      	b.n	8000762 <simpleserial_get+0xc2>
			break;
 8000760:	bf00      	nop
	}

	if (c == num_commands) {
 8000762:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 8000766:	4b67      	ldr	r3, [pc, #412]	@ (8000904 <simpleserial_get+0x264>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	429a      	cmp	r2, r3
 800076c:	d106      	bne.n	800077c <simpleserial_get+0xdc>
		err = SS_ERR_CMD;
 800076e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000772:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8000776:	2201      	movs	r2, #1
 8000778:	701a      	strb	r2, [r3, #0]
		goto ERROR;
 800077a:	e0b6      	b.n	80008ea <simpleserial_get+0x24a>
	}

	//check that next frame not beyond end of message
	// account for cmd, scmd, len, data, crc, end of frame
	if ((data_buf[3] + 5) < next_frame) {
 800077c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000780:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000784:	78db      	ldrb	r3, [r3, #3]
 8000786:	1d5a      	adds	r2, r3, #5
 8000788:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800078c:	429a      	cmp	r2, r3
 800078e:	da06      	bge.n	800079e <simpleserial_get+0xfe>
		err = SS_ERR_LEN;
 8000790:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000794:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8000798:	2204      	movs	r2, #4
 800079a:	701a      	strb	r2, [r3, #0]
		goto ERROR;
 800079c:	e0a5      	b.n	80008ea <simpleserial_get+0x24a>
	}

	// read in data
	// eq to len + crc + frame end
	int i = 4;
 800079e:	2304      	movs	r3, #4
 80007a0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	for (; i < data_buf[3] + 5; i++) {
 80007a4:	e022      	b.n	80007ec <simpleserial_get+0x14c>
		data_buf[i] = getch();
 80007a6:	f000 fa33 	bl	8000c10 <getch>
 80007aa:	4603      	mov	r3, r0
 80007ac:	4619      	mov	r1, r3
 80007ae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007b2:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 80007b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80007ba:	4413      	add	r3, r2
 80007bc:	460a      	mov	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
		if (data_buf[i] == FRAME_BYTE) {
 80007c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007c4:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 80007c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80007cc:	4413      	add	r3, r2
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d106      	bne.n	80007e2 <simpleserial_get+0x142>
			err = SS_ERR_FRAME_BYTE;
 80007d4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007d8:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80007dc:	2205      	movs	r2, #5
 80007de:	701a      	strb	r2, [r3, #0]
			goto ERROR;
 80007e0:	e083      	b.n	80008ea <simpleserial_get+0x24a>
	for (; i < data_buf[3] + 5; i++) {
 80007e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80007e6:	3301      	adds	r3, #1
 80007e8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80007ec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80007f4:	78db      	ldrb	r3, [r3, #3]
 80007f6:	3304      	adds	r3, #4
 80007f8:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80007fc:	429a      	cmp	r2, r3
 80007fe:	ddd2      	ble.n	80007a6 <simpleserial_get+0x106>
		}
	}

	//check that final byte is the FRAME_BYTE
	data_buf[i] = getch();
 8000800:	f000 fa06 	bl	8000c10 <getch>
 8000804:	4603      	mov	r3, r0
 8000806:	4619      	mov	r1, r3
 8000808:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800080c:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8000810:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000814:	4413      	add	r3, r2
 8000816:	460a      	mov	r2, r1
 8000818:	701a      	strb	r2, [r3, #0]
	if (data_buf[i] != FRAME_BYTE) {
 800081a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800081e:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8000822:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000826:	4413      	add	r3, r2
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d006      	beq.n	800083c <simpleserial_get+0x19c>
		err = SS_ERR_LEN;
 800082e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000832:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8000836:	2204      	movs	r2, #4
 8000838:	701a      	strb	r2, [r3, #0]
		goto ERROR;
 800083a:	e056      	b.n	80008ea <simpleserial_get+0x24a>
	}

	//fully unstuff data now
	unstuff_data(data_buf + next_frame, i - next_frame + 1);
 800083c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8000840:	f107 0208 	add.w	r2, r7, #8
 8000844:	18d0      	adds	r0, r2, r3
 8000846:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800084a:	b2da      	uxtb	r2, r3
 800084c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	3301      	adds	r3, #1
 8000856:	b2db      	uxtb	r3, r3
 8000858:	4619      	mov	r1, r3
 800085a:	f7ff fe9f 	bl	800059c <unstuff_data>

	//calc crc excluding original frame offset and frame end and crc
	uint8_t crc = ss_crc(data_buf+1, i-2);
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	3301      	adds	r3, #1
 8000864:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8000868:	b2d2      	uxtb	r2, r2
 800086a:	3a02      	subs	r2, #2
 800086c:	b2d2      	uxtb	r2, r2
 800086e:	4611      	mov	r1, r2
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fde7 	bl	8000444 <ss_crc>
 8000876:	4603      	mov	r3, r0
 8000878:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
	if (crc != data_buf[i-1]) {
 800087c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000880:	3b01      	subs	r3, #1
 8000882:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000886:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800088a:	5cd3      	ldrb	r3, [r2, r3]
 800088c:	f897 210a 	ldrb.w	r2, [r7, #266]	@ 0x10a
 8000890:	429a      	cmp	r2, r3
 8000892:	d006      	beq.n	80008a2 <simpleserial_get+0x202>
		err = SS_ERR_CRC;
 8000894:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000898:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800089c:	2202      	movs	r2, #2
 800089e:	701a      	strb	r2, [r3, #0]
		goto ERROR;
 80008a0:	e023      	b.n	80008ea <simpleserial_get+0x24a>
	}

	err = commands[c].fp(data_buf[1], data_buf[2], data_buf[3], data_buf+4);
 80008a2:	f897 2113 	ldrb.w	r2, [r7, #275]	@ 0x113
 80008a6:	4916      	ldr	r1, [pc, #88]	@ (8000900 <simpleserial_get+0x260>)
 80008a8:	4613      	mov	r3, r2
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4413      	add	r3, r2
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	440b      	add	r3, r1
 80008b2:	3308      	adds	r3, #8
 80008b4:	681c      	ldr	r4, [r3, #0]
 80008b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008ba:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80008be:	7858      	ldrb	r0, [r3, #1]
 80008c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008c4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80008c8:	7899      	ldrb	r1, [r3, #2]
 80008ca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008ce:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80008d2:	78da      	ldrb	r2, [r3, #3]
 80008d4:	f107 0308 	add.w	r3, r7, #8
 80008d8:	3304      	adds	r3, #4
 80008da:	47a0      	blx	r4
 80008dc:	4603      	mov	r3, r0
 80008de:	461a      	mov	r2, r3
 80008e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008e4:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80008e8:	701a      	strb	r2, [r3, #0]

ERROR:
	simpleserial_put('e', 0x01, &err);
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	461a      	mov	r2, r3
 80008ee:	2101      	movs	r1, #1
 80008f0:	2065      	movs	r0, #101	@ 0x65
 80008f2:	f000 f809 	bl	8000908 <simpleserial_put>
	return;
 80008f6:	bf00      	nop
}
 80008f8:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd90      	pop	{r4, r7, pc}
 8000900:	20000004 	.word	0x20000004
 8000904:	20000000 	.word	0x20000000

08000908 <simpleserial_put>:

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b0c5      	sub	sp, #276	@ 0x114
 800090c:	af00      	add	r7, sp, #0
 800090e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000912:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800091c:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000920:	4602      	mov	r2, r0
 8000922:	701a      	strb	r2, [r3, #0]
 8000924:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000928:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800092c:	460a      	mov	r2, r1
 800092e:	701a      	strb	r2, [r3, #0]
	uint8_t data_buf[MAX_SS_LEN];
	data_buf[0] = 0x00;
 8000930:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000934:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
	data_buf[1] = c;
 800093c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000940:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000944:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000948:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 800094c:	7812      	ldrb	r2, [r2, #0]
 800094e:	705a      	strb	r2, [r3, #1]
	data_buf[2] = size;
 8000950:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000958:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800095c:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000960:	7812      	ldrb	r2, [r2, #0]
 8000962:	709a      	strb	r2, [r3, #2]
	int i = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
	for (; i < size; i++) {
 800096a:	e015      	b.n	8000998 <simpleserial_put+0x90>
		data_buf[i + 3] = output[i];
 800096c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000970:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000974:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000978:	6812      	ldr	r2, [r2, #0]
 800097a:	441a      	add	r2, r3
 800097c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000980:	3303      	adds	r3, #3
 8000982:	7811      	ldrb	r1, [r2, #0]
 8000984:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000988:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800098c:	54d1      	strb	r1, [r2, r3]
	for (; i < size; i++) {
 800098e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000992:	3301      	adds	r3, #1
 8000994:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000998:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800099c:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80009a6:	429a      	cmp	r2, r3
 80009a8:	dbe0      	blt.n	800096c <simpleserial_put+0x64>
	}
	data_buf[i + 3] = ss_crc(data_buf+1, size+2);
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	3301      	adds	r3, #1
 80009b0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80009b4:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80009b8:	7812      	ldrb	r2, [r2, #0]
 80009ba:	3202      	adds	r2, #2
 80009bc:	b2d1      	uxtb	r1, r2
 80009be:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80009c2:	1cd4      	adds	r4, r2, #3
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fd3d 	bl	8000444 <ss_crc>
 80009ca:	4603      	mov	r3, r0
 80009cc:	461a      	mov	r2, r3
 80009ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80009d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80009d6:	551a      	strb	r2, [r3, r4]
	data_buf[i + 4] = 0x00;
 80009d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80009dc:	3304      	adds	r3, #4
 80009de:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80009e2:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80009e6:	2100      	movs	r1, #0
 80009e8:	54d1      	strb	r1, [r2, r3]
	stuff_data(data_buf, i + 5);
 80009ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	3305      	adds	r3, #5
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	4611      	mov	r1, r2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fda6 	bl	800054c <stuff_data>
	for (int i = 0; i < size + 5; i++) {
 8000a00:	2300      	movs	r3, #0
 8000a02:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000a06:	e00f      	b.n	8000a28 <simpleserial_put+0x120>
		putch(data_buf[i]);
 8000a08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a0c:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8000a10:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000a14:	4413      	add	r3, r2
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 f917 	bl	8000c4c <putch>
	for (int i = 0; i < size + 5; i++) {
 8000a1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000a22:	3301      	adds	r3, #1
 8000a24:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8000a28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a2c:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	3304      	adds	r3, #4
 8000a34:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	dde5      	ble.n	8000a08 <simpleserial_put+0x100>
	}
}
 8000a3c:	bf00      	nop
 8000a3e:	bf00      	nop
 8000a40:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd90      	pop	{r4, r7, pc}

08000a48 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b096      	sub	sp, #88	@ 0x58
 8000a4c:	af00      	add	r7, sp, #0
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
     uint32_t flash_latency = 0;
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
  #else
     RCC_OscInitTypeDef RCC_OscInitStruct;
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
     RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000a52:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a56:	633b      	str	r3, [r7, #48]	@ 0x30
     RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
     RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
     HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000a60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 f925 	bl	8000cb4 <HAL_RCC_OscConfig>

     RCC_ClkInitTypeDef RCC_ClkInitStruct;
     RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000a6a:	230f      	movs	r3, #15
 8000a6c:	61bb      	str	r3, [r7, #24]
     RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	61fb      	str	r3, [r7, #28]
     RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
     uint32_t flash_latency = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	657b      	str	r3, [r7, #84]	@ 0x54
     HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8000a82:	f107 0318 	add.w	r3, r7, #24
 8000a86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f001 f929 	bl	8001ce0 <HAL_RCC_ClockConfig>




#if (PLATFORM==CWLITEARM)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <platform_init+0x9c>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	4a14      	ldr	r2, [pc, #80]	@ (8000ae4 <platform_init+0x9c>)
 8000a94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000a98:	6153      	str	r3, [r2, #20]
 8000a9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <platform_init+0x9c>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_13 | GPIO_PIN_14;
 8000aa6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000aaa:	607b      	str	r3, [r7, #4]
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	60bb      	str	r3, [r7, #8]
  GpioInit.Pull      = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GpioInit);
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	4619      	mov	r1, r3
 8000abc:	480a      	ldr	r0, [pc, #40]	@ (8000ae8 <platform_init+0xa0>)
 8000abe:	f001 fa99 	bl	8001ff4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ac8:	4807      	ldr	r0, [pc, #28]	@ (8000ae8 <platform_init+0xa0>)
 8000aca:	f001 fc11 	bl	80022f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ad4:	4804      	ldr	r0, [pc, #16]	@ (8000ae8 <platform_init+0xa0>)
 8000ad6:	f001 fc0b 	bl	80022f0 <HAL_GPIO_WritePin>
#endif
}
 8000ada:	bf00      	nop
 8000adc:	3758      	adds	r7, #88	@ 0x58
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	48000800 	.word	0x48000800

08000aec <init_uart>:

void init_uart(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 8000af2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000af6:	60fb      	str	r3, [r7, #12]
  GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	613b      	str	r3, [r7, #16]
  GpioInit.Pull      = GPIO_PULLUP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	617b      	str	r3, [r7, #20]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	61bb      	str	r3, [r7, #24]
  GpioInit.Alternate = GPIO_AF7_USART1;
 8000b04:	2307      	movs	r3, #7
 8000b06:	61fb      	str	r3, [r7, #28]
  __GPIOA_CLK_ENABLE();
 8000b08:	4b1d      	ldr	r3, [pc, #116]	@ (8000b80 <init_uart+0x94>)
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8000b80 <init_uart+0x94>)
 8000b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b12:	6153      	str	r3, [r2, #20]
 8000b14:	4b1a      	ldr	r3, [pc, #104]	@ (8000b80 <init_uart+0x94>)
 8000b16:	695b      	ldr	r3, [r3, #20]
 8000b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	4619      	mov	r1, r3
 8000b26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b2a:	f001 fa63 	bl	8001ff4 <HAL_GPIO_Init>

  UartHandle.Instance        = USART1;
 8000b2e:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <init_uart+0x98>)
 8000b30:	4a15      	ldr	r2, [pc, #84]	@ (8000b88 <init_uart+0x9c>)
 8000b32:	601a      	str	r2, [r3, #0]
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
 8000b34:	4b13      	ldr	r3, [pc, #76]	@ (8000b84 <init_uart+0x98>)
 8000b36:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000b3a:	605a      	str	r2, [r3, #4]
  #else
  UartHandle.Init.BaudRate   = 38400;
  #endif
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <init_uart+0x98>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000b42:	4b10      	ldr	r3, [pc, #64]	@ (8000b84 <init_uart+0x98>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000b48:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <init_uart+0x98>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b84 <init_uart+0x98>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000b54:	4b0b      	ldr	r3, [pc, #44]	@ (8000b84 <init_uart+0x98>)
 8000b56:	220c      	movs	r2, #12
 8000b58:	615a      	str	r2, [r3, #20]
  __USART1_CLK_ENABLE();
 8000b5a:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <init_uart+0x94>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	4a08      	ldr	r2, [pc, #32]	@ (8000b80 <init_uart+0x94>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b64:	6193      	str	r3, [r2, #24]
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <init_uart+0x94>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  HAL_UART_Init(&UartHandle);
 8000b72:	4804      	ldr	r0, [pc, #16]	@ (8000b84 <init_uart+0x98>)
 8000b74:	f001 fe1d 	bl	80027b2 <HAL_UART_Init>
}
 8000b78:	bf00      	nop
 8000b7a:	3720      	adds	r7, #32
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40021000 	.word	0x40021000
 8000b84:	200000c4 	.word	0x200000c4
 8000b88:	40013800 	.word	0x40013800

08000b8c <trigger_setup>:

void trigger_setup(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <trigger_setup+0x54>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	4a12      	ldr	r2, [pc, #72]	@ (8000be0 <trigger_setup+0x54>)
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b9c:	6153      	str	r3, [r2, #20]
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <trigger_setup+0x54>)
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GpioInit;
  GpioInit.Pin       = GPIO_PIN_12;
 8000baa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bae:	607b      	str	r3, [r7, #4]
  GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
  GpioInit.Pull      = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GpioInit);
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc4:	f001 fa16 	bl	8001ff4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bd2:	f001 fb8d 	bl	80022f0 <HAL_GPIO_WritePin>
}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000

08000be4 <trigger_high>:

void trigger_high(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf2:	f001 fb7d 	bl	80022f0 <HAL_GPIO_WritePin>
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <trigger_low>:

void trigger_low(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c08:	f001 fb72 	bl	80022f0 <HAL_GPIO_WritePin>
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <getch>:

char getch(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  uint8_t d;
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8000c16:	e005      	b.n	8000c24 <getch+0x14>
    USART1->ICR |= (1 << 3);
 8000c18:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <getch+0x34>)
 8000c1a:	6a1b      	ldr	r3, [r3, #32]
 8000c1c:	4a09      	ldr	r2, [pc, #36]	@ (8000c44 <getch+0x34>)
 8000c1e:	f043 0308 	orr.w	r3, r3, #8
 8000c22:	6213      	str	r3, [r2, #32]
  while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK)
 8000c24:	1df9      	adds	r1, r7, #7
 8000c26:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4806      	ldr	r0, [pc, #24]	@ (8000c48 <getch+0x38>)
 8000c2e:	f001 fedd 	bl	80029ec <HAL_UART_Receive>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d1ef      	bne.n	8000c18 <getch+0x8>
  //putch(d);
  return d;
 8000c38:	79fb      	ldrb	r3, [r7, #7]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40013800 	.word	0x40013800
 8000c48:	200000c4 	.word	0x200000c4

08000c4c <putch>:

void putch(char c)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  uint8_t d  = c;
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8000c5a:	f107 010f 	add.w	r1, r7, #15
 8000c5e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000c62:	2201      	movs	r2, #1
 8000c64:	4803      	ldr	r0, [pc, #12]	@ (8000c74 <putch+0x28>)
 8000c66:	f001 fe35 	bl	80028d4 <HAL_UART_Transmit>
}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200000c4 	.word	0x200000c4

08000c78 <HAL_GetTick>:
{
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
	return hal_sys_tick++;
 8000c7c:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <HAL_GetTick+0x18>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	1c5a      	adds	r2, r3, #1
 8000c82:	4903      	ldr	r1, [pc, #12]	@ (8000c90 <HAL_GetTick+0x18>)
 8000c84:	600a      	str	r2, [r1, #0]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000134 	.word	0x20000134

08000c94 <HAL_RCC_GetSysClockFreq>:

#define UART_CR1_FIELDS  ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | \
                                     USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8)) /*!< UART or USART CR1 fields of parameters set by UART_SetConfig API */

uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
	return F_CPU;
 8000c98:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <HAL_RCC_GetPCLK1Freq>:

uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
	return F_CPU;
 8000ca8:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000cc4:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ccc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cd0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	f000 8180 	beq.w	8000fe2 <HAL_RCC_OscConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ce2:	4bbe      	ldr	r3, [pc, #760]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 030c 	and.w	r3, r3, #12
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	d00c      	beq.n	8000d08 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cee:	4bbb      	ldr	r3, [pc, #748]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 030c 	and.w	r3, r3, #12
 8000cf6:	2b08      	cmp	r3, #8
 8000cf8:	d15d      	bne.n	8000db6 <HAL_RCC_OscConfig+0x102>
 8000cfa:	4bb8      	ldr	r3, [pc, #736]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d06:	d156      	bne.n	8000db6 <HAL_RCC_OscConfig+0x102>
 8000d08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d0c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d10:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000d14:	fa93 f3a3 	rbit	r3, r3
 8000d18:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000d1c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d20:	fab3 f383 	clz	r3, r3
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d102      	bne.n	8000d3a <HAL_RCC_OscConfig+0x86>
 8000d34:	4ba9      	ldr	r3, [pc, #676]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	e015      	b.n	8000d66 <HAL_RCC_OscConfig+0xb2>
 8000d3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d3e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d42:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000d46:	fa93 f3a3 	rbit	r3, r3
 8000d4a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000d4e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d52:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000d56:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000d5a:	fa93 f3a3 	rbit	r3, r3
 8000d5e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000d62:	4b9e      	ldr	r3, [pc, #632]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d66:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d6a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000d6e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000d72:	fa92 f2a2 	rbit	r2, r2
 8000d76:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return(result);
 8000d7a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000d7e:	fab2 f282 	clz	r2, r2
 8000d82:	b252      	sxtb	r2, r2
 8000d84:	f042 0220 	orr.w	r2, r2, #32
 8000d88:	b252      	sxtb	r2, r2
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	f002 021f 	and.w	r2, r2, #31
 8000d90:	2101      	movs	r1, #1
 8000d92:	fa01 f202 	lsl.w	r2, r1, r2
 8000d96:	4013      	ands	r3, r2
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f000 8121 	beq.w	8000fe0 <HAL_RCC_OscConfig+0x32c>
 8000d9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000da2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f040 8118 	bne.w	8000fe0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	f000 bf8c 	b.w	8001cce <HAL_RCC_OscConfig+0x101a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dc6:	d106      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x122>
 8000dc8:	4b84      	ldr	r3, [pc, #528]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a83      	ldr	r2, [pc, #524]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000dce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	e036      	b.n	8000e44 <HAL_RCC_OscConfig+0x190>
 8000dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10c      	bne.n	8000e00 <HAL_RCC_OscConfig+0x14c>
 8000de6:	4b7d      	ldr	r3, [pc, #500]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a7c      	ldr	r2, [pc, #496]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000dec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	4b7a      	ldr	r3, [pc, #488]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a79      	ldr	r2, [pc, #484]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000df8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	e021      	b.n	8000e44 <HAL_RCC_OscConfig+0x190>
 8000e00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e10:	d10c      	bne.n	8000e2c <HAL_RCC_OscConfig+0x178>
 8000e12:	4b72      	ldr	r3, [pc, #456]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a71      	ldr	r2, [pc, #452]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000e18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	4b6f      	ldr	r3, [pc, #444]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a6e      	ldr	r2, [pc, #440]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	e00b      	b.n	8000e44 <HAL_RCC_OscConfig+0x190>
 8000e2c:	4b6b      	ldr	r3, [pc, #428]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a6a      	ldr	r2, [pc, #424]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000e32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e36:	6013      	str	r3, [r2, #0]
 8000e38:	4b68      	ldr	r3, [pc, #416]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a67      	ldr	r2, [pc, #412]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000e3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e42:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e44:	4b65      	ldr	r3, [pc, #404]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e48:	f023 020f 	bic.w	r2, r3, #15
 8000e4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	4960      	ldr	r1, [pc, #384]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d05a      	beq.n	8000f24 <HAL_RCC_OscConfig+0x270>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6e:	f7ff ff03 	bl	8000c78 <HAL_GetTick>
 8000e72:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e76:	e00a      	b.n	8000e8e <HAL_RCC_OscConfig+0x1da>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e78:	f7ff fefe 	bl	8000c78 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	2b64      	cmp	r3, #100	@ 0x64
 8000e86:	d902      	bls.n	8000e8e <HAL_RCC_OscConfig+0x1da>
          {
            return HAL_TIMEOUT;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	f000 bf20 	b.w	8001cce <HAL_RCC_OscConfig+0x101a>
 8000e8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e92:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e96:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000e9a:	fa93 f3a3 	rbit	r3, r3
 8000e9e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return(result);
 8000ea2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ea6:	fab3 f383 	clz	r3, r3
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	095b      	lsrs	r3, r3, #5
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d102      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x20c>
 8000eba:	4b48      	ldr	r3, [pc, #288]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	e015      	b.n	8000eec <HAL_RCC_OscConfig+0x238>
 8000ec0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ec4:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000ecc:	fa93 f3a3 	rbit	r3, r3
 8000ed0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000ed4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ed8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000edc:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000ee0:	fa93 f3a3 	rbit	r3, r3
 8000ee4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000ee8:	4b3c      	ldr	r3, [pc, #240]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ef0:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000ef4:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000ef8:	fa92 f2a2 	rbit	r2, r2
 8000efc:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return(result);
 8000f00:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000f04:	fab2 f282 	clz	r2, r2
 8000f08:	b252      	sxtb	r2, r2
 8000f0a:	f042 0220 	orr.w	r2, r2, #32
 8000f0e:	b252      	sxtb	r2, r2
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	f002 021f 	and.w	r2, r2, #31
 8000f16:	2101      	movs	r1, #1
 8000f18:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d0aa      	beq.n	8000e78 <HAL_RCC_OscConfig+0x1c4>
 8000f22:	e05e      	b.n	8000fe2 <HAL_RCC_OscConfig+0x32e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f24:	f7ff fea8 	bl	8000c78 <HAL_GetTick>
 8000f28:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f2c:	e00a      	b.n	8000f44 <HAL_RCC_OscConfig+0x290>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f2e:	f7ff fea3 	bl	8000c78 <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b64      	cmp	r3, #100	@ 0x64
 8000f3c:	d902      	bls.n	8000f44 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	f000 bec5 	b.w	8001cce <HAL_RCC_OscConfig+0x101a>
 8000f44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f48:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000f50:	fa93 f3a3 	rbit	r3, r3
 8000f54:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return(result);
 8000f58:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5c:	fab3 f383 	clz	r3, r3
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d102      	bne.n	8000f76 <HAL_RCC_OscConfig+0x2c2>
 8000f70:	4b1a      	ldr	r3, [pc, #104]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	e015      	b.n	8000fa2 <HAL_RCC_OscConfig+0x2ee>
 8000f76:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f7a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000f82:	fa93 f3a3 	rbit	r3, r3
 8000f86:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000f8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f8e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000f92:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000f96:	fa93 f3a3 	rbit	r3, r3
 8000f9a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <HAL_RCC_OscConfig+0x328>)
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fa6:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8000faa:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000fae:	fa92 f2a2 	rbit	r2, r2
 8000fb2:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return(result);
 8000fb6:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000fba:	fab2 f282 	clz	r2, r2
 8000fbe:	b252      	sxtb	r2, r2
 8000fc0:	f042 0220 	orr.w	r2, r2, #32
 8000fc4:	b252      	sxtb	r2, r2
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	f002 021f 	and.w	r2, r2, #31
 8000fcc:	2101      	movs	r1, #1
 8000fce:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1aa      	bne.n	8000f2e <HAL_RCC_OscConfig+0x27a>
 8000fd8:	e003      	b.n	8000fe2 <HAL_RCC_OscConfig+0x32e>
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fe6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 817e 	beq.w	80012f4 <HAL_RCC_OscConfig+0x640>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ff8:	4ba6      	ldr	r3, [pc, #664]	@ (8001294 <HAL_RCC_OscConfig+0x5e0>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 030c 	and.w	r3, r3, #12
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00b      	beq.n	800101c <HAL_RCC_OscConfig+0x368>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001004:	4ba3      	ldr	r3, [pc, #652]	@ (8001294 <HAL_RCC_OscConfig+0x5e0>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 030c 	and.w	r3, r3, #12
 800100c:	2b08      	cmp	r3, #8
 800100e:	d173      	bne.n	80010f8 <HAL_RCC_OscConfig+0x444>
 8001010:	4ba0      	ldr	r3, [pc, #640]	@ (8001294 <HAL_RCC_OscConfig+0x5e0>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d16d      	bne.n	80010f8 <HAL_RCC_OscConfig+0x444>
 800101c:	2302      	movs	r3, #2
 800101e:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001022:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001026:	fa93 f3a3 	rbit	r3, r3
 800102a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return(result);
 800102e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001032:	fab3 f383 	clz	r3, r3
 8001036:	b2db      	uxtb	r3, r3
 8001038:	095b      	lsrs	r3, r3, #5
 800103a:	b2db      	uxtb	r3, r3
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b01      	cmp	r3, #1
 8001044:	d102      	bne.n	800104c <HAL_RCC_OscConfig+0x398>
 8001046:	4b93      	ldr	r3, [pc, #588]	@ (8001294 <HAL_RCC_OscConfig+0x5e0>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	e013      	b.n	8001074 <HAL_RCC_OscConfig+0x3c0>
 800104c:	2302      	movs	r3, #2
 800104e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001052:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001056:	fa93 f3a3 	rbit	r3, r3
 800105a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800105e:	2302      	movs	r3, #2
 8001060:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001064:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001068:	fa93 f3a3 	rbit	r3, r3
 800106c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001070:	4b88      	ldr	r3, [pc, #544]	@ (8001294 <HAL_RCC_OscConfig+0x5e0>)
 8001072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001074:	2202      	movs	r2, #2
 8001076:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800107a:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800107e:	fa92 f2a2 	rbit	r2, r2
 8001082:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return(result);
 8001086:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800108a:	fab2 f282 	clz	r2, r2
 800108e:	b252      	sxtb	r2, r2
 8001090:	f042 0220 	orr.w	r2, r2, #32
 8001094:	b252      	sxtb	r2, r2
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	f002 021f 	and.w	r2, r2, #31
 800109c:	2101      	movs	r1, #1
 800109e:	fa01 f202 	lsl.w	r2, r1, r2
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d00a      	beq.n	80010be <HAL_RCC_OscConfig+0x40a>
 80010a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d002      	beq.n	80010be <HAL_RCC_OscConfig+0x40a>
      {
        return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	f000 be08 	b.w	8001cce <HAL_RCC_OscConfig+0x101a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010be:	4b75      	ldr	r3, [pc, #468]	@ (8001294 <HAL_RCC_OscConfig+0x5e0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6959      	ldr	r1, [r3, #20]
 80010d2:	23f8      	movs	r3, #248	@ 0xf8
 80010d4:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d8:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80010dc:	fa93 f3a3 	rbit	r3, r3
 80010e0:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
  return(result);
 80010e4:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80010e8:	fab3 f383 	clz	r3, r3
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	4968      	ldr	r1, [pc, #416]	@ (8001294 <HAL_RCC_OscConfig+0x5e0>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f6:	e0fd      	b.n	80012f4 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 8088 	beq.w	800121a <HAL_RCC_OscConfig+0x566>
 800110a:	2301      	movs	r3, #1
 800110c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001110:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001114:	fa93 f3a3 	rbit	r3, r3
 8001118:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return(result);
 800111c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001120:	fab3 f383 	clz	r3, r3
 8001124:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001128:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	461a      	mov	r2, r3
 8001130:	2301      	movs	r3, #1
 8001132:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001134:	f7ff fda0 	bl	8000c78 <HAL_GetTick>
 8001138:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113c:	e00a      	b.n	8001154 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800113e:	f7ff fd9b 	bl	8000c78 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d902      	bls.n	8001154 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	f000 bdbd 	b.w	8001cce <HAL_RCC_OscConfig+0x101a>
 8001154:	2302      	movs	r3, #2
 8001156:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800115e:	fa93 f3a3 	rbit	r3, r3
 8001162:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return(result);
 8001166:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116a:	fab3 f383 	clz	r3, r3
 800116e:	b2db      	uxtb	r3, r3
 8001170:	095b      	lsrs	r3, r3, #5
 8001172:	b2db      	uxtb	r3, r3
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b01      	cmp	r3, #1
 800117c:	d102      	bne.n	8001184 <HAL_RCC_OscConfig+0x4d0>
 800117e:	4b45      	ldr	r3, [pc, #276]	@ (8001294 <HAL_RCC_OscConfig+0x5e0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	e013      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
 8001184:	2302      	movs	r3, #2
 8001186:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800118e:	fa93 f3a3 	rbit	r3, r3
 8001192:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001196:	2302      	movs	r3, #2
 8001198:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800119c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80011a0:	fa93 f3a3 	rbit	r3, r3
 80011a4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80011a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001294 <HAL_RCC_OscConfig+0x5e0>)
 80011aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ac:	2202      	movs	r2, #2
 80011ae:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80011b2:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80011b6:	fa92 f2a2 	rbit	r2, r2
 80011ba:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return(result);
 80011be:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80011c2:	fab2 f282 	clz	r2, r2
 80011c6:	b252      	sxtb	r2, r2
 80011c8:	f042 0220 	orr.w	r2, r2, #32
 80011cc:	b252      	sxtb	r2, r2
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	f002 021f 	and.w	r2, r2, #31
 80011d4:	2101      	movs	r1, #1
 80011d6:	fa01 f202 	lsl.w	r2, r1, r2
 80011da:	4013      	ands	r3, r2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0ae      	beq.n	800113e <HAL_RCC_OscConfig+0x48a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001294 <HAL_RCC_OscConfig+0x5e0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6959      	ldr	r1, [r3, #20]
 80011f4:	23f8      	movs	r3, #248	@ 0xf8
 80011f6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80011fe:	fa93 f3a3 	rbit	r3, r3
 8001202:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  return(result);
 8001206:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800120a:	fab3 f383 	clz	r3, r3
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	4920      	ldr	r1, [pc, #128]	@ (8001294 <HAL_RCC_OscConfig+0x5e0>)
 8001214:	4313      	orrs	r3, r2
 8001216:	600b      	str	r3, [r1, #0]
 8001218:	e06c      	b.n	80012f4 <HAL_RCC_OscConfig+0x640>
 800121a:	2301      	movs	r3, #1
 800121c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001224:	fa93 f3a3 	rbit	r3, r3
 8001228:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return(result);
 800122c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001230:	fab3 f383 	clz	r3, r3
 8001234:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001238:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	461a      	mov	r2, r3
 8001240:	2300      	movs	r3, #0
 8001242:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001244:	f7ff fd18 	bl	8000c78 <HAL_GetTick>
 8001248:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124c:	e00a      	b.n	8001264 <HAL_RCC_OscConfig+0x5b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800124e:	f7ff fd13 	bl	8000c78 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d902      	bls.n	8001264 <HAL_RCC_OscConfig+0x5b0>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	f000 bd35 	b.w	8001cce <HAL_RCC_OscConfig+0x101a>
 8001264:	2302      	movs	r3, #2
 8001266:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800126e:	fa93 f3a3 	rbit	r3, r3
 8001272:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return(result);
 8001276:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127a:	fab3 f383 	clz	r3, r3
 800127e:	b2db      	uxtb	r3, r3
 8001280:	095b      	lsrs	r3, r3, #5
 8001282:	b2db      	uxtb	r3, r3
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b01      	cmp	r3, #1
 800128c:	d104      	bne.n	8001298 <HAL_RCC_OscConfig+0x5e4>
 800128e:	4b01      	ldr	r3, [pc, #4]	@ (8001294 <HAL_RCC_OscConfig+0x5e0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	e015      	b.n	80012c0 <HAL_RCC_OscConfig+0x60c>
 8001294:	40021000 	.word	0x40021000
 8001298:	2302      	movs	r3, #2
 800129a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80012a2:	fa93 f3a3 	rbit	r3, r3
 80012a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80012aa:	2302      	movs	r3, #2
 80012ac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80012b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80012b4:	fa93 f3a3 	rbit	r3, r3
 80012b8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80012bc:	4bc5      	ldr	r3, [pc, #788]	@ (80015d4 <HAL_RCC_OscConfig+0x920>)
 80012be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c0:	2202      	movs	r2, #2
 80012c2:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80012c6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80012ca:	fa92 f2a2 	rbit	r2, r2
 80012ce:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return(result);
 80012d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80012d6:	fab2 f282 	clz	r2, r2
 80012da:	b252      	sxtb	r2, r2
 80012dc:	f042 0220 	orr.w	r2, r2, #32
 80012e0:	b252      	sxtb	r2, r2
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	f002 021f 	and.w	r2, r2, #31
 80012e8:	2101      	movs	r1, #1
 80012ea:	fa01 f202 	lsl.w	r2, r1, r2
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1ac      	bne.n	800124e <HAL_RCC_OscConfig+0x59a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 810a 	beq.w	800151e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800130a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800130e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d073      	beq.n	8001402 <HAL_RCC_OscConfig+0x74e>
 800131a:	2301      	movs	r3, #1
 800131c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001324:	fa93 f3a3 	rbit	r3, r3
 8001328:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return(result);
 800132c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001330:	fab3 f383 	clz	r3, r3
 8001334:	461a      	mov	r2, r3
 8001336:	4ba8      	ldr	r3, [pc, #672]	@ (80015d8 <HAL_RCC_OscConfig+0x924>)
 8001338:	4413      	add	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	461a      	mov	r2, r3
 800133e:	2301      	movs	r3, #1
 8001340:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001342:	f7ff fc99 	bl	8000c78 <HAL_GetTick>
 8001346:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134a:	e00a      	b.n	8001362 <HAL_RCC_OscConfig+0x6ae>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800134c:	f7ff fc94 	bl	8000c78 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d902      	bls.n	8001362 <HAL_RCC_OscConfig+0x6ae>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	f000 bcb6 	b.w	8001cce <HAL_RCC_OscConfig+0x101a>
 8001362:	2302      	movs	r3, #2
 8001364:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001368:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800136c:	fa93 f3a3 	rbit	r3, r3
 8001370:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001374:	2302      	movs	r3, #2
 8001376:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800137a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800137e:	fa93 f2a3 	rbit	r2, r3
 8001382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001386:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001390:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001394:	2202      	movs	r2, #2
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800139c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	fa93 f2a3 	rbit	r2, r3
 80013a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80013ae:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b0:	4b88      	ldr	r3, [pc, #544]	@ (80015d4 <HAL_RCC_OscConfig+0x920>)
 80013b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013bc:	2102      	movs	r1, #2
 80013be:	6019      	str	r1, [r3, #0]
 80013c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	fa93 f1a3 	rbit	r1, r3
 80013ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013d2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80013d6:	6019      	str	r1, [r3, #0]
  return(result);
 80013d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013dc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	fab3 f383 	clz	r3, r3
 80013e6:	b25b      	sxtb	r3, r3
 80013e8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	f003 031f 	and.w	r3, r3, #31
 80013f4:	2101      	movs	r1, #1
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	4013      	ands	r3, r2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0a5      	beq.n	800134c <HAL_RCC_OscConfig+0x698>
 8001400:	e08d      	b.n	800151e <HAL_RCC_OscConfig+0x86a>
 8001402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001406:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800140a:	2201      	movs	r2, #1
 800140c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001412:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	fa93 f2a3 	rbit	r2, r3
 800141c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001420:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001424:	601a      	str	r2, [r3, #0]
  return(result);
 8001426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800142a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800142e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001430:	fab3 f383 	clz	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	4b68      	ldr	r3, [pc, #416]	@ (80015d8 <HAL_RCC_OscConfig+0x924>)
 8001438:	4413      	add	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	461a      	mov	r2, r3
 800143e:	2300      	movs	r3, #0
 8001440:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001442:	f7ff fc19 	bl	8000c78 <HAL_GetTick>
 8001446:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800144a:	e00a      	b.n	8001462 <HAL_RCC_OscConfig+0x7ae>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144c:	f7ff fc14 	bl	8000c78 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d902      	bls.n	8001462 <HAL_RCC_OscConfig+0x7ae>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	f000 bc36 	b.w	8001cce <HAL_RCC_OscConfig+0x101a>
 8001462:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001466:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800146a:	2202      	movs	r2, #2
 800146c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001472:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	fa93 f2a3 	rbit	r2, r3
 800147c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001480:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800148a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800148e:	2202      	movs	r2, #2
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001496:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	fa93 f2a3 	rbit	r2, r3
 80014a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014b2:	2202      	movs	r2, #2
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	fa93 f2a3 	rbit	r2, r3
 80014c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014c8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80014cc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ce:	4b41      	ldr	r3, [pc, #260]	@ (80015d4 <HAL_RCC_OscConfig+0x920>)
 80014d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014d6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014da:	2102      	movs	r1, #2
 80014dc:	6019      	str	r1, [r3, #0]
 80014de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014e2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	fa93 f1a3 	rbit	r1, r3
 80014ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80014f4:	6019      	str	r1, [r3, #0]
  return(result);
 80014f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014fa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	fab3 f383 	clz	r3, r3
 8001504:	b25b      	sxtb	r3, r3
 8001506:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800150a:	b25b      	sxtb	r3, r3
 800150c:	b2db      	uxtb	r3, r3
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	2101      	movs	r1, #1
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	4013      	ands	r3, r2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d196      	bne.n	800144c <HAL_RCC_OscConfig+0x798>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800151e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001522:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 81a4 	beq.w	800187c <HAL_RCC_OscConfig+0xbc8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153a:	4b26      	ldr	r3, [pc, #152]	@ (80015d4 <HAL_RCC_OscConfig+0x920>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d116      	bne.n	8001574 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b23      	ldr	r3, [pc, #140]	@ (80015d4 <HAL_RCC_OscConfig+0x920>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4a22      	ldr	r2, [pc, #136]	@ (80015d4 <HAL_RCC_OscConfig+0x920>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001550:	61d3      	str	r3, [r2, #28]
 8001552:	4b20      	ldr	r3, [pc, #128]	@ (80015d4 <HAL_RCC_OscConfig+0x920>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800155a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800155e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001568:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800156c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800156e:	2301      	movs	r3, #1
 8001570:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <HAL_RCC_OscConfig+0x928>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d11a      	bne.n	80015b6 <HAL_RCC_OscConfig+0x902>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001580:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <HAL_RCC_OscConfig+0x928>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a15      	ldr	r2, [pc, #84]	@ (80015dc <HAL_RCC_OscConfig+0x928>)
 8001586:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800158a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800158c:	f7ff fb74 	bl	8000c78 <HAL_GetTick>
 8001590:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001594:	e009      	b.n	80015aa <HAL_RCC_OscConfig+0x8f6>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001596:	f7ff fb6f 	bl	8000c78 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	@ 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x8f6>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e391      	b.n	8001cce <HAL_RCC_OscConfig+0x101a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015aa:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <HAL_RCC_OscConfig+0x928>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0ef      	beq.n	8001596 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d10c      	bne.n	80015e0 <HAL_RCC_OscConfig+0x92c>
 80015c6:	4b03      	ldr	r3, [pc, #12]	@ (80015d4 <HAL_RCC_OscConfig+0x920>)
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	4a02      	ldr	r2, [pc, #8]	@ (80015d4 <HAL_RCC_OscConfig+0x920>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6213      	str	r3, [r2, #32]
 80015d2:	e03b      	b.n	800164c <HAL_RCC_OscConfig+0x998>
 80015d4:	40021000 	.word	0x40021000
 80015d8:	10908120 	.word	0x10908120
 80015dc:	40007000 	.word	0x40007000
 80015e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10c      	bne.n	800160a <HAL_RCC_OscConfig+0x956>
 80015f0:	4b7f      	ldr	r3, [pc, #508]	@ (80017f0 <HAL_RCC_OscConfig+0xb3c>)
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	4a7e      	ldr	r2, [pc, #504]	@ (80017f0 <HAL_RCC_OscConfig+0xb3c>)
 80015f6:	f023 0301 	bic.w	r3, r3, #1
 80015fa:	6213      	str	r3, [r2, #32]
 80015fc:	4b7c      	ldr	r3, [pc, #496]	@ (80017f0 <HAL_RCC_OscConfig+0xb3c>)
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	4a7b      	ldr	r2, [pc, #492]	@ (80017f0 <HAL_RCC_OscConfig+0xb3c>)
 8001602:	f023 0304 	bic.w	r3, r3, #4
 8001606:	6213      	str	r3, [r2, #32]
 8001608:	e020      	b.n	800164c <HAL_RCC_OscConfig+0x998>
 800160a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800160e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b05      	cmp	r3, #5
 8001618:	d10c      	bne.n	8001634 <HAL_RCC_OscConfig+0x980>
 800161a:	4b75      	ldr	r3, [pc, #468]	@ (80017f0 <HAL_RCC_OscConfig+0xb3c>)
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	4a74      	ldr	r2, [pc, #464]	@ (80017f0 <HAL_RCC_OscConfig+0xb3c>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	6213      	str	r3, [r2, #32]
 8001626:	4b72      	ldr	r3, [pc, #456]	@ (80017f0 <HAL_RCC_OscConfig+0xb3c>)
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	4a71      	ldr	r2, [pc, #452]	@ (80017f0 <HAL_RCC_OscConfig+0xb3c>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6213      	str	r3, [r2, #32]
 8001632:	e00b      	b.n	800164c <HAL_RCC_OscConfig+0x998>
 8001634:	4b6e      	ldr	r3, [pc, #440]	@ (80017f0 <HAL_RCC_OscConfig+0xb3c>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4a6d      	ldr	r2, [pc, #436]	@ (80017f0 <HAL_RCC_OscConfig+0xb3c>)
 800163a:	f023 0301 	bic.w	r3, r3, #1
 800163e:	6213      	str	r3, [r2, #32]
 8001640:	4b6b      	ldr	r3, [pc, #428]	@ (80017f0 <HAL_RCC_OscConfig+0xb3c>)
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	4a6a      	ldr	r2, [pc, #424]	@ (80017f0 <HAL_RCC_OscConfig+0xb3c>)
 8001646:	f023 0304 	bic.w	r3, r3, #4
 800164a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800164c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001650:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 8082 	beq.w	8001762 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165e:	f7ff fb0b 	bl	8000c78 <HAL_GetTick>
 8001662:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001666:	e00b      	b.n	8001680 <HAL_RCC_OscConfig+0x9cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001668:	f7ff fb06 	bl	8000c78 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001678:	4293      	cmp	r3, r2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x9cc>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e326      	b.n	8001cce <HAL_RCC_OscConfig+0x101a>
 8001680:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001684:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001688:	2202      	movs	r2, #2
 800168a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001690:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	fa93 f2a3 	rbit	r2, r3
 800169a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800169e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016a8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80016ac:	2202      	movs	r2, #2
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	fa93 f2a3 	rbit	r2, r3
 80016be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80016c6:	601a      	str	r2, [r3, #0]
  return(result);
 80016c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016cc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80016d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d2:	fab3 f383 	clz	r3, r3
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	095b      	lsrs	r3, r3, #5
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d102      	bne.n	80016ec <HAL_RCC_OscConfig+0xa38>
 80016e6:	4b42      	ldr	r3, [pc, #264]	@ (80017f0 <HAL_RCC_OscConfig+0xb3c>)
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	e013      	b.n	8001714 <HAL_RCC_OscConfig+0xa60>
 80016ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016f0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80016f4:	2202      	movs	r2, #2
 80016f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016fc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	fa93 f2a3 	rbit	r2, r3
 8001706:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800170a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	4b37      	ldr	r3, [pc, #220]	@ (80017f0 <HAL_RCC_OscConfig+0xb3c>)
 8001712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001714:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001718:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 800171c:	2102      	movs	r1, #2
 800171e:	6011      	str	r1, [r2, #0]
 8001720:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001724:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 8001728:	6812      	ldr	r2, [r2, #0]
 800172a:	fa92 f1a2 	rbit	r1, r2
 800172e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001732:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001736:	6011      	str	r1, [r2, #0]
  return(result);
 8001738:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800173c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001740:	6812      	ldr	r2, [r2, #0]
 8001742:	fab2 f282 	clz	r2, r2
 8001746:	b252      	sxtb	r2, r2
 8001748:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800174c:	b252      	sxtb	r2, r2
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	f002 021f 	and.w	r2, r2, #31
 8001754:	2101      	movs	r1, #1
 8001756:	fa01 f202 	lsl.w	r2, r1, r2
 800175a:	4013      	ands	r3, r2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d083      	beq.n	8001668 <HAL_RCC_OscConfig+0x9b4>
 8001760:	e082      	b.n	8001868 <HAL_RCC_OscConfig+0xbb4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001762:	f7ff fa89 	bl	8000c78 <HAL_GetTick>
 8001766:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176a:	e00b      	b.n	8001784 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800176c:	f7ff fa84 	bl	8000c78 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800177c:	4293      	cmp	r3, r2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e2a4      	b.n	8001cce <HAL_RCC_OscConfig+0x101a>
 8001784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001788:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800178c:	2202      	movs	r2, #2
 800178e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001794:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	fa93 f2a3 	rbit	r2, r3
 800179e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ac:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80017b0:	2202      	movs	r2, #2
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	fa93 f2a3 	rbit	r2, r3
 80017c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80017ca:	601a      	str	r2, [r3, #0]
  return(result);
 80017cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80017d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d6:	fab3 f383 	clz	r3, r3
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	095b      	lsrs	r3, r3, #5
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	f043 0302 	orr.w	r3, r3, #2
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d104      	bne.n	80017f4 <HAL_RCC_OscConfig+0xb40>
 80017ea:	4b01      	ldr	r3, [pc, #4]	@ (80017f0 <HAL_RCC_OscConfig+0xb3c>)
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	e015      	b.n	800181c <HAL_RCC_OscConfig+0xb68>
 80017f0:	40021000 	.word	0x40021000
 80017f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80017fc:	2202      	movs	r2, #2
 80017fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001804:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	fa93 f2a3 	rbit	r2, r3
 800180e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001812:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	4bad      	ldr	r3, [pc, #692]	@ (8001ad0 <HAL_RCC_OscConfig+0xe1c>)
 800181a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001820:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 8001824:	2102      	movs	r1, #2
 8001826:	6011      	str	r1, [r2, #0]
 8001828:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800182c:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 8001830:	6812      	ldr	r2, [r2, #0]
 8001832:	fa92 f1a2 	rbit	r1, r2
 8001836:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800183a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800183e:	6011      	str	r1, [r2, #0]
  return(result);
 8001840:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001844:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	fab2 f282 	clz	r2, r2
 800184e:	b252      	sxtb	r2, r2
 8001850:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001854:	b252      	sxtb	r2, r2
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	f002 021f 	and.w	r2, r2, #31
 800185c:	2101      	movs	r1, #1
 800185e:	fa01 f202 	lsl.w	r2, r1, r2
 8001862:	4013      	ands	r3, r2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d181      	bne.n	800176c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001868:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800186c:	2b01      	cmp	r3, #1
 800186e:	d105      	bne.n	800187c <HAL_RCC_OscConfig+0xbc8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001870:	4b97      	ldr	r3, [pc, #604]	@ (8001ad0 <HAL_RCC_OscConfig+0xe1c>)
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	4a96      	ldr	r2, [pc, #600]	@ (8001ad0 <HAL_RCC_OscConfig+0xe1c>)
 8001876:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800187a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800187c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001880:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 821f 	beq.w	8001ccc <HAL_RCC_OscConfig+0x1018>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800188e:	4b90      	ldr	r3, [pc, #576]	@ (8001ad0 <HAL_RCC_OscConfig+0xe1c>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 030c 	and.w	r3, r3, #12
 8001896:	2b08      	cmp	r3, #8
 8001898:	f000 8216 	beq.w	8001cc8 <HAL_RCC_OscConfig+0x1014>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800189c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	f040 8166 	bne.w	8001b7a <HAL_RCC_OscConfig+0xec6>
 80018ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b2:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80018b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c0:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	fa93 f2a3 	rbit	r2, r3
 80018ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ce:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80018d2:	601a      	str	r2, [r3, #0]
  return(result);
 80018d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80018dc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018de:	fab3 f383 	clz	r3, r3
 80018e2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018e6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	461a      	mov	r2, r3
 80018ee:	2300      	movs	r3, #0
 80018f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f2:	f7ff f9c1 	bl	8000c78 <HAL_GetTick>
 80018f6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fa:	e00a      	b.n	8001912 <HAL_RCC_OscConfig+0xc5e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018fc:	f7ff f9bc 	bl	8000c78 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	4a72      	ldr	r2, [pc, #456]	@ (8001ad4 <HAL_RCC_OscConfig+0xe20>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0xc5e>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e1dd      	b.n	8001cce <HAL_RCC_OscConfig+0x101a>
 8001912:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001916:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800191a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800191e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001924:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	fa93 f2a3 	rbit	r2, r3
 800192e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001932:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001936:	601a      	str	r2, [r3, #0]
  return(result);
 8001938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800193c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001940:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001942:	fab3 f383 	clz	r3, r3
 8001946:	b2db      	uxtb	r3, r3
 8001948:	095b      	lsrs	r3, r3, #5
 800194a:	b2db      	uxtb	r3, r3
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b01      	cmp	r3, #1
 8001954:	d102      	bne.n	800195c <HAL_RCC_OscConfig+0xca8>
 8001956:	4b5e      	ldr	r3, [pc, #376]	@ (8001ad0 <HAL_RCC_OscConfig+0xe1c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	e027      	b.n	80019ac <HAL_RCC_OscConfig+0xcf8>
 800195c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001960:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001964:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001968:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800196e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	fa93 f2a3 	rbit	r2, r3
 8001978:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800197c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001986:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800198a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001994:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	fa93 f2a3 	rbit	r2, r3
 800199e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	4b49      	ldr	r3, [pc, #292]	@ (8001ad0 <HAL_RCC_OscConfig+0xe1c>)
 80019aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019b0:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 80019b4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80019b8:	6011      	str	r1, [r2, #0]
 80019ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019be:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	fa92 f1a2 	rbit	r1, r2
 80019c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019cc:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80019d0:	6011      	str	r1, [r2, #0]
  return(result);
 80019d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019d6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	fab2 f282 	clz	r2, r2
 80019e0:	b252      	sxtb	r2, r2
 80019e2:	f042 0220 	orr.w	r2, r2, #32
 80019e6:	b252      	sxtb	r2, r2
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	f002 021f 	and.w	r2, r2, #31
 80019ee:	2101      	movs	r1, #1
 80019f0:	fa01 f202 	lsl.w	r2, r1, r2
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d180      	bne.n	80018fc <HAL_RCC_OscConfig+0xc48>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019fa:	4b35      	ldr	r3, [pc, #212]	@ (8001ad0 <HAL_RCC_OscConfig+0xe1c>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	430b      	orrs	r3, r1
 8001a1c:	492c      	ldr	r1, [pc, #176]	@ (8001ad0 <HAL_RCC_OscConfig+0xe1c>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	604b      	str	r3, [r1, #4]
 8001a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a26:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001a2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a34:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	fa93 f2a3 	rbit	r2, r3
 8001a3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a42:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001a46:	601a      	str	r2, [r3, #0]
  return(result);
 8001a48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a4c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001a50:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a52:	fab3 f383 	clz	r3, r3
 8001a56:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a5a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	461a      	mov	r2, r3
 8001a62:	2301      	movs	r3, #1
 8001a64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a66:	f7ff f907 	bl	8000c78 <HAL_GetTick>
 8001a6a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a6e:	e00a      	b.n	8001a86 <HAL_RCC_OscConfig+0xdd2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a70:	f7ff f902 	bl	8000c78 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	4a15      	ldr	r2, [pc, #84]	@ (8001ad4 <HAL_RCC_OscConfig+0xe20>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0xdd2>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e123      	b.n	8001cce <HAL_RCC_OscConfig+0x101a>
 8001a86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a8a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001a8e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a98:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	fa93 f2a3 	rbit	r2, r3
 8001aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001aaa:	601a      	str	r2, [r3, #0]
  return(result);
 8001aac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001ab4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	095b      	lsrs	r3, r3, #5
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d106      	bne.n	8001ad8 <HAL_RCC_OscConfig+0xe24>
 8001aca:	4b01      	ldr	r3, [pc, #4]	@ (8001ad0 <HAL_RCC_OscConfig+0xe1c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	e02b      	b.n	8001b28 <HAL_RCC_OscConfig+0xe74>
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	00030d40 	.word	0x00030d40
 8001ad8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001adc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001ae0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ae4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aea:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	fa93 f2a3 	rbit	r2, r3
 8001af4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b02:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b10:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	fa93 f2a3 	rbit	r2, r3
 8001b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b1e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	4b6c      	ldr	r3, [pc, #432]	@ (8001cd8 <HAL_RCC_OscConfig+0x1024>)
 8001b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b28:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b2c:	f5a2 72e2 	sub.w	r2, r2, #452	@ 0x1c4
 8001b30:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b34:	6011      	str	r1, [r2, #0]
 8001b36:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b3a:	f5a2 72e2 	sub.w	r2, r2, #452	@ 0x1c4
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	fa92 f1a2 	rbit	r1, r2
 8001b44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b48:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001b4c:	6011      	str	r1, [r2, #0]
  return(result);
 8001b4e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b52:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	fab2 f282 	clz	r2, r2
 8001b5c:	b252      	sxtb	r2, r2
 8001b5e:	f042 0220 	orr.w	r2, r2, #32
 8001b62:	b252      	sxtb	r2, r2
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	f002 021f 	and.w	r2, r2, #31
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f43f af7c 	beq.w	8001a70 <HAL_RCC_OscConfig+0xdbc>
 8001b78:	e0a8      	b.n	8001ccc <HAL_RCC_OscConfig+0x1018>
 8001b7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b7e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8001b82:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	fa93 f2a3 	rbit	r2, r3
 8001b96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b9a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001b9e:	601a      	str	r2, [r3, #0]
  return(result);
 8001ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001ba8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001baa:	fab3 f383 	clz	r3, r3
 8001bae:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001bb2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	461a      	mov	r2, r3
 8001bba:	2300      	movs	r3, #0
 8001bbc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbe:	f7ff f85b 	bl	8000c78 <HAL_GetTick>
 8001bc2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_OscConfig+0xf2a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7ff f856 	bl	8000c78 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	4a41      	ldr	r2, [pc, #260]	@ (8001cdc <HAL_RCC_OscConfig+0x1028>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0xf2a>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e077      	b.n	8001cce <HAL_RCC_OscConfig+0x101a>
 8001bde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001be6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	fa93 f2a3 	rbit	r2, r3
 8001bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfe:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c02:	601a      	str	r2, [r3, #0]
  return(result);
 8001c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c08:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0e:	fab3 f383 	clz	r3, r3
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	095b      	lsrs	r3, r3, #5
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d102      	bne.n	8001c28 <HAL_RCC_OscConfig+0xf74>
 8001c22:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd8 <HAL_RCC_OscConfig+0x1024>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	e027      	b.n	8001c78 <HAL_RCC_OscConfig+0xfc4>
 8001c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c2c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c3a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	fa93 f2a3 	rbit	r2, r3
 8001c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c48:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c52:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001c56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c60:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	fa93 f2a3 	rbit	r2, r3
 8001c6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c6e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	4b18      	ldr	r3, [pc, #96]	@ (8001cd8 <HAL_RCC_OscConfig+0x1024>)
 8001c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c7c:	f5a2 72f6 	sub.w	r2, r2, #492	@ 0x1ec
 8001c80:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c84:	6011      	str	r1, [r2, #0]
 8001c86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c8a:	f5a2 72f6 	sub.w	r2, r2, #492	@ 0x1ec
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	fa92 f1a2 	rbit	r1, r2
 8001c94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c98:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001c9c:	6011      	str	r1, [r2, #0]
  return(result);
 8001c9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ca2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	fab2 f282 	clz	r2, r2
 8001cac:	b252      	sxtb	r2, r2
 8001cae:	f042 0220 	orr.w	r2, r2, #32
 8001cb2:	b252      	sxtb	r2, r2
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	f002 021f 	and.w	r2, r2, #31
 8001cba:	2101      	movs	r1, #1
 8001cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d180      	bne.n	8001bc8 <HAL_RCC_OscConfig+0xf14>
 8001cc6:	e001      	b.n	8001ccc <HAL_RCC_OscConfig+0x1018>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0x101a>
    }
  }
  
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	00030d40 	.word	0x00030d40

08001ce0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b09c      	sub	sp, #112	@ 0x70
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001cee:	4b98      	ldr	r3, [pc, #608]	@ (8001f50 <HAL_RCC_ClockConfig+0x270>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d910      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfc:	4b94      	ldr	r3, [pc, #592]	@ (8001f50 <HAL_RCC_ClockConfig+0x270>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 0207 	bic.w	r2, r3, #7
 8001d04:	4992      	ldr	r1, [pc, #584]	@ (8001f50 <HAL_RCC_ClockConfig+0x270>)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d0c:	4b90      	ldr	r3, [pc, #576]	@ (8001f50 <HAL_RCC_ClockConfig+0x270>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d001      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e15a      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x2f4>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d008      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d2a:	4b8a      	ldr	r3, [pc, #552]	@ (8001f54 <HAL_RCC_ClockConfig+0x274>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	4987      	ldr	r1, [pc, #540]	@ (8001f54 <HAL_RCC_ClockConfig+0x274>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 810d 	beq.w	8001f64 <HAL_RCC_ClockConfig+0x284>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d13d      	bne.n	8001dce <HAL_RCC_ClockConfig+0xee>
 8001d52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d56:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d5a:	fa93 f3a3 	rbit	r3, r3
 8001d5e:	667b      	str	r3, [r7, #100]	@ 0x64
  return(result);
 8001d60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	095b      	lsrs	r3, r3, #5
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d102      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x9c>
 8001d76:	4b77      	ldr	r3, [pc, #476]	@ (8001f54 <HAL_RCC_ClockConfig+0x274>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	e00f      	b.n	8001d9c <HAL_RCC_ClockConfig+0xbc>
 8001d7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d80:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d92:	fa93 f3a3 	rbit	r3, r3
 8001d96:	657b      	str	r3, [r7, #84]	@ 0x54
 8001d98:	4b6e      	ldr	r3, [pc, #440]	@ (8001f54 <HAL_RCC_ClockConfig+0x274>)
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001da0:	653a      	str	r2, [r7, #80]	@ 0x50
 8001da2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001da4:	fa92 f2a2 	rbit	r2, r2
 8001da8:	64fa      	str	r2, [r7, #76]	@ 0x4c
  return(result);
 8001daa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001dac:	fab2 f282 	clz	r2, r2
 8001db0:	b252      	sxtb	r2, r2
 8001db2:	f042 0220 	orr.w	r2, r2, #32
 8001db6:	b252      	sxtb	r2, r2
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	f002 021f 	and.w	r2, r2, #31
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d17d      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e102      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x2f4>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d13d      	bne.n	8001e52 <HAL_RCC_ClockConfig+0x172>
 8001dd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dda:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ddc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001dde:	fa93 f3a3 	rbit	r3, r3
 8001de2:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8001de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	095b      	lsrs	r3, r3, #5
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d102      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x120>
 8001dfa:	4b56      	ldr	r3, [pc, #344]	@ (8001f54 <HAL_RCC_ClockConfig+0x274>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	e00f      	b.n	8001e20 <HAL_RCC_ClockConfig+0x140>
 8001e00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e08:	fa93 f3a3 	rbit	r3, r3
 8001e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e1c:	4b4d      	ldr	r3, [pc, #308]	@ (8001f54 <HAL_RCC_ClockConfig+0x274>)
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e24:	633a      	str	r2, [r7, #48]	@ 0x30
 8001e26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e28:	fa92 f2a2 	rbit	r2, r2
 8001e2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
  return(result);
 8001e2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e30:	fab2 f282 	clz	r2, r2
 8001e34:	b252      	sxtb	r2, r2
 8001e36:	f042 0220 	orr.w	r2, r2, #32
 8001e3a:	b252      	sxtb	r2, r2
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	f002 021f 	and.w	r2, r2, #31
 8001e42:	2101      	movs	r1, #1
 8001e44:	fa01 f202 	lsl.w	r2, r1, r2
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d13b      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e0c0      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x2f4>
 8001e52:	2302      	movs	r3, #2
 8001e54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e58:	fa93 f3a3 	rbit	r3, r3
 8001e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d102      	bne.n	8001e7a <HAL_RCC_ClockConfig+0x19a>
 8001e74:	4b37      	ldr	r3, [pc, #220]	@ (8001f54 <HAL_RCC_ClockConfig+0x274>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	e00d      	b.n	8001e96 <HAL_RCC_ClockConfig+0x1b6>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	2302      	movs	r3, #2
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	fa93 f3a3 	rbit	r3, r3
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	4b30      	ldr	r3, [pc, #192]	@ (8001f54 <HAL_RCC_ClockConfig+0x274>)
 8001e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e96:	2202      	movs	r2, #2
 8001e98:	613a      	str	r2, [r7, #16]
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	fa92 f2a2 	rbit	r2, r2
 8001ea0:	60fa      	str	r2, [r7, #12]
  return(result);
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	fab2 f282 	clz	r2, r2
 8001ea8:	b252      	sxtb	r2, r2
 8001eaa:	f042 0220 	orr.w	r2, r2, #32
 8001eae:	b252      	sxtb	r2, r2
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	f002 021f 	and.w	r2, r2, #31
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e086      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x2f4>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ec6:	4b23      	ldr	r3, [pc, #140]	@ (8001f54 <HAL_RCC_ClockConfig+0x274>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f023 0203 	bic.w	r2, r3, #3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4920      	ldr	r1, [pc, #128]	@ (8001f54 <HAL_RCC_ClockConfig+0x274>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed8:	f7fe fece 	bl	8000c78 <HAL_GetTick>
 8001edc:	66f8      	str	r0, [r7, #108]	@ 0x6c
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d112      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x22c>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_ClockConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee8:	f7fe fec6 	bl	8000c78 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_ClockConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e06a      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x2f4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001efe:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <HAL_RCC_ClockConfig+0x274>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d1ee      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x208>
 8001f0a:	e02b      	b.n	8001f64 <HAL_RCC_ClockConfig+0x284>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d121      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x278>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_ClockConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f16:	f7fe feaf 	bl	8000c78 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_ClockConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e053      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x2f4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f2c:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <HAL_RCC_ClockConfig+0x274>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 030c 	and.w	r3, r3, #12
 8001f34:	2b08      	cmp	r3, #8
 8001f36:	d1ee      	bne.n	8001f16 <HAL_RCC_ClockConfig+0x236>
 8001f38:	e014      	b.n	8001f64 <HAL_RCC_ClockConfig+0x284>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3a:	f7fe fe9d 	bl	8000c78 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d905      	bls.n	8001f58 <HAL_RCC_ClockConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e041      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x2f4>
 8001f50:	40022000 	.word	0x40022000
 8001f54:	40021000 	.word	0x40021000
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f58:	4b20      	ldr	r3, [pc, #128]	@ (8001fdc <HAL_RCC_ClockConfig+0x2fc>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 030c 	and.w	r3, r3, #12
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1ea      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x25a>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001f64:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe0 <HAL_RCC_ClockConfig+0x300>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d210      	bcs.n	8001f94 <HAL_RCC_ClockConfig+0x2b4>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe0 <HAL_RCC_ClockConfig+0x300>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 0207 	bic.w	r2, r3, #7
 8001f7a:	4919      	ldr	r1, [pc, #100]	@ (8001fe0 <HAL_RCC_ClockConfig+0x300>)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f82:	4b17      	ldr	r3, [pc, #92]	@ (8001fe0 <HAL_RCC_ClockConfig+0x300>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x2b4>
    {
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e01f      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x2f4>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x2d2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <HAL_RCC_ClockConfig+0x2fc>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	490b      	ldr	r1, [pc, #44]	@ (8001fdc <HAL_RCC_ClockConfig+0x2fc>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d009      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fbe:	4b07      	ldr	r3, [pc, #28]	@ (8001fdc <HAL_RCC_ClockConfig+0x2fc>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4903      	ldr	r1, [pc, #12]	@ (8001fdc <HAL_RCC_ClockConfig+0x2fc>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3770      	adds	r7, #112	@ 0x70
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40022000 	.word	0x40022000

08001fe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  //return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
  return F_CPU;
 8001fe8:	f44f 03e1 	mov.w	r3, #7372800	@ 0x708000
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800200a:	e154      	b.n	80022b6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	2101      	movs	r1, #1
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	4013      	ands	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 8146 	beq.w	80022b0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b02      	cmp	r3, #2
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x40>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b12      	cmp	r3, #18
 8002032:	d123      	bne.n	800207c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	08da      	lsrs	r2, r3, #3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3208      	adds	r2, #8
 800203c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002040:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	220f      	movs	r2, #15
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	691a      	ldr	r2, [r3, #16]
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4313      	orrs	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	08da      	lsrs	r2, r3, #3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3208      	adds	r2, #8
 8002076:	6939      	ldr	r1, [r7, #16]
 8002078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2203      	movs	r2, #3
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0203 	and.w	r2, r3, #3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d00b      	beq.n	80020d0 <HAL_GPIO_Init+0xdc>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d007      	beq.n	80020d0 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020c4:	2b11      	cmp	r3, #17
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b12      	cmp	r3, #18
 80020ce:	d130      	bne.n	8002132 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	2203      	movs	r2, #3
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002106:	2201      	movs	r2, #1
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4013      	ands	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	091b      	lsrs	r3, r3, #4
 800211c:	f003 0201 	and.w	r2, r3, #1
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	2203      	movs	r2, #3
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 80a0 	beq.w	80022b0 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002170:	4b58      	ldr	r3, [pc, #352]	@ (80022d4 <HAL_GPIO_Init+0x2e0>)
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	4a57      	ldr	r2, [pc, #348]	@ (80022d4 <HAL_GPIO_Init+0x2e0>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	6193      	str	r3, [r2, #24]
 800217c:	4b55      	ldr	r3, [pc, #340]	@ (80022d4 <HAL_GPIO_Init+0x2e0>)
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002188:	4a53      	ldr	r2, [pc, #332]	@ (80022d8 <HAL_GPIO_Init+0x2e4>)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	089b      	lsrs	r3, r3, #2
 800218e:	3302      	adds	r3, #2
 8002190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002194:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	220f      	movs	r2, #15
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4013      	ands	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021b2:	d019      	beq.n	80021e8 <HAL_GPIO_Init+0x1f4>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a49      	ldr	r2, [pc, #292]	@ (80022dc <HAL_GPIO_Init+0x2e8>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d013      	beq.n	80021e4 <HAL_GPIO_Init+0x1f0>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a48      	ldr	r2, [pc, #288]	@ (80022e0 <HAL_GPIO_Init+0x2ec>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d00d      	beq.n	80021e0 <HAL_GPIO_Init+0x1ec>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a47      	ldr	r2, [pc, #284]	@ (80022e4 <HAL_GPIO_Init+0x2f0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d007      	beq.n	80021dc <HAL_GPIO_Init+0x1e8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a46      	ldr	r2, [pc, #280]	@ (80022e8 <HAL_GPIO_Init+0x2f4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d101      	bne.n	80021d8 <HAL_GPIO_Init+0x1e4>
 80021d4:	2304      	movs	r3, #4
 80021d6:	e008      	b.n	80021ea <HAL_GPIO_Init+0x1f6>
 80021d8:	2305      	movs	r3, #5
 80021da:	e006      	b.n	80021ea <HAL_GPIO_Init+0x1f6>
 80021dc:	2303      	movs	r3, #3
 80021de:	e004      	b.n	80021ea <HAL_GPIO_Init+0x1f6>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e002      	b.n	80021ea <HAL_GPIO_Init+0x1f6>
 80021e4:	2301      	movs	r3, #1
 80021e6:	e000      	b.n	80021ea <HAL_GPIO_Init+0x1f6>
 80021e8:	2300      	movs	r3, #0
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	f002 0203 	and.w	r2, r2, #3
 80021f0:	0092      	lsls	r2, r2, #2
 80021f2:	4093      	lsls	r3, r2
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021fa:	4937      	ldr	r1, [pc, #220]	@ (80022d8 <HAL_GPIO_Init+0x2e4>)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	089b      	lsrs	r3, r3, #2
 8002200:	3302      	adds	r3, #2
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002208:	4b38      	ldr	r3, [pc, #224]	@ (80022ec <HAL_GPIO_Init+0x2f8>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	43db      	mvns	r3, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800222c:	4a2f      	ldr	r2, [pc, #188]	@ (80022ec <HAL_GPIO_Init+0x2f8>)
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002232:	4b2e      	ldr	r3, [pc, #184]	@ (80022ec <HAL_GPIO_Init+0x2f8>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	43db      	mvns	r3, r3
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4013      	ands	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002256:	4a25      	ldr	r2, [pc, #148]	@ (80022ec <HAL_GPIO_Init+0x2f8>)
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800225c:	4b23      	ldr	r3, [pc, #140]	@ (80022ec <HAL_GPIO_Init+0x2f8>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	43db      	mvns	r3, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002280:	4a1a      	ldr	r2, [pc, #104]	@ (80022ec <HAL_GPIO_Init+0x2f8>)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002286:	4b19      	ldr	r3, [pc, #100]	@ (80022ec <HAL_GPIO_Init+0x2f8>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	43db      	mvns	r3, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80022aa:	4a10      	ldr	r2, [pc, #64]	@ (80022ec <HAL_GPIO_Init+0x2f8>)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	3301      	adds	r3, #1
 80022b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	fa22 f303 	lsr.w	r3, r2, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f47f aea3 	bne.w	800200c <HAL_GPIO_Init+0x18>
  }
}
 80022c6:	bf00      	nop
 80022c8:	bf00      	nop
 80022ca:	371c      	adds	r7, #28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40010000 	.word	0x40010000
 80022dc:	48000400 	.word	0x48000400
 80022e0:	48000800 	.word	0x48000800
 80022e4:	48000c00 	.word	0x48000c00
 80022e8:	48001000 	.word	0x48001000
 80022ec:	40010400 	.word	0x40010400

080022f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
 80022fc:	4613      	mov	r3, r2
 80022fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002300:	787b      	ldrb	r3, [r7, #1]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002306:	887a      	ldrh	r2, [r7, #2]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800230c:	e002      	b.n	8002314 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	0000      	movs	r0, r0

08002320 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800232c:	2310      	movs	r3, #16
 800232e:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002330:	2300      	movs	r3, #0
 8002332:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002334:	2300      	movs	r3, #0
 8002336:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	4313      	orrs	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800235e:	f023 030c 	bic.w	r3, r3, #12
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	68f9      	ldr	r1, [r7, #12]
 8002368:	430b      	orrs	r3, r1
 800236a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699a      	ldr	r2, [r3, #24]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	4313      	orrs	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	430a      	orrs	r2, r1
 80023a0:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4aa1      	ldr	r2, [pc, #644]	@ (800262c <UART_SetConfig+0x30c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d120      	bne.n	80023ee <UART_SetConfig+0xce>
 80023ac:	4ba0      	ldr	r3, [pc, #640]	@ (8002630 <UART_SetConfig+0x310>)
 80023ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d817      	bhi.n	80023e8 <UART_SetConfig+0xc8>
 80023b8:	a201      	add	r2, pc, #4	@ (adr r2, 80023c0 <UART_SetConfig+0xa0>)
 80023ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023be:	bf00      	nop
 80023c0:	080023d1 	.word	0x080023d1
 80023c4:	080023dd 	.word	0x080023dd
 80023c8:	080023e3 	.word	0x080023e3
 80023cc:	080023d7 	.word	0x080023d7
 80023d0:	2301      	movs	r3, #1
 80023d2:	75fb      	strb	r3, [r7, #23]
 80023d4:	e0b5      	b.n	8002542 <UART_SetConfig+0x222>
 80023d6:	2302      	movs	r3, #2
 80023d8:	75fb      	strb	r3, [r7, #23]
 80023da:	e0b2      	b.n	8002542 <UART_SetConfig+0x222>
 80023dc:	2304      	movs	r3, #4
 80023de:	75fb      	strb	r3, [r7, #23]
 80023e0:	e0af      	b.n	8002542 <UART_SetConfig+0x222>
 80023e2:	2308      	movs	r3, #8
 80023e4:	75fb      	strb	r3, [r7, #23]
 80023e6:	e0ac      	b.n	8002542 <UART_SetConfig+0x222>
 80023e8:	2310      	movs	r3, #16
 80023ea:	75fb      	strb	r3, [r7, #23]
 80023ec:	e0a9      	b.n	8002542 <UART_SetConfig+0x222>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a90      	ldr	r2, [pc, #576]	@ (8002634 <UART_SetConfig+0x314>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d124      	bne.n	8002442 <UART_SetConfig+0x122>
 80023f8:	4b8d      	ldr	r3, [pc, #564]	@ (8002630 <UART_SetConfig+0x310>)
 80023fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002400:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002404:	d011      	beq.n	800242a <UART_SetConfig+0x10a>
 8002406:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800240a:	d817      	bhi.n	800243c <UART_SetConfig+0x11c>
 800240c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002410:	d011      	beq.n	8002436 <UART_SetConfig+0x116>
 8002412:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002416:	d811      	bhi.n	800243c <UART_SetConfig+0x11c>
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <UART_SetConfig+0x104>
 800241c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002420:	d006      	beq.n	8002430 <UART_SetConfig+0x110>
 8002422:	e00b      	b.n	800243c <UART_SetConfig+0x11c>
 8002424:	2300      	movs	r3, #0
 8002426:	75fb      	strb	r3, [r7, #23]
 8002428:	e08b      	b.n	8002542 <UART_SetConfig+0x222>
 800242a:	2302      	movs	r3, #2
 800242c:	75fb      	strb	r3, [r7, #23]
 800242e:	e088      	b.n	8002542 <UART_SetConfig+0x222>
 8002430:	2304      	movs	r3, #4
 8002432:	75fb      	strb	r3, [r7, #23]
 8002434:	e085      	b.n	8002542 <UART_SetConfig+0x222>
 8002436:	2308      	movs	r3, #8
 8002438:	75fb      	strb	r3, [r7, #23]
 800243a:	e082      	b.n	8002542 <UART_SetConfig+0x222>
 800243c:	2310      	movs	r3, #16
 800243e:	75fb      	strb	r3, [r7, #23]
 8002440:	e07f      	b.n	8002542 <UART_SetConfig+0x222>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a7c      	ldr	r2, [pc, #496]	@ (8002638 <UART_SetConfig+0x318>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d124      	bne.n	8002496 <UART_SetConfig+0x176>
 800244c:	4b78      	ldr	r3, [pc, #480]	@ (8002630 <UART_SetConfig+0x310>)
 800244e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002450:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002454:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002458:	d011      	beq.n	800247e <UART_SetConfig+0x15e>
 800245a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800245e:	d817      	bhi.n	8002490 <UART_SetConfig+0x170>
 8002460:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002464:	d011      	beq.n	800248a <UART_SetConfig+0x16a>
 8002466:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800246a:	d811      	bhi.n	8002490 <UART_SetConfig+0x170>
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <UART_SetConfig+0x158>
 8002470:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002474:	d006      	beq.n	8002484 <UART_SetConfig+0x164>
 8002476:	e00b      	b.n	8002490 <UART_SetConfig+0x170>
 8002478:	2300      	movs	r3, #0
 800247a:	75fb      	strb	r3, [r7, #23]
 800247c:	e061      	b.n	8002542 <UART_SetConfig+0x222>
 800247e:	2302      	movs	r3, #2
 8002480:	75fb      	strb	r3, [r7, #23]
 8002482:	e05e      	b.n	8002542 <UART_SetConfig+0x222>
 8002484:	2304      	movs	r3, #4
 8002486:	75fb      	strb	r3, [r7, #23]
 8002488:	e05b      	b.n	8002542 <UART_SetConfig+0x222>
 800248a:	2308      	movs	r3, #8
 800248c:	75fb      	strb	r3, [r7, #23]
 800248e:	e058      	b.n	8002542 <UART_SetConfig+0x222>
 8002490:	2310      	movs	r3, #16
 8002492:	75fb      	strb	r3, [r7, #23]
 8002494:	e055      	b.n	8002542 <UART_SetConfig+0x222>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a68      	ldr	r2, [pc, #416]	@ (800263c <UART_SetConfig+0x31c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d124      	bne.n	80024ea <UART_SetConfig+0x1ca>
 80024a0:	4b63      	ldr	r3, [pc, #396]	@ (8002630 <UART_SetConfig+0x310>)
 80024a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80024a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80024ac:	d011      	beq.n	80024d2 <UART_SetConfig+0x1b2>
 80024ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80024b2:	d817      	bhi.n	80024e4 <UART_SetConfig+0x1c4>
 80024b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024b8:	d011      	beq.n	80024de <UART_SetConfig+0x1be>
 80024ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024be:	d811      	bhi.n	80024e4 <UART_SetConfig+0x1c4>
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <UART_SetConfig+0x1ac>
 80024c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024c8:	d006      	beq.n	80024d8 <UART_SetConfig+0x1b8>
 80024ca:	e00b      	b.n	80024e4 <UART_SetConfig+0x1c4>
 80024cc:	2300      	movs	r3, #0
 80024ce:	75fb      	strb	r3, [r7, #23]
 80024d0:	e037      	b.n	8002542 <UART_SetConfig+0x222>
 80024d2:	2302      	movs	r3, #2
 80024d4:	75fb      	strb	r3, [r7, #23]
 80024d6:	e034      	b.n	8002542 <UART_SetConfig+0x222>
 80024d8:	2304      	movs	r3, #4
 80024da:	75fb      	strb	r3, [r7, #23]
 80024dc:	e031      	b.n	8002542 <UART_SetConfig+0x222>
 80024de:	2308      	movs	r3, #8
 80024e0:	75fb      	strb	r3, [r7, #23]
 80024e2:	e02e      	b.n	8002542 <UART_SetConfig+0x222>
 80024e4:	2310      	movs	r3, #16
 80024e6:	75fb      	strb	r3, [r7, #23]
 80024e8:	e02b      	b.n	8002542 <UART_SetConfig+0x222>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a54      	ldr	r2, [pc, #336]	@ (8002640 <UART_SetConfig+0x320>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d124      	bne.n	800253e <UART_SetConfig+0x21e>
 80024f4:	4b4e      	ldr	r3, [pc, #312]	@ (8002630 <UART_SetConfig+0x310>)
 80024f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80024fc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002500:	d011      	beq.n	8002526 <UART_SetConfig+0x206>
 8002502:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002506:	d817      	bhi.n	8002538 <UART_SetConfig+0x218>
 8002508:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800250c:	d011      	beq.n	8002532 <UART_SetConfig+0x212>
 800250e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002512:	d811      	bhi.n	8002538 <UART_SetConfig+0x218>
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <UART_SetConfig+0x200>
 8002518:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800251c:	d006      	beq.n	800252c <UART_SetConfig+0x20c>
 800251e:	e00b      	b.n	8002538 <UART_SetConfig+0x218>
 8002520:	2300      	movs	r3, #0
 8002522:	75fb      	strb	r3, [r7, #23]
 8002524:	e00d      	b.n	8002542 <UART_SetConfig+0x222>
 8002526:	2302      	movs	r3, #2
 8002528:	75fb      	strb	r3, [r7, #23]
 800252a:	e00a      	b.n	8002542 <UART_SetConfig+0x222>
 800252c:	2304      	movs	r3, #4
 800252e:	75fb      	strb	r3, [r7, #23]
 8002530:	e007      	b.n	8002542 <UART_SetConfig+0x222>
 8002532:	2308      	movs	r3, #8
 8002534:	75fb      	strb	r3, [r7, #23]
 8002536:	e004      	b.n	8002542 <UART_SetConfig+0x222>
 8002538:	2310      	movs	r3, #16
 800253a:	75fb      	strb	r3, [r7, #23]
 800253c:	e001      	b.n	8002542 <UART_SetConfig+0x222>
 800253e:	2310      	movs	r3, #16
 8002540:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800254a:	d17b      	bne.n	8002644 <UART_SetConfig+0x324>
  {
    switch (clocksource)
 800254c:	7dfb      	ldrb	r3, [r7, #23]
 800254e:	2b08      	cmp	r3, #8
 8002550:	d856      	bhi.n	8002600 <UART_SetConfig+0x2e0>
 8002552:	a201      	add	r2, pc, #4	@ (adr r2, 8002558 <UART_SetConfig+0x238>)
 8002554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002558:	0800257d 	.word	0x0800257d
 800255c:	08002599 	.word	0x08002599
 8002560:	080025b5 	.word	0x080025b5
 8002564:	08002601 	.word	0x08002601
 8002568:	080025cf 	.word	0x080025cf
 800256c:	08002601 	.word	0x08002601
 8002570:	08002601 	.word	0x08002601
 8002574:	08002601 	.word	0x08002601
 8002578:	080025eb 	.word	0x080025eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800257c:	f7fe fb92 	bl	8000ca4 <HAL_RCC_GetPCLK1Freq>
 8002580:	4603      	mov	r3, r0
 8002582:	005a      	lsls	r2, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	085b      	lsrs	r3, r3, #1
 800258a:	441a      	add	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	fbb2 f3f3 	udiv	r3, r2, r3
 8002594:	82bb      	strh	r3, [r7, #20]
        break;
 8002596:	e036      	b.n	8002606 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002598:	f7ff fd24 	bl	8001fe4 <HAL_RCC_GetPCLK2Freq>
 800259c:	4603      	mov	r3, r0
 800259e:	005a      	lsls	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	085b      	lsrs	r3, r3, #1
 80025a6:	441a      	add	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b0:	82bb      	strh	r3, [r7, #20]
        break;
 80025b2:	e028      	b.n	8002606 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	085b      	lsrs	r3, r3, #1
 80025ba:	f103 73f4 	add.w	r3, r3, #31981568	@ 0x1e80000
 80025be:	f503 4390 	add.w	r3, r3, #18432	@ 0x4800
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6852      	ldr	r2, [r2, #4]
 80025c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80025ca:	82bb      	strh	r3, [r7, #20]
        break;
 80025cc:	e01b      	b.n	8002606 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80025ce:	f7fe fb61 	bl	8000c94 <HAL_RCC_GetSysClockFreq>
 80025d2:	4603      	mov	r3, r0
 80025d4:	005a      	lsls	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	085b      	lsrs	r3, r3, #1
 80025dc:	441a      	add	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e6:	82bb      	strh	r3, [r7, #20]
        break;
 80025e8:	e00d      	b.n	8002606 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	085b      	lsrs	r3, r3, #1
 80025f0:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	82bb      	strh	r3, [r7, #20]
        break;
 80025fe:	e002      	b.n	8002606 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	74fb      	strb	r3, [r7, #19]
        break;
 8002604:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002606:	8abb      	ldrh	r3, [r7, #20]
 8002608:	f023 030f 	bic.w	r3, r3, #15
 800260c:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800260e:	8abb      	ldrh	r3, [r7, #20]
 8002610:	105b      	asrs	r3, r3, #1
 8002612:	b29b      	uxth	r3, r3
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	b29a      	uxth	r2, r3
 800261a:	897b      	ldrh	r3, [r7, #10]
 800261c:	4313      	orrs	r3, r2
 800261e:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	897a      	ldrh	r2, [r7, #10]
 8002626:	60da      	str	r2, [r3, #12]
 8002628:	e075      	b.n	8002716 <UART_SetConfig+0x3f6>
 800262a:	bf00      	nop
 800262c:	40013800 	.word	0x40013800
 8002630:	40021000 	.word	0x40021000
 8002634:	40004400 	.word	0x40004400
 8002638:	40004800 	.word	0x40004800
 800263c:	40004c00 	.word	0x40004c00
 8002640:	40005000 	.word	0x40005000
  }
  else
  {
    switch (clocksource)
 8002644:	7dfb      	ldrb	r3, [r7, #23]
 8002646:	2b08      	cmp	r3, #8
 8002648:	d862      	bhi.n	8002710 <UART_SetConfig+0x3f0>
 800264a:	a201      	add	r2, pc, #4	@ (adr r2, 8002650 <UART_SetConfig+0x330>)
 800264c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002650:	08002675 	.word	0x08002675
 8002654:	08002695 	.word	0x08002695
 8002658:	080026b5 	.word	0x080026b5
 800265c:	08002711 	.word	0x08002711
 8002660:	080026d5 	.word	0x080026d5
 8002664:	08002711 	.word	0x08002711
 8002668:	08002711 	.word	0x08002711
 800266c:	08002711 	.word	0x08002711
 8002670:	080026f5 	.word	0x080026f5
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002674:	f7fe fb16 	bl	8000ca4 <HAL_RCC_GetPCLK1Freq>
 8002678:	4602      	mov	r2, r0
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	085b      	lsrs	r3, r3, #1
 8002680:	441a      	add	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	fbb2 f3f3 	udiv	r3, r2, r3
 800268a:	b29a      	uxth	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	60da      	str	r2, [r3, #12]
        break;
 8002692:	e040      	b.n	8002716 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002694:	f7ff fca6 	bl	8001fe4 <HAL_RCC_GetPCLK2Freq>
 8002698:	4602      	mov	r2, r0
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	085b      	lsrs	r3, r3, #1
 80026a0:	441a      	add	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60da      	str	r2, [r3, #12]
        break;
 80026b2:	e030      	b.n	8002716 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	085b      	lsrs	r3, r3, #1
 80026ba:	f503 0374 	add.w	r3, r3, #15990784	@ 0xf40000
 80026be:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6852      	ldr	r2, [r2, #4]
 80026c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60da      	str	r2, [r3, #12]
        break;
 80026d2:	e020      	b.n	8002716 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80026d4:	f7fe fade 	bl	8000c94 <HAL_RCC_GetSysClockFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	441a      	add	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60da      	str	r2, [r3, #12]
        break;
 80026f2:	e010      	b.n	8002716 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	085b      	lsrs	r3, r3, #1
 80026fa:	f503 4200 	add.w	r2, r3, #32768	@ 0x8000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	fbb2 f3f3 	udiv	r3, r2, r3
 8002706:	b29a      	uxth	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60da      	str	r2, [r3, #12]
        break;
 800270e:	e002      	b.n	8002716 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	74fb      	strb	r3, [r7, #19]
        break;
 8002714:	bf00      	nop
    }
  }

  return ret;
 8002716:	7cfb      	ldrb	r3, [r7, #19]

}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af02      	add	r7, sp, #8
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002732:	f7fe faa1 	bl	8000c78 <HAL_GetTick>
 8002736:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b08      	cmp	r3, #8
 8002744:	d10e      	bne.n	8002764 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002746:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f873 	bl	8002840 <UART_WaitOnFlagUntilTimeout>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e022      	b.n	80027aa <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b04      	cmp	r3, #4
 8002770:	d10e      	bne.n	8002790 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002772:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f85d 	bl	8002840 <UART_WaitOnFlagUntilTimeout>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e00c      	b.n	80027aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e039      	b.n	8002838 <HAL_UART_Init+0x86>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d103      	bne.n	80027d8 <HAL_UART_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    //HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2224      	movs	r2, #36	@ 0x24
 80027dc:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0201 	bic.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff fd95 	bl	8002320 <UART_SetConfig>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e01b      	b.n	8002838 <HAL_UART_Init+0x86>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800280e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800281e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return UART_CheckIdleState(huart);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff ff75 	bl	8002720 <UART_CheckIdleState>
 8002836:	4603      	mov	r3, r0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	603b      	str	r3, [r7, #0]
 800284c:	4613      	mov	r3, r2
 800284e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002850:	e02c      	b.n	80028ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002858:	d028      	beq.n	80028ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d007      	beq.n	8002870 <UART_WaitOnFlagUntilTimeout+0x30>
 8002860:	f7fe fa0a 	bl	8000c78 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	429a      	cmp	r2, r3
 800286e:	d21d      	bcs.n	80028ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800287e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e00f      	b.n	80028cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	69da      	ldr	r2, [r3, #28]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	4013      	ands	r3, r2
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	bf0c      	ite	eq
 80028bc:	2301      	moveq	r3, #1
 80028be:	2300      	movne	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	461a      	mov	r2, r3
 80028c4:	79fb      	ldrb	r3, [r7, #7]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d0c3      	beq.n	8002852 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af02      	add	r7, sp, #8
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	4613      	mov	r3, r2
 80028e2:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	d176      	bne.n	80029e2 <HAL_UART_Transmit+0x10e>
  {
    if((pData == NULL ) || (Size == 0U))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <HAL_UART_Transmit+0x2c>
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e06f      	b.n	80029e4 <HAL_UART_Transmit+0x110>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_UART_Transmit+0x3e>
 800290e:	2302      	movs	r3, #2
 8002910:	e068      	b.n	80029e4 <HAL_UART_Transmit+0x110>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2221      	movs	r2, #33	@ 0x21
 8002924:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002928:	f7fe f9a6 	bl	8000c78 <HAL_GetTick>
 800292c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	88fa      	ldrh	r2, [r7, #6]
 8002932:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	88fa      	ldrh	r2, [r7, #6]
 800293a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while(huart->TxXferCount > 0U)
 800293e:	e033      	b.n	80029a8 <HAL_UART_Transmit+0xd4>
    {
      huart->TxXferCount--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2200      	movs	r2, #0
 800295a:	2180      	movs	r1, #128	@ 0x80
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f7ff ff6f 	bl	8002840 <UART_WaitOnFlagUntilTimeout>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e03b      	b.n	80029e4 <HAL_UART_Transmit+0x110>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002974:	d111      	bne.n	800299a <HAL_UART_Transmit+0xc6>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10d      	bne.n	800299a <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	881a      	ldrh	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800298e:	b292      	uxth	r2, r2
 8002990:	851a      	strh	r2, [r3, #40]	@ 0x28
        pData += 2U;
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	3302      	adds	r3, #2
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	e006      	b.n	80029a8 <HAL_UART_Transmit+0xd4>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	60ba      	str	r2, [r7, #8]
 80029a0:	781a      	ldrb	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    while(huart->TxXferCount > 0U)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1c5      	bne.n	8002940 <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2200      	movs	r2, #0
 80029bc:	2140      	movs	r1, #64	@ 0x40
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f7ff ff3e 	bl	8002840 <UART_WaitOnFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <HAL_UART_Transmit+0xfa>
    {
      return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e00a      	b.n	80029e4 <HAL_UART_Transmit+0x110>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2220      	movs	r2, #32
 80029d2:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_UART_Transmit+0x110>
  }
  else
  {
    return HAL_BUSY;
 80029e2:	2302      	movs	r3, #2
  }
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08a      	sub	sp, #40	@ 0x28
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	4613      	mov	r3, r2
 80029fa:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b20      	cmp	r3, #32
 8002a0a:	f040 809f 	bne.w	8002b4c <HAL_UART_Receive+0x160>
  {
    if((pData == NULL ) || (Size == 0U))
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <HAL_UART_Receive+0x2e>
 8002a14:	88fb      	ldrh	r3, [r7, #6]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e097      	b.n	8002b4e <HAL_UART_Receive+0x162>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_UART_Receive+0x40>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e090      	b.n	8002b4e <HAL_UART_Receive+0x162>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    huart->Instance->ICR = 0xFFFFFFFF;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f04f 32ff 	mov.w	r2, #4294967295
 8002a3c:	621a      	str	r2, [r3, #32]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2222      	movs	r2, #34	@ 0x22
 8002a48:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002a4c:	f7fe f914 	bl	8000c78 <HAL_GetTick>
 8002a50:	61f8      	str	r0, [r7, #28]

    huart->RxXferSize = Size;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	88fa      	ldrh	r2, [r7, #6]
 8002a56:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	88fa      	ldrh	r2, [r7, #6]
 8002a5e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a6a:	d10e      	bne.n	8002a8a <HAL_UART_Receive+0x9e>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d105      	bne.n	8002a80 <HAL_UART_Receive+0x94>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002a7a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002a7e:	e015      	b.n	8002aac <HAL_UART_Receive+0xc0>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	22ff      	movs	r2, #255	@ 0xff
 8002a84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002a88:	e010      	b.n	8002aac <HAL_UART_Receive+0xc0>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10c      	bne.n	8002aac <HAL_UART_Receive+0xc0>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d104      	bne.n	8002aa4 <HAL_UART_Receive+0xb8>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	22ff      	movs	r2, #255	@ 0xff
 8002a9e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002aa2:	e003      	b.n	8002aac <HAL_UART_Receive+0xc0>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	227f      	movs	r2, #127	@ 0x7f
 8002aa8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002ab2:	837b      	strh	r3, [r7, #26]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8002ab4:	e03a      	b.n	8002b2c <HAL_UART_Receive+0x140>
    {
      huart->RxXferCount--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2120      	movs	r1, #32
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f7ff feb4 	bl	8002840 <UART_WaitOnFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_UART_Receive+0xf6>
      {
        return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e035      	b.n	8002b4e <HAL_UART_Receive+0x162>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aea:	d112      	bne.n	8002b12 <HAL_UART_Receive+0x126>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10e      	bne.n	8002b12 <HAL_UART_Receive+0x126>
      {
        tmp = (uint16_t*) pData ;
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	8b7b      	ldrh	r3, [r7, #26]
 8002b02:	4013      	ands	r3, r2
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	e00c      	b.n	8002b2c <HAL_UART_Receive+0x140>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	b2d9      	uxtb	r1, r3
 8002b1c:	8b7b      	ldrh	r3, [r7, #26]
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	1c58      	adds	r0, r3, #1
 8002b24:	60b8      	str	r0, [r7, #8]
 8002b26:	400a      	ands	r2, r1
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1be      	bne.n	8002ab6 <HAL_UART_Receive+0xca>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

    return HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e000      	b.n	8002b4e <HAL_UART_Receive+0x162>
  }
  else
  {
    return HAL_BUSY;
 8002b4c:	2302      	movs	r3, #2
  }
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3720      	adds	r7, #32
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	0000      	movs	r0, r0

08002b58 <Reset_Handler>:
 8002b58:	2100      	movs	r1, #0
 8002b5a:	e003      	b.n	8002b64 <LoopCopyDataInit>

08002b5c <CopyDataInit>:
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b8c <LoopForever+0x2>)
 8002b5e:	585b      	ldr	r3, [r3, r1]
 8002b60:	5043      	str	r3, [r0, r1]
 8002b62:	3104      	adds	r1, #4

08002b64 <LoopCopyDataInit>:
 8002b64:	480a      	ldr	r0, [pc, #40]	@ (8002b90 <LoopForever+0x6>)
 8002b66:	4b0b      	ldr	r3, [pc, #44]	@ (8002b94 <LoopForever+0xa>)
 8002b68:	1842      	adds	r2, r0, r1
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d3f6      	bcc.n	8002b5c <CopyDataInit>
 8002b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b98 <LoopForever+0xe>)
 8002b70:	e002      	b.n	8002b78 <LoopFillZerobss>

08002b72 <FillZerobss>:
 8002b72:	2300      	movs	r3, #0
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	3204      	adds	r2, #4

08002b78 <LoopFillZerobss>:
 8002b78:	4b08      	ldr	r3, [pc, #32]	@ (8002b9c <LoopForever+0x12>)
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d3f9      	bcc.n	8002b72 <FillZerobss>
 8002b7e:	f3af 8000 	nop.w
 8002b82:	f7fd fb01 	bl	8000188 <__libc_init_array>
 8002b86:	f7fd fc41 	bl	800040c <main>

08002b8a <LoopForever>:
 8002b8a:	e7fe      	b.n	8002b8a <LoopForever>
 8002b8c:	08002bd4 	.word	0x08002bd4
 8002b90:	20000000 	.word	0x20000000
 8002b94:	20000000 	.word	0x20000000
 8002b98:	20000000 	.word	0x20000000
 8002b9c:	20000158 	.word	0x20000158

08002ba0 <BusFault_Handler>:
 8002ba0:	e7fe      	b.n	8002ba0 <BusFault_Handler>
 8002ba2:	0000      	movs	r0, r0

08002ba4 <_init>:
 8002ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba6:	bf00      	nop
 8002ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002baa:	bc08      	pop	{r3}
 8002bac:	469e      	mov	lr, r3
 8002bae:	4770      	bx	lr

08002bb0 <_fini>:
 8002bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb2:	bf00      	nop
 8002bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bb6:	bc08      	pop	{r3}
 8002bb8:	469e      	mov	lr, r3
 8002bba:	4770      	bx	lr
